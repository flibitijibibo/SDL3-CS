// NOTE: This file is auto-generated.
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace SDL3
{

	public static unsafe class SDL
	{
		private static byte* EncodeAsUTF8(string str)
		{
			if (str == null)
			{
				return (byte*) 0;
			}

			var size = (str.Length * 4) + 1;
			var buffer = (byte*) SDL_malloc((UIntPtr) size);
			fixed (char* strPtr = str)
			{
				Encoding.UTF8.GetBytes(strPtr, str.Length + 1, buffer, size);
			}

			return buffer;
		}

		private static string DecodeFromUTF8(IntPtr ptr, bool shouldFree = false)
		{
			if (ptr == IntPtr.Zero)
			{
				return null;
			}

			var end = (byte*) ptr;
			while (*end != 0)
			{
				end++;
			}

			var result = new string(
				(sbyte*) ptr,
				0,
				(int) (end - (byte*) ptr),
				System.Text.Encoding.UTF8
			);

			if (shouldFree)
			{
				SDL_free(ptr);
			}

			return result;
		}

		// Taken from https://github.com/ppy/SDL3-CS
		// C# bools are not blittable, so we need this workaround
		public struct SDLBool
		{
			private readonly byte value;

			internal const byte FALSE_VALUE = 0;
			internal const byte TRUE_VALUE = 1;

			internal SDLBool(byte value)
			{
				this.value = value;
			}

			public static implicit operator bool(SDLBool b)
			{
				return b.value != FALSE_VALUE;
			}

			public static implicit operator SDLBool(bool b)
			{
				return new SDLBool(b ? TRUE_VALUE : FALSE_VALUE);
			}

			public bool Equals(SDLBool other)
			{
				return other.value == value;
			}

			public override bool Equals(object rhs)
			{
				if (rhs is bool)
				{
					return Equals((SDLBool) (bool) rhs);
				}
				else if (rhs is SDLBool)
				{
					return Equals((SDLBool) rhs);
				}
				else
				{
					return false;
				}
			}

			public override int GetHashCode()
			{
				return value.GetHashCode();
			}
		}

		private const string nativeLibName = "SDL3";

		// /usr/local/include/SDL3/SDL_stdinc.h

		/// <summary>
		///   <para>Allocate uninitialized memory.</para>
		/// </summary>
		/// <param name="size">
		///   <para> the size to allocate. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns a pointer to the allocated memory, or NULL if allocationfailed.</para>
		/// </returns>
		/// <remarks>
		///   <para>The allocated memory returned by this function must be freed with<see cref="SDL_free" />().</para>
		///   <para>If <c>size</c> is 0, it will be set to 1.</para>
		///   <para>If you want to allocate memory aligned to a specific alignment, considerusing <see cref="SDL_aligned_alloc" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_free" />
		/// <seealso cref="SDL_calloc" />
		/// <seealso cref="SDL_realloc" />
		/// <seealso cref="SDL_aligned_alloc" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_malloc<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_stdinc.h">&lt;SDL3/SDL_stdinc.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_malloc(size_t size);
		/// </code><para>                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStdinc">CategoryStdinc</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_malloc(UIntPtr size);

		/// <summary>
		///   <para>Free allocated memory.</para>
		/// </summary>
		/// <param name="mem">
		///   <para> a pointer to allocated memory, or NULL. </para>
		/// </param>
		/// <remarks>
		///   <para>The pointer is no longer valid after this call and cannot be dereferencedanymore.</para>
		///   <para>If <c>mem</c> is NULL, this function does nothing.</para>
		/// </remarks>
		/// <seealso cref="SDL_malloc" />
		/// <seealso cref="SDL_calloc" />
		/// <seealso cref="SDL_realloc" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_free<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_stdinc.h">&lt;SDL3/SDL_stdinc.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_free(void *mem);
		/// </code><para>                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStdinc">CategoryStdinc</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_free(IntPtr mem);

		// /usr/local/include/SDL3/SDL_assert.h

		/// <summary>
		///   <para>Possible outcomes from a triggered assertion.</para>
		/// </summary>
		/// <remarks>
		///   <para>When an enabled assertion triggers, it may call the assertion handler(possibly one provided by the app via<see cref="SDL_SetAssertionHandler" />), which will return oneof these values, possibly after asking the user.</para>
		///   <para>Then SDL will respond based on this outcome (loop around to retry thecondition, try to break in a debugger, kill the program, or ignore theproblem).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AssertState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_AssertState
		/// {
		///     SDL_ASSERTION_RETRY,  /**&lt; Retry the assert immediately. */
		///     SDL_ASSERTION_BREAK,  /**&lt; Make the debugger trigger a breakpoint. */
		///     SDL_ASSERTION_ABORT,  /**&lt; Terminate the program. */
		///     SDL_ASSERTION_IGNORE,  /**&lt; Ignore the assert. */
		///     SDL_ASSERTION_ALWAYS_IGNORE  /**&lt; Ignore the assert from now on. */
		/// } SDL_AssertState;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		public enum SDL_AssertState
		{
			/// <summary><para>Please refer to <see cref="SDL_AssertState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ASSERTION_RETRY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ASSERTION_RETRY = 0,
			/// <summary><para>Please refer to <see cref="SDL_AssertState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ASSERTION_BREAK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ASSERTION_BREAK = 1,
			/// <summary><para>Please refer to <see cref="SDL_AssertState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ASSERTION_ABORT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ASSERTION_ABORT = 2,
			/// <summary><para>Please refer to <see cref="SDL_AssertState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ASSERTION_IGNORE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ASSERTION_IGNORE = 3,
			/// <summary><para>Please refer to <see cref="SDL_AssertState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ASSERTION_ALWAYS_IGNORE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ASSERTION_ALWAYS_IGNORE = 4,
		}

		/// <summary>
		///   <para>Information about an assertion failure.</para>
		/// </summary>
		/// <remarks>
		///   <para>This structure is filled in with information about a triggered assertion,used by the assertion handler, then added to the assertion report. This isreturned as a linked list from<see cref="SDL_GetAssertionReport" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AssertData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_AssertData
		/// {
		///     bool always_ignore;  /**&lt; true if app should always continue when assertion is triggered. */
		///     unsigned int trigger_count; /**&lt; Number of times this assertion has been triggered. */
		///     const char *condition;  /**&lt; A string of this assert's test code. */
		///     const char *filename;  /**&lt; The source file where this assert lives. */
		///     int linenum;  /**&lt; The line in `filename` where this assert lives. */
		///     const char *function;  /**&lt; The name of the function where this assert lives. */
		///     const struct SDL_AssertData *next;  /**&lt; next item in the linked list. */
		/// } SDL_AssertData;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_AssertData
		{
			public SDLBool always_ignore;
			public uint trigger_count;
			public byte* condition;
			public byte* filename;
			public int linenum;
			public byte* function;
			public SDL_AssertData* next;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_ReportAssertion", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_AssertState INTERNAL_SDL_ReportAssertion(ref SDL_AssertData data, byte* func, byte* file, int line);
		/// <summary>
		///   <para>Never call this directly.</para>
		/// </summary>
		/// <param name="data">
		///   <para> assert data structure. </para>
		/// </param>
		/// <param name="func">
		///   <para> function name.         </para>
		/// </param>
		/// <param name="file">
		///   <para> file name.             </para>
		/// </param>
		/// <param name="line">
		///   <para> line number.           </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AssertState" />) Returns assert state.</para>
		/// </returns>
		/// <remarks>
		///   <para>Use the <see cref="SDL_assert" />* macros instead.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReportAssertion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AssertState SDL_ReportAssertion(SDL_AssertData *data,
		///                                 const char *func,
		///                                 const char *file, int line);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		public static SDL_AssertState SDL_ReportAssertion(ref SDL_AssertData data, string func, string file, int line)
		{
			var funcUTF8 = EncodeAsUTF8(func);
			var fileUTF8 = EncodeAsUTF8(file);
			var result = INTERNAL_SDL_ReportAssertion(ref data, funcUTF8, fileUTF8, line);

			SDL_free((IntPtr) funcUTF8);
			SDL_free((IntPtr) fileUTF8);
			return result;
		}

		/// <summary>
		///   <para>A callback that fires when an SDL assertion fails.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns an <see cref="SDL_AssertState" /> value indicating how tohandle the failure.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AssertionHandler<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef SDL_AssertState (SDLCALL *SDL_AssertionHandler)( const SDL_AssertData *data, void *userdata);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate SDL_AssertState SDL_AssertionHandler(SDL_AssertData* data, IntPtr userdata);

		/// <summary>
		///   <para>Set an application-defined assertion handler.</para>
		/// </summary>
		/// <param name="handler">
		///   <para> the <see cref="SDL_AssertionHandler" /> function to call when an assertion fails or NULL for the default handler. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>handler</c>.                                                                                     </para>
		/// </param>
		/// <remarks>
		///   <para>This function allows an application to show its own assertion UI and/orforce the response to an assertion failure. If the application doesn'tprovide this, SDL will try to do the right thing, popping up asystem-specific GUI dialog, and probably minimizing any fullscreen windows.</para>
		///   <para>This callback may fire from any thread, but it runs wrapped in a mutex, soit will only fire from one thread at a time.</para>
		///   <para>This callback is NOT reset to SDL's internal handler upon<see cref="SDL_Quit" />()!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAssertionHandler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAssertionHandler<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetAssertionHandler(
		///                 SDL_AssertionHandler handler,
		///                 void *userdata);
		/// </code><para>                                                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetAssertionHandler(SDL_AssertionHandler handler, IntPtr userdata);

		/// <summary>
		///   <para>Get the default assertion handler.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_AssertionHandler" />) Returns the default<see cref="SDL_AssertionHandler" /> that is called when an asserttriggers.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns the function pointer that is called by default when anassertion is triggered. This is an internal function provided by SDL, thatis used for assertions when<see cref="SDL_SetAssertionHandler" />() hasn't been used toprovide a different function.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAssertionHandler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDefaultAssertionHandler<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AssertionHandler SDL_GetDefaultAssertionHandler(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetDefaultAssertionHandler();

		/// <summary>
		///   <para>Get the current assertion handler.</para>
		/// </summary>
		/// <param name="puserdata">
		///   <para> pointer which is filled with the "userdata" pointer that was passed to <see cref="SDL_SetAssertionHandler" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AssertionHandler" />) Returns the<see cref="SDL_AssertionHandler" /> that is called when an asserttriggers.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns the function pointer that is called when an assertion istriggered. This is either the value last passed to<see cref="SDL_SetAssertionHandler" />(), or if noapplication-specified function is set, is equivalent to calling<see cref="SDL_GetDefaultAssertionHandler" />().</para>
		///   <para>The parameter <c>puserdata</c> is a pointer to a void*, which will store the"userdata" pointer that was passed to<see cref="SDL_SetAssertionHandler" />(). This value willalways be NULL for the default handler. If you don't care about this data,it is safe to pass a NULL pointer to this function to ignore it.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAssertionHandler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAssertionHandler<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata);
		/// </code><para>                                                                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAssertionHandler(out IntPtr puserdata);

		/// <summary>
		///   <para>Get a list of all assertion failures.</para>
		/// </summary>
		/// <returns>
		///   <para>(const <see cref="SDL_AssertData" /> *) Returns a list of all failedassertions or NULL if the list is empty. This memory should not be modifiedor freed by the application.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function gets all assertions triggered since the last call to<see cref="SDL_ResetAssertionReport" />(), or the start of theprogram.</para>
		///   <para>The proper way to examine this data looks something like this:</para>
		///   <code>const SDL_AssertData *item = SDL_GetAssertionReport();
		/// while (item) {
		///    printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n",
		///           item-&gt;condition, item-&gt;function, item-&gt;filename,
		///           item-&gt;linenum, item-&gt;trigger_count,
		///           item-&gt;always_ignore ? "yes" : "no");
		///    item = item-&gt;next;
		/// }
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_ResetAssertionReport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAssertionReport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>const SDL_AssertData * SDL_GetAssertionReport(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><para>The proper way to examine this data looks something like this:</para><code>const SDL_AssertData *item = SDL_GetAssertionReport();
		/// while (item) {
		///      printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\n",
		///           item-&gt;condition, item-&gt;function, item-&gt;filename,
		///           item-&gt;linenum, item-&gt;trigger_count,
		///           item-&gt;always_ignore ? "yes" : "no");
		///      item = item-&gt;next;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAssertionReport();

		/// <summary>
		///   <para>Clear the list of all assertion failures.</para>
		/// </summary>
		/// <remarks>
		///   <para>This function will clear the list of all assertions triggered up to thatpoint. Immediately following this call,<see cref="SDL_GetAssertionReport" /> will return no items. Inaddition, any previously-triggered assertions will be reset to atrigger_count of zero, and their always_ignore state will be false.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAssertionReport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResetAssertionReport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_assert.h">&lt;SDL3/SDL_assert.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ResetAssertionReport(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAssert">CategoryAssert</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ResetAssertionReport();

		// /usr/local/include/SDL3/SDL_atomic.h

		/// <summary>
		///   <para>Try to lock a spin lock by setting it to a non-zero value.</para>
		/// </summary>
		/// <param name="lock">
		///   <para> a pointer to a lock variable. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the lock succeeded, false if the lock is alreadyheld.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that spinlocks are dangerous if you don't know what you'redoing. Please be careful using any sort of spinlock!</para>
		/// </remarks>
		/// <seealso cref="SDL_LockSpinlock" />
		/// <seealso cref="SDL_UnlockSpinlock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TryLockSpinlock<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TryLockSpinlock(SDL_SpinLock *lock);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TryLockSpinlock(IntPtr @lock);

		/// <summary>
		///   <para>Lock a spin lock by setting it to a non-zero value.</para>
		/// </summary>
		/// <param name="lock">
		///   <para> a pointer to a lock variable. </para>
		/// </param>
		/// <remarks>
		///   <para>Please note that spinlocks are dangerous if you don't know what you'redoing. Please be careful using any sort of spinlock!</para>
		/// </remarks>
		/// <seealso cref="SDL_TryLockSpinlock" />
		/// <seealso cref="SDL_UnlockSpinlock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockSpinlock<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LockSpinlock(SDL_SpinLock *lock);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_LockSpinlock(IntPtr @lock);

		/// <summary>
		///   <para>Unlock a spin lock by setting it to 0.</para>
		/// </summary>
		/// <param name="lock">
		///   <para> a pointer to a lock variable. </para>
		/// </param>
		/// <remarks>
		///   <para>Always returns immediately.</para>
		///   <para>Please note that spinlocks are dangerous if you don't know what you'redoing. Please be careful using any sort of spinlock!</para>
		/// </remarks>
		/// <seealso cref="SDL_LockSpinlock" />
		/// <seealso cref="SDL_TryLockSpinlock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockSpinlock<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockSpinlock(SDL_SpinLock *lock);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockSpinlock(IntPtr @lock);

		/// <summary>
		///   <para>Insert a memory release barrier.</para>
		/// </summary>
		/// <remarks>
		///   <para>Memory barriers are designed to prevent reads and writes from beingreordered by the compiler and being seen out of order on multi-core CPUs.</para>
		///   <para>A typical pattern would be for thread A to write some data and a flag, andfor thread B to read the flag and get the data. In this case you wouldinsert a release barrier between writing the data and the flag,guaranteeing that the data write completes no later than the flag iswritten, and you would insert an acquire barrier between reading the flagand reading the data, to ensure that all the reads associated with the flaghave completed.</para>
		///   <para>In this pattern you should always see a release barrier paired with anacquire barrier and you should gate the data reads/writes with a singleflag variable.</para>
		///   <para>For more information on these semantics, take a look at the blog post:http://preshing.com/20120913/acquire-and-release-semantics</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MemoryBarrierReleaseFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_MemoryBarrierReleaseFunction(void);
		/// </code><br /><b>## Thread Safety ##</b><para>Obviously this macro is safe to use from any thread at any time, but if youfind yourself needing this, you are probably dealing with some verysensitive code; be careful!</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_MemoryBarrierReleaseFunction();

		/// <summary>
		///   <para>Insert a memory acquire barrier.</para>
		/// </summary>
		/// <remarks>
		///   <para>Please refer to<see cref="SDL_MemoryBarrierReleaseFunction" /> forthe details!</para>
		/// </remarks>
		/// <seealso cref="SDL_MemoryBarrierReleaseFunction" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MemoryBarrierAcquireFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_MemoryBarrierAcquireFunction(void);
		/// </code><br /><b>## Thread Safety ##</b><para>Obviously this function is safe to use from any thread at any time, but ifyou find yourself needing this, you are probably dealing with some verysensitive code; be careful!</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_MemoryBarrierAcquireFunction();

		/// <summary>
		///   <para>A type representing an atomic integer value.</para>
		/// </summary>
		/// <remarks>
		///   <para>This can be used to manage a value that is synchronized across multipleCPUs without a race condition; when an app sets a value with<see cref="SDL_SetAtomicInt" /> all other threads, regardless of theCPU it is running on, will see that value when retrieved with<see cref="SDL_GetAtomicInt" />, regardless of CPU caches, etc.</para>
		///   <para>This is also useful for atomic compare-and-swap operations: a thread canchange the value as long as its current value matches expectations. Whendone in a loop, one can guarantee data consistency across threads without alock (but the usual warnings apply: if you don't know what you're doing, oryou don't do it carefully, you can confidently cause any number ofdisasters with this, so in most cases, you should use a mutex instead ofthis!).</para>
		///   <para>This is a struct so people don't accidentally use numeric operations on itdirectly. You have to use SDL atomic functions.</para>
		/// </remarks>
		/// <seealso cref="SDL_CompareAndSwapAtomicInt" />
		/// <seealso cref="SDL_GetAtomicInt" />
		/// <seealso cref="SDL_SetAtomicInt" />
		/// <seealso cref="SDL_AddAtomicInt" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AtomicInt<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_AtomicInt { int value; } SDL_AtomicInt;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_AtomicInt
		{
			public int value;
		}

		/// <summary>
		///   <para>Set an atomic variable to a new value if it is currently an old value.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicInt" /> variable to be modified. </para>
		/// </param>
		/// <param name="oldval">
		///   <para> the old value.                                                          </para>
		/// </param>
		/// <param name="newval">
		///   <para> the new value.                                                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the atomic variable was set, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAtomicInt" />
		/// <seealso cref="SDL_SetAtomicInt" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CompareAndSwapAtomicInt<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CompareAndSwapAtomicInt(SDL_AtomicInt *a, int oldval, int newval);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CompareAndSwapAtomicInt(ref SDL_AtomicInt a, int oldval, int newval);

		/// <summary>
		///   <para>Set an atomic variable to a value.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicInt" /> variable to be modified. </para>
		/// </param>
		/// <param name="v">
		///   <para> the desired value.                                                      </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the previous value of the atomic variable.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function also acts as a full memory barrier.</para>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAtomicInt" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAtomicInt<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_SetAtomicInt(SDL_AtomicInt *a, int v);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_SetAtomicInt(ref SDL_AtomicInt a, int v);

		/// <summary>
		///   <para>Get the value of an atomic variable.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicInt" /> variable. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the current value of an atomic variable.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAtomicInt" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAtomicInt<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetAtomicInt(SDL_AtomicInt *a);
		/// </code><para>                                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetAtomicInt(ref SDL_AtomicInt a);

		/// <summary>
		///   <para>Add to an atomic variable.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicInt" /> variable to be modified. </para>
		/// </param>
		/// <param name="v">
		///   <para> the desired value to add.                                               </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the previous value of the atomic variable.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function also acts as a full memory barrier.</para>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_AtomicDecRef" />
		/// <seealso cref="SDL_AtomicIncRef" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddAtomicInt<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_AddAtomicInt(SDL_AtomicInt *a, int v);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_AddAtomicInt(ref SDL_AtomicInt a, int v);

		/// <summary>
		///   <para>A type representing an atomic unsigned 32-bit value.</para>
		/// </summary>
		/// <remarks>
		///   <para>This can be used to manage a value that is synchronized across multipleCPUs without a race condition; when an app sets a value with<see cref="SDL_SetAtomicU32" /> all other threads, regardless of theCPU it is running on, will see that value when retrieved with<see cref="SDL_GetAtomicU32" />, regardless of CPU caches, etc.</para>
		///   <para>This is also useful for atomic compare-and-swap operations: a thread canchange the value as long as its current value matches expectations. Whendone in a loop, one can guarantee data consistency across threads without alock (but the usual warnings apply: if you don't know what you're doing, oryou don't do it carefully, you can confidently cause any number ofdisasters with this, so in most cases, you should use a mutex instead ofthis!).</para>
		///   <para>This is a struct so people don't accidentally use numeric operations on itdirectly. You have to use SDL atomic functions.</para>
		/// </remarks>
		/// <seealso cref="SDL_CompareAndSwapAtomicU32" />
		/// <seealso cref="SDL_GetAtomicU32" />
		/// <seealso cref="SDL_SetAtomicU32" />
		/// <seealso cref="SDL_AddAtomicU32" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AtomicU32<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_AtomicU32 { Uint32 value; } SDL_AtomicU32;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_AtomicU32
		{
			public uint value;
		}

		/// <summary>
		///   <para>Set an atomic variable to a new value if it is currently an old value.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicU32" /> variable to be modified. </para>
		/// </param>
		/// <param name="oldval">
		///   <para> the old value.                                                          </para>
		/// </param>
		/// <param name="newval">
		///   <para> the new value.                                                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the atomic variable was set, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAtomicU32" />
		/// <seealso cref="SDL_SetAtomicU32" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CompareAndSwapAtomicU32<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CompareAndSwapAtomicU32(SDL_AtomicU32 *a, Uint32 oldval, Uint32 newval);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CompareAndSwapAtomicU32(ref SDL_AtomicU32 a, uint oldval, uint newval);

		/// <summary>
		///   <para>Set an atomic variable to a value.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicU32" /> variable to be modified. </para>
		/// </param>
		/// <param name="v">
		///   <para> the desired value.                                                      </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns the previous value of the atomic variable.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function also acts as a full memory barrier.</para>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAtomicU32" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAtomicU32<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_SetAtomicU32(SDL_AtomicU32 *a, Uint32 v);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_SetAtomicU32(ref SDL_AtomicU32 a, uint v);

		/// <summary>
		///   <para>Get the value of an atomic variable.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to an <see cref="SDL_AtomicU32" /> variable. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns the current value of an atomic variable.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAtomicU32" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAtomicU32<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_GetAtomicU32(SDL_AtomicU32 *a);
		/// </code><para>                                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetAtomicU32(ref SDL_AtomicU32 a);

		/// <summary>
		///   <para>Set a pointer to a new value if it is currently an old value.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to a pointer. </para>
		/// </param>
		/// <param name="oldval">
		///   <para> the old pointer value.  </para>
		/// </param>
		/// <param name="newval">
		///   <para> the new pointer value.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the pointer was set, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_CompareAndSwapAtomicInt" />
		/// <seealso cref="SDL_GetAtomicPointer" />
		/// <seealso cref="SDL_SetAtomicPointer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CompareAndSwapAtomicPointer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CompareAndSwapAtomicPointer(void **a, void *oldval, void *newval);
		/// </code><para>                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CompareAndSwapAtomicPointer(ref IntPtr a, IntPtr oldval, IntPtr newval);

		/// <summary>
		///   <para>Set a pointer to a value atomically.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to a pointer.    </para>
		/// </param>
		/// <param name="v">
		///   <para> the desired pointer value. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the previous value of the pointer.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_CompareAndSwapAtomicPointer" />
		/// <seealso cref="SDL_GetAtomicPointer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAtomicPointer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_SetAtomicPointer(void **a, void *v);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_SetAtomicPointer(ref IntPtr a, IntPtr v);

		/// <summary>
		///   <para>Get the value of a pointer atomically.</para>
		/// </summary>
		/// <param name="a">
		///   <para> a pointer to a pointer. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the current value of a pointer.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If you don't know what this function is for, you shouldn't useit!</para>
		/// </remarks>
		/// <seealso cref="SDL_CompareAndSwapAtomicPointer" />
		/// <seealso cref="SDL_SetAtomicPointer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAtomicPointer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_atomic.h">&lt;SDL3/SDL_atomic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetAtomicPointer(void **a);
		/// </code><para>                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAtomic">CategoryAtomic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAtomicPointer(ref IntPtr a);

		// /usr/local/include/SDL3/SDL_endian.h

		/// <summary>
		///   <para>Byte-swap a floating point number.</para>
		/// </summary>
		/// <param name="x">
		///   <para> the value to byte-swap. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns x, with its bytes in the opposite endian order.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will always byte-swap the value, whether it's currently in the nativebyteorder of the system or not. You should use<see cref="SDL_SwapFloatLE" /> or <see cref="SDL_SwapFloatBE" />instead, in most cases.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SwapFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_endian.h">&lt;SDL3/SDL_endian.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE float SDL_SwapFloat(float x);
		/// </code><para>                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEndian">CategoryEndian</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_SwapFloat(float x);

		// /usr/local/include/SDL3/SDL_error.h

		[DllImport(nativeLibName, EntryPoint = "SDL_SetError", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetError(byte* fmt);
		/// <summary>
		///   <para>Set the SDL error message for the current thread.</para>
		/// </summary>
		/// <param name="fmt">
		///   <para> a printf()-style message format string.                              </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the <c>fmt</c> string, if any. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns false.</para>
		/// </returns>
		/// <remarks>
		///   <para>Calling this function will replace any previous error message that was set.</para>
		///   <para>This function always returns false, since SDL frequently uses false tosignify a failing result, leading to this idiom:</para>
		///   <code>if (error_code) {
		///     return SDL_SetError("This operation has failed: %d", error_code);
		/// }
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_ClearError" />
		/// <seealso cref="SDL_GetError" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetError<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_error.h">&lt;SDL3/SDL_error.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetError(const char *fmt, ...);
		/// </code><para>                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryError">CategoryError</see></para></misc>
		public static SDLBool SDL_SetError(string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			var result = INTERNAL_SDL_SetError(fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
			return result;
		}

		/// <summary>
		///   <para>Set an error indicating that memory allocation failed.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns false.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function does not do any memory allocation.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OutOfMemory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_error.h">&lt;SDL3/SDL_error.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_OutOfMemory(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryError">CategoryError</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_OutOfMemory();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetError", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetError();
		/// <summary>
		///   <para>Retrieve a message about the last error that occurred on the current thread.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns a message with information about the specific errorthat occurred, or an empty string if there hasn't been an error message setsince the last call to <see cref="SDL_ClearError" />().</para>
		/// </returns>
		/// <remarks>
		///   <para>It is possible for multiple errors to occur before calling<see cref="SDL_GetError" />(). Only the last error is returned.</para>
		///   <para>The message is only applicable when an SDL function has signaled an error.You must check the return values of SDL function calls to determine when toappropriately call <see cref="SDL_GetError" />(). You should not use theresults of <see cref="SDL_GetError" />() to decide if an error hasoccurred! Sometimes SDL will set an error string even when reportingsuccess.</para>
		///   <para>SDL will not clear the error string for successful API calls. You mustcheck return values for failure cases before you can assume the errorstring applies.</para>
		///   <para>Error strings are set per-thread, so an error set in a different threadwill not interfere with the current thread's operation.</para>
		///   <para>The returned value is a thread-local string which will remain valid untilthe current thread's error string is changed. The caller should make a copyif the value is needed after the next SDL API call.</para>
		/// </remarks>
		/// <seealso cref="SDL_ClearError" />
		/// <seealso cref="SDL_SetError" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetError<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_error.h">&lt;SDL3/SDL_error.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetError(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryError">CategoryError</see></para></misc>
		public static string SDL_GetError()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetError());
		}

		/// <summary>
		///   <para>Clear any previous error message for this thread.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true.</para>
		/// </returns>
		/// <seealso cref="SDL_GetError" />
		/// <seealso cref="SDL_SetError" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClearError<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_error.h">&lt;SDL3/SDL_error.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClearError(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>const char *error = SDL_GetError();
		/// if (*error) {
		///   SDL_Log("SDL error: %s", error);
		///   SDL_ClearError();
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryError">CategoryError</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ClearError();

		// /usr/local/include/SDL3/SDL_properties.h

		/// <summary>
		///   <para>SDL property type</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PropertyType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PropertyType
		/// {
		///     SDL_PROPERTY_TYPE_INVALID,
		///     SDL_PROPERTY_TYPE_POINTER,
		///     SDL_PROPERTY_TYPE_STRING,
		///     SDL_PROPERTY_TYPE_NUMBER,
		///     SDL_PROPERTY_TYPE_FLOAT,
		///     SDL_PROPERTY_TYPE_BOOLEAN
		/// } SDL_PropertyType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public enum SDL_PropertyType
		{
			/// <summary><para>Please refer to <see cref="SDL_PropertyType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROPERTY_TYPE_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROPERTY_TYPE_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_PropertyType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROPERTY_TYPE_POINTER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROPERTY_TYPE_POINTER = 1,
			/// <summary><para>Please refer to <see cref="SDL_PropertyType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROPERTY_TYPE_STRING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROPERTY_TYPE_STRING = 2,
			/// <summary><para>Please refer to <see cref="SDL_PropertyType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROPERTY_TYPE_NUMBER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROPERTY_TYPE_NUMBER = 3,
			/// <summary><para>Please refer to <see cref="SDL_PropertyType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROPERTY_TYPE_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROPERTY_TYPE_FLOAT = 4,
			/// <summary><para>Please refer to <see cref="SDL_PropertyType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROPERTY_TYPE_BOOLEAN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROPERTY_TYPE_BOOLEAN = 5,
		}

		/// <summary>
		///   <para>Get the global SDL properties.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGlobalProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetGlobalProperties(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetGlobalProperties();

		/// <summary>
		///   <para>Create a group of properties.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns an ID for a new group ofproperties, or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>All properties are automatically destroyed when <see cref="SDL_Quit" />() iscalled.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroyProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_CreateProperties(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_CreateProperties();

		/// <summary>
		///   <para>Copy a group of properties.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the properties to copy.     </para>
		/// </param>
		/// <param name="dst">
		///   <para> the destination properties. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Copy all the properties from one group of properties to another, with theexception of properties requiring cleanup (set using<see cref="SDL_SetPointerPropertyWithCleanup" />()),which will not be copied. Any property that already exists on <c>dst</c> will beoverwritten.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CopyProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);
		/// </code><para>                             </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CopyProperties(uint src, uint dst);

		/// <summary>
		///   <para>Lock a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to lock. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Obtain a multi-threaded lock for these properties. Other threads will waitwhile trying to lock these properties until they are unlocked. Propertiesmust be unlocked before they are destroyed.</para>
		///   <para>The lock is automatically taken when setting individual properties, thisfunction is only needed when you want to set several properties atomicallyor want to guarantee that properties being queried aren't freed in anotherthread.</para>
		/// </remarks>
		/// <seealso cref="SDL_UnlockProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LockProperties(SDL_PropertiesID props);
		/// </code><para>                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_LockProperties(uint props);

		/// <summary>
		///   <para>Unlock a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to unlock. </para>
		/// </param>
		/// <seealso cref="SDL_LockProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockProperties(SDL_PropertiesID props);
		/// </code><para>                           </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockProperties(uint props);

		/// <summary>
		///   <para>A callback used to free resources when a property is deleted.</para>
		/// </summary>
		/// <remarks>
		///   <para>This should release any resources associated with <c>value</c> that are nolonger needed.</para>
		///   <para>This callback is set per-property. Different properties in the same groupcan have different cleanup callbacks.</para>
		///   <para>This callback will be called during<see cref="SDL_SetPointerPropertyWithCleanup" /> ifthe function fails for any reason.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetPointerPropertyWithCleanup" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CleanupPropertyCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_CleanupPropertyCallback)(void *userdata, void *value);
		/// </code><br /><b>## Thread Safety ##</b><para>This callback may fire without any locks held; if this is a concern, theapp should provide its own locking.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_CleanupPropertyCallback(IntPtr userdata, IntPtr value);

		[DllImport(nativeLibName, EntryPoint = "SDL_SetPointerPropertyWithCleanup", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetPointerPropertyWithCleanup(uint props, byte* name, IntPtr value, SDL_CleanupPropertyCallback cleanup, IntPtr userdata);
		/// <summary>
		///   <para>Set a pointer property in a group of properties with a cleanup function that is called when the property is deleted.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.                                                               </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to modify.                                                     </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value of the property, or NULL to delete the property.                          </para>
		/// </param>
		/// <param name="cleanup">
		///   <para> the function to call when this property is deleted, or NULL if no cleanup is necessary. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to the cleanup function.                                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The cleanup function is also called if setting the property fails for anyreason.</para>
		///   <para>For simply setting basic data types, like numbers, bools, or strings, use<see cref="SDL_SetNumberProperty" />,<see cref="SDL_SetBooleanProperty" />, or<see cref="SDL_SetStringProperty" /> instead, as those functionswill handle cleanup on your behalf. This function is only for more complex,custom data.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPointerProperty" />
		/// <seealso cref="SDL_SetPointerProperty" />
		/// <seealso cref="SDL_CleanupPropertyCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetPointerPropertyWithCleanup<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, const char *name, void *value, SDL_CleanupPropertyCallback cleanup, void *userdata);
		/// </code><para>                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_SetPointerPropertyWithCleanup(uint props, string name, IntPtr value, SDL_CleanupPropertyCallback cleanup, IntPtr userdata)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_SetPointerPropertyWithCleanup(props, nameUTF8, value, cleanup, userdata);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetPointerProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetPointerProperty(uint props, byte* name, IntPtr value);
		/// <summary>
		///   <para>Set a pointer property in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.                                      </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to modify.                            </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value of the property, or NULL to delete the property. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPointerProperty" />
		/// <seealso cref="SDL_HasProperty" />
		/// <seealso cref="SDL_SetBooleanProperty" />
		/// <seealso cref="SDL_SetFloatProperty" />
		/// <seealso cref="SDL_SetNumberProperty" />
		/// <seealso cref="SDL_SetPointerPropertyWithCleanup" />
		/// <seealso cref="SDL_SetStringProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetPointerProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetPointerProperty(SDL_PropertiesID props, const char *name, void *value);
		/// </code><para>                                                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_SetPointerProperty(uint props, string name, IntPtr value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_SetPointerProperty(props, nameUTF8, value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetStringProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetStringProperty(uint props, byte* name, byte* value);
		/// <summary>
		///   <para>Set a string property in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.                                      </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to modify.                            </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value of the property, or NULL to delete the property. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function makes a copy of the string; the caller does not have topreserve the data after this call completes.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetStringProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetStringProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetStringProperty(SDL_PropertiesID props, const char *name, const char *value);
		/// </code><para>                                                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_SetStringProperty(uint props, string name, string value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var valueUTF8 = EncodeAsUTF8(value);
			var result = INTERNAL_SDL_SetStringProperty(props, nameUTF8, valueUTF8);

			SDL_free((IntPtr) nameUTF8);
			SDL_free((IntPtr) valueUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetNumberProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetNumberProperty(uint props, byte* name, long value);
		/// <summary>
		///   <para>Set an integer property in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to modify. </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value of the property.      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetNumberProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetNumberProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetNumberProperty(SDL_PropertiesID props, const char *name, Sint64 value);
		/// </code><para>                                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_SetNumberProperty(uint props, string name, long value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_SetNumberProperty(props, nameUTF8, value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetFloatProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetFloatProperty(uint props, byte* name, float value);
		/// <summary>
		///   <para>Set a floating point property in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to modify. </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value of the property.      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetFloatProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetFloatProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetFloatProperty(SDL_PropertiesID props, const char *name, float value);
		/// </code><para>                                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_SetFloatProperty(uint props, string name, float value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_SetFloatProperty(props, nameUTF8, value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetBooleanProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetBooleanProperty(uint props, byte* name, SDLBool value);
		/// <summary>
		///   <para>Set a boolean property in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to modify. </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value of the property.      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetBooleanProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetBooleanProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetBooleanProperty(SDL_PropertiesID props, const char *name, bool value);
		/// </code><para>                                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_SetBooleanProperty(uint props, string name, SDLBool value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_SetBooleanProperty(props, nameUTF8, value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_HasProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_HasProperty(uint props, byte* name);
		/// <summary>
		///   <para>Return whether a property exists in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the property exists, or false if it doesn't.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPropertyType" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasProperty(SDL_PropertiesID props, const char *name);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_HasProperty(uint props, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_HasProperty(props, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPropertyType", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_PropertyType INTERNAL_SDL_GetPropertyType(uint props, byte* name);
		/// <summary>
		///   <para>Get the type of a property in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertyType" />) Returns the type of the property, or<see cref="SDL_PropertyType.SDL_PROPERTY_TYPE_INVALID" /> if it is not set.</para>
		/// </returns>
		/// <seealso cref="SDL_HasProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPropertyType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, const char *name);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDL_PropertyType SDL_GetPropertyType(uint props, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetPropertyType(props, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPointerProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetPointerProperty(uint props, byte* name, IntPtr default_value);
		/// <summary>
		///   <para>Get a pointer property from a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <param name="default_value">
		///   <para> the default value of the property. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the value of the property, or <c>default_value</c> if it is notset or not a pointer property.</para>
		/// </returns>
		/// <remarks>
		///   <para>By convention, the names of properties that SDL exposes on objects willstart with "SDL.", and properties that SDL uses internally will start with"SDL.internal.". These should be considered read-only and should not bemodified by applications.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetBooleanProperty" />
		/// <seealso cref="SDL_GetFloatProperty" />
		/// <seealso cref="SDL_GetNumberProperty" />
		/// <seealso cref="SDL_GetPropertyType" />
		/// <seealso cref="SDL_GetStringProperty" />
		/// <seealso cref="SDL_HasProperty" />
		/// <seealso cref="SDL_SetPointerProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPointerProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetPointerProperty(SDL_PropertiesID props, const char *name, void *default_value);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, although the datareturned is not protected and could potentially be freed if you call<see cref="SDL_SetPointerProperty" />() or<see cref="SDL_ClearProperty" />() on these properties from anotherthread. If you need to avoid this, use<see cref="SDL_LockProperties" />() and<see cref="SDL_UnlockProperties" />().</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static IntPtr SDL_GetPointerProperty(uint props, string name, IntPtr default_value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetPointerProperty(props, nameUTF8, default_value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetStringProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetStringProperty(uint props, byte* name, byte* default_value);
		/// <summary>
		///   <para>Get a string property from a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <param name="default_value">
		///   <para> the default value of the property. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the value of the property, or <c>default_value</c> if itis not set or not a string property.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPropertyType" />
		/// <seealso cref="SDL_HasProperty" />
		/// <seealso cref="SDL_SetStringProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetStringProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetStringProperty(SDL_PropertiesID props, const char *name, const char *default_value);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, although the datareturned is not protected and could potentially be freed if you call<see cref="SDL_SetStringProperty" />() or<see cref="SDL_ClearProperty" />() on these properties from anotherthread. If you need to avoid this, use<see cref="SDL_LockProperties" />() and<see cref="SDL_UnlockProperties" />().</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static string SDL_GetStringProperty(uint props, string name, string default_value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var default_valueUTF8 = EncodeAsUTF8(default_value);
			var result = DecodeFromUTF8(INTERNAL_SDL_GetStringProperty(props, nameUTF8, default_valueUTF8));

			SDL_free((IntPtr) nameUTF8);
			SDL_free((IntPtr) default_valueUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetNumberProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern long INTERNAL_SDL_GetNumberProperty(uint props, byte* name, long default_value);
		/// <summary>
		///   <para>Get a number property from a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <param name="default_value">
		///   <para> the default value of the property. </para>
		/// </param>
		/// <returns>
		///   <para>(Sint64) Returns the value of the property, or <c>default_value</c> if it is notset or not a number property.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can use <see cref="SDL_GetPropertyType" />() to query whetherthe property exists and is a number property.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPropertyType" />
		/// <seealso cref="SDL_HasProperty" />
		/// <seealso cref="SDL_SetNumberProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumberProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>Sint64 SDL_GetNumberProperty(SDL_PropertiesID props, const char *name, Sint64 default_value);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static long SDL_GetNumberProperty(uint props, string name, long default_value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetNumberProperty(props, nameUTF8, default_value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetFloatProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern float INTERNAL_SDL_GetFloatProperty(uint props, byte* name, float default_value);
		/// <summary>
		///   <para>Get a floating point property from a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <param name="default_value">
		///   <para> the default value of the property. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the value of the property, or <c>default_value</c> if it is notset or not a float property.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can use <see cref="SDL_GetPropertyType" />() to query whetherthe property exists and is a floating point property.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPropertyType" />
		/// <seealso cref="SDL_HasProperty" />
		/// <seealso cref="SDL_SetFloatProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetFloatProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetFloatProperty(SDL_PropertiesID props, const char *name, float default_value);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static float SDL_GetFloatProperty(uint props, string name, float default_value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetFloatProperty(props, nameUTF8, default_value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetBooleanProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GetBooleanProperty(uint props, byte* name, SDLBool default_value);
		/// <summary>
		///   <para>Get a boolean property from a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.           </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to query. </para>
		/// </param>
		/// <param name="default_value">
		///   <para> the default value of the property. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns the value of the property, or <c>default_value</c> if it is notset or not a boolean property.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can use <see cref="SDL_GetPropertyType" />() to query whetherthe property exists and is a boolean property.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPropertyType" />
		/// <seealso cref="SDL_HasProperty" />
		/// <seealso cref="SDL_SetBooleanProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetBooleanProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetBooleanProperty(SDL_PropertiesID props, const char *name, bool default_value);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_GetBooleanProperty(uint props, string name, SDLBool default_value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetBooleanProperty(props, nameUTF8, default_value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_ClearProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_ClearProperty(uint props, byte* name);
		/// <summary>
		///   <para>Clear a property from a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to modify.          </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the property to clear. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClearProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClearProperty(SDL_PropertiesID props, const char *name);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		public static SDLBool SDL_ClearProperty(uint props, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_ClearProperty(props, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>A callback used to enumerate all the properties in a group of properties.</para>
		/// </summary>
		/// <remarks>
		///   <para>This callback is called from<see cref="SDL_EnumerateProperties" />(), and is called onceper property in the set.</para>
		/// </remarks>
		/// <seealso cref="SDL_EnumerateProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnumeratePropertiesCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_EnumeratePropertiesCallback)(void *userdata, SDL_PropertiesID props, const char *name);
		/// </code><br /><b>## Thread Safety ##</b><para><see cref="SDL_EnumerateProperties" /> holds a lock on <c>props</c>during this callback.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_EnumeratePropertiesCallback(IntPtr userdata, uint props, byte* name);

		/// <summary>
		///   <para>Enumerate the properties contained in a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to query.                </para>
		/// </param>
		/// <param name="callback">
		///   <para> the function to call for each property. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>callback</c>. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is called for each property in the group ofproperties. The properties are locked during enumeration.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnumerateProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, void *userdata);
		/// </code><para>                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_EnumerateProperties(uint props, SDL_EnumeratePropertiesCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>Destroy a group of properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>All properties are deleted and their cleanup functions will be called, ifany.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_properties.h">&lt;SDL3/SDL_properties.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyProperties(SDL_PropertiesID props);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>This function should not be called while these properties are locked orother threads might be setting or getting values from these properties.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProperties">CategoryProperties</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyProperties(uint props);

		// /usr/local/include/SDL3/SDL_thread.h

		/// <summary>
		///   <para>The SDL thread priority.</para>
		/// </summary>
		/// <remarks>
		///   <para>SDL will make system changes as necessary in order to apply the threadpriority. Code which attempts to control thread state related to priorityshould be aware that calling<see cref="SDL_SetCurrentThreadPriority" /> may alter suchstate. <see cref="SDL_HINT_THREAD_PRIORITY_POLICY" />can be used to control aspects of this behavior.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ThreadPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ThreadPriority {
		///     SDL_THREAD_PRIORITY_LOW,
		///     SDL_THREAD_PRIORITY_NORMAL,
		///     SDL_THREAD_PRIORITY_HIGH,
		///     SDL_THREAD_PRIORITY_TIME_CRITICAL
		/// } SDL_ThreadPriority;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		public enum SDL_ThreadPriority
		{
			/// <summary><para>Please refer to <see cref="SDL_ThreadPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_THREAD_PRIORITY_LOW<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_THREAD_PRIORITY_LOW = 0,
			/// <summary><para>Please refer to <see cref="SDL_ThreadPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_THREAD_PRIORITY_NORMAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_THREAD_PRIORITY_NORMAL = 1,
			/// <summary><para>Please refer to <see cref="SDL_ThreadPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_THREAD_PRIORITY_HIGH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_THREAD_PRIORITY_HIGH = 2,
			/// <summary><para>Please refer to <see cref="SDL_ThreadPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_THREAD_PRIORITY_TIME_CRITICAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_THREAD_PRIORITY_TIME_CRITICAL = 3,
		}

		/// <summary>
		///   <para>The function passed to <see cref="SDL_CreateThread" />() as the new thread's entry point.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns a value that can be reported through<see cref="SDL_WaitThread" />().</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ThreadFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef int (SDLCALL * SDL_ThreadFunction) (void *data);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate int SDL_ThreadFunction(IntPtr data);

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateThreadRuntime", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_CreateThreadRuntime(SDL_ThreadFunction fn, byte* name, IntPtr data, IntPtr pfnBeginThread, IntPtr pfnEndThread);
		public static IntPtr SDL_CreateThreadRuntime(SDL_ThreadFunction fn, string name, IntPtr data, IntPtr pfnBeginThread, IntPtr pfnEndThread)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_CreateThreadRuntime(fn, nameUTF8, data, pfnBeginThread, pfnEndThread);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateThreadWithPropertiesRuntime(uint props, IntPtr pfnBeginThread, IntPtr pfnEndThread);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetThreadName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetThreadName(IntPtr thread);
		/// <summary>
		///   <para>Get the thread name as it was specified in <see cref="SDL_CreateThread" />().</para>
		/// </summary>
		/// <param name="thread">
		///   <para> the thread to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a pointer to a UTF-8 string that names the specifiedthread, or NULL if it doesn't have a name.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetThreadName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetThreadName(SDL_Thread *thread);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		public static string SDL_GetThreadName(IntPtr thread)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetThreadName(thread));
		}

		/// <summary>
		///   <para>Get the thread identifier for the current thread.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_ThreadID" />) Returns the ID of the current thread.</para>
		/// </returns>
		/// <remarks>
		///   <para>This thread identifier is as reported by the underlying operating system.If SDL is running on a platform that does not support threads the returnvalue will always be zero.</para>
		///   <para>This function also returns a valid thread ID when called from the mainthread.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetThreadID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentThreadID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_ThreadID SDL_GetCurrentThreadID(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetCurrentThreadID();

		/// <summary>
		///   <para>Get the thread identifier for the specified thread.</para>
		/// </summary>
		/// <param name="thread">
		///   <para> the thread to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_ThreadID" />) Returns the ID of the specified thread, orthe ID of the current thread if <c>thread</c> is NULL.</para>
		/// </returns>
		/// <remarks>
		///   <para>This thread identifier is as reported by the underlying operating system.If SDL is running on a platform that does not support threads the returnvalue will always be zero.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCurrentThreadID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetThreadID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_ThreadID SDL_GetThreadID(SDL_Thread *thread);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// #include &lt;stdlib.h&gt;
		/// 
		/// // Very simple thread - counts 0 to 9 delaying 50ms between increments
		/// int TestThread(void *ptr)
		/// {
		///     int cnt;
		/// 
		///     for (cnt = 0; cnt &lt; 10; ++cnt) {
		///         SDL_Log("Thread counter: %d", cnt);
		///         SDL_Delay(50);
		///     }
		/// 
		///     return cnt;
		/// }
		/// 
		/// int main(int argc, char *argv[])
		/// {
		///     SDL_Thread   *thread;
		///     SDL_ThreadID threadID;
		///     int          threadReturnValue;
		/// 
		///     SDL_Log("Simple SDL_CreateThread test:");
		/// 
		///     /* Simply create a thread */
		///     thread = SDL_CreateThread(TestThread, "TestThread", (void *)NULL);
		/// 
		///     if (NULL == thread) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "SDL_CreateThread failed: %s\n", SDL_GetError());
		///         exit(-1);
		///     }
		/// 
		///     /* Retrieve the ID for the newly launched thread */
		///     threadID = SDL_GetThreadID(thread);
		/// 
		///     /* Wait for the thread to complete and get the return code */
		///     SDL_WaitThread(thread, &amp;threadReturnValue);
		///     SDL_Log("Thread returned value: %d", threadReturnValue);
		/// 
		///     return 0;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetThreadID(IntPtr thread);

		/// <summary>
		///   <para>Set the priority for the current thread.</para>
		/// </summary>
		/// <param name="priority">
		///   <para> the <see cref="SDL_ThreadPriority" /> to set. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that some platforms will not let you alter the priority (or at least,promote the thread to a higher priority) at all, and some require you to bean administrator account. Be prepared for this to fail.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetCurrentThreadPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetCurrentThreadPriority(SDL_ThreadPriority priority);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetCurrentThreadPriority(SDL_ThreadPriority priority);

		/// <summary>
		///   <para>Wait for a thread to finish.</para>
		/// </summary>
		/// <param name="thread">
		///   <para> the <see cref="SDL_Thread" /> pointer that was returned from the <see cref="SDL_CreateThread" />() call that started this thread.        </para>
		/// </param>
		/// <param name="status">
		///   <para> pointer to an integer that will receive the value returned from the thread function by its 'return', or NULL to not receive such value back. </para>
		/// </param>
		/// <remarks>
		///   <para>Threads that haven't been detached will remain (as a "zombie") until thisfunction cleans them up. Not doing so is a resource leak.</para>
		///   <para>Once a thread has been cleaned up through this function, the<see cref="SDL_Thread" /> that references it becomes invalid and should notbe referenced again. As such, only one thread may call<see cref="SDL_WaitThread" />() on another.</para>
		///   <para>The return code for the thread function is placed in the area pointed to by<c>status</c>, if <c>status</c> is not NULL.</para>
		///   <para>You may not wait on a thread that has been used in a call to<see cref="SDL_DetachThread" />(). Use either that function or thisone, but not both, or behavior is undefined.</para>
		///   <para>It is safe to pass a NULL thread to this function; it is a no-op.</para>
		///   <para>Note that the thread pointer is freed by this function and is not validafterward.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateThread" />
		/// <seealso cref="SDL_DetachThread" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitThread<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_WaitThread(SDL_Thread *thread, int *status);
		/// </code><para>                                                                                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_WaitThread(IntPtr thread, IntPtr status);

		/// <summary>
		///   <para>Let a thread clean up on exit without intervention.</para>
		/// </summary>
		/// <param name="thread">
		///   <para> the <see cref="SDL_Thread" /> pointer that was returned from the <see cref="SDL_CreateThread" />() call that started this thread. </para>
		/// </param>
		/// <remarks>
		///   <para>A thread may be "detached" to signify that it should not remain untilanother thread has called <see cref="SDL_WaitThread" />() on it.Detaching a thread is useful for long-running threads that nothing needs tosynchronize with or further manage. When a detached thread is done, itsimply goes away.</para>
		///   <para>There is no way to recover the return code of a detached thread. If youneed this, don't detach the thread and instead use<see cref="SDL_WaitThread" />().</para>
		///   <para>Once a thread is detached, you should usually assume the<see cref="SDL_Thread" /> isn't safe to reference again, as it will becomeinvalid immediately upon the detached thread's exit, instead of remaininguntil someone has called <see cref="SDL_WaitThread" />() to finallyclean it up. As such, don't detach the same thread more than once.</para>
		///   <para>If a thread has already exited when passed to<see cref="SDL_DetachThread" />(), it will stop waiting for a call to<see cref="SDL_WaitThread" />() and clean up immediately. It is not safeto detach a thread that might be used with<see cref="SDL_WaitThread" />().</para>
		///   <para>You may not call <see cref="SDL_WaitThread" />() on a thread that hasbeen detached. Use either that function or this one, but not both, orbehavior is undefined.</para>
		///   <para>It is safe to pass NULL to this function; it is a no-op.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateThread" />
		/// <seealso cref="SDL_WaitThread" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DetachThread<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DetachThread(SDL_Thread *thread);
		/// </code><para>                                                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>extern int TestThread(void *ptr);
		/// SDL_Thread *thread = SDL_CreateThread(TestThread, "TestThread", (void *)NULL);
		/// SDL_DetachThread(thread);  /* will go away on its own upon completion. */
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DetachThread(IntPtr thread);

		/// <summary>
		///   <para>Get the current thread's value associated with a thread local storage ID.</para>
		/// </summary>
		/// <param name="id">
		///   <para> a pointer to the thread local storage ID, may not be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the value associated with the ID for the current thread orNULL if no value has been set; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_SetTLS" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTLS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetTLS(SDL_TLSID *id);
		/// </code><para>                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetTLS(IntPtr id);

		/// <summary>
		///   <para>The callback used to cleanup data passed to <see cref="SDL_SetTLS" />.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is called when a thread exits, to allow an app to free any resources.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetTLS" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TLSDestructorCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_TLSDestructorCallback)(void *value);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_TLSDestructorCallback(IntPtr value);

		/// <summary>
		///   <para>Set the current thread's value associated with a thread local storage ID.</para>
		/// </summary>
		/// <param name="id">
		///   <para> a pointer to the thread local storage ID, may not be NULL.               </para>
		/// </param>
		/// <param name="value">
		///   <para> the value to associate with the ID for the current thread.               </para>
		/// </param>
		/// <param name="destructor">
		///   <para> a function called when the thread exits, to free the value, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the thread local storage ID is not initialized (the value is 0), a newID will be created in a thread-safe way, so all calls using a pointer tothe same ID will refer to the same local storage.</para>
		///   <para>Note that replacing a value from a previous call to this function on thesame thread does not call the previous value's destructor!</para>
		///   <para>
		///     <c>destructor</c> can be NULL; it is assumed that <c>value</c> does not need to becleaned up if so.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTLS" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTLS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTLS(SDL_TLSID *id, const void *value, SDL_TLSDestructorCallback destructor);
		/// </code><para>                                                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTLS(IntPtr id, IntPtr value, SDL_TLSDestructorCallback destructor);

		/// <summary>
		///   <para>Cleanup all TLS data for this thread.</para>
		/// </summary>
		/// <remarks>
		///   <para>If you are creating your threads outside of SDL and then calling SDLfunctions, you should call this function before your thread exits, toproperly clean up SDL memory.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CleanupTLS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_thread.h">&lt;SDL3/SDL_thread.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CleanupTLS(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryThread">CategoryThread</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CleanupTLS();

		// /usr/local/include/SDL3/SDL_mutex.h

		/// <summary>
		///   <para>Create a new mutex.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Mutex" /> *) Returns the initialized and unlocked mutex orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>All newly-created mutexes begin in the unlocked state.</para>
		///   <para>Calls to <see cref="SDL_LockMutex" />() will not return while the mutexis locked by another thread. See <see cref="SDL_TryLockMutex" />() toattempt to lock without blocking.</para>
		///   <para>SDL mutexes are reentrant.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroyMutex" />
		/// <seealso cref="SDL_LockMutex" />
		/// <seealso cref="SDL_TryLockMutex" />
		/// <seealso cref="SDL_UnlockMutex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateMutex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Mutex * SDL_CreateMutex(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>SDL_Mutex *mutex;
		/// 
		/// mutex = SDL_CreateMutex();
		/// if (!mutex) {
		///   SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create mutex\n");
		///   return 1;
		/// }
		/// 
		/// if (SDL_TryLockMutex(mutex) == 0) {
		///   /* Do stuff while mutex is locked */
		///   SDL_UnlockMutex(mutex);
		/// } else {
		///   SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't lock mutex\n");
		/// }
		/// 
		/// SDL_DestroyMutex(mutex);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateMutex();

		/// <summary>
		///   <para>Lock the mutex.</para>
		/// </summary>
		/// <param name="mutex">
		///   <para> the mutex to lock. </para>
		/// </param>
		/// <remarks>
		///   <para>This will block until the mutex is available, which is to say it is in theunlocked state and the OS has chosen the caller as the next thread to lockit. Of all threads waiting to lock the mutex, only one may do so at a time.</para>
		///   <para>It is legal for the owning thread to lock an already-locked mutex. It mustunlock it the same number of times before it is actually made available forother threads in the system (this is known as a "recursive mutex").</para>
		///   <para>This function does not fail; if mutex is NULL, it will return immediatelyhaving locked nothing. If the mutex is valid, this function will alwaysblock until it can lock the mutex, and return with it locked.</para>
		/// </remarks>
		/// <seealso cref="SDL_TryLockMutex" />
		/// <seealso cref="SDL_UnlockMutex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockMutex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LockMutex(SDL_Mutex *mutex);
		/// </code><para>                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_LockMutex(IntPtr mutex);

		/// <summary>
		///   <para>Try to lock a mutex without blocking.</para>
		/// </summary>
		/// <param name="mutex">
		///   <para> the mutex to try to lock. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false if the mutex would block.</para>
		/// </returns>
		/// <remarks>
		///   <para>This works just like <see cref="SDL_LockMutex" />(), but if the mutex isnot available, this function returns false immediately.</para>
		///   <para>This technique is useful if you need exclusive access to a resource butdon't want to wait for it, and will return to it to try again later.</para>
		///   <para>This function returns true if passed a NULL mutex.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockMutex" />
		/// <seealso cref="SDL_UnlockMutex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TryLockMutex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TryLockMutex(SDL_Mutex *mutex);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TryLockMutex(IntPtr mutex);

		/// <summary>
		///   <para>Unlock the mutex.</para>
		/// </summary>
		/// <param name="mutex">
		///   <para> the mutex to unlock. </para>
		/// </param>
		/// <remarks>
		///   <para>It is legal for the owning thread to lock an already-locked mutex. It mustunlock it the same number of times before it is actually made available forother threads in the system (this is known as a "recursive mutex").</para>
		///   <para>It is illegal to unlock a mutex that has not been locked by the currentthread, and doing so results in undefined behavior.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockMutex" />
		/// <seealso cref="SDL_TryLockMutex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockMutex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockMutex(SDL_Mutex *mutex);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockMutex(IntPtr mutex);

		/// <summary>
		///   <para>Destroy a mutex created with <see cref="SDL_CreateMutex" />().</para>
		/// </summary>
		/// <param name="mutex">
		///   <para> the mutex to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>This function must be called on any mutex that is no longer needed. Failureto destroy a mutex will result in a system memory or resource leak. Whileit is safe to destroy a mutex that is unlocked, it is not safe to attemptto destroy a locked mutex, and may result in undefined behavior dependingon the platform.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateMutex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyMutex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyMutex(SDL_Mutex *mutex);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyMutex(IntPtr mutex);

		/// <summary>
		///   <para>Create a new read/write lock.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_RWLock" /> *) Returns the initialized and unlockedread/write lock or NULL on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>A read/write lock is useful for situations where you have multiple threadstrying to access a resource that is rarely updated. All threads requestinga read-only lock will be allowed to run in parallel; if a thread requests awrite lock, it will be provided exclusive access. This makes it safe formultiple threads to use a resource at the same time if they promise not tochange it, and when it has to be changed, the rwlock will serve as agateway to make sure those changes can be made safely.</para>
		///   <para>In the right situation, a rwlock can be more efficient than a mutex, whichonly lets a single thread proceed at a time, even if it won't be modifyingthe data.</para>
		///   <para>All newly-created read/write locks begin in the unlocked state.</para>
		///   <para>Calls to <see cref="SDL_LockRWLockForReading" />() and<see cref="SDL_LockRWLockForWriting" /> will not return whilethe rwlock is locked for writing by another thread. See<see cref="SDL_TryLockRWLockForReading" />() and<see cref="SDL_TryLockRWLockForWriting" />() to attempt tolock without blocking.</para>
		///   <para>SDL read/write locks are only recursive for read-only locks! They are notguaranteed to be fair, or provide access in a FIFO manner! They are notguaranteed to favor writers. You may not lock a rwlock for both read-onlyand write access at the same time from the same thread (so you can'tpromote your read-only lock to a write lock without unlocking first).</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroyRWLock" />
		/// <seealso cref="SDL_LockRWLockForReading" />
		/// <seealso cref="SDL_LockRWLockForWriting" />
		/// <seealso cref="SDL_TryLockRWLockForReading" />
		/// <seealso cref="SDL_TryLockRWLockForWriting" />
		/// <seealso cref="SDL_UnlockRWLock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateRWLock<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_RWLock * SDL_CreateRWLock(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateRWLock();

		/// <summary>
		///   <para>Lock the read/write lock for read only operations.</para>
		/// </summary>
		/// <param name="rwlock">
		///   <para> the read/write lock to lock. </para>
		/// </param>
		/// <remarks>
		///   <para>This will block until the rwlock is available, which is to say it is notlocked for writing by any other thread. Of all threads waiting to lock therwlock, all may do so at the same time as long as they are requestingread-only access; if a thread wants to lock for writing, only one may do soat a time, and no other threads, read-only or not, may hold the lock at thesame time.</para>
		///   <para>It is legal for the owning thread to lock an already-locked rwlock forreading. It must unlock it the same number of times before it is actuallymade available for other threads in the system (this is known as a"recursive rwlock").</para>
		///   <para>Note that locking for writing is not recursive (this is only available toread-only locks).</para>
		///   <para>It is illegal to request a read-only lock from a thread that already holdsthe write lock. Doing so results in undefined behavior. Unlock the writelock before requesting a read-only lock. (But, of course, if you have thewrite lock, you don't need further locks to read in any case.)</para>
		///   <para>This function does not fail; if rwlock is NULL, it will return immediatelyhaving locked nothing. If the rwlock is valid, this function will alwaysblock until it can lock the mutex, and return with it locked.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockRWLockForWriting" />
		/// <seealso cref="SDL_TryLockRWLockForReading" />
		/// <seealso cref="SDL_UnlockRWLock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockRWLockForReading<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LockRWLockForReading(SDL_RWLock *rwlock);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_LockRWLockForReading(IntPtr rwlock);

		/// <summary>
		///   <para>Lock the read/write lock for write operations.</para>
		/// </summary>
		/// <param name="rwlock">
		///   <para> the read/write lock to lock. </para>
		/// </param>
		/// <remarks>
		///   <para>This will block until the rwlock is available, which is to say it is notlocked for reading or writing by any other thread. Only one thread may holdthe lock when it requests write access; all other threads, whether theyalso want to write or only want read-only access, must wait until thewriter thread has released the lock.</para>
		///   <para>It is illegal for the owning thread to lock an already-locked rwlock forwriting (read-only may be locked recursively, writing can not). Doing soresults in undefined behavior.</para>
		///   <para>It is illegal to request a write lock from a thread that already holds aread-only lock. Doing so results in undefined behavior. Unlock theread-only lock before requesting a write lock.</para>
		///   <para>This function does not fail; if rwlock is NULL, it will return immediatelyhaving locked nothing. If the rwlock is valid, this function will alwaysblock until it can lock the mutex, and return with it locked.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockRWLockForReading" />
		/// <seealso cref="SDL_TryLockRWLockForWriting" />
		/// <seealso cref="SDL_UnlockRWLock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockRWLockForWriting<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LockRWLockForWriting(SDL_RWLock *rwlock);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_LockRWLockForWriting(IntPtr rwlock);

		/// <summary>
		///   <para>Try to lock a read/write lock for reading without blocking.</para>
		/// </summary>
		/// <param name="rwlock">
		///   <para> the rwlock to try to lock. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false if the lock would block.</para>
		/// </returns>
		/// <remarks>
		///   <para>This works just like<see cref="SDL_LockRWLockForReading" />(), but if the rwlockis not available, then this function returns false immediately.</para>
		///   <para>This technique is useful if you need access to a resource but don't want towait for it, and will return to it to try again later.</para>
		///   <para>Trying to lock for read-only access can succeed if other threads areholding read-only locks, as this won't prevent access.</para>
		///   <para>This function returns true if passed a NULL rwlock.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockRWLockForReading" />
		/// <seealso cref="SDL_TryLockRWLockForWriting" />
		/// <seealso cref="SDL_UnlockRWLock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TryLockRWLockForReading<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TryLockRWLockForReading(SDL_RWLock *rwlock);
		/// </code><para>                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TryLockRWLockForReading(IntPtr rwlock);

		/// <summary>
		///   <para>Try to lock a read/write lock for writing without blocking.</para>
		/// </summary>
		/// <param name="rwlock">
		///   <para> the rwlock to try to lock. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false if the lock would block.</para>
		/// </returns>
		/// <remarks>
		///   <para>This works just like<see cref="SDL_LockRWLockForWriting" />(), but if the rwlockis not available, then this function returns false immediately.</para>
		///   <para>This technique is useful if you need exclusive access to a resource butdon't want to wait for it, and will return to it to try again later.</para>
		///   <para>It is illegal for the owning thread to lock an already-locked rwlock forwriting (read-only may be locked recursively, writing can not). Doing soresults in undefined behavior.</para>
		///   <para>It is illegal to request a write lock from a thread that already holds aread-only lock. Doing so results in undefined behavior. Unlock theread-only lock before requesting a write lock.</para>
		///   <para>This function returns true if passed a NULL rwlock.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockRWLockForWriting" />
		/// <seealso cref="SDL_TryLockRWLockForReading" />
		/// <seealso cref="SDL_UnlockRWLock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TryLockRWLockForWriting<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TryLockRWLockForWriting(SDL_RWLock *rwlock);
		/// </code><para>                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TryLockRWLockForWriting(IntPtr rwlock);

		/// <summary>
		///   <para>Unlock the read/write lock.</para>
		/// </summary>
		/// <param name="rwlock">
		///   <para> the rwlock to unlock. </para>
		/// </param>
		/// <remarks>
		///   <para>Use this function to unlock the rwlock, whether it was locked for read-onlyor write operations.</para>
		///   <para>It is legal for the owning thread to lock an already-locked read-only lock.It must unlock it the same number of times before it is actually madeavailable for other threads in the system (this is known as a "recursiverwlock").</para>
		///   <para>It is illegal to unlock a rwlock that has not been locked by the currentthread, and doing so results in undefined behavior.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockRWLockForReading" />
		/// <seealso cref="SDL_LockRWLockForWriting" />
		/// <seealso cref="SDL_TryLockRWLockForReading" />
		/// <seealso cref="SDL_TryLockRWLockForWriting" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockRWLock<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockRWLock(SDL_RWLock *rwlock);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockRWLock(IntPtr rwlock);

		/// <summary>
		///   <para>Destroy a read/write lock created with <see cref="SDL_CreateRWLock" />().</para>
		/// </summary>
		/// <param name="rwlock">
		///   <para> the rwlock to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>This function must be called on any read/write lock that is no longerneeded. Failure to destroy a rwlock will result in a system memory orresource leak. While it is safe to destroy a rwlock that is unlocked, itis not safe to attempt to destroy a locked rwlock, and may result inundefined behavior depending on the platform.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateRWLock" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyRWLock<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyRWLock(SDL_RWLock *rwlock);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyRWLock(IntPtr rwlock);

		/// <summary>
		///   <para>Create a semaphore.</para>
		/// </summary>
		/// <param name="initial_value">
		///   <para> the starting value of the semaphore. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Semaphore" /> *) Returns a new semaphore or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function creates a new semaphore and initializes it with the value<c>initial_value</c>. Each wait operation on the semaphore will atomicallydecrement the semaphore value and potentially block if the semaphore valueis 0. Each post operation will atomically increment the semaphore value andwake waiting threads and allow them to retry the wait operation.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroySemaphore" />
		/// <seealso cref="SDL_SignalSemaphore" />
		/// <seealso cref="SDL_TryWaitSemaphore" />
		/// <seealso cref="SDL_GetSemaphoreValue" />
		/// <seealso cref="SDL_WaitSemaphore" />
		/// <seealso cref="SDL_WaitSemaphoreTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateSemaphore<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Semaphore * SDL_CreateSemaphore(Uint32 initial_value);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><para>Typical use of semaphores:</para><code>void add_data_to_queue(void);
		/// void get_data_to_queue(void);
		/// void get_data_from_queue(void);
		/// int data_available(void);
		/// void wait_for_threads(void);
		/// 
		/// SDL_AtomicInt done;
		/// SDL_Semaphore *sem;
		/// 
		/// SDL_SetAtomicInt(&amp;done, 0);
		/// sem = SDL_CreateSemaphore(0);
		/// 
		/// 
		/// Thread_A:
		///     while (!SDL_GetAtomicInt(&amp;done)) {
		///         add_data_to_queue();
		///         SDL_SignalSemaphore(sem);
		///     }
		/// 
		/// Thread_B:
		///     while (!SDL_GetAtomicInt(&amp;done)) {
		///         SDL_WaitSemaphore(sem);
		///         if (data_available()) {
		///             get_data_from_queue();
		///         }
		///     }
		/// 
		/// 
		/// SDL_SetAtomicInt(&amp;done, 1);
		/// SDL_SignalSemaphore(sem);
		/// wait_for_threads();
		/// SDL_DestroySemaphore(sem);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateSemaphore(uint initial_value);

		/// <summary>
		///   <para>Destroy a semaphore.</para>
		/// </summary>
		/// <param name="sem">
		///   <para> the semaphore to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>It is not safe to destroy a semaphore if there are threads currentlywaiting on it.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateSemaphore" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroySemaphore<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroySemaphore(SDL_Semaphore *sem);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroySemaphore(IntPtr sem);

		/// <summary>
		///   <para>Wait until a semaphore has a positive value and then decrements it.</para>
		/// </summary>
		/// <param name="sem">
		///   <para> the semaphore wait on. </para>
		/// </param>
		/// <remarks>
		///   <para>This function suspends the calling thread until the semaphore pointed to by<c>sem</c> has a positive value, and then atomically decrement the semaphorevalue.</para>
		///   <para>This function is the equivalent of calling<see cref="SDL_WaitSemaphoreTimeout" />() with a time lengthof -1.</para>
		/// </remarks>
		/// <seealso cref="SDL_SignalSemaphore" />
		/// <seealso cref="SDL_TryWaitSemaphore" />
		/// <seealso cref="SDL_WaitSemaphoreTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitSemaphore<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_WaitSemaphore(SDL_Semaphore *sem);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_WaitSemaphore(IntPtr sem);

		/// <summary>
		///   <para>See if a semaphore has a positive value and decrement it if it does.</para>
		/// </summary>
		/// <param name="sem">
		///   <para> the semaphore to wait on. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the wait succeeds, false if the wait would block.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function checks to see if the semaphore pointed to by <c>sem</c> has apositive value and atomically decrements the semaphore value if it does. Ifthe semaphore doesn't have a positive value, the function immediatelyreturns false.</para>
		/// </remarks>
		/// <seealso cref="SDL_SignalSemaphore" />
		/// <seealso cref="SDL_WaitSemaphore" />
		/// <seealso cref="SDL_WaitSemaphoreTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TryWaitSemaphore<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TryWaitSemaphore(SDL_Semaphore *sem);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TryWaitSemaphore(IntPtr sem);

		/// <summary>
		///   <para>Wait until a semaphore has a positive value and then decrements it.</para>
		/// </summary>
		/// <param name="sem">
		///   <para> the semaphore to wait on.                                               </para>
		/// </param>
		/// <param name="timeoutMS">
		///   <para> the length of the timeout, in milliseconds, or -1 to wait indefinitely. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the wait succeeds or false if the wait times out.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function suspends the calling thread until either the semaphorepointed to by <c>sem</c> has a positive value or the specified time has elapsed.If the call is successful it will atomically decrement the semaphore value.</para>
		/// </remarks>
		/// <seealso cref="SDL_SignalSemaphore" />
		/// <seealso cref="SDL_TryWaitSemaphore" />
		/// <seealso cref="SDL_WaitSemaphore" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitSemaphoreTimeout<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitSemaphoreTimeout(SDL_Semaphore *sem, Sint32 timeoutMS);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitSemaphoreTimeout(IntPtr sem, int timeoutMS);

		/// <summary>
		///   <para>Atomically increment a semaphore's value and wake waiting threads.</para>
		/// </summary>
		/// <param name="sem">
		///   <para> the semaphore to increment. </para>
		/// </param>
		/// <seealso cref="SDL_TryWaitSemaphore" />
		/// <seealso cref="SDL_WaitSemaphore" />
		/// <seealso cref="SDL_WaitSemaphoreTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SignalSemaphore<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SignalSemaphore(SDL_Semaphore *sem);
		/// </code><para>                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SignalSemaphore(IntPtr sem);

		/// <summary>
		///   <para>Get the current value of a semaphore.</para>
		/// </summary>
		/// <param name="sem">
		///   <para> the semaphore to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns the current value of the semaphore.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSemaphoreValue<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_GetSemaphoreValue(SDL_Semaphore *sem);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetSemaphoreValue(IntPtr sem);

		/// <summary>
		///   <para>Create a condition variable.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Condition" /> *) Returns a new condition variable or NULLon failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_BroadcastCondition" />
		/// <seealso cref="SDL_SignalCondition" />
		/// <seealso cref="SDL_WaitCondition" />
		/// <seealso cref="SDL_WaitConditionTimeout" />
		/// <seealso cref="SDL_DestroyCondition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateCondition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Condition * SDL_CreateCondition(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><para>Typical use of condition variables:</para><code>// BEWARE: This code example was migrated from the SDL2 Wiki, by only updating the names.
		/// 
		/// bool condition = false;
		/// SDL_Mutex *lock;
		/// SDL_Condition *cond;
		/// lock = SDL_CreateMutex();
		/// cond = SDL_CreateCondition();
		/// 
		/// 
		/// Thread_A:
		///     SDL_LockMutex(lock);
		///     while (!condition) {
		///         SDL_WaitCondition(cond, lock);
		///     }
		///     SDL_UnlockMutex(lock);
		/// Thread_B:
		///     SDL_LockMutex(lock);
		///     /* ... */
		///     condition = true;
		///     /* ... */
		///     SDL_SignalCondition(cond);
		///     SDL_UnlockMutex(lock);
		/// 
		/// SDL_DestroyCondition(cond);
		/// SDL_DestroyMutex(lock);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateCondition();

		/// <summary>
		///   <para>Destroy a condition variable.</para>
		/// </summary>
		/// <param name="cond">
		///   <para> the condition variable to destroy. </para>
		/// </param>
		/// <seealso cref="SDL_CreateCondition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyCondition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyCondition(SDL_Condition *cond);
		/// </code><para>                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyCondition(IntPtr cond);

		/// <summary>
		///   <para>Restart one of the threads that are waiting on the condition variable.</para>
		/// </summary>
		/// <param name="cond">
		///   <para> the condition variable to signal. </para>
		/// </param>
		/// <seealso cref="SDL_BroadcastCondition" />
		/// <seealso cref="SDL_WaitCondition" />
		/// <seealso cref="SDL_WaitConditionTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SignalCondition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SignalCondition(SDL_Condition *cond);
		/// </code><para>                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SignalCondition(IntPtr cond);

		/// <summary>
		///   <para>Restart all threads that are waiting on the condition variable.</para>
		/// </summary>
		/// <param name="cond">
		///   <para> the condition variable to signal. </para>
		/// </param>
		/// <seealso cref="SDL_SignalCondition" />
		/// <seealso cref="SDL_WaitCondition" />
		/// <seealso cref="SDL_WaitConditionTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BroadcastCondition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BroadcastCondition(SDL_Condition *cond);
		/// </code><para>                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>
		/// // BEWARE: This code example was migrated from the SDL2 Wiki, by only updating the names.
		/// 
		/// bool condition = false;
		/// SDL_Mutex *lock;
		/// SDL_Condition *cond;
		/// lock = SDL_CreateMutex();
		/// cond = SDL_CreateCondition();
		/// 
		/// Thread_A:
		///     SDL_LockMutex(lock);
		///     while (!condition) {
		///         SDL_WaitCondition(cond, lock);
		///     }
		///     SDL_UnlockMutex(lock);
		/// Thread_B:
		///     SDL_LockMutex(lock);
		///     while (!condition) {
		///         SDL_WaitCondition(cond, lock);
		///     }
		///     SDL_UnlockMutex(lock);
		/// Thread_C:
		///     SDL_LockMutex(lock);
		///     /* ... */
		///     condition = true;
		///     /* ... */
		///     SDL_BroadcastCondition(cond);
		///     SDL_UnlockMutex(lock);
		/// 
		/// SDL_DestroyCondition(cond);
		/// SDL_DestroyMutex(lock);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BroadcastCondition(IntPtr cond);

		/// <summary>
		///   <para>Wait until a condition variable is signaled.</para>
		/// </summary>
		/// <param name="cond">
		///   <para> the condition variable to wait on.          </para>
		/// </param>
		/// <param name="mutex">
		///   <para> the mutex used to coordinate thread access. </para>
		/// </param>
		/// <remarks>
		///   <para>This function unlocks the specified <c>mutex</c> and waits for another thread tocall <see cref="SDL_SignalCondition" />() or<see cref="SDL_BroadcastCondition" />() on the conditionvariable <c>cond</c>. Once the condition variable is signaled, the mutex isre-locked and the function returns.</para>
		///   <para>The mutex must be locked before calling this function. Locking the mutexrecursively (more than once) is not supported and leads to undefinedbehavior.</para>
		///   <para>This function is the equivalent of calling<see cref="SDL_WaitConditionTimeout" />() with a time lengthof -1.</para>
		/// </remarks>
		/// <seealso cref="SDL_BroadcastCondition" />
		/// <seealso cref="SDL_SignalCondition" />
		/// <seealso cref="SDL_WaitConditionTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitCondition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_WaitCondition(SDL_Condition *cond, SDL_Mutex *mutex);
		/// </code><para>                                             </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_WaitCondition(IntPtr cond, IntPtr mutex);

		/// <summary>
		///   <para>Wait until a condition variable is signaled or a certain time has passed.</para>
		/// </summary>
		/// <param name="cond">
		///   <para> the condition variable to wait on.                                     </para>
		/// </param>
		/// <param name="mutex">
		///   <para> the mutex used to coordinate thread access.                            </para>
		/// </param>
		/// <param name="timeoutMS">
		///   <para> the maximum time to wait, in milliseconds, or -1 to wait indefinitely. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the condition variable is signaled, false if thecondition is not signaled in the allotted time.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function unlocks the specified <c>mutex</c> and waits for another thread tocall <see cref="SDL_SignalCondition" />() or<see cref="SDL_BroadcastCondition" />() on the conditionvariable <c>cond</c>, or for the specified time to elapse. Once the conditionvariable is signaled or the time elapsed, the mutex is re-locked and thefunction returns.</para>
		///   <para>The mutex must be locked before calling this function. Locking the mutexrecursively (more than once) is not supported and leads to undefinedbehavior.</para>
		/// </remarks>
		/// <seealso cref="SDL_BroadcastCondition" />
		/// <seealso cref="SDL_SignalCondition" />
		/// <seealso cref="SDL_WaitCondition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitConditionTimeout<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitConditionTimeout(SDL_Condition *cond,
		///                     SDL_Mutex *mutex, Sint32 timeoutMS);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>bool condition = false;
		/// SDL_Mutex *lock;
		/// SDL_Condition *cond;
		/// lock = SDL_CreateMutex();
		/// cond = SDL_CreateCondition();
		/// 
		/// Thread_A:
		///     const Uint32 timeout = 1000; /* wake up every second */
		///     bool done = false;
		///     while (!done) {
		///         SDL_LockMutex(lock);
		///         while (!condition &amp;&amp; SDL_WaitConditionTimeout(cond, lock, timeout) == 0) {
		///             continue;
		///         }
		///         SDL_UnlockMutex(lock);
		///         if (condition) {
		///             /* ... */
		///         }
		///         /* ... do some periodic work */
		///     }
		/// Thread_B:
		///     SDL_LockMutex(lock);
		///     /* ... */
		///     condition = true;
		///     /* ... */
		///     SDL_SignalCondition(cond);
		///     SDL_UnlockMutex(lock);
		/// 
		/// SDL_DestroyCondition(cond);
		/// SDL_DestroyMutex(lock);
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitConditionTimeout(IntPtr cond, IntPtr mutex, int timeoutMS);

		/// <summary>
		///   <para>The current status of an <see cref="SDL_InitState" /> structure.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_InitStatus<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_InitStatus
		/// {
		///     SDL_INIT_STATUS_UNINITIALIZED,
		///     SDL_INIT_STATUS_INITIALIZING,
		///     SDL_INIT_STATUS_INITIALIZED,
		///     SDL_INIT_STATUS_UNINITIALIZING
		/// } SDL_InitStatus;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		public enum SDL_InitStatus
		{
			/// <summary><para>Please refer to <see cref="SDL_InitStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_INIT_STATUS_UNINITIALIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_INIT_STATUS_UNINITIALIZED = 0,
			/// <summary><para>Please refer to <see cref="SDL_InitStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_INIT_STATUS_INITIALIZING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_INIT_STATUS_INITIALIZING = 1,
			/// <summary><para>Please refer to <see cref="SDL_InitStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_INIT_STATUS_INITIALIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_INIT_STATUS_INITIALIZED = 2,
			/// <summary><para>Please refer to <see cref="SDL_InitStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_INIT_STATUS_UNINITIALIZING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_INIT_STATUS_UNINITIALIZING = 3,
		}

		/// <summary>
		///   <para>A structure used for thread-safe initialization and shutdown.</para>
		/// </summary>
		/// <remarks>
		///   <para>Here is an example of using this:</para>
		///   <code>   static SDL_AtomicInitState init;
		/// 
		///    bool InitSystem(void)
		///    {
		///        if (!SDL_ShouldInit(&amp;init)) {
		///            // The system is initialized
		///            return true;
		///        }
		/// 
		///        // At this point, you should not leave this function without calling SDL_SetInitialized()
		/// 
		///        bool initialized = DoInitTasks();
		///        SDL_SetInitialized(&amp;init, initialized);
		///        return initialized;
		///    }
		/// 
		///    bool UseSubsystem(void)
		///    {
		///        if (SDL_ShouldInit(&amp;init)) {
		///            // Error, the subsystem isn't initialized
		///            SDL_SetInitialized(&amp;init, false);
		///            return false;
		///        }
		/// 
		///        // Do work using the initialized subsystem
		/// 
		///        return true;
		///    }
		/// 
		///    void QuitSystem(void)
		///    {
		///        if (!SDL_ShouldQuit(&amp;init)) {
		///            // The system is not initialized
		///            return true;
		///        }
		/// 
		///        // At this point, you should not leave this function without calling SDL_SetInitialized()
		/// 
		///        DoQuitTasks();
		///        SDL_SetInitialized(&amp;init, false);
		///    }
		/// </code>
		///   <para>Note that this doesn't protect any resources created during initialization,or guarantee that nobody is using those resources during cleanup. Youshould use other mechanisms to protect those, if that's a concern for yourcode.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_InitState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_InitState
		/// {
		///     SDL_AtomicInt status;
		///     SDL_ThreadID thread;
		///     void *reserved;
		/// } SDL_InitState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_InitState
		{
			public SDL_AtomicInt status;
			public ulong thread;
			public IntPtr reserved;
		}

		/// <summary>
		///   <para>Return whether initialization should be done.</para>
		/// </summary>
		/// <param name="state">
		///   <para> the initialization state to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if initialization needs to be done, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function checks the passed in state and if initialization should bedone, sets the status to<see cref="SDL_InitStatus.SDL_INIT_STATUS_INITIALIZING" /> and returnstrue. If another thread is already modifying this state, it will wait untilthat's done before returning.</para>
		///   <para>If this function returns true, the calling code must call<see cref="SDL_SetInitialized" />() to complete the initialization.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetInitialized" />
		/// <seealso cref="SDL_ShouldQuit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShouldInit<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShouldInit(SDL_InitState *state);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ShouldInit(ref SDL_InitState state);

		/// <summary>
		///   <para>Return whether cleanup should be done.</para>
		/// </summary>
		/// <param name="state">
		///   <para> the initialization state to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if cleanup needs to be done, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function checks the passed in state and if cleanup should be done,sets the status to<see cref="SDL_InitStatus.SDL_INIT_STATUS_UNINITIALIZING" /> andreturns true.</para>
		///   <para>If this function returns true, the calling code must call<see cref="SDL_SetInitialized" />() to complete the cleanup.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetInitialized" />
		/// <seealso cref="SDL_ShouldInit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShouldQuit<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShouldQuit(SDL_InitState *state);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ShouldQuit(ref SDL_InitState state);

		/// <summary>
		///   <para>Finish an initialization state transition.</para>
		/// </summary>
		/// <param name="state">
		///   <para> the initialization state to check. </para>
		/// </param>
		/// <param name="initialized">
		///   <para> the new initialization state.      </para>
		/// </param>
		/// <remarks>
		///   <para>This function sets the status of the passed in state to<see cref="SDL_InitStatus.SDL_INIT_STATUS_INITIALIZED" /> or<see cref="SDL_InitStatus.SDL_INIT_STATUS_UNINITIALIZED" /> and allowsany threads waiting for the status to proceed.</para>
		/// </remarks>
		/// <seealso cref="SDL_ShouldInit" />
		/// <seealso cref="SDL_ShouldQuit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetInitialized<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mutex.h">&lt;SDL3/SDL_mutex.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetInitialized(SDL_InitState *state, bool initialized);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMutex">CategoryMutex</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetInitialized(ref SDL_InitState state, SDLBool initialized);

		// /usr/local/include/SDL3/SDL_iostream.h

		/// <summary>
		///   <para>
		///     <see cref="SDL_IOStream" /> status, set by a read or write operation.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOStatus<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_IOStatus
		/// {
		///     SDL_IO_STATUS_READY,     /**&lt; Everything is ready (no errors and not EOF). */
		///     SDL_IO_STATUS_ERROR,     /**&lt; Read or write I/O error */
		///     SDL_IO_STATUS_EOF,       /**&lt; End of file */
		///     SDL_IO_STATUS_NOT_READY, /**&lt; Non blocking I/O, not ready */
		///     SDL_IO_STATUS_READONLY,  /**&lt; Tried to write a read-only buffer */
		///     SDL_IO_STATUS_WRITEONLY  /**&lt; Tried to read a write-only buffer */
		/// } SDL_IOStatus;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		public enum SDL_IOStatus
		{
			/// <summary><para>Please refer to <see cref="SDL_IOStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_STATUS_READY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_STATUS_READY = 0,
			/// <summary><para>Please refer to <see cref="SDL_IOStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_STATUS_ERROR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_STATUS_ERROR = 1,
			/// <summary><para>Please refer to <see cref="SDL_IOStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_STATUS_EOF<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_STATUS_EOF = 2,
			/// <summary><para>Please refer to <see cref="SDL_IOStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_STATUS_NOT_READY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_STATUS_NOT_READY = 3,
			/// <summary><para>Please refer to <see cref="SDL_IOStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_STATUS_READONLY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_STATUS_READONLY = 4,
			/// <summary><para>Please refer to <see cref="SDL_IOStatus" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_STATUS_WRITEONLY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_STATUS_WRITEONLY = 5,
		}

		/// <summary>
		///   <para>Possible <c>whence</c> values for <see cref="SDL_IOStream" /> seeking.</para>
		/// </summary>
		/// <remarks>
		///   <para>These map to the same "whence" concept that <c>fseek</c> or <c>lseek</c> use in thestandard C runtime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOWhence<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_IOWhence
		/// {
		///     SDL_IO_SEEK_SET,  /**&lt; Seek from the beginning of data */
		///     SDL_IO_SEEK_CUR,  /**&lt; Seek relative to current read point */
		///     SDL_IO_SEEK_END   /**&lt; Seek relative to the end of data */
		/// } SDL_IOWhence;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		public enum SDL_IOWhence
		{
			/// <summary><para>Please refer to <see cref="SDL_IOWhence" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_SEEK_SET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_SEEK_SET = 0,
			/// <summary><para>Please refer to <see cref="SDL_IOWhence" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_SEEK_CUR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_SEEK_CUR = 1,
			/// <summary><para>Please refer to <see cref="SDL_IOWhence" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_IO_SEEK_END<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_IO_SEEK_END = 2,
		}

		/// <summary>
		///   <para>The function pointers that drive an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <remarks>
		///   <para>Applications can provide this struct to <see cref="SDL_OpenIO" />() tocreate their own implementation of <see cref="SDL_IOStream" />. This isnot necessarily required, as SDL already offers several common types of I/Ostreams, via functions like <see cref="SDL_IOFromFile" />() and<see cref="SDL_IOFromMem" />().</para>
		///   <para>This structure should be initialized using<see cref="SDL_INIT_INTERFACE" />()</para>
		/// </remarks>
		/// <seealso cref="SDL_INIT_INTERFACE" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOStreamInterface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_IOStreamInterface
		/// {
		///     /* The version of this interface */
		///     Uint32 version;
		/// 
		///     /**
		///      *  Return the number of bytes in this SDL_IOStream
		///      *
		///      *  \return the total size of the data stream, or -1 on error.
		///      */
		///     Sint64 (SDLCALL *size)(void *userdata);
		/// 
		///     /**
		///      *  Seek to `offset` relative to `whence`, one of stdio's whence values:
		///      *  SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END
		///      *
		///      *  \return the final offset in the data stream, or -1 on error.
		///      */
		///     Sint64 (SDLCALL *seek)(void *userdata, Sint64 offset, SDL_IOWhence whence);
		/// 
		///     /**
		///      *  Read up to `size` bytes from the data stream to the area pointed
		///      *  at by `ptr`.
		///      *
		///      *  On an incomplete read, you should set `*status` to a value from the
		///      *  SDL_IOStatus enum. You do not have to explicitly set this on
		///      *  a complete, successful read.
		///      *
		///      *  \return the number of bytes read
		///      */
		///     size_t (SDLCALL *read)(void *userdata, void *ptr, size_t size, SDL_IOStatus *status);
		/// 
		///     /**
		///      *  Write exactly `size` bytes from the area pointed at by `ptr`
		///      *  to data stream.
		///      *
		///      *  On an incomplete write, you should set `*status` to a value from the
		///      *  SDL_IOStatus enum. You do not have to explicitly set this on
		///      *  a complete, successful write.
		///      *
		///      *  \return the number of bytes written
		///      */
		///     size_t (SDLCALL *write)(void *userdata, const void *ptr, size_t size, SDL_IOStatus *status);
		/// 
		///     /**
		///      *  If the stream is buffering, make sure the data is written out.
		///      *
		///      *  On failure, you should set `*status` to a value from the
		///      *  SDL_IOStatus enum. You do not have to explicitly set this on
		///      *  a successful flush.
		///      *
		///      *  \return true if successful or false on write error when flushing data.
		///      */
		///     bool (SDLCALL *flush)(void *userdata, SDL_IOStatus *status);
		/// 
		///     /**
		///      *  Close and free any allocated resources.
		///      *
		///      *  This does not guarantee file writes will sync to physical media; they
		///      *  can be in the system's file cache, waiting to go to disk.
		///      *
		///      *  The SDL_IOStream is still destroyed even if this fails, so clean up anything
		///      *  even if flushing buffers, etc, returns an error.
		///      *
		///      *  \return true if successful or false on write error when flushing data.
		///      */
		///     bool (SDLCALL *close)(void *userdata);
		/// 
		/// } SDL_IOStreamInterface;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_IOStreamInterface
		{
			public uint version;
			public IntPtr size; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr seek; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr read; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr write; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr flush; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr close; // WARN_ANONYMOUS_FUNCTION_POINTER
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_IOFromFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_IOFromFile(byte* file, byte* mode);
		/// <summary>
		///   <para>Use this function to create a new <see cref="SDL_IOStream" /> structure for reading from and/or writing to a named file.</para>
		/// </summary>
		/// <param name="file">
		///   <para> a UTF-8 string representing the filename to open.                      </para>
		/// </param>
		/// <param name="mode">
		///   <para> an ASCII string representing the mode to be used for opening the file. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns a pointer to the<see cref="SDL_IOStream" /> structure that is created or NULL on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The <c>mode</c> string is treated roughly the same as in a call to the Clibrary's fopen(), even if SDL doesn't happen to use fopen() behind thescenes.</para>
		///   <para>Available <c>mode</c> strings:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"r": Open a file for reading. The file must exist.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"w": Create an empty file for writing. If a file with the same namealready exists its content is erased and the file is treated as a newempty file.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"a": Append to a file. Writing operations append data at the end of thefile. The file is created if it does not exist.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"r+": Open a file for update both reading and writing. The file mustexist.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"w+": Create an empty file for both reading and writing. If a file withthe same name already exists its content is erased and the file istreated as a new empty file.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"a+": Open a file for reading and appending. All writing operations areperformed at the end of the file, protecting the previous content to beoverwritten. You can reposition (fseek, rewind) the internal pointer toanywhere in the file for reading, but writing operations will move itback to the end of file. The file is created if it does not exist.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>NOTE: In order to open a file as a binary file, a "b" character has tobe included in the <c>mode</c> string. This additional "b" character can eitherbe appended at the end of the string (thus making the following compoundmodes: "rb", "wb", "ab", "r+b", "w+b", "a+b") or be inserted between theletter and the "+" sign for the mixed modes ("rb+", "wb+", "ab+").Additional characters may follow the sequence, although they should have noeffect. For example, "t" is sometimes appended to make explicit the file isa text file.</para>
		///   <para>This function supports Unicode filenames, but they must be encoded in UTF-8format, regardless of the underlying operating system.</para>
		///   <para>In Android, <see cref="SDL_IOFromFile" />() can be used to opencontent:// URIs. As a fallback, <see cref="SDL_IOFromFile" />() willtransparently open a matching filename in the app's <c>assets</c>.</para>
		///   <para>Closing the <see cref="SDL_IOStream" /> will close SDL's internal filehandle.</para>
		///   <para>The following properties may be set at creation time by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER" />:a pointer, that can be cast to a win32 <c>HANDLE</c>, that this<see cref="SDL_IOStream" /> is using to access the filesystem. If theprogram isn't running on Windows, or SDL used some other method to accessthe filesystem, this property will not be set.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_STDIO_FILE_POINTER" />:a pointer, that can be cast to a stdio <c>FILE *</c>, that this<see cref="SDL_IOStream" /> is using to access the filesystem. If SDLused some other method to access the filesystem, this property will notbe set. PLEASE NOTE that if SDL is using a different C runtime than yourapp, trying to use this pointer will almost certainly result in a crash!This is mostly a problem on Windows; make sure you build SDL and your appwith the same compiler and settings to avoid it.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER" />:a file descriptor that this <see cref="SDL_IOStream" /> is using toaccess the filesystem.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER" />:a pointer, that can be cast to an Android NDK <c>AAsset *</c>, that this<see cref="SDL_IOStream" /> is using to access the filesystem. If SDLused some other method to access the filesystem, this property will notbe set.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_CloseIO" />
		/// <seealso cref="SDL_FlushIO" />
		/// <seealso cref="SDL_ReadIO" />
		/// <seealso cref="SDL_SeekIO" />
		/// <seealso cref="SDL_TellIO" />
		/// <seealso cref="SDL_WriteIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOFromFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream * SDL_IOFromFile(const char *file, const char *mode);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		public static IntPtr SDL_IOFromFile(string file, string mode)
		{
			var fileUTF8 = EncodeAsUTF8(file);
			var modeUTF8 = EncodeAsUTF8(mode);
			var result = INTERNAL_SDL_IOFromFile(fileUTF8, modeUTF8);

			SDL_free((IntPtr) fileUTF8);
			SDL_free((IntPtr) modeUTF8);
			return result;
		}

		/// <summary>
		///   <para>Use this function to prepare a read-write memory buffer for use with <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="mem">
		///   <para> a pointer to a buffer to feed an <see cref="SDL_IOStream" /> stream. </para>
		/// </param>
		/// <param name="size">
		///   <para> the buffer size, in bytes.                                            </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns a pointer to a new<see cref="SDL_IOStream" /> structure or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function sets up an <see cref="SDL_IOStream" /> struct based on amemory area of a certain size, for both read and write access.</para>
		///   <para>This memory buffer is not copied by the <see cref="SDL_IOStream" />; thepointer you provide must remain valid until you close the stream. Closingthe stream will not free the original buffer.</para>
		///   <para>If you need to make sure the <see cref="SDL_IOStream" /> never writes tothe memory buffer, you should use<see cref="SDL_IOFromConstMem" />() with a read-only buffer ofmemory instead.</para>
		///   <para>The following properties will be set at creation time by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_MEMORY_POINTER" />:this will be the <c>mem</c> parameter that was passed to this function.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER" />:this will be the <c>size</c> parameter that was passed to this function.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_IOFromConstMem" />
		/// <seealso cref="SDL_CloseIO" />
		/// <seealso cref="SDL_FlushIO" />
		/// <seealso cref="SDL_ReadIO" />
		/// <seealso cref="SDL_SeekIO" />
		/// <seealso cref="SDL_TellIO" />
		/// <seealso cref="SDL_WriteIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOFromMem<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream * SDL_IOFromMem(void *mem, size_t size);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_IOFromMem(IntPtr mem, UIntPtr size);

		/// <summary>
		///   <para>Use this function to prepare a read-only memory buffer for use with <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="mem">
		///   <para> a pointer to a read-only buffer to feed an <see cref="SDL_IOStream" /> stream. </para>
		/// </param>
		/// <param name="size">
		///   <para> the buffer size, in bytes.                                                      </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns a pointer to a new<see cref="SDL_IOStream" /> structure or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function sets up an <see cref="SDL_IOStream" /> struct based on amemory area of a certain size. It assumes the memory area is not writable.</para>
		///   <para>Attempting to write to this <see cref="SDL_IOStream" /> stream will reportan error without writing to the memory buffer.</para>
		///   <para>This memory buffer is not copied by the <see cref="SDL_IOStream" />; thepointer you provide must remain valid until you close the stream. Closingthe stream will not free the original buffer.</para>
		///   <para>If you need to write to a memory buffer, you should use<see cref="SDL_IOFromMem" />() with a writable buffer of memory instead.</para>
		///   <para>The following properties will be set at creation time by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_MEMORY_POINTER" />:this will be the <c>mem</c> parameter that was passed to this function.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER" />:this will be the <c>size</c> parameter that was passed to this function.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_IOFromMem" />
		/// <seealso cref="SDL_CloseIO" />
		/// <seealso cref="SDL_ReadIO" />
		/// <seealso cref="SDL_SeekIO" />
		/// <seealso cref="SDL_TellIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOFromConstMem<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream * SDL_IOFromConstMem(const void *mem, size_t size);
		/// </code><para>                                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_IOFromConstMem(IntPtr mem, UIntPtr size);

		/// <summary>
		///   <para>Use this function to create an <see cref="SDL_IOStream" /> that is backed by dynamically allocated memory.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns a pointer to a new<see cref="SDL_IOStream" /> structure or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This supports the following properties to provide access to the memory andcontrol over allocations:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER" />:a pointer to the internal memory of the stream. This can be set to NULLto transfer ownership of the memory to the application, which should freethe memory with <see cref="SDL_free" />(). If this is done, the nextoperation on the stream must be <see cref="SDL_CloseIO" />().</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER" />:memory will be allocated in multiples of this size, defaulting to 1024.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_CloseIO" />
		/// <seealso cref="SDL_ReadIO" />
		/// <seealso cref="SDL_SeekIO" />
		/// <seealso cref="SDL_TellIO" />
		/// <seealso cref="SDL_WriteIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOFromDynamicMem<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream * SDL_IOFromDynamicMem(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_IOFromDynamicMem();

		/// <summary>
		///   <para>Create a custom <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="iface">
		///   <para> the interface that implements this <see cref="SDL_IOStream" />, initialized using <see cref="SDL_INIT_INTERFACE" />(). </para>
		/// </param>
		/// <param name="userdata">
		///   <para> the pointer that will be passed to the interface functions.                                                                    </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns a pointer to the allocated memoryon success or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>Applications do not need to use this function unless they are providingtheir own <see cref="SDL_IOStream" /> implementation. If you just need an<see cref="SDL_IOStream" /> to read/write a common data source, you shoulduse the built-in implementations in SDL, like<see cref="SDL_IOFromFile" />() or <see cref="SDL_IOFromMem" />(),etc.</para>
		///   <para>This function makes a copy of <c>iface</c> and the caller does not need to keepit around after this call.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseIO" />
		/// <seealso cref="SDL_INIT_INTERFACE" />
		/// <seealso cref="SDL_IOFromConstMem" />
		/// <seealso cref="SDL_IOFromFile" />
		/// <seealso cref="SDL_IOFromMem" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream * SDL_OpenIO(const SDL_IOStreamInterface *iface, void *userdata);
		/// </code><para>                                                                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenIO(ref SDL_IOStreamInterface iface, IntPtr userdata);

		/// <summary>
		///   <para>Close and free an allocated <see cref="SDL_IOStream" /> structure.</para>
		/// </summary>
		/// <param name="context">
		///   <para> <see cref="SDL_IOStream" /> structure to close. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <see cref="SDL_CloseIO" />() closes and cleans up the<see cref="SDL_IOStream" /> stream. It releases any resources used by thestream and frees the <see cref="SDL_IOStream" /> itself. This returns trueon success, or false if the stream failed to flush to its output (e.g. todisk).</para>
		///   <para>Note that if this fails to flush the stream for any reason, this functionreports an error, but the <see cref="SDL_IOStream" /> is still invalidonce this function returns.</para>
		///   <para>This call flushes any buffered writes to the operating system, but thereare no guarantees that those writes have gone to physical media; they mightbe in the OS's file cache, waiting to go to disk later. If it's absolutelycrucial that writes go to disk immediately, so they are definitely storedeven if the power fails before the file cache would have caught up, oneshould call <see cref="SDL_FlushIO" />() before closing. Note that flushingtakes time and makes the system and your app operate less efficiently, sodo so sparingly.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CloseIO(SDL_IOStream *context);
		/// </code><para>                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CloseIO(IntPtr context);

		/// <summary>
		///   <para>Get the properties associated with an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="context">
		///   <para> a pointer to an <see cref="SDL_IOStream" /> structure. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetIOProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetIOProperties(SDL_IOStream *context);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetIOProperties(IntPtr context);

		/// <summary>
		///   <para>Query the stream status of an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="context">
		///   <para> the <see cref="SDL_IOStream" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStatus" />) Returns an <see cref="SDL_IOStatus" /> enumwith the current state.</para>
		/// </returns>
		/// <remarks>
		///   <para>This information can be useful to decide if a short read or write was dueto an error, an EOF, or a non-blocking operation that isn't yet ready tocomplete.</para>
		///   <para>An <see cref="SDL_IOStream" />'s status is only expected to change after a<see cref="SDL_ReadIO" /> or <see cref="SDL_WriteIO" /> call; don't expectit to change if you just call this query function in a tight loop.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetIOStatus<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStatus SDL_GetIOStatus(SDL_IOStream *context);
		/// </code><para>                                            </para><br /><b>## Thread Safety ##</b><para>This function should not be called at the same time that another thread isoperating on the same <see cref="SDL_IOStream" />.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_IOStatus SDL_GetIOStatus(IntPtr context);

		/// <summary>
		///   <para>Use this function to get the size of the data stream in an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="context">
		///   <para> the <see cref="SDL_IOStream" /> to get the size of the data stream from. </para>
		/// </param>
		/// <returns>
		///   <para>(Sint64) Returns the size of the data stream in the<see cref="SDL_IOStream" /> on success or a negative error code onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetIOSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>Sint64 SDL_GetIOSize(SDL_IOStream *context);
		/// </code><para>                                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern long SDL_GetIOSize(IntPtr context);

		/// <summary>
		///   <para>Seek within an <see cref="SDL_IOStream" /> data stream.</para>
		/// </summary>
		/// <param name="context">
		///   <para> a pointer to an <see cref="SDL_IOStream" /> structure.                                                                  </para>
		/// </param>
		/// <param name="offset">
		///   <para> an offset in bytes, relative to <c>whence</c> location; can be negative.                                                      </para>
		/// </param>
		/// <param name="whence">
		///   <para> any of <see cref="SDL_IOWhence.SDL_IO_SEEK_SET" />, <see cref="SDL_IOWhence.SDL_IO_SEEK_CUR" />, <see cref="SDL_IOWhence.SDL_IO_SEEK_END" />. </para>
		/// </param>
		/// <returns>
		///   <para>(Sint64) Returns the final offset in the data stream after the seek or -1on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function seeks to byte <c>offset</c>, relative to <c>whence</c>.</para>
		///   <para>
		///     <c>whence</c> may be any of the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_IOWhence.SDL_IO_SEEK_SET" />: seek from the beginning of data</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_IOWhence.SDL_IO_SEEK_CUR" />: seek relative to current read point</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_IOWhence.SDL_IO_SEEK_END" />: seek relative to the end of data</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>If this stream can not seek, it will return -1.</para>
		/// </remarks>
		/// <seealso cref="SDL_TellIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SeekIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>Sint64 SDL_SeekIO(SDL_IOStream *context, Sint64 offset, SDL_IOWhence whence);
		/// </code><para>                                                                                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern long SDL_SeekIO(IntPtr context, long offset, SDL_IOWhence whence);

		/// <summary>
		///   <para>Determine the current read/write offset in an <see cref="SDL_IOStream" /> data stream.</para>
		/// </summary>
		/// <param name="context">
		///   <para> an <see cref="SDL_IOStream" /> data stream object from which to get the current offset. </para>
		/// </param>
		/// <returns>
		///   <para>(Sint64) Returns the current offset in the stream, or -1 if the informationcan not be determined.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <see cref="SDL_TellIO" /> is actually a wrapper function that calls the<see cref="SDL_IOStream" />'s <c>seek</c> method, with an offset of 0 bytesfrom <see cref="SDL_IOWhence.SDL_IO_SEEK_CUR" />, to simplify applicationdevelopment.</para>
		/// </remarks>
		/// <seealso cref="SDL_SeekIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TellIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>Sint64 SDL_TellIO(SDL_IOStream *context);
		/// </code><para>                                                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern long SDL_TellIO(IntPtr context);

		/// <summary>
		///   <para>Read from a data source.</para>
		/// </summary>
		/// <param name="context">
		///   <para> a pointer to an <see cref="SDL_IOStream" /> structure. </para>
		/// </param>
		/// <param name="ptr">
		///   <para> a pointer to a buffer to read data into.                </para>
		/// </param>
		/// <param name="size">
		///   <para> the number of bytes to read from the data source.       </para>
		/// </param>
		/// <returns>
		///   <para>(size_t) Returns the number of bytes read, or 0 on end of file or otherfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function reads up <c>size</c> bytes from the data source to the areapointed at by <c>ptr</c>. This function may read less bytes than requested. Itwill return zero when the data stream is completely read, and<see cref="SDL_GetIOStatus" />() will return<see cref="SDL_IOStatus.SDL_IO_STATUS_EOF" />, or on error, and<see cref="SDL_GetIOStatus" />() will return<see cref="SDL_IOStatus.SDL_IO_STATUS_ERROR" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_WriteIO" />
		/// <seealso cref="SDL_GetIOStatus" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>size_t SDL_ReadIO(SDL_IOStream *context, void *ptr, size_t size);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern UIntPtr SDL_ReadIO(IntPtr context, IntPtr ptr, UIntPtr size);

		/// <summary>
		///   <para>Write to an <see cref="SDL_IOStream" /> data stream.</para>
		/// </summary>
		/// <param name="context">
		///   <para> a pointer to an <see cref="SDL_IOStream" /> structure. </para>
		/// </param>
		/// <param name="ptr">
		///   <para> a pointer to a buffer containing data to write.         </para>
		/// </param>
		/// <param name="size">
		///   <para> the number of bytes to write.                           </para>
		/// </param>
		/// <returns>
		///   <para>(size_t) Returns the number of bytes written, which will be less than<c>size</c> on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function writes exactly <c>size</c> bytes from the area pointed at by <c>ptr</c>to the stream. If this fails for any reason, it'll return less than <c>size</c>to demonstrate how far the write progressed. On success, it returns <c>size</c>.</para>
		///   <para>On error, this function still attempts to write as much as possible, so itmight return a positive value less than the requested write size.</para>
		///   <para>The caller can use <see cref="SDL_GetIOStatus" />() to determine if theproblem is recoverable, such as a non-blocking write that can simply beretried later, or a fatal error.</para>
		/// </remarks>
		/// <seealso cref="SDL_IOprintf" />
		/// <seealso cref="SDL_ReadIO" />
		/// <seealso cref="SDL_SeekIO" />
		/// <seealso cref="SDL_FlushIO" />
		/// <seealso cref="SDL_GetIOStatus" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>size_t SDL_WriteIO(SDL_IOStream *context, const void *ptr, size_t size);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern UIntPtr SDL_WriteIO(IntPtr context, IntPtr ptr, UIntPtr size);

		[DllImport(nativeLibName, EntryPoint = "SDL_IOprintf", CallingConvention = CallingConvention.Cdecl)]
		private static extern UIntPtr INTERNAL_SDL_IOprintf(IntPtr context, byte* fmt);
		/// <summary>
		///   <para>Print to an <see cref="SDL_IOStream" /> data stream.</para>
		/// </summary>
		/// <param name="context">
		///   <para> a pointer to an <see cref="SDL_IOStream" /> structure.              </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style format string.                                      </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the <c>fmt</c> string, if any. </para>
		/// </param>
		/// <returns>
		///   <para>(size_t) Returns the number of bytes written or 0 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function does formatted printing to the stream.</para>
		/// </remarks>
		/// <seealso cref="SDL_IOvprintf" />
		/// <seealso cref="SDL_WriteIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IOprintf<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>size_t SDL_IOprintf(SDL_IOStream *context, const char *fmt, ...);
		/// </code><para>                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		public static UIntPtr SDL_IOprintf(IntPtr context, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			var result = INTERNAL_SDL_IOprintf(context, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
			return result;
		}

		/// <summary>
		///   <para>Flush any buffered data in the stream.</para>
		/// </summary>
		/// <param name="context">
		///   <para> <see cref="SDL_IOStream" /> structure to flush. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function makes sure that any buffered data is written to the stream.Normally this isn't necessary but if the stream is a pipe or socket itguarantees that any pending data is sent.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenIO" />
		/// <seealso cref="SDL_WriteIO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlushIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FlushIO(SDL_IOStream *context);
		/// </code><para>                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FlushIO(IntPtr context);

		/// <summary>
		///   <para>Load all the data from an SDL data stream.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_IOStream" /> to read all available data from.                                    </para>
		/// </param>
		/// <param name="datasize">
		///   <para> a pointer filled in with the number of bytes read, may be NULL.                                      </para>
		/// </param>
		/// <param name="closeio">
		///   <para> if true, calls <see cref="SDL_CloseIO" />() on <c>src</c> before returning, even in the case of an error. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the data or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The data is allocated with a zero byte at the end (null terminated) forconvenience. This extra byte is not included in the value reported via<c>datasize</c>.</para>
		///   <para>The data should be freed with <see cref="SDL_free" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_LoadFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadFile_IO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_LoadFile_IO(SDL_IOStream *src, size_t *datasize, bool closeio);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_LoadFile_IO(IntPtr src, out UIntPtr datasize, SDLBool closeio);

		[DllImport(nativeLibName, EntryPoint = "SDL_LoadFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_LoadFile(byte* file, out UIntPtr datasize);
		/// <summary>
		///   <para>Load all the data from a file path.</para>
		/// </summary>
		/// <param name="file">
		///   <para> the path to read all available data from.         </para>
		/// </param>
		/// <param name="datasize">
		///   <para> if not NULL, will store the number of bytes read. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the data or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The data is allocated with a zero byte at the end (null terminated) forconvenience. This extra byte is not included in the value reported via<c>datasize</c>.</para>
		///   <para>The data should be freed with <see cref="SDL_free" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_LoadFile_IO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_LoadFile(const char *file, size_t *datasize);
		/// </code><para>                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		public static IntPtr SDL_LoadFile(string file, out UIntPtr datasize)
		{
			var fileUTF8 = EncodeAsUTF8(file);
			var result = INTERNAL_SDL_LoadFile(fileUTF8, out datasize);

			SDL_free((IntPtr) fileUTF8);
			return result;
		}

		/// <summary>
		///   <para>Use this function to read a byte from an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_IOStream" /> to read from. </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU8<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU8(SDL_IOStream *src, Uint8 *value);
		/// </code><para>                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU8(IntPtr src, out byte value);

		/// <summary>
		///   <para>Use this function to read a signed byte from an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_IOStream" /> to read from. </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS8<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS8(SDL_IOStream *src, Sint8 *value);
		/// </code><para>                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS8(IntPtr src, out sbyte value);

		/// <summary>
		///   <para>Use this function to read 16 bits of little-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU16LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU16LE(SDL_IOStream *src, Uint16 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU16LE(IntPtr src, out ushort value);

		/// <summary>
		///   <para>Use this function to read 16 bits of little-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS16LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS16LE(SDL_IOStream *src, Sint16 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS16LE(IntPtr src, out short value);

		/// <summary>
		///   <para>Use this function to read 16 bits of big-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU16BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU16BE(SDL_IOStream *src, Uint16 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU16BE(IntPtr src, out ushort value);

		/// <summary>
		///   <para>Use this function to read 16 bits of big-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS16BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS16BE(SDL_IOStream *src, Sint16 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS16BE(IntPtr src, out short value);

		/// <summary>
		///   <para>Use this function to read 32 bits of little-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU32LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU32LE(SDL_IOStream *src, Uint32 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU32LE(IntPtr src, out uint value);

		/// <summary>
		///   <para>Use this function to read 32 bits of little-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS32LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS32LE(SDL_IOStream *src, Sint32 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS32LE(IntPtr src, out int value);

		/// <summary>
		///   <para>Use this function to read 32 bits of big-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU32BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU32BE(SDL_IOStream *src, Uint32 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU32BE(IntPtr src, out uint value);

		/// <summary>
		///   <para>Use this function to read 32 bits of big-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS32BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS32BE(SDL_IOStream *src, Sint32 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS32BE(IntPtr src, out int value);

		/// <summary>
		///   <para>Use this function to read 64 bits of little-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU64LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU64LE(SDL_IOStream *src, Uint64 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU64LE(IntPtr src, out ulong value);

		/// <summary>
		///   <para>Use this function to read 64 bits of little-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS64LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS64LE(SDL_IOStream *src, Sint64 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS64LE(IntPtr src, out long value);

		/// <summary>
		///   <para>Use this function to read 64 bits of big-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadU64BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadU64BE(SDL_IOStream *src, Uint64 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadU64BE(IntPtr src, out ulong value);

		/// <summary>
		///   <para>Use this function to read 64 bits of big-endian data from an <see cref="SDL_IOStream" /> and return in native format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the stream from which to read data.     </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the data read. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the data returned will be inthe native byte order.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadS64BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadS64BE(SDL_IOStream *src, Sint64 *value);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadS64BE(IntPtr src, out long value);

		/// <summary>
		///   <para>Use this function to write a byte to an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the <see cref="SDL_IOStream" /> to write to. </para>
		/// </param>
		/// <param name="value">
		///   <para> the byte value to write.                      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU8<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU8(SDL_IOStream *dst, Uint8 value);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU8(IntPtr dst, byte value);

		/// <summary>
		///   <para>Use this function to write a signed byte to an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the <see cref="SDL_IOStream" /> to write to. </para>
		/// </param>
		/// <param name="value">
		///   <para> the byte value to write.                      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS8<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS8(SDL_IOStream *dst, Sint8 value);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS8(IntPtr dst, sbyte value);

		/// <summary>
		///   <para>Use this function to write 16 bits in native format to an <see cref="SDL_IOStream" /> as little-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in little-endianformat.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU16LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU16LE(SDL_IOStream *dst, Uint16 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU16LE(IntPtr dst, ushort value);

		/// <summary>
		///   <para>Use this function to write 16 bits in native format to an <see cref="SDL_IOStream" /> as little-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in little-endianformat.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS16LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS16LE(SDL_IOStream *dst, Sint16 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS16LE(IntPtr dst, short value);

		/// <summary>
		///   <para>Use this function to write 16 bits in native format to an <see cref="SDL_IOStream" /> as big-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in big-endian format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU16BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU16BE(SDL_IOStream *dst, Uint16 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU16BE(IntPtr dst, ushort value);

		/// <summary>
		///   <para>Use this function to write 16 bits in native format to an <see cref="SDL_IOStream" /> as big-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in big-endian format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS16BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS16BE(SDL_IOStream *dst, Sint16 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS16BE(IntPtr dst, short value);

		/// <summary>
		///   <para>Use this function to write 32 bits in native format to an <see cref="SDL_IOStream" /> as little-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in little-endianformat.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU32LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU32LE(SDL_IOStream *dst, Uint32 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU32LE(IntPtr dst, uint value);

		/// <summary>
		///   <para>Use this function to write 32 bits in native format to an <see cref="SDL_IOStream" /> as little-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in little-endianformat.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS32LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS32LE(SDL_IOStream *dst, Sint32 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS32LE(IntPtr dst, int value);

		/// <summary>
		///   <para>Use this function to write 32 bits in native format to an <see cref="SDL_IOStream" /> as big-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in big-endian format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU32BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU32BE(SDL_IOStream *dst, Uint32 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU32BE(IntPtr dst, uint value);

		/// <summary>
		///   <para>Use this function to write 32 bits in native format to an <see cref="SDL_IOStream" /> as big-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in big-endian format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS32BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS32BE(SDL_IOStream *dst, Sint32 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS32BE(IntPtr dst, int value);

		/// <summary>
		///   <para>Use this function to write 64 bits in native format to an <see cref="SDL_IOStream" /> as little-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in little-endianformat.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU64LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU64LE(SDL_IOStream *dst, Uint64 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU64LE(IntPtr dst, ulong value);

		/// <summary>
		///   <para>Use this function to write 64 bits in native format to an <see cref="SDL_IOStream" /> as little-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in little-endianformat.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS64LE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS64LE(SDL_IOStream *dst, Sint64 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS64LE(IntPtr dst, long value);

		/// <summary>
		///   <para>Use this function to write 64 bits in native format to an <see cref="SDL_IOStream" /> as big-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in big-endian format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteU64BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteU64BE(SDL_IOStream *dst, Uint64 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteU64BE(IntPtr dst, ulong value);

		/// <summary>
		///   <para>Use this function to write 64 bits in native format to an <see cref="SDL_IOStream" /> as big-endian data.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the stream to which data will be written. </para>
		/// </param>
		/// <param name="value">
		///   <para> the data to be written, in native format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on successful write or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL byteswaps the data only if necessary, so the application alwaysspecifies native format, and the data written will be in big-endian format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteS64BE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_iostream.h">&lt;SDL3/SDL_iostream.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteS64BE(SDL_IOStream *dst, Sint64 value);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryIOStream">CategoryIOStream</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteS64BE(IntPtr dst, long value);

		// /usr/local/include/SDL3/SDL_audio.h

		/// <summary>
		///   <para>Audio format.</para>
		/// </summary>
		/// <seealso cref="SDL_AUDIO_BITSIZE" />
		/// <seealso cref="SDL_AUDIO_BYTESIZE" />
		/// <seealso cref="SDL_AUDIO_ISINT" />
		/// <seealso cref="SDL_AUDIO_ISFLOAT" />
		/// <seealso cref="SDL_AUDIO_ISBIGENDIAN" />
		/// <seealso cref="SDL_AUDIO_ISLITTLEENDIAN" />
		/// <seealso cref="SDL_AUDIO_ISSIGNED" />
		/// <seealso cref="SDL_AUDIO_ISUNSIGNED" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AudioFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_AudioFormat
		/// {
		///     SDL_AUDIO_UNKNOWN   = 0x0000u,  /**&lt; Unspecified audio format */
		///     SDL_AUDIO_U8        = 0x0008u,  /**&lt; Unsigned 8-bit samples */
		///         /* SDL_DEFINE_AUDIO_FORMAT(0, 0, 0, 8), */
		///     SDL_AUDIO_S8        = 0x8008u,  /**&lt; Signed 8-bit samples */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 8), */
		///     SDL_AUDIO_S16LE     = 0x8010u,  /**&lt; Signed 16-bit samples */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 16), */
		///     SDL_AUDIO_S16BE     = 0x9010u,  /**&lt; As above, but big-endian byte order */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 1, 0, 16), */
		///     SDL_AUDIO_S32LE     = 0x8020u,  /**&lt; 32-bit integer samples */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 32), */
		///     SDL_AUDIO_S32BE     = 0x9020u,  /**&lt; As above, but big-endian byte order */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 1, 0, 32), */
		///     SDL_AUDIO_F32LE     = 0x8120u,  /**&lt; 32-bit floating point samples */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 1, 32), */
		///     SDL_AUDIO_F32BE     = 0x9120u,  /**&lt; As above, but big-endian byte order */
		///         /* SDL_DEFINE_AUDIO_FORMAT(1, 1, 1, 32), */
		/// 
		///     /* These represent the current system's byteorder. */
		///     #if SDL_BYTEORDER == SDL_LIL_ENDIAN
		///     SDL_AUDIO_S16 = SDL_AUDIO_S16LE,
		///     SDL_AUDIO_S32 = SDL_AUDIO_S32LE,
		///     SDL_AUDIO_F32 = SDL_AUDIO_F32LE
		///     #else
		///     SDL_AUDIO_S16 = SDL_AUDIO_S16BE,
		///     SDL_AUDIO_S32 = SDL_AUDIO_S32BE,
		///     SDL_AUDIO_F32 = SDL_AUDIO_F32BE
		///     #endif
		/// } SDL_AudioFormat;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		public enum SDL_AudioFormat
		{
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_U8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_U8 = 8,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S8 = 32776,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S16LE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S16LE = 32784,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S16BE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S16BE = 36880,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S32LE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S32LE = 32800,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S32BE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S32BE = 36896,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_F32LE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_F32LE = 33056,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_F32BE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_F32BE = 37152,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S16<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S16 = 32784,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_S32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_S32 = 32800,
			/// <summary><para>Please refer to <see cref="SDL_AudioFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_AUDIO_F32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_AUDIO_F32 = 33056,
		}

		/// <summary>
		///   <para>Format specifier for audio data.</para>
		/// </summary>
		/// <seealso cref="SDL_AudioFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AudioSpec<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_AudioSpec
		/// {
		///     SDL_AudioFormat format;     /**&lt; Audio data format */
		///     int channels;               /**&lt; Number of channels: 1 mono, 2 stereo, etc */
		///     int freq;                   /**&lt; sample rate: sample frames per second */
		/// } SDL_AudioSpec;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_AudioSpec
		{
			public SDL_AudioFormat format;
			public int channels;
			public int freq;
		}

		/// <summary>
		///   <para>Use this function to get the number of built-in audio drivers.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the number of built-in audio drivers.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns a hardcoded number. This never returns a negativevalue; if there are no drivers compiled into this build of SDL, thisfunction returns zero. The presence of a driver in this list does not meanit will function, it just means SDL is capable of interacting with thatinterface. For example, a build of SDL might have esound support, but ifthere's no esound server available, SDL's esound driver would fail if used.</para>
		///   <para>By default, SDL tries all drivers, in its preferred order, until one isfound to be usable.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioDriver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumAudioDrivers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumAudioDrivers(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumAudioDrivers();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetAudioDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetAudioDriver(int index);
		/// <summary>
		///   <para>Use this function to get the name of a built in audio driver.</para>
		/// </summary>
		/// <param name="index">
		///   <para> the index of the audio driver; the value ranges from 0 to <see cref="SDL_GetNumAudioDrivers" />() - 1. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the audio driver at the requested index,or NULL if an invalid index was specified.</para>
		/// </returns>
		/// <remarks>
		///   <para>The list of audio drivers is given in the order that they are normallyinitialized by default; the drivers that seem more reasonable to choosefirst (as far as the SDL developers believe) are earlier in the list.</para>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "alsa","coreaudio" or "wasapi". These never have Unicode characters, and are notmeant to be proper names.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumAudioDrivers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetAudioDriver(int index);
		/// </code><para>                                                                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		public static string SDL_GetAudioDriver(int index)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetAudioDriver(index));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetCurrentAudioDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetCurrentAudioDriver();
		/// <summary>
		///   <para>Get the name of the current audio driver.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns the name of the current audio driver or NULL if nodriver has been initialized.</para>
		/// </returns>
		/// <remarks>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "alsa","coreaudio" or "wasapi". These never have Unicode characters, and are notmeant to be proper names.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentAudioDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetCurrentAudioDriver(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		public static string SDL_GetCurrentAudioDriver()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetCurrentAudioDriver());
		}

		/// <summary>
		///   <para>Get a list of currently-connected audio playback devices.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of devices returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AudioDeviceID" /> *) Returns a 0 terminated array ofdevice instance IDs or NULL on error; call <see cref="SDL_GetError" />()for more information. This should be freed with <see cref="SDL_free" />() whenit is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns of list of available devices that play sound, perhaps tospeakers or headphones ("playback" devices). If you want devices thatrecord audio, like a microphone ("recording" devices), use<see cref="SDL_GetAudioRecordingDevices" />() instead.</para>
		///   <para>This only returns a list of physical devices; it will not have any deviceIDs returned by <see cref="SDL_OpenAudioDevice" />().</para>
		///   <para>If this function returns NULL, to signify an error, <c>*count</c> will be set tozero.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenAudioDevice" />
		/// <seealso cref="SDL_GetAudioRecordingDevices" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioPlaybackDevices<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AudioDeviceID * SDL_GetAudioPlaybackDevices(int *count);
		/// </code><para>                                                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAudioPlaybackDevices(out int count);

		/// <summary>
		///   <para>Get a list of currently-connected audio recording devices.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of devices returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AudioDeviceID" /> *) Returns a 0 terminated array ofdevice instance IDs, or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns of list of available devices that record audio, like amicrophone ("recording" devices). If you want devices that play sound,perhaps to speakers or headphones ("playback" devices), use<see cref="SDL_GetAudioPlaybackDevices" />() instead.</para>
		///   <para>This only returns a list of physical devices; it will not have any deviceIDs returned by <see cref="SDL_OpenAudioDevice" />().</para>
		///   <para>If this function returns NULL, to signify an error, <c>*count</c> will be set tozero.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenAudioDevice" />
		/// <seealso cref="SDL_GetAudioPlaybackDevices" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioRecordingDevices<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AudioDeviceID * SDL_GetAudioRecordingDevices(int *count);
		/// </code><para>                                                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAudioRecordingDevices(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetAudioDeviceName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetAudioDeviceName(uint devid);
		/// <summary>
		///   <para>Get the human-readable name of a specific audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the instance ID of the device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the audio device, or NULL on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetAudioPlaybackDevices" />
		/// <seealso cref="SDL_GetAudioRecordingDevices" />
		/// <seealso cref="SDL_GetDefaultAudioInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioDeviceName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);
		/// </code><para>                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		public static string SDL_GetAudioDeviceName(uint devid)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetAudioDeviceName(devid));
		}

		/// <summary>
		///   <para>Get the current audio format of a specific audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the instance ID of the device to query.                             </para>
		/// </param>
		/// <param name="spec">
		///   <para> on return, will be filled with device details.                      </para>
		/// </param>
		/// <param name="sample_frames">
		///   <para> pointer to store device buffer size, in sample frames. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>For an opened device, this will report the format the device is currentlyusing. If the device isn't yet opened, this will report the device'spreferred format (or a reasonable default if this can't be determined).</para>
		///   <para>You may also specify<see cref="SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK" /> or<see cref="SDL_AUDIO_DEVICE_DEFAULT_RECORDING" />here, which is useful for getting a reasonable recommendation beforeopening the system-recommended default device.</para>
		///   <para>You can also use this to request the current device buffer size. This isspecified in sample frames and represents the amount of data SDL will feedto the physical hardware in each chunk. This can be converted tomilliseconds of audio with the following equation:</para>
		///   <para>
		///     <c>ms = (int) ((((Sint64) frames) * 1000) / spec.freq);</c>
		///   </para>
		///   <para>Buffer size is only important if you need low-level control over the audioplayback timing. Most apps do not need this.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioDeviceFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec *spec, int *sample_frames);
		/// </code><para>                                                                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetAudioDeviceFormat(uint devid, out SDL_AudioSpec spec, out int sample_frames);

		/// <summary>
		///   <para>Get the current channel map of an audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the instance ID of the device to query.                       </para>
		/// </param>
		/// <param name="count">
		///   <para> On output, set to number of channels in the map. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(int *) Returns an array of the current channel mapping, with as manyelements as the current output spec's channels, or NULL if default. Thisshould be freed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Channel maps are optional; most things do not need them, instead passingdata in the <see href="https://wiki.libsdl.org/SDL3/CategoryAudio#channel-layouts">order that SDL expects</see>.</para>
		///   <para>Audio devices usually have no remapping applied. This is represented byreturning NULL, and does not signify an error.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamInputChannelMap" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioDeviceChannelMap<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int * SDL_GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, int *count);
		/// </code><para>                                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAudioDeviceChannelMap(uint devid, out int count);

		/// <summary>
		///   <para>Open a specific audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the device instance id to open, or <see cref="SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK" /> or <see cref="SDL_AUDIO_DEVICE_DEFAULT_RECORDING" /> for the most reasonable default device. </para>
		/// </param>
		/// <param name="spec">
		///   <para> the requested device configuration. Can be NULL to use reasonable defaults.                                                                                                                                                   </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AudioDeviceID" />) Returns the device ID on successor 0 on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can open both playback and recording devices through this function.Playback devices will take data from bound audio streams, mix it, and sendit to the hardware. Recording devices will feed any bound audio streamswith a copy of any incoming data.</para>
		///   <para>An opened audio device starts out with no audio streams bound. To startaudio playing, bind a stream and supply audio data to it. Unlike SDL2,there is no audio callback; you only bind audio streams and make sure theyhave data flowing into them (however, you can simulate SDL2's semanticsfairly closely by using<see cref="SDL_OpenAudioDeviceStream" /> instead of thisfunction).</para>
		///   <para>If you don't care about opening a specific device, pass a <c>devid</c> of either<see cref="SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK" /> or<see cref="SDL_AUDIO_DEVICE_DEFAULT_RECORDING" />.In this case, SDL will try to pick the most reasonable default, and mayalso switch between physical devices seamlessly later, if the mostreasonable default changes during the lifetime of this opened device (userchanged the default in the OS's system preferences, the default gotunplugged so the system jumped to a new default, the user plugged inheadphones on a mobile device, etc). Unless you have a good reason tochoose a specific device, this is probably what you want.</para>
		///   <para>You may request a specific format for the audio device, but there is nopromise the device will honor that request for several reasons. As such,it's only meant to be a hint as to what data your app will provide. Audiostreams will accept data in whatever format you specify and manageconversion for you as appropriate.<see cref="SDL_GetAudioDeviceFormat" /> can tell you thepreferred format for the device before opening and the actual format thedevice is using after opening.</para>
		///   <para>It's legal to open the same device ID more than once; each successful openwill generate a new logical <see cref="SDL_AudioDeviceID" /> that ismanaged separately from others on the same physical device. This allowslibraries to open a device separately from the main app and bind its ownstreams without conflicting.</para>
		///   <para>It is also legal to open a device ID returned by a previous call to thisfunction; doing so just creates another logical device on the same physicaldevice. This may be useful for making logical groupings of audio streams.</para>
		///   <para>This function returns the opened device ID on success. This is a new,unique <see cref="SDL_AudioDeviceID" /> that represents a logicaldevice.</para>
		///   <para>Some backends might offer arbitrary devices (for example, a networked audioprotocol that can connect to an arbitrary server). For these, as a changefrom SDL2, you should open a default device ID and use an SDL hint tospecify the target if you care, or otherwise let the backend figure out areasonable default. Most backends don't offer anything like this, and oftenthis would be an end user setting an environment variable for their customneed, and not something an application should specifically manage.</para>
		///   <para>When done with an audio device, possibly at the end of the app's life, oneshould call <see cref="SDL_CloseAudioDevice" />() on the returneddevice id.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseAudioDevice" />
		/// <seealso cref="SDL_GetAudioDeviceFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenAudioDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AudioDeviceID SDL_OpenAudioDevice(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec);
		/// </code><para>                                                                                                                                                                                                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>
		/// SDL_AudioSpec want;
		/// SDL_AudioDeviceID dev;
		/// 
		/// SDL_memset(&amp;want, 0, sizeof(want)); /* or SDL_zero(want) */
		/// want.format = SDL_AUDIO_F32;
		/// want.channels = 2;
		/// want.freq = 48000;
		/// 
		/// dev = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &amp;want);
		/// if (dev == 0) {
		///     SDL_Log("Failed to open audio: %s", SDL_GetError());
		/// } else {
		///     SDL_ResumeAudioDevice(dev); /* start audio playing. */
		///     SDL_Delay(5000);  // let device play for 5 seconds
		///     SDL_CloseAudioDevice(dev);
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_OpenAudioDevice(uint devid, ref SDL_AudioSpec spec);

		/// <summary>
		///   <para>Use this function to pause audio playback on a specified device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device opened by <see cref="SDL_OpenAudioDevice" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function pauses audio processing for a given device. Any bound audiostreams will not progress, and no audio will be generated. Pausing onedevice does not prevent other unpaused devices from running.</para>
		///   <para>Unlike in SDL2, audio devices start in an unpaused state, since an apphas to bind a stream before any audio will flow. Pausing a paused device isa legal no-op.</para>
		///   <para>Pausing a device can be useful to halt all audio without unbinding all theaudio streams. This might be useful while a game is paused, or a level isloading, etc.</para>
		///   <para>Physical devices can not be paused or unpaused, only logical devicescreated through <see cref="SDL_OpenAudioDevice" />() can be.</para>
		/// </remarks>
		/// <seealso cref="SDL_ResumeAudioDevice" />
		/// <seealso cref="SDL_AudioDevicePaused" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PauseAudioDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PauseAudioDevice(SDL_AudioDeviceID dev);
		/// </code><para>                                                                  </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PauseAudioDevice(uint dev);

		/// <summary>
		///   <para>Use this function to unpause audio playback on a specified device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device opened by <see cref="SDL_OpenAudioDevice" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function unpauses audio processing for a given device that haspreviously been paused with <see cref="SDL_PauseAudioDevice" />().Once unpaused, any bound audio streams will begin to progress again, andaudio can be generated.</para>
		///   <para>Unlike in SDL2, audio devices start in an unpaused state, since an apphas to bind a stream before any audio will flow. Unpausing an unpauseddevice is a legal no-op.</para>
		///   <para>Physical devices can not be paused or unpaused, only logical devicescreated through <see cref="SDL_OpenAudioDevice" />() can be.</para>
		/// </remarks>
		/// <seealso cref="SDL_AudioDevicePaused" />
		/// <seealso cref="SDL_PauseAudioDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResumeAudioDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);
		/// </code><para>                                                                  </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ResumeAudioDevice(uint dev);

		/// <summary>
		///   <para>Use this function to query if an audio device is paused.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device opened by <see cref="SDL_OpenAudioDevice" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if device is valid and paused, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Unlike in SDL2, audio devices start in an unpaused state, since an apphas to bind a stream before any audio will flow.</para>
		///   <para>Physical devices can not be paused or unpaused, only logical devicescreated through <see cref="SDL_OpenAudioDevice" />() can be.Physical and invalid device IDs will report themselves as unpaused here.</para>
		/// </remarks>
		/// <seealso cref="SDL_PauseAudioDevice" />
		/// <seealso cref="SDL_ResumeAudioDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AudioDevicePaused<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_AudioDevicePaused(SDL_AudioDeviceID dev);
		/// </code><para>                                                                  </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_AudioDevicePaused(uint dev);

		/// <summary>
		///   <para>Get the gain of an audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the audio device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the gain of the device or -1.0f on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The gain of a device is its volume; a larger gain means a louder output,with a gain of zero being silence.</para>
		///   <para>Audio devices default to a gain of 1.0f (no change in output).</para>
		///   <para>Physical devices may not have their gain changed, only logical devices, andthis function will always return -1.0f when used on physical devices.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioDeviceGain" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioDeviceGain<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetAudioDeviceGain(SDL_AudioDeviceID devid);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetAudioDeviceGain(uint devid);

		/// <summary>
		///   <para>Change the gain of an audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the audio device on which to change gain.     </para>
		/// </param>
		/// <param name="gain">
		///   <para> the gain. 1.0f is no change, 0.0f is silence. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The gain of a device is its volume; a larger gain means a louder output,with a gain of zero being silence.</para>
		///   <para>Audio devices default to a gain of 1.0f (no change in output).</para>
		///   <para>Physical devices may not have their gain changed, only logical devices, andthis function will always return false when used on physical devices. Whileit might seem attractive to adjust several logical devices at once in thisway, it would allow an app or library to interfere with another portion ofthe program's otherwise-isolated devices.</para>
		///   <para>This is applied, along with any per-audiostream gain, during playback tothe hardware, and can be continuously changed to create various effects. Onrecording devices, this will adjust the gain before passing the data intoan audiostream; that recording audiostream can then adjust its gain furtherwhen outputting the data elsewhere, if it likes, but that second gain isnot applied until the data leaves the audiostream again.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioDeviceGain" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioDeviceGain<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain);
		/// </code><para>                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioDeviceGain(uint devid, float gain);

		/// <summary>
		///   <para>Close a previously-opened audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> an audio device id previously returned by <see cref="SDL_OpenAudioDevice" />(). </para>
		/// </param>
		/// <remarks>
		///   <para>The application should close open audio devices once they are no longerneeded.</para>
		///   <para>This function may block briefly while pending audio data is played by thehardware, so that applications don't drop the last buffer of data theysupplied if terminating immediately afterwards.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenAudioDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseAudioDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CloseAudioDevice(SDL_AudioDeviceID devid);
		/// </code><para>                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>extern SDL_AudioSpec want;
		/// SDL_AudioDeviceID devid = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &amp;want);
		/// if (devid != 0) {
		///     SDL_ResumeAudioDevice(devid);
		///     SDL_Delay(5000);  // let device play for 5 seconds
		///     SDL_CloseAudioDevice(devid);
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CloseAudioDevice(uint devid);

		/// <summary>
		///   <para>Bind a list of audio streams to an audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> an audio device to bind a stream to.          </para>
		/// </param>
		/// <param name="streams">
		///   <para> an array of audio streams to bind.            </para>
		/// </param>
		/// <param name="num_streams">
		///   <para> number streams listed in the <c>streams</c> array. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Audio data will flow through any bound streams. For a playback device, datafor all bound streams will be mixed together and fed to the device. For arecording device, a copy of recorded data will be provided to each boundstream.</para>
		///   <para>Audio streams can only be bound to an open device. This operation isatomic--all streams bound in the same call will start processing at thesame time, so they can stay in sync. Also: either all streams will be boundor none of them will be.</para>
		///   <para>It is an error to bind an already-bound stream; it must be explicitlyunbound first.</para>
		///   <para>Binding a stream to a device will set its output format for playbackdevices, and its input format for recording devices, so they match thedevice's settings. The caller is welcome to change the other end of thestream's format at any time.</para>
		/// </remarks>
		/// <seealso cref="SDL_BindAudioStreams" />
		/// <seealso cref="SDL_UnbindAudioStream" />
		/// <seealso cref="SDL_GetAudioStreamDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindAudioStreams<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream **streams, int num_streams);
		/// </code><para>                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BindAudioStreams(uint devid, IntPtr[] streams, int num_streams);

		/// <summary>
		///   <para>Bind a single audio stream to an audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> an audio device to bind a stream to. </para>
		/// </param>
		/// <param name="stream">
		///   <para> an audio stream to bind to a device. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is a convenience function, equivalent to calling<c>SDL_BindAudioStreams(devid, &amp;stream, 1)</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_BindAudioStreams" />
		/// <seealso cref="SDL_UnbindAudioStream" />
		/// <seealso cref="SDL_GetAudioStreamDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream *stream);
		/// </code><para>                                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BindAudioStream(uint devid, IntPtr stream);

		/// <summary>
		///   <para>Unbind a list of audio streams from their audio devices.</para>
		/// </summary>
		/// <param name="streams">
		///   <para> an array of audio streams to unbind.          </para>
		/// </param>
		/// <param name="num_streams">
		///   <para> number streams listed in the <c>streams</c> array. </para>
		/// </param>
		/// <remarks>
		///   <para>The streams being unbound do not all have to be on the same device. Allstreams on the same device will be unbound atomically (data will stopflowing through all unbound streams on the same device at the same time).</para>
		///   <para>Unbinding a stream that isn't bound to a device is a legal no-op.</para>
		/// </remarks>
		/// <seealso cref="SDL_BindAudioStreams" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnbindAudioStreams<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnbindAudioStreams(SDL_AudioStream **streams, int num_streams);
		/// </code><para>                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnbindAudioStreams(IntPtr[] streams, int num_streams);

		/// <summary>
		///   <para>Unbind a single audio stream from its audio device.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> an audio stream to unbind from a device. </para>
		/// </param>
		/// <remarks>
		///   <para>This is a convenience function, equivalent to calling<c>SDL_UnbindAudioStreams(&amp;stream, 1)</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_BindAudioStream" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnbindAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnbindAudioStream(SDL_AudioStream *stream);
		/// </code><para>                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnbindAudioStream(IntPtr stream);

		/// <summary>
		///   <para>Query an audio stream for its currently-bound device.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AudioDeviceID" />) Returns the bound audio device, or0 if not bound or invalid.</para>
		/// </returns>
		/// <remarks>
		///   <para>This reports the audio device that an audio stream is currently bound to.</para>
		///   <para>If not bound, or invalid, this returns zero, which is not a valid deviceID.</para>
		/// </remarks>
		/// <seealso cref="SDL_BindAudioStream" />
		/// <seealso cref="SDL_BindAudioStreams" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream *stream);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetAudioStreamDevice(IntPtr stream);

		/// <summary>
		///   <para>Create a new audio stream.</para>
		/// </summary>
		/// <param name="src_spec">
		///   <para> the format details of the input audio.  </para>
		/// </param>
		/// <param name="dst_spec">
		///   <para> the format details of the output audio. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AudioStream" /> *) Returns a new audio stream onsuccess or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_PutAudioStreamData" />
		/// <seealso cref="SDL_GetAudioStreamData" />
		/// <seealso cref="SDL_GetAudioStreamAvailable" />
		/// <seealso cref="SDL_FlushAudioStream" />
		/// <seealso cref="SDL_ClearAudioStream" />
		/// <seealso cref="SDL_SetAudioStreamFormat" />
		/// <seealso cref="SDL_DestroyAudioStream" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AudioStream * SDL_CreateAudioStream(const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);
		/// </code><para>                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateAudioStream(ref SDL_AudioSpec src_spec, ref SDL_AudioSpec dst_spec);

		/// <summary>
		///   <para>Get the properties associated with an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetAudioStreamProperties(SDL_AudioStream *stream);
		/// </code><para>                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetAudioStreamProperties(IntPtr stream);

		/// <summary>
		///   <para>Query the current format of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to query.         </para>
		/// </param>
		/// <param name="src_spec">
		///   <para> where to store the input audio format; ignored if NULL.  </para>
		/// </param>
		/// <param name="dst_spec">
		///   <para> where to store the output audio format; ignored if NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetAudioStreamFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetAudioStreamFormat(SDL_AudioStream *stream, SDL_AudioSpec *src_spec, SDL_AudioSpec *dst_spec);
		/// </code><para>                                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetAudioStreamFormat(IntPtr stream, out SDL_AudioSpec src_spec, out SDL_AudioSpec dst_spec);

		/// <summary>
		///   <para>Change the input and output formats of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the stream the format is being changed.                         </para>
		/// </param>
		/// <param name="src_spec">
		///   <para> the new format of the audio input; if NULL, it is not changed.  </para>
		/// </param>
		/// <param name="dst_spec">
		///   <para> the new format of the audio output; if NULL, it is not changed. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Future calls to and<see cref="SDL_GetAudioStreamAvailable" /> and<see cref="SDL_GetAudioStreamData" /> will reflect the newformat, and future calls to<see cref="SDL_PutAudioStreamData" /> must provide data in thenew input formats.</para>
		///   <para>Data that was previously queued in the stream will still be operated on inthe format that was current when it was added, which is to say you can putthe end of a sound file in one format to a stream, change formats for thenext sound file, and start putting that new data while the previous soundfile is still queued, and everything will still play back correctly.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioStreamFormat" />
		/// <seealso cref="SDL_SetAudioStreamFrequencyRatio" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamFormat(SDL_AudioStream *stream, const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);
		/// </code><para>                                                                 </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamFormat(IntPtr stream, ref SDL_AudioSpec src_spec, ref SDL_AudioSpec dst_spec);

		/// <summary>
		///   <para>Get the frequency ratio of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the frequency ratio of the stream or 0.0 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetAudioStreamFrequencyRatio" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamFrequencyRatio<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream *stream);
		/// </code><para>                                                  </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetAudioStreamFrequencyRatio(IntPtr stream);

		/// <summary>
		///   <para>Change the frequency ratio of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the stream the frequency ratio is being changed.                        </para>
		/// </param>
		/// <param name="ratio">
		///   <para> the frequency ratio. 1.0 is normal speed. Must be between 0.01 and 100. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The frequency ratio is used to adjust the rate at which input data isconsumed. Changing this effectively modifies the speed and pitch of theaudio. A value greater than 1.0 will play the audio faster, and at a higherpitch. A value less than 1.0 will play the audio slower, and at a lowerpitch.</para>
		///   <para>This is applied during <see cref="SDL_GetAudioStreamData" />,and can be continuously changed to create various effects.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioStreamFrequencyRatio" />
		/// <seealso cref="SDL_SetAudioStreamFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamFrequencyRatio<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream *stream, float ratio);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamFrequencyRatio(IntPtr stream, float ratio);

		/// <summary>
		///   <para>Get the gain of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the gain of the stream or -1.0f on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The gain of a stream is its volume; a larger gain means a louder output,with a gain of zero being silence.</para>
		///   <para>Audio streams default to a gain of 1.0f (no change in output).</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamGain" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamGain<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetAudioStreamGain(SDL_AudioStream *stream);
		/// </code><para>                                                  </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetAudioStreamGain(IntPtr stream);

		/// <summary>
		///   <para>Change the gain of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the stream on which the gain is being changed. </para>
		/// </param>
		/// <param name="gain">
		///   <para> the gain. 1.0f is no change, 0.0f is silence.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The gain of a stream is its volume; a larger gain means a louder output,with a gain of zero being silence.</para>
		///   <para>Audio streams default to a gain of 1.0f (no change in output).</para>
		///   <para>This is applied during <see cref="SDL_GetAudioStreamData" />,and can be continuously changed to create various effects.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioStreamGain" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamGain<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamGain(SDL_AudioStream *stream, float gain);
		/// </code><para>                                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamGain(IntPtr stream, float gain);

		/// <summary>
		///   <para>Get the current input channel map of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to query.              </para>
		/// </param>
		/// <param name="count">
		///   <para> On output, set to number of channels in the map. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(int *) Returns an array of the current channel mapping, with as manyelements as the current output spec's channels, or NULL if default. Thisshould be freed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Channel maps are optional; most things do not need them, instead passingdata in the <see href="https://wiki.libsdl.org/SDL3/CategoryAudio#channel-layouts">order that SDL expects</see>.</para>
		///   <para>Audio streams default to no remapping applied. This is represented byreturning NULL, and does not signify an error.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamInputChannelMap" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamInputChannelMap<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int * SDL_GetAudioStreamInputChannelMap(SDL_AudioStream *stream, int *count);
		/// </code><para>                                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAudioStreamInputChannelMap(IntPtr stream, out int count);

		/// <summary>
		///   <para>Get the current output channel map of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to query.              </para>
		/// </param>
		/// <param name="count">
		///   <para> On output, set to number of channels in the map. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(int *) Returns an array of the current channel mapping, with as manyelements as the current output spec's channels, or NULL if default. Thisshould be freed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Channel maps are optional; most things do not need them, instead passingdata in the <see href="https://wiki.libsdl.org/SDL3/CategoryAudio#channel-layouts">order that SDL expects</see>.</para>
		///   <para>Audio streams default to no remapping applied. This is represented byreturning NULL, and does not signify an error.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamInputChannelMap" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamOutputChannelMap<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int * SDL_GetAudioStreamOutputChannelMap(SDL_AudioStream *stream, int *count);
		/// </code><para>                                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetAudioStreamOutputChannelMap(IntPtr stream, out int count);

		/// <summary>
		///   <para>Set the current input channel map of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to change. </para>
		/// </param>
		/// <param name="chmap">
		///   <para> the new channel map, NULL to reset to default.    </para>
		/// </param>
		/// <param name="count">
		///   <para> The number of channels in the map.                </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Channel maps are optional; most things do not need them, instead passingdata in the <see href="https://wiki.libsdl.org/SDL3/CategoryAudio#channel-layouts">order that SDL expects</see>.</para>
		///   <para>The input channel map reorders data that is added to a stream via<see cref="SDL_PutAudioStreamData" />. Future calls to<see cref="SDL_PutAudioStreamData" /> must provide data in thenew channel order.</para>
		///   <para>Each item in the array represents an input channel, and its value is thechannel that it should be remapped to. To reverse a stereo signal's leftand right values, you'd have an array of <c>{ 1, 0 }</c>. It is legal to remapmultiple channels to the same thing, so <c>{ 1, 1 }</c> would duplicate theright channel to both channels of a stereo signal. You cannot change thenumber of channels through a channel map, just reorder them.</para>
		///   <para>Data that was previously queued in the stream will still be operated on inthe order that was current when it was added, which is to say you can putthe end of a sound file in one order to a stream, change orders for thenext sound file, and start putting that new data while the previous soundfile is still queued, and everything will still play back correctly.</para>
		///   <para>Audio streams default to no remapping applied. Passing a NULL channel mapis legal, and turns off remapping.</para>
		///   <para>SDL will copy the channel map; the caller does not have to save this arrayafter this call.</para>
		///   <para>If <c>count</c> is not equal to the current number of channels in the audiostream's format, this will fail. This is a safety measure to make sure a arace condition hasn't changed the format while you this call is setting thechannel map.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamInputChannelMap" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamInputChannelMap<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamInputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);
		/// </code><para>                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running. Don't change the stream's format tohave a different number of channels from a a different thread at the sametime, though!</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamInputChannelMap(IntPtr stream, int[] chmap, int count);

		/// <summary>
		///   <para>Set the current output channel map of an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the <see cref="SDL_AudioStream" /> to change. </para>
		/// </param>
		/// <param name="chmap">
		///   <para> the new channel map, NULL to reset to default.    </para>
		/// </param>
		/// <param name="count">
		///   <para> The number of channels in the map.                </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Channel maps are optional; most things do not need them, instead passingdata in the <see href="https://wiki.libsdl.org/SDL3/CategoryAudio#channel-layouts">order that SDL expects</see>.</para>
		///   <para>The output channel map reorders data that leaving a stream via<see cref="SDL_GetAudioStreamData" />.</para>
		///   <para>Each item in the array represents an output channel, and its value is thechannel that it should be remapped to. To reverse a stereo signal's leftand right values, you'd have an array of <c>{ 1, 0 }</c>. It is legal to remapmultiple channels to the same thing, so <c>{ 1, 1 }</c> would duplicate theright channel to both channels of a stereo signal. You cannot change thenumber of channels through a channel map, just reorder them.</para>
		///   <para>The output channel map can be changed at any time, as output remapping isapplied during <see cref="SDL_GetAudioStreamData" />.</para>
		///   <para>Audio streams default to no remapping applied. Passing a NULL channel mapis legal, and turns off remapping.</para>
		///   <para>SDL will copy the channel map; the caller does not have to save this arrayafter this call.</para>
		///   <para>If <c>count</c> is not equal to the current number of channels in the audiostream's format, this will fail. This is a safety measure to make sure a arace condition hasn't changed the format while you this call is setting thechannel map.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamInputChannelMap" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamOutputChannelMap<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamOutputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);
		/// </code><para>                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as it holds astream-specific mutex while running. Don't change the stream's format tohave a different number of channels from a a different thread at the sametime, though!</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamOutputChannelMap(IntPtr stream, int[] chmap, int count);

		/// <summary>
		///   <para>Add data to the stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the stream the audio data is being added to. </para>
		/// </param>
		/// <param name="buf">
		///   <para> a pointer to the audio data to add.          </para>
		/// </param>
		/// <param name="len">
		///   <para> the number of bytes to write to the stream.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This data must match the format/channels/samplerate specified in the latestcall to <see cref="SDL_SetAudioStreamFormat" />, or the formatspecified when creating the stream if it hasn't been changed.</para>
		///   <para>Note that this call simply copies the unconverted data for later. This isdifferent than SDL2, where data was converted during the Put call and theGet call would just dequeue the previously-converted data.</para>
		/// </remarks>
		/// <seealso cref="SDL_ClearAudioStream" />
		/// <seealso cref="SDL_FlushAudioStream" />
		/// <seealso cref="SDL_GetAudioStreamData" />
		/// <seealso cref="SDL_GetAudioStreamQueued" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PutAudioStreamData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PutAudioStreamData(SDL_AudioStream *stream, const void *buf, int len);
		/// </code><para>                                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, but if the stream has acallback set, the caller might need to manage extra locking.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PutAudioStreamData(IntPtr stream, IntPtr buf, int len);

		/// <summary>
		///   <para>Get converted/resampled data from the stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the stream the audio is being requested from. </para>
		/// </param>
		/// <param name="buf">
		///   <para> a buffer to fill with audio data.             </para>
		/// </param>
		/// <param name="len">
		///   <para> the maximum number of bytes to fill.          </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of bytes read from the stream or -1 on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The input/output data format/channels/samplerate is specified when creatingthe stream, and can be changed after creation by calling<see cref="SDL_SetAudioStreamFormat" />.</para>
		///   <para>Note that any conversion and resampling necessary is done during this call,and <see cref="SDL_PutAudioStreamData" /> simply queuesunconverted data for later. This is different than SDL2, where that workwas done while inputting new data to the stream and requesting the outputjust copied the converted data.</para>
		/// </remarks>
		/// <seealso cref="SDL_ClearAudioStream" />
		/// <seealso cref="SDL_GetAudioStreamAvailable" />
		/// <seealso cref="SDL_PutAudioStreamData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetAudioStreamData(SDL_AudioStream *stream, void *buf, int len);
		/// </code><para>                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, but if the stream has acallback set, the caller might need to manage extra locking.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetAudioStreamData(IntPtr stream, IntPtr buf, int len);

		/// <summary>
		///   <para>Get the number of converted/resampled bytes available.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of converted/resampled bytes available or -1 onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The stream may be buffering data behind the scenes until it has enough toresample correctly, so this number might be lower than what you expect, oreven be zero. Add more data or flush the stream if you need the data now.</para>
		///   <para>If the stream has so much data that it would overflow an int, the returnvalue is clamped to a maximum value, but no queued data is lost; if thereare gigabytes of data queued, the app might need to read some of it with<see cref="SDL_GetAudioStreamData" /> before this function'sreturn value is no longer clamped.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioStreamData" />
		/// <seealso cref="SDL_PutAudioStreamData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamAvailable<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetAudioStreamAvailable(SDL_AudioStream *stream);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetAudioStreamAvailable(IntPtr stream);

		/// <summary>
		///   <para>Get the number of bytes currently queued.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of bytes queued or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is the number of bytes put into a stream as input, not the number thatcan be retrieved as output. Because of several details, it's not possibleto calculate one number directly from the other. If you need to know howmuch usable data can be retrieved right now, you should use<see cref="SDL_GetAudioStreamAvailable" />() and not thisfunction.</para>
		///   <para>Note that audio streams can change their input format at any time, even ifthere is still data queued in a different format, so the returned bytecount will not necessarily match the number of sample frames available.Users of this API should be aware of format changes they make when feedinga stream and plan accordingly.</para>
		///   <para>Queued data is not converted until it is consumed by<see cref="SDL_GetAudioStreamData" />, so this value should berepresentative of the exact data that was put into the stream.</para>
		///   <para>If the stream has so much data that it would overflow an int, the returnvalue is clamped to a maximum value, but no queued data is lost; if thereare gigabytes of data queued, the app might need to read some of it with<see cref="SDL_GetAudioStreamData" /> before this function'sreturn value is no longer clamped.</para>
		/// </remarks>
		/// <seealso cref="SDL_PutAudioStreamData" />
		/// <seealso cref="SDL_ClearAudioStream" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioStreamQueued<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetAudioStreamQueued(SDL_AudioStream *stream);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetAudioStreamQueued(IntPtr stream);

		/// <summary>
		///   <para>Tell the stream that you're done sending data, and anything being buffered should be converted/resampled and made available immediately.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to flush. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>It is legal to add more data to a stream after flushing, but there may beaudio gaps in the output. Generally this is intended to signal the end ofinput, so the complete output becomes available.</para>
		/// </remarks>
		/// <seealso cref="SDL_PutAudioStreamData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlushAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FlushAudioStream(SDL_AudioStream *stream);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FlushAudioStream(IntPtr stream);

		/// <summary>
		///   <para>Clear any pending data in the stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to clear. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This drops any queued data, so there will be nothing to read from thestream until more is added.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioStreamAvailable" />
		/// <seealso cref="SDL_GetAudioStreamData" />
		/// <seealso cref="SDL_GetAudioStreamQueued" />
		/// <seealso cref="SDL_PutAudioStreamData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClearAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClearAudioStream(SDL_AudioStream *stream);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ClearAudioStream(IntPtr stream);

		/// <summary>
		///   <para>Use this function to pause audio playback on the audio device associated with an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream associated with the audio device to pause. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function pauses audio processing for a given device. Any bound audiostreams will not progress, and no audio will be generated. Pausing onedevice does not prevent other unpaused devices from running.</para>
		///   <para>Pausing a device can be useful to halt all audio without unbinding all theaudio streams. This might be useful while a game is paused, or a level isloading, etc.</para>
		/// </remarks>
		/// <seealso cref="SDL_ResumeAudioStreamDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PauseAudioStreamDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PauseAudioStreamDevice(SDL_AudioStream *stream);
		/// </code><para>                                                             </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PauseAudioStreamDevice(IntPtr stream);

		/// <summary>
		///   <para>Use this function to unpause audio playback on the audio device associated with an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream associated with the audio device to resume. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function unpauses audio processing for a given device that haspreviously been paused. Once unpaused, any bound audio streams will beginto progress again, and audio can be generated.</para>
		/// </remarks>
		/// <seealso cref="SDL_PauseAudioStreamDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResumeAudioStreamDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ResumeAudioStreamDevice(SDL_AudioStream *stream);
		/// </code><para>                                                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ResumeAudioStreamDevice(IntPtr stream);

		/// <summary>
		///   <para>Lock an audio stream for serialized access.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to lock. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Each <see cref="SDL_AudioStream" /> has an internal mutex it uses toprotect its data structures from threading conflicts. This function allowsan app to lock that mutex, which could be useful if registering callbackson this stream.</para>
		///   <para>One does not need to lock a stream to use in it most cases, as the streammanages this lock internally. However, this lock is held during callbacks,which may run from arbitrary threads at any time, so if an app needs toprotect shared data during those callbacks, locking the stream guaranteesthat the callback is not running while the lock is held.</para>
		///   <para>As this is just a wrapper over <see cref="SDL_LockMutex" /> for aninternal lock; it has all the same attributes (recursive locks are allowed,etc).</para>
		/// </remarks>
		/// <seealso cref="SDL_UnlockAudioStream" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LockAudioStream(SDL_AudioStream *stream);
		/// </code><para>                           </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_LockAudioStream(IntPtr stream);

		/// <summary>
		///   <para>Unlock an audio stream for serialized access.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to unlock. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This unlocks an audio stream after a call to<see cref="SDL_LockAudioStream" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockAudioStream" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UnlockAudioStream(SDL_AudioStream *stream);
		/// </code><para>                             </para><br /><b>## Thread Safety ##</b><para>You should only call this from the same thread that previously called<see cref="SDL_LockAudioStream" />.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UnlockAudioStream(IntPtr stream);

		/// <summary>
		///   <para>A callback that fires when data passes through an <see cref="SDL_AudioStream" />.</para>
		/// </summary>
		/// <remarks>
		///   <para>Apps can (optionally) register a callback with an audio stream that iscalled when data is added with<see cref="SDL_PutAudioStreamData" />, or requested with<see cref="SDL_GetAudioStreamData" />.</para>
		///   <para>Two values are offered here: one is the amount of additional data needed tosatisfy the immediate request (which might be zero if the stream alreadyhas enough data queued) and the other is the total amount being requested.In a Get call triggering a Put callback, these values can be different. Ina Put call triggering a Get callback, these values are always the same.</para>
		///   <para>Byte counts might be slightly overestimated due to buffering or resampling,and may change from call to call.</para>
		///   <para>This callback is not required to do anything. Generally this is useful foradding/reading data on demand, and the app will often put/get data asappropriate, but the system goes on with the data currently available to itif this callback does nothing.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamGetCallback" />
		/// <seealso cref="SDL_SetAudioStreamPutCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AudioStreamCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_AudioStreamCallback)(void *userdata, SDL_AudioStream *stream, int additional_amount, int total_amount);
		/// </code><br /><b>## Thread Safety ##</b><para>This callbacks may run from any thread, so if you need to protect shareddata, you should use <see cref="SDL_LockAudioStream" /> toserialize access; this lock will be held before your callback is called, soyour callback does not need to manage the lock explicitly.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_AudioStreamCallback(IntPtr userdata, IntPtr stream, int additional_amount, int total_amount);

		/// <summary>
		///   <para>Set a callback that runs when data is requested from an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to set the new callback on.                              </para>
		/// </param>
		/// <param name="callback">
		///   <para> the new callback function to call when data is requested from the stream. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> an opaque pointer provided to the callback for its own personal use.      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information. This only fails if<c>stream</c> is NULL.</para>
		/// </returns>
		/// <remarks>
		///   <para>This callback is called before data is obtained from the stream, givingthe callback the chance to add more on-demand.</para>
		///   <para>The callback can (optionally) call<see cref="SDL_PutAudioStreamData" />() to add more audio to thestream during this call; if needed, the request that triggered thiscallback will obtain the new data immediately.</para>
		///   <para>The callback's <c>approx_request</c> argument is roughly how many bytes ofunconverted data (in the stream's input format) is needed by the caller,although this may overestimate a little for safety. This takes into accounthow much is already in the stream and only asks for any extra necessary toresolve the request, which means the callback may be asked for zero bytes,and a different amount on each call.</para>
		///   <para>The callback is not required to supply exact amounts; it is allowed tosupply too much or too little or none at all. The caller will get what'savailable, up to the amount they requested, regardless of this callback'soutcome.</para>
		///   <para>Clearing or flushing an audio stream does not call this callback.</para>
		///   <para>This function obtains the stream's lock, which means any existing callback(get or put) in progress will finish running before setting the newcallback.</para>
		///   <para>Setting a NULL function turns off the callback.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamPutCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamGetCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamGetCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);
		/// </code><para>                                                                           </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamGetCallback(IntPtr stream, SDL_AudioStreamCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>Set a callback that runs when data is added to an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to set the new callback on.                         </para>
		/// </param>
		/// <param name="callback">
		///   <para> the new callback function to call when data is added to the stream.  </para>
		/// </param>
		/// <param name="userdata">
		///   <para> an opaque pointer provided to the callback for its own personal use. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information. This only fails if<c>stream</c> is NULL.</para>
		/// </returns>
		/// <remarks>
		///   <para>This callback is called after the data is added to the stream, giving thecallback the chance to obtain it immediately.</para>
		///   <para>The callback can (optionally) call<see cref="SDL_GetAudioStreamData" />() to obtain audio from thestream during this call.</para>
		///   <para>The callback's <c>approx_request</c> argument is how many bytes of converteddata (in the stream's output format) was provided by the caller, althoughthis may underestimate a little for safety. This value might be less thanwhat is currently available in the stream, if data was already there, andmight be less than the caller provided if the stream needs to keep a bufferto aid in resampling. Which means the callback may be provided with zerobytes, and a different amount on each call.</para>
		///   <para>The callback may call<see cref="SDL_GetAudioStreamAvailable" /> to see the totalamount currently available to read from the stream, instead of the totalprovided by the current call.</para>
		///   <para>The callback is not required to obtain all data. It is allowed to read lessor none at all. Anything not read now simply remains in the stream forlater access.</para>
		///   <para>Clearing or flushing an audio stream does not call this callback.</para>
		///   <para>This function obtains the stream's lock, which means any existing callback(get or put) in progress will finish running before setting the newcallback.</para>
		///   <para>Setting a NULL function turns off the callback.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioStreamGetCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioStreamPutCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioStreamPutCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);
		/// </code><para>                                                                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioStreamPutCallback(IntPtr stream, SDL_AudioStreamCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>Free an audio stream.</para>
		/// </summary>
		/// <param name="stream">
		///   <para> the audio stream to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>This will release all allocated data, including any audio that is stillqueued. You do not need to manually clear the stream first.</para>
		///   <para>If this stream was bound to an audio device, it is unbound during thiscall. If this stream was created with<see cref="SDL_OpenAudioDeviceStream" />, the audio devicethat was opened alongside this stream's creation will be closed, too.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateAudioStream" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyAudioStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyAudioStream(SDL_AudioStream *stream);
		/// </code><para>                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyAudioStream(IntPtr stream);

		/// <summary>
		///   <para>Convenience function for straightforward audio init for the common case.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> an audio device to open, or <see cref="SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK" /> or <see cref="SDL_AUDIO_DEVICE_DEFAULT_RECORDING" />.                                                                                         </para>
		/// </param>
		/// <param name="spec">
		///   <para> the audio stream's data format. Can be NULL.                                                                                                                                                                                                                            </para>
		/// </param>
		/// <param name="callback">
		///   <para> a callback where the app will provide new data for playback, or receive new data for recording. Can be NULL, in which case the app will need to call <see cref="SDL_PutAudioStreamData" /> or <see cref="SDL_GetAudioStreamData" /> as necessary. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> app-controlled pointer passed to callback. Can be NULL. Ignored if callback is NULL.                                                                                                                                                                                    </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_AudioStream" /> *) Returns an audio stream on success,ready to use, or NULL on failure; call <see cref="SDL_GetError" />() formore information. When done with this stream, call<see cref="SDL_DestroyAudioStream" /> to free resources andclose the device.</para>
		/// </returns>
		/// <remarks>
		///   <para>If all your app intends to do is provide a single source of PCM audio, thisfunction allows you to do all your audio setup in a single call.</para>
		///   <para>This is also intended to be a clean means to migrate apps from SDL2.</para>
		///   <para>This function will open an audio device, create a stream and bind it.Unlike other methods of setup, the audio device will be closed when thisstream is destroyed, so the app can treat the returned<see cref="SDL_AudioStream" /> as the only object needed to manageaudio playback.</para>
		///   <para>Also unlike other functions, the audio device begins paused. This is to mapmore closely to SDL2-style behavior, since there is no extra step here tobind a stream to begin audio flowing. The audio device should be resumedwith <c>SDL_ResumeAudioStreamDevice(stream);</c></para>
		///   <para>This function works with both playback and recording devices.</para>
		///   <para>The <c>spec</c> parameter represents the app's side of the audio stream. Thatis, for recording audio, this will be the output format, and for playingaudio, this will be the input format. If spec is NULL, the system willchoose the format, and the app can use<see cref="SDL_GetAudioStreamFormat" />() to obtain thisinformation later.</para>
		///   <para>If you don't care about opening a specific audio device, you can (andprobably should), use<see cref="SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK" /> forplayback and<see cref="SDL_AUDIO_DEVICE_DEFAULT_RECORDING" />for recording.</para>
		///   <para>One can optionally provide a callback function; if NULL, the app isexpected to queue audio data for playback (or unqueue audio data ifcapturing). Otherwise, the callback will begin to fire once the device isunpaused.</para>
		///   <para>Destroying the returned stream with<see cref="SDL_DestroyAudioStream" /> will also close the audiodevice associated with this stream.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetAudioStreamDevice" />
		/// <seealso cref="SDL_ResumeAudioStreamDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenAudioDeviceStream<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_AudioStream * SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec, SDL_AudioStreamCallback callback, void *userdata);
		/// </code><para>                                                                                                                                                                                                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenAudioDeviceStream(uint devid, ref SDL_AudioSpec spec, SDL_AudioStreamCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>A callback that fires when data is about to be fed to an audio device.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is useful for accessing the final mix, perhaps for writing avisualizer or applying a final effect to the audio data before playback.</para>
		///   <para>This callback should run as quickly as possible and not block for anysignificant time, as this callback delays submission of data to the audiodevice, which can cause audio playback problems.</para>
		///   <para>The postmix callback must be able to handle any audio data formatspecified in <c>spec</c>, which can change between callbacks if the audio devicechanged. However, this only covers frequency and channel count; data isalways provided here in <see cref="SDL_AudioFormat.SDL_AUDIO_F32" /> format.</para>
		///   <para>The postmix callback runs after logical device gain and audiostream gainhave been applied, which is to say you can make the output data louder atthis point than the gain settings would suggest.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAudioPostmixCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AudioPostmixCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_AudioPostmixCallback)(void *userdata, const SDL_AudioSpec *spec, float *buffer, int buflen);
		/// </code><br /><b>## Thread Safety ##</b><para>This will run from a background thread owned by SDL. The application isresponsible for locking resources the callback touches that need to beprotected.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_AudioPostmixCallback(IntPtr userdata, SDL_AudioSpec* spec, float* buffer, int buflen);

		/// <summary>
		///   <para>Set a callback that fires when data is about to be fed to an audio device.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the ID of an opened audio device.                       </para>
		/// </param>
		/// <param name="callback">
		///   <para> a callback function to be called. Can be NULL.          </para>
		/// </param>
		/// <param name="userdata">
		///   <para> app-controlled pointer passed to callback. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is useful for accessing the final mix, perhaps for writing avisualizer or applying a final effect to the audio data before playback.</para>
		///   <para>The buffer is the final mix of all bound audio streams on an opened device;this callback will fire regularly for any device that is both opened andunpaused. If there is no new data to mix, either because no streams arebound to the device or all the streams are empty, this callback will stillfire with the entire buffer set to silence.</para>
		///   <para>This callback is allowed to make changes to the data; the contents of thebuffer after this call is what is ultimately passed along to the hardware.</para>
		///   <para>The callback is always provided the data in float format (values from -1.0fto 1.0f), but the number of channels or sample rate may be different thanthe format the app requested when opening the device; SDL might have had tomanage a conversion behind the scenes, or the playback might have jumped tonew physical hardware when a system default changed, etc. These details maychange between calls. Accordingly, the size of the buffer might changebetween calls as well.</para>
		///   <para>This callback can run at any time, and from any thread; if you need toserialize access to your app's data, you should provide and use a mutex orother synchronization device.</para>
		///   <para>All of this to say: there are specific needs this callback can fulfill, butit is not the simplest interface. Apps should generally provide audio intheir preferred format through an <see cref="SDL_AudioStream" /> andlet SDL handle the difference.</para>
		///   <para>This function is extremely time-sensitive; the callback should do the leastamount of work possible and return as quickly as it can. The longer thecallback runs, the higher the risk of audio dropouts or other problems.</para>
		///   <para>This function will block until the audio device is in between iterations,so any existing callback that might be running will finish before thisfunction sets the new callback and returns.</para>
		///   <para>Setting a NULL callback function disables any previously-set callback.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAudioPostmixCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, void *userdata);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetAudioPostmixCallback(uint devid, SDL_AudioPostmixCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>Load the audio data of a WAVE file into memory.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the data source for the WAVE data.                                                                                      </para>
		/// </param>
		/// <param name="closeio">
		///   <para> if true, calls <see cref="SDL_CloseIO" />() on <c>src</c> before returning, even in the case of an error.                    </para>
		/// </param>
		/// <param name="spec">
		///   <para> a pointer to an <see cref="SDL_AudioSpec" /> that will be set to the WAVE data's format details on successful return. </para>
		/// </param>
		/// <param name="audio_buf">
		///   <para> a pointer filled with the audio data, allocated by the function.                                                        </para>
		/// </param>
		/// <param name="audio_len">
		///   <para> a pointer filled with the length of the audio data buffer in bytes.                                                     </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success. <c>audio_buf</c> will be filled with a pointerto an allocated buffer containing the audio data, and <c>audio_len</c> is filledwith the length of that audio buffer in bytes.</para>
		///   <para>This function returns false if the .WAV file cannot be opened, uses anunknown data format, or is corrupt; call <see cref="SDL_GetError" />() formore information.</para>
		///   <para>When the application is done with the data returned in <c>audio_buf</c>, itshould call <see cref="SDL_free" />() to dispose of it.</para>
		/// </returns>
		/// <remarks>
		///   <para>Loading a WAVE file requires <c>src</c>, <c>spec</c>, <c>audio_buf</c> and <c>audio_len</c> tobe valid pointers. The entire data portion of the file is then loaded intomemory and decoded if necessary.</para>
		///   <para>Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), andA-law and mu-law (8 bits). Other formats are currently unsupported andcause an error.</para>
		///   <para>If this function succeeds, the return value is zero and the pointer to theaudio data allocated by the function is written to <c>audio_buf</c> and itslength in bytes to <c>audio_len</c>. The <see cref="SDL_AudioSpec" /> members<c>freq</c>, <c>channels</c>, and <c>format</c> are set to the values of the audio data inthe buffer.</para>
		///   <para>It's necessary to use <see cref="SDL_free" />() to free the audio datareturned in <c>audio_buf</c> when it is no longer used.</para>
		///   <para>Because of the underspecification of the .WAV format, there are manyproblematic files in the wild that cause issues with strict decoders. Toprovide compatibility with these files, this decoder is lenient in regardsto the truncation of the file, the fact chunk, and the size of the RIFFchunk. The hints<see cref="SDL_HINT_WAVE_RIFF_CHUNK_SIZE" />,<see cref="SDL_HINT_WAVE_TRUNCATION" />, and<see cref="SDL_HINT_WAVE_FACT_CHUNK" /> can be used to tunethe behavior of the loading process.</para>
		///   <para>Any file that is invalid (due to truncation, corruption, or wrong values inthe headers), too big, or unsupported causes an error. Additionally, anycritical I/O error from the data source will terminate the loading processwith an error. The function returns NULL on error and in all cases (withthe exception of <c>src</c> being NULL), an appropriate error message will beset.</para>
		///   <para>It is required that the data source supports seeking.</para>
		///   <para>Example:</para>
		///   <code>SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, &amp;spec, &amp;buf, &amp;len);
		/// </code>
		///   <para>Note that the <see cref="SDL_LoadWAV" /> function does this same thing foryou, but in a less messy way:</para>
		///   <code>SDL_LoadWAV("sample.wav", &amp;spec, &amp;buf, &amp;len);
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_free" />
		/// <seealso cref="SDL_LoadWAV" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadWAV_IO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LoadWAV_IO(SDL_IOStream *src, bool closeio, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
		/// </code><para>                                                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_LoadWAV_IO(IntPtr src, SDLBool closeio, out SDL_AudioSpec spec, out IntPtr audio_buf, out uint audio_len);

		[DllImport(nativeLibName, EntryPoint = "SDL_LoadWAV", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_LoadWAV(byte* path, out SDL_AudioSpec spec, out IntPtr audio_buf, out uint audio_len);
		/// <summary>
		///   <para>Loads a WAV from a file path.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the file path of the WAV file to open.                                                                                  </para>
		/// </param>
		/// <param name="spec">
		///   <para> a pointer to an <see cref="SDL_AudioSpec" /> that will be set to the WAVE data's format details on successful return. </para>
		/// </param>
		/// <param name="audio_buf">
		///   <para> a pointer filled with the audio data, allocated by the function.                                                        </para>
		/// </param>
		/// <param name="audio_len">
		///   <para> a pointer filled with the length of the audio data buffer in bytes.                                                     </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success. <c>audio_buf</c> will be filled with a pointerto an allocated buffer containing the audio data, and <c>audio_len</c> is filledwith the length of that audio buffer in bytes.</para>
		///   <para>This function returns false if the .WAV file cannot be opened, uses anunknown data format, or is corrupt; call <see cref="SDL_GetError" />() formore information.</para>
		///   <para>When the application is done with the data returned in <c>audio_buf</c>, itshould call <see cref="SDL_free" />() to dispose of it.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is a convenience function that is effectively the same as:</para>
		///   <code>SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), true, spec, audio_buf, audio_len);
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_free" />
		/// <seealso cref="SDL_LoadWAV_IO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadWAV<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LoadWAV(const char *path, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
		/// </code><para>                                                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		public static SDLBool SDL_LoadWAV(string path, out SDL_AudioSpec spec, out IntPtr audio_buf, out uint audio_len)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_LoadWAV(pathUTF8, out spec, out audio_buf, out audio_len);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		/// <summary>
		///   <para>Mix audio data in a specified format.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the destination for the mixed audio.                                                    </para>
		/// </param>
		/// <param name="src">
		///   <para> the source audio buffer to be mixed.                                                    </para>
		/// </param>
		/// <param name="format">
		///   <para> the <see cref="SDL_AudioFormat" /> structure representing the desired audio format. </para>
		/// </param>
		/// <param name="len">
		///   <para> the length of the audio buffer in bytes.                                                </para>
		/// </param>
		/// <param name="volume">
		///   <para> ranges from 0.0 - 1.0, and should be set to 1.0 for full audio volume.                  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This takes an audio buffer <c>src</c> of <c>len</c> bytes of <c>format</c> data and mixesit into <c>dst</c>, performing addition, volume adjustment, and overflowclipping. The buffer pointed to by <c>dst</c> must also be <c>len</c> bytes of<c>format</c> data.</para>
		///   <para>This is provided for convenience -- you can mix your own audio data.</para>
		///   <para>Do not use this function for mixing together more than two streams ofsample data. The output from repeated application of this function may bedistorted by clipping, because there is no accumulator with greater rangethan the input (not to mention this being an inefficient way of doing it).</para>
		///   <para>It is a common misconception that this function is required to write audiodata to an output stream in an audio callback. While you can do that,<see cref="SDL_MixAudio" />() is really only needed when you're mixing asingle audio stream with a volume adjustment.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MixAudio<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_MixAudio(Uint8 *dst, const Uint8 *src, SDL_AudioFormat format, Uint32 len, float volume);
		/// </code><para>                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_MixAudio(IntPtr dst, IntPtr src, SDL_AudioFormat format, uint len, float volume);

		/// <summary>
		///   <para>Convert some audio data of one format to another format.</para>
		/// </summary>
		/// <param name="src_spec">
		///   <para> the format details of the input audio.                                                                                               </para>
		/// </param>
		/// <param name="src_data">
		///   <para> the audio data to be converted.                                                                                                      </para>
		/// </param>
		/// <param name="src_len">
		///   <para> the len of src_data.                                                                                                                 </para>
		/// </param>
		/// <param name="dst_spec">
		///   <para> the format details of the output audio.                                                                                              </para>
		/// </param>
		/// <param name="dst_data">
		///   <para> will be filled with a pointer to converted audio data, which should be freed with <see cref="SDL_free" />(). On error, it will be NULL. </para>
		/// </param>
		/// <param name="dst_len">
		///   <para> will be filled with the len of dst_data.                                                                                             </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that this function is for convenience, but should not be usedto resample audio in blocks, as it will introduce audio artifacts on theboundaries. You should only use this function if you are converting audiodata in its entirety in one call. If you want to convert audio in smallerchunks, use an <see cref="SDL_AudioStream" />, which is designed forthis situation.</para>
		///   <para>Internally, this function creates and destroys an<see cref="SDL_AudioStream" /> on each use, so it's also less efficientthan using one directly, if you need to convert multiple times.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ConvertAudioSamples<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ConvertAudioSamples(const SDL_AudioSpec *src_spec, const Uint8 *src_data, int src_len, const SDL_AudioSpec *dst_spec, Uint8 **dst_data, int *dst_len);
		/// </code><para>                                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ConvertAudioSamples(ref SDL_AudioSpec src_spec, IntPtr src_data, int src_len, ref SDL_AudioSpec dst_spec, IntPtr dst_data, out int dst_len);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetAudioFormatName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetAudioFormatName(SDL_AudioFormat format);
		/// <summary>
		///   <para>Get the human readable name of an audio format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> the audio format to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the human readable name of the specified audioformat or "<see cref="SDL_AudioFormat.SDL_AUDIO_UNKNOWN" />" if the format isn'trecognized.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAudioFormatName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetAudioFormatName(SDL_AudioFormat format);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		public static string SDL_GetAudioFormatName(SDL_AudioFormat format)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetAudioFormatName(format));
		}

		/// <summary>
		///   <para>Get the appropriate memset value for silencing an audio format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> the audio data format to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns a byte value that can be passed to memset.</para>
		/// </returns>
		/// <remarks>
		///   <para>The value returned by this function can be used as the second argument tomemset (or <see cref="SDL_memset" />) to set an audio buffer in a specificformat to silence.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSilenceValueForFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_audio.h">&lt;SDL3/SDL_audio.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);
		/// </code><para>                                 </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAudio">CategoryAudio</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);

		// /usr/local/include/SDL3/SDL_bits.h

		/// <summary>
		///   <para>Get the index of the most significant (set) bit in a 32-bit number.</para>
		/// </summary>
		/// <param name="x">
		///   <para> the 32-bit value to examine. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the index of the most significant bit, or -1 if the value is0.</para>
		/// </returns>
		/// <remarks>
		///   <para>Result is undefined when called with 0. This operation can also be statedas "count leading zeroes" and "log base 2".</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MostSignificantBitIndex32<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_bits.h">&lt;SDL3/SDL_bits.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE int SDL_MostSignificantBitIndex32(Uint32 x);
		/// </code><para>                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryBits">CategoryBits</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_MostSignificantBitIndex32(uint x);

		/// <summary>
		///   <para>Determine if a unsigned 32-bit value has exactly one bit set.</para>
		/// </summary>
		/// <param name="x">
		///   <para> the 32-bit value to examine. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if exactly one bit is set in <c>x</c>, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If there are no bits set (<c>x</c> is zero), or more than one bit set, thisreturns false. If any one bit is exclusively set, this returns true.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasExactlyOneBitSet32<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_bits.h">&lt;SDL3/SDL_bits.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_HasExactlyOneBitSet32(Uint32 x);
		/// </code><para>                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryBits">CategoryBits</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasExactlyOneBitSet32(uint x);

		// /usr/local/include/SDL3/SDL_blendmode.h

		/// <summary>
		///   <para>The blend operation used when combining source and destination pixel components.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlendOperation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_blendmode.h">&lt;SDL3/SDL_blendmode.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_BlendOperation
		/// {
		///     SDL_BLENDOPERATION_ADD              = 0x1,  /**&lt; dst + src: supported by all renderers */
		///     SDL_BLENDOPERATION_SUBTRACT         = 0x2,  /**&lt; src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan */
		///     SDL_BLENDOPERATION_REV_SUBTRACT     = 0x3,  /**&lt; dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan */
		///     SDL_BLENDOPERATION_MINIMUM          = 0x4,  /**&lt; min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan */
		///     SDL_BLENDOPERATION_MAXIMUM          = 0x5   /**&lt; max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan */
		/// } SDL_BlendOperation;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryBlendmode">CategoryBlendmode</see></para></misc>
		public enum SDL_BlendOperation
		{
			/// <summary><para>Please refer to <see cref="SDL_BlendOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDOPERATION_ADD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDOPERATION_ADD = 1,
			/// <summary><para>Please refer to <see cref="SDL_BlendOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDOPERATION_SUBTRACT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDOPERATION_SUBTRACT = 2,
			/// <summary><para>Please refer to <see cref="SDL_BlendOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDOPERATION_REV_SUBTRACT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDOPERATION_REV_SUBTRACT = 3,
			/// <summary><para>Please refer to <see cref="SDL_BlendOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDOPERATION_MINIMUM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDOPERATION_MINIMUM = 4,
			/// <summary><para>Please refer to <see cref="SDL_BlendOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDOPERATION_MAXIMUM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDOPERATION_MAXIMUM = 5,
		}

		/// <summary>
		///   <para>The normalized factor used to multiply pixel components.</para>
		/// </summary>
		/// <remarks>
		///   <para>The blend factors are multiplied with the pixels from a drawing operation(src) and the pixels from the render target (dst) before the blendoperation. The comma-separated factors listed above are always applied inthe component order red, green, blue, and alpha.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlendFactor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_blendmode.h">&lt;SDL3/SDL_blendmode.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_BlendFactor
		/// {
		///     SDL_BLENDFACTOR_ZERO                = 0x1,  /**&lt; 0, 0, 0, 0 */
		///     SDL_BLENDFACTOR_ONE                 = 0x2,  /**&lt; 1, 1, 1, 1 */
		///     SDL_BLENDFACTOR_SRC_COLOR           = 0x3,  /**&lt; srcR, srcG, srcB, srcA */
		///     SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,  /**&lt; 1-srcR, 1-srcG, 1-srcB, 1-srcA */
		///     SDL_BLENDFACTOR_SRC_ALPHA           = 0x5,  /**&lt; srcA, srcA, srcA, srcA */
		///     SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,  /**&lt; 1-srcA, 1-srcA, 1-srcA, 1-srcA */
		///     SDL_BLENDFACTOR_DST_COLOR           = 0x7,  /**&lt; dstR, dstG, dstB, dstA */
		///     SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,  /**&lt; 1-dstR, 1-dstG, 1-dstB, 1-dstA */
		///     SDL_BLENDFACTOR_DST_ALPHA           = 0x9,  /**&lt; dstA, dstA, dstA, dstA */
		///     SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA   /**&lt; 1-dstA, 1-dstA, 1-dstA, 1-dstA */
		/// } SDL_BlendFactor;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryBlendmode">CategoryBlendmode</see></para></misc>
		public enum SDL_BlendFactor
		{
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_ZERO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_ZERO = 1,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_ONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_ONE = 2,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_SRC_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_SRC_COLOR = 3,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_SRC_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_SRC_ALPHA = 5,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_DST_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_DST_COLOR = 7,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_DST_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_DST_ALPHA = 9,
			/// <summary><para>Please refer to <see cref="SDL_BlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
		}

		/// <summary>
		///   <para>Compose a custom blend mode for renderers.</para>
		/// </summary>
		/// <param name="srcColorFactor">
		///   <para> the <see cref="SDL_BlendFactor" /> applied to the red, green, and blue components of the source pixels.                            </para>
		/// </param>
		/// <param name="dstColorFactor">
		///   <para> the <see cref="SDL_BlendFactor" /> applied to the red, green, and blue components of the destination pixels.                       </para>
		/// </param>
		/// <param name="colorOperation">
		///   <para> the <see cref="SDL_BlendOperation" /> used to combine the red, green, and blue components of the source and destination pixels. </para>
		/// </param>
		/// <param name="srcAlphaFactor">
		///   <para> the <see cref="SDL_BlendFactor" /> applied to the alpha component of the source pixels.                                            </para>
		/// </param>
		/// <param name="dstAlphaFactor">
		///   <para> the <see cref="SDL_BlendFactor" /> applied to the alpha component of the destination pixels.                                       </para>
		/// </param>
		/// <param name="alphaOperation">
		///   <para> the <see cref="SDL_BlendOperation" /> used to combine the alpha component of the source and destination pixels.                 </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_BlendMode" />) Returns an <see cref="SDL_BlendMode" />that represents the chosen factors and operations.</para>
		/// </returns>
		/// <remarks>
		///   <para>The functions <see cref="SDL_SetRenderDrawBlendMode" /> and<see cref="SDL_SetTextureBlendMode" /> accept the<see cref="SDL_BlendMode" /> returned by this function if the renderersupports it.</para>
		///   <para>A blend mode controls how the pixels from a drawing operation (source) getcombined with the pixels from the render target (destination). First, thecomponents of the source and destination pixels get multiplied with theirblend factors. Then, the blend operation takes the two products andcalculates the result that will get stored in the render target.</para>
		///   <para>Expressed in pseudocode, it would look like this:</para>
		///   <code>dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);
		/// dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);
		/// </code>
		///   <para>Where the functions <c>colorOperation(src, dst)</c> and <c>alphaOperation(src, dst)</c> can return one of the following:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <c>src + dst</c>
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>src - dst</c>
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>dst - src</c>
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>min(src, dst)</c>
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>max(src, dst)</c>
		///         </para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The red, green, and blue components are always multiplied with the first,second, and third components of the <see cref="SDL_BlendFactor" />,respectively. The fourth component is not used.</para>
		///   <para>The alpha component is always multiplied with the fourth component of the<see cref="SDL_BlendFactor" />. The other components are not used inthe alpha calculation.</para>
		///   <para>Support for these blend modes varies for each renderer. To check if aspecific <see cref="SDL_BlendMode" /> is supported, create a renderer andpass it to either <see cref="SDL_SetRenderDrawBlendMode" />or <see cref="SDL_SetTextureBlendMode" />. They will returnwith an error if the blend mode is not supported.</para>
		///   <para>This list describes the support of custom blend modes for each renderer.All renderers support the four blend modes listed in the<see cref="SDL_BlendMode" /> enumeration.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>direct3d: Supports all operations with all factors. However, somefactors produce unexpected results with<see cref="SDL_BlendOperation.SDL_BLENDOPERATION_MINIMUM" /> and<see cref="SDL_BlendOperation.SDL_BLENDOPERATION_MAXIMUM" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>direct3d11: Same as Direct3D 9.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>opengl: Supports the<see cref="SDL_BlendOperation.SDL_BLENDOPERATION_ADD" /> operation with allfactors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly here.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>opengles2: Supports the<see cref="SDL_BlendOperation.SDL_BLENDOPERATION_ADD" />,<see cref="SDL_BlendOperation.SDL_BLENDOPERATION_SUBTRACT" />,<see cref="SDL_BlendOperation.SDL_BLENDOPERATION_REV_SUBTRACT" />operations with all factors.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>psp: No custom blend mode support.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>software: No custom blend mode support.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Some renderers do not provide an alpha component for the default rendertarget. The <see cref="SDL_BlendFactor.SDL_BLENDFACTOR_DST_ALPHA" /> and<see cref="SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA" />factors do not have an effect in this case.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderDrawBlendMode" />
		/// <seealso cref="SDL_GetRenderDrawBlendMode" />
		/// <seealso cref="SDL_SetTextureBlendMode" />
		/// <seealso cref="SDL_GetTextureBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ComposeCustomBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_blendmode.h">&lt;SDL3/SDL_blendmode.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,
		///                                      SDL_BlendFactor dstColorFactor,
		///                                      SDL_BlendOperation colorOperation,
		///                                      SDL_BlendFactor srcAlphaFactor,
		///                                      SDL_BlendFactor dstAlphaFactor,
		///                                      SDL_BlendOperation alphaOperation);
		/// </code><para>                                                                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryBlendmode">CategoryBlendmode</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

		// /usr/local/include/SDL3/SDL_pixels.h

		/// <summary>
		///   <para>Pixel type.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PixelType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PixelType
		/// {
		///     SDL_PIXELTYPE_UNKNOWN,
		///     SDL_PIXELTYPE_INDEX1,
		///     SDL_PIXELTYPE_INDEX4,
		///     SDL_PIXELTYPE_INDEX8,
		///     SDL_PIXELTYPE_PACKED8,
		///     SDL_PIXELTYPE_PACKED16,
		///     SDL_PIXELTYPE_PACKED32,
		///     SDL_PIXELTYPE_ARRAYU8,
		///     SDL_PIXELTYPE_ARRAYU16,
		///     SDL_PIXELTYPE_ARRAYU32,
		///     SDL_PIXELTYPE_ARRAYF16,
		///     SDL_PIXELTYPE_ARRAYF32,
		///     /* appended at the end for compatibility with sdl2-compat:  */
		///     SDL_PIXELTYPE_INDEX2
		/// } SDL_PixelType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_PixelType
		{
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_INDEX1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_INDEX1 = 1,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_INDEX4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_INDEX4 = 2,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_INDEX8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_INDEX8 = 3,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_PACKED8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_PACKED8 = 4,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_PACKED16<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_PACKED16 = 5,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_PACKED32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_PACKED32 = 6,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_ARRAYU8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_ARRAYU8 = 7,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_ARRAYU16<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_ARRAYU16 = 8,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_ARRAYU32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_ARRAYU32 = 9,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_ARRAYF16<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_ARRAYF16 = 10,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_ARRAYF32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_ARRAYF32 = 11,
			/// <summary><para>Please refer to <see cref="SDL_PixelType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELTYPE_INDEX2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELTYPE_INDEX2 = 12,
		}

		/// <summary>
		///   <para>Bitmap pixel order, high bit -&gt; low bit.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BitmapOrder<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_BitmapOrder
		/// {
		///     SDL_BITMAPORDER_NONE,
		///     SDL_BITMAPORDER_4321,
		///     SDL_BITMAPORDER_1234
		/// } SDL_BitmapOrder;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_BitmapOrder
		{
			/// <summary><para>Please refer to <see cref="SDL_BitmapOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BITMAPORDER_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BITMAPORDER_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_BitmapOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BITMAPORDER_4321<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BITMAPORDER_4321 = 1,
			/// <summary><para>Please refer to <see cref="SDL_BitmapOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BITMAPORDER_1234<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_BITMAPORDER_1234 = 2,
		}

		/// <summary>
		///   <para>Packed component order, high bit -&gt; low bit.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PackedOrder<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PackedOrder
		/// {
		///     SDL_PACKEDORDER_NONE,
		///     SDL_PACKEDORDER_XRGB,
		///     SDL_PACKEDORDER_RGBX,
		///     SDL_PACKEDORDER_ARGB,
		///     SDL_PACKEDORDER_RGBA,
		///     SDL_PACKEDORDER_XBGR,
		///     SDL_PACKEDORDER_BGRX,
		///     SDL_PACKEDORDER_ABGR,
		///     SDL_PACKEDORDER_BGRA
		/// } SDL_PackedOrder;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_PackedOrder
		{
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_XRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_XRGB = 1,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_RGBX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_RGBX = 2,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_ARGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_ARGB = 3,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_RGBA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_RGBA = 4,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_XBGR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_XBGR = 5,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_BGRX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_BGRX = 6,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_ABGR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_ABGR = 7,
			/// <summary><para>Please refer to <see cref="SDL_PackedOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDORDER_BGRA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDORDER_BGRA = 8,
		}

		/// <summary>
		///   <para>Array component order, low byte -&gt; high byte.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ArrayOrder<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ArrayOrder
		/// {
		///     SDL_ARRAYORDER_NONE,
		///     SDL_ARRAYORDER_RGB,
		///     SDL_ARRAYORDER_RGBA,
		///     SDL_ARRAYORDER_ARGB,
		///     SDL_ARRAYORDER_BGR,
		///     SDL_ARRAYORDER_BGRA,
		///     SDL_ARRAYORDER_ABGR
		/// } SDL_ArrayOrder;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_ArrayOrder
		{
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_RGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_RGB = 1,
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_RGBA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_RGBA = 2,
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_ARGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_ARGB = 3,
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_BGR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_BGR = 4,
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_BGRA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_BGRA = 5,
			/// <summary><para>Please refer to <see cref="SDL_ArrayOrder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ARRAYORDER_ABGR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ARRAYORDER_ABGR = 6,
		}

		/// <summary>
		///   <para>Packed component layout.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PackedLayout<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PackedLayout
		/// {
		///     SDL_PACKEDLAYOUT_NONE,
		///     SDL_PACKEDLAYOUT_332,
		///     SDL_PACKEDLAYOUT_4444,
		///     SDL_PACKEDLAYOUT_1555,
		///     SDL_PACKEDLAYOUT_5551,
		///     SDL_PACKEDLAYOUT_565,
		///     SDL_PACKEDLAYOUT_8888,
		///     SDL_PACKEDLAYOUT_2101010,
		///     SDL_PACKEDLAYOUT_1010102
		/// } SDL_PackedLayout;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_PackedLayout
		{
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_332<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_332 = 1,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_4444 = 2,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_1555<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_1555 = 3,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_5551<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_5551 = 4,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_565<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_565 = 5,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_8888 = 6,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_2101010<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_2101010 = 7,
			/// <summary><para>Please refer to <see cref="SDL_PackedLayout" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PACKEDLAYOUT_1010102<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PACKEDLAYOUT_1010102 = 8,
		}

		/// <summary>
		///   <para>Pixel format.</para>
		/// </summary>
		/// <remarks>
		///   <para>SDL's pixel formats have the following naming convention:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>Names with a list of components and a single bit count, such as RGB24 andABGR32, define a platform-independent encoding into bytes in the orderspecified. For example, in RGB24 data, each pixel is encoded in 3 bytes(red, green, blue) in that order, and in ABGR32 data, each pixel isencoded in 4 bytes alpha, blue, green, red) in that order. Use thesenames if the property of a format that is important to you is the orderof the bytes in memory or on disk.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Names with a bit count per component, such as ARGB8888 and XRGB1555, are"packed" into an appropriately-sized integer in the platform's nativeendianness. For example, ARGB8888 is a sequence of 32-bit integers; ineach integer, the most significant bits are alpha, and the leastsignificant bits are blue. On a little-endian CPU such as x86, the leastsignificant bits of each integer are arranged first in memory, but on abig-endian CPU such as s390x, the most significant bits are arrangedfirst. Use these names if the property of a format that is important toyou is the meaning of each bit position within a native-endiannessinteger.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>In indexed formats such as INDEX4LSB, each pixel is represented byencoding an index into the palette into the indicated number of bits,with multiple pixels packed into each byte if appropriate. In LSBformats, the first (leftmost) pixel is stored in the least-significantbits of the byte; in MSB formats, it's stored in the most-significantbits. INDEX8 does not need LSB/MSB variants, because each pixel exactlyfills one byte.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The 32-bit byte-array encodings such as RGBA32 are aliases for theappropriate 8888 encoding for the current platform. For example, RGBA32 isan alias for ABGR8888 on little-endian CPUs like x86, or an alias forRGBA8888 on big-endian CPUs.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PixelFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PixelFormat
		/// {
		///     SDL_PIXELFORMAT_UNKNOWN = 0,
		///     SDL_PIXELFORMAT_INDEX1LSB = 0x11100100u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0), */
		///     SDL_PIXELFORMAT_INDEX1MSB = 0x11200100u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0), */
		///     SDL_PIXELFORMAT_INDEX2LSB = 0x1c100200u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_4321, 0, 2, 0), */
		///     SDL_PIXELFORMAT_INDEX2MSB = 0x1c200200u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_1234, 0, 2, 0), */
		///     SDL_PIXELFORMAT_INDEX4LSB = 0x12100400u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0), */
		///     SDL_PIXELFORMAT_INDEX4MSB = 0x12200400u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0), */
		///     SDL_PIXELFORMAT_INDEX8 = 0x13000801u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1), */
		///     SDL_PIXELFORMAT_RGB332 = 0x14110801u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1), */
		///     SDL_PIXELFORMAT_XRGB4444 = 0x15120c02u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2), */
		///     SDL_PIXELFORMAT_XBGR4444 = 0x15520c02u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_4444, 12, 2), */
		///     SDL_PIXELFORMAT_XRGB1555 = 0x15130f02u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2), */
		///     SDL_PIXELFORMAT_XBGR1555 = 0x15530f02u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2), */
		///     SDL_PIXELFORMAT_ARGB4444 = 0x15321002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2), */
		///     SDL_PIXELFORMAT_RGBA4444 = 0x15421002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2), */
		///     SDL_PIXELFORMAT_ABGR4444 = 0x15721002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2), */
		///     SDL_PIXELFORMAT_BGRA4444 = 0x15821002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2), */
		///     SDL_PIXELFORMAT_ARGB1555 = 0x15331002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2), */
		///     SDL_PIXELFORMAT_RGBA5551 = 0x15441002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2), */
		///     SDL_PIXELFORMAT_ABGR1555 = 0x15731002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2), */
		///     SDL_PIXELFORMAT_BGRA5551 = 0x15841002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2), */
		///     SDL_PIXELFORMAT_RGB565 = 0x15151002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2), */
		///     SDL_PIXELFORMAT_BGR565 = 0x15551002u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2), */
		///     SDL_PIXELFORMAT_RGB24 = 0x17101803u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3), */
		///     SDL_PIXELFORMAT_BGR24 = 0x17401803u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3), */
		///     SDL_PIXELFORMAT_XRGB8888 = 0x16161804u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4), */
		///     SDL_PIXELFORMAT_RGBX8888 = 0x16261804u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4), */
		///     SDL_PIXELFORMAT_XBGR8888 = 0x16561804u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4), */
		///     SDL_PIXELFORMAT_BGRX8888 = 0x16661804u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4), */
		///     SDL_PIXELFORMAT_ARGB8888 = 0x16362004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4), */
		///     SDL_PIXELFORMAT_RGBA8888 = 0x16462004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4), */
		///     SDL_PIXELFORMAT_ABGR8888 = 0x16762004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4), */
		///     SDL_PIXELFORMAT_BGRA8888 = 0x16862004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4), */
		///     SDL_PIXELFORMAT_XRGB2101010 = 0x16172004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */
		///     SDL_PIXELFORMAT_XBGR2101010 = 0x16572004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */
		///     SDL_PIXELFORMAT_ARGB2101010 = 0x16372004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */
		///     SDL_PIXELFORMAT_ABGR2101010 = 0x16772004u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */
		///     SDL_PIXELFORMAT_RGB48 = 0x18103006u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGB, 0, 48, 6), */
		///     SDL_PIXELFORMAT_BGR48 = 0x18403006u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGR, 0, 48, 6), */
		///     SDL_PIXELFORMAT_RGBA64 = 0x18204008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */
		///     SDL_PIXELFORMAT_ARGB64 = 0x18304008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */
		///     SDL_PIXELFORMAT_BGRA64 = 0x18504008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */
		///     SDL_PIXELFORMAT_ABGR64 = 0x18604008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */
		///     SDL_PIXELFORMAT_RGB48_FLOAT = 0x1a103006u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGB, 0, 48, 6), */
		///     SDL_PIXELFORMAT_BGR48_FLOAT = 0x1a403006u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGR, 0, 48, 6), */
		///     SDL_PIXELFORMAT_RGBA64_FLOAT = 0x1a204008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */
		///     SDL_PIXELFORMAT_ARGB64_FLOAT = 0x1a304008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */
		///     SDL_PIXELFORMAT_BGRA64_FLOAT = 0x1a504008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */
		///     SDL_PIXELFORMAT_ABGR64_FLOAT = 0x1a604008u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */
		///     SDL_PIXELFORMAT_RGB96_FLOAT = 0x1b10600cu,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGB, 0, 96, 12), */
		///     SDL_PIXELFORMAT_BGR96_FLOAT = 0x1b40600cu,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGR, 0, 96, 12), */
		///     SDL_PIXELFORMAT_RGBA128_FLOAT = 0x1b208010u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGBA, 0, 128, 16), */
		///     SDL_PIXELFORMAT_ARGB128_FLOAT = 0x1b308010u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ARGB, 0, 128, 16), */
		///     SDL_PIXELFORMAT_BGRA128_FLOAT = 0x1b508010u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGRA, 0, 128, 16), */
		///     SDL_PIXELFORMAT_ABGR128_FLOAT = 0x1b608010u,
		///         /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ABGR, 0, 128, 16), */
		/// 
		///     SDL_PIXELFORMAT_YV12 = 0x32315659u,      /**&lt; Planar mode: Y + V + U  (3 planes) */
		///         /* SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2'), */
		///     SDL_PIXELFORMAT_IYUV = 0x56555949u,      /**&lt; Planar mode: Y + U + V  (3 planes) */
		///         /* SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V'), */
		///     SDL_PIXELFORMAT_YUY2 = 0x32595559u,      /**&lt; Packed mode: Y0+U0+Y1+V0 (1 plane) */
		///         /* SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2'), */
		///     SDL_PIXELFORMAT_UYVY = 0x59565955u,      /**&lt; Packed mode: U0+Y0+V0+Y1 (1 plane) */
		///         /* SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y'), */
		///     SDL_PIXELFORMAT_YVYU = 0x55595659u,      /**&lt; Packed mode: Y0+V0+Y1+U0 (1 plane) */
		///         /* SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U'), */
		///     SDL_PIXELFORMAT_NV12 = 0x3231564eu,      /**&lt; Planar mode: Y + U/V interleaved  (2 planes) */
		///         /* SDL_DEFINE_PIXELFOURCC('N', 'V', '1', '2'), */
		///     SDL_PIXELFORMAT_NV21 = 0x3132564eu,      /**&lt; Planar mode: Y + V/U interleaved  (2 planes) */
		///         /* SDL_DEFINE_PIXELFOURCC('N', 'V', '2', '1'), */
		///     SDL_PIXELFORMAT_P010 = 0x30313050u,      /**&lt; Planar mode: Y + U/V interleaved  (2 planes) */
		///         /* SDL_DEFINE_PIXELFOURCC('P', '0', '1', '0'), */
		///     SDL_PIXELFORMAT_EXTERNAL_OES = 0x2053454fu,     /**&lt; Android video texture format */
		///         /* SDL_DEFINE_PIXELFOURCC('O', 'E', 'S', ' ') */
		/// 
		///     /* Aliases for RGBA byte arrays of color data, for the current platform */
		///     #if SDL_BYTEORDER == SDL_BIG_ENDIAN
		///     SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888,
		///     SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888,
		///     SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888,
		///     SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888,
		///     SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_RGBX8888,
		///     SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_XRGB8888,
		///     SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_BGRX8888,
		///     SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_XBGR8888
		///     #else
		///     SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
		///     SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
		///     SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
		///     SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,
		///     SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_XBGR8888,
		///     SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_BGRX8888,
		///     SDL_PIXELFORMAT_BGRX32 = SDL_PIXELFORMAT_XRGB8888,
		///     SDL_PIXELFORMAT_XBGR32 = SDL_PIXELFORMAT_RGBX8888
		///     #endif
		/// } SDL_PixelFormat;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_PixelFormat
		{
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX1LSB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX1LSB = 286261504,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX1MSB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX1MSB = 287310080,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX2LSB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX2LSB = 470811136,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX2MSB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX2MSB = 471859712,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX4LSB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX4LSB = 303039488,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX4MSB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX4MSB = 304088064,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_INDEX8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_INDEX8 = 318769153,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGB332<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGB332 = 336660481,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XRGB4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XRGB4444 = 353504258,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XBGR4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XBGR4444 = 357698562,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XRGB1555<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XRGB1555 = 353570562,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XBGR1555<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XBGR1555 = 357764866,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB4444 = 355602434,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA4444 = 356651010,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR4444 = 359796738,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA4444<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA4444 = 360845314,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB1555<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB1555 = 355667970,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA5551<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA5551 = 356782082,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR1555<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR1555 = 359862274,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA5551<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA5551 = 360976386,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGB565<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGB565 = 353701890,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGR565<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGR565 = 357896194,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGB24<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGB24 = 386930691,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGR24<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGR24 = 390076419,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XRGB8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XRGB8888 = 370546692,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBX8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBX8888 = 371595268,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XBGR8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XBGR8888 = 374740996,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRX8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRX8888 = 375789572,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB8888 = 372645892,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA8888 = 373694468,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR8888 = 376840196,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA8888<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA8888 = 377888772,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XRGB2101010<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XRGB2101010 = 370614276,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XBGR2101010<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XBGR2101010 = 374808580,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB2101010<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB2101010 = 372711428,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR2101010<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR2101010 = 376905732,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGB48<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGB48 = 403714054,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGR48<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGR48 = 406859782,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA64<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA64 = 404766728,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB64<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB64 = 405815304,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA64<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA64 = 407912456,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR64<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR64 = 408961032,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGB48_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGB48_FLOAT = 437268486,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGR48_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGR48_FLOAT = 440414214,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA64_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB64_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA64_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR64_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGB96_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGB96_FLOAT = 454057996,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGR96_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGR96_FLOAT = 457203724,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA128_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB128_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA128_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR128_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_YV12<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_YV12 = 842094169,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_IYUV<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_IYUV = 1448433993,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_YUY2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_YUY2 = 844715353,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_UYVY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_UYVY = 1498831189,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_YVYU<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_YVYU = 1431918169,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_NV12<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_NV12 = 842094158,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_NV21<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_NV21 = 825382478,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_P010<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_P010 = 808530000,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_EXTERNAL_OES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_EXTERNAL_OES = 542328143,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBA32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBA32 = 376840196,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ARGB32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ARGB32 = 377888772,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRA32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRA32 = 372645892,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_ABGR32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_ABGR32 = 373694468,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_RGBX32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_RGBX32 = 374740996,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XRGB32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XRGB32 = 375789572,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_BGRX32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_BGRX32 = 370546692,
			/// <summary><para>Please refer to <see cref="SDL_PixelFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PIXELFORMAT_XBGR32<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PIXELFORMAT_XBGR32 = 371595268,
		}

		/// <summary>
		///   <para>Colorspace color type.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ColorType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ColorType
		/// {
		///     SDL_COLOR_TYPE_UNKNOWN = 0,
		///     SDL_COLOR_TYPE_RGB = 1,
		///     SDL_COLOR_TYPE_YCBCR = 2
		/// } SDL_ColorType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_ColorType
		{
			/// <summary><para>Please refer to <see cref="SDL_ColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_TYPE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_TYPE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_ColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_TYPE_RGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_TYPE_RGB = 1,
			/// <summary><para>Please refer to <see cref="SDL_ColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_TYPE_YCBCR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_TYPE_YCBCR = 2,
		}

		/// <summary>
		///   <para>Colorspace color range, as described by https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ColorRange<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ColorRange
		/// {
		///     SDL_COLOR_RANGE_UNKNOWN = 0,
		///     SDL_COLOR_RANGE_LIMITED = 1, /**&lt; Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma */
		///     SDL_COLOR_RANGE_FULL = 2    /**&lt; Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma */
		/// } SDL_ColorRange;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_ColorRange
		{
			/// <summary><para>Please refer to <see cref="SDL_ColorRange" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_RANGE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_RANGE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_ColorRange" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_RANGE_LIMITED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_RANGE_LIMITED = 1,
			/// <summary><para>Please refer to <see cref="SDL_ColorRange" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_RANGE_FULL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_RANGE_FULL = 2,
		}

		/// <summary>
		///   <para>Colorspace color primaries, as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ColorPrimaries<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ColorPrimaries
		/// {
		///     SDL_COLOR_PRIMARIES_UNKNOWN = 0,
		///     SDL_COLOR_PRIMARIES_BT709 = 1,                  /**&lt; ITU-R BT.709-6 */
		///     SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,
		///     SDL_COLOR_PRIMARIES_BT470M = 4,                 /**&lt; ITU-R BT.470-6 System M */
		///     SDL_COLOR_PRIMARIES_BT470BG = 5,                /**&lt; ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625 */
		///     SDL_COLOR_PRIMARIES_BT601 = 6,                  /**&lt; ITU-R BT.601-7 525, SMPTE 170M */
		///     SDL_COLOR_PRIMARIES_SMPTE240 = 7,               /**&lt; SMPTE 240M, functionally the same as SDL_COLOR_PRIMARIES_BT601 */
		///     SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,           /**&lt; Generic film (color filters using Illuminant C) */
		///     SDL_COLOR_PRIMARIES_BT2020 = 9,                 /**&lt; ITU-R BT.2020-2 / ITU-R BT.2100-0 */
		///     SDL_COLOR_PRIMARIES_XYZ = 10,                   /**&lt; SMPTE ST 428-1 */
		///     SDL_COLOR_PRIMARIES_SMPTE431 = 11,              /**&lt; SMPTE RP 431-2 */
		///     SDL_COLOR_PRIMARIES_SMPTE432 = 12,              /**&lt; SMPTE EG 432-1 / DCI P3 */
		///     SDL_COLOR_PRIMARIES_EBU3213 = 22,               /**&lt; EBU Tech. 3213-E */
		///     SDL_COLOR_PRIMARIES_CUSTOM = 31
		/// } SDL_ColorPrimaries;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_ColorPrimaries
		{
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_BT709<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_BT709 = 1,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_UNSPECIFIED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_BT470M<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_BT470M = 4,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_BT470BG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_BT470BG = 5,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_BT601<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_BT601 = 6,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_SMPTE240<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_SMPTE240 = 7,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_GENERIC_FILM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_BT2020<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_BT2020 = 9,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_XYZ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_XYZ = 10,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_SMPTE431<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_SMPTE431 = 11,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_SMPTE432<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_SMPTE432 = 12,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_EBU3213<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_EBU3213 = 22,
			/// <summary><para>Please refer to <see cref="SDL_ColorPrimaries" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLOR_PRIMARIES_CUSTOM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLOR_PRIMARIES_CUSTOM = 31,
		}

		/// <summary>
		///   <para>Colorspace transfer characteristics.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TransferCharacteristics<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_TransferCharacteristics
		/// {
		///     SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
		///     SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,         /**&lt; Rec. ITU-R BT.709-6 / ITU-R BT1361 */
		///     SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
		///     SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,       /**&lt; ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL &amp; SECAM */
		///     SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,       /**&lt; ITU-R BT.470-6 System B, G */
		///     SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,         /**&lt; SMPTE ST 170M / ITU-R BT.601-7 525 or 625 */
		///     SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,      /**&lt; SMPTE ST 240M */
		///     SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
		///     SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
		///     SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
		///     SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,     /**&lt; IEC 61966-2-4 */
		///     SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,       /**&lt; ITU-R BT1361 Extended Colour Gamut */
		///     SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,         /**&lt; IEC 61966-2-1 (sRGB or sYCC) */
		///     SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14, /**&lt; ITU-R BT2020 for 10-bit system */
		///     SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15, /**&lt; ITU-R BT2020 for 12-bit system */
		///     SDL_TRANSFER_CHARACTERISTICS_PQ = 16,           /**&lt; SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems */
		///     SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,     /**&lt; SMPTE ST 428-1 */
		///     SDL_TRANSFER_CHARACTERISTICS_HLG = 18,          /**&lt; ARIB STD-B67, known as "hybrid log-gamma" (HLG) */
		///     SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31
		/// } SDL_TransferCharacteristics;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_TransferCharacteristics
		{
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_BT709<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_GAMMA22<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_GAMMA28<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_BT601<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_SMPTE240<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_LOG100<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_IEC61966<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_BT1361<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_PQ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_PQ = 16,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_SMPTE428<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_HLG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_HLG = 18,
			/// <summary><para>Please refer to <see cref="SDL_TransferCharacteristics" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TRANSFER_CHARACTERISTICS_CUSTOM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31,
		}

		/// <summary>
		///   <para>Colorspace matrix coefficients.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MatrixCoefficients<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_MatrixCoefficients
		/// {
		///     SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,
		///     SDL_MATRIX_COEFFICIENTS_BT709 = 1,              /**&lt; ITU-R BT.709-6 */
		///     SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
		///     SDL_MATRIX_COEFFICIENTS_FCC = 4,                /**&lt; US FCC Title 47 */
		///     SDL_MATRIX_COEFFICIENTS_BT470BG = 5,            /**&lt; ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as SDL_MATRIX_COEFFICIENTS_BT601 */
		///     SDL_MATRIX_COEFFICIENTS_BT601 = 6,              /**&lt; ITU-R BT.601-7 525 */
		///     SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,           /**&lt; SMPTE 240M */
		///     SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
		///     SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,         /**&lt; ITU-R BT.2020-2 non-constant luminance */
		///     SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,         /**&lt; ITU-R BT.2020-2 constant luminance */
		///     SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,         /**&lt; SMPTE ST 2085 */
		///     SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
		///     SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
		///     SDL_MATRIX_COEFFICIENTS_ICTCP = 14,             /**&lt; ITU-R BT.2100-0 ICTCP */
		///     SDL_MATRIX_COEFFICIENTS_CUSTOM = 31
		/// } SDL_MatrixCoefficients;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_MatrixCoefficients
		{
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_IDENTITY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_BT709<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_BT709 = 1,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_UNSPECIFIED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_FCC<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_FCC = 4,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_BT470BG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_BT470BG = 5,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_BT601<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_BT601 = 6,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_SMPTE240<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_YCGCO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_BT2020_NCL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_BT2020_CL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_SMPTE2085<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_ICTCP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_ICTCP = 14,
			/// <summary><para>Please refer to <see cref="SDL_MatrixCoefficients" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MATRIX_COEFFICIENTS_CUSTOM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MATRIX_COEFFICIENTS_CUSTOM = 31,
		}

		/// <summary>
		///   <para>Colorspace chroma sample location.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ChromaLocation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ChromaLocation
		/// {
		///     SDL_CHROMA_LOCATION_NONE = 0,   /**&lt; RGB, no chroma sampling */
		///     SDL_CHROMA_LOCATION_LEFT = 1,   /**&lt; In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically. */
		///     SDL_CHROMA_LOCATION_CENTER = 2, /**&lt; In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel. */
		///     SDL_CHROMA_LOCATION_TOPLEFT = 3 /**&lt; In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel ("co-sited", "co-located"). */
		/// } SDL_ChromaLocation;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_ChromaLocation
		{
			/// <summary><para>Please refer to <see cref="SDL_ChromaLocation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CHROMA_LOCATION_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CHROMA_LOCATION_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_ChromaLocation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CHROMA_LOCATION_LEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CHROMA_LOCATION_LEFT = 1,
			/// <summary><para>Please refer to <see cref="SDL_ChromaLocation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CHROMA_LOCATION_CENTER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CHROMA_LOCATION_CENTER = 2,
			/// <summary><para>Please refer to <see cref="SDL_ChromaLocation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CHROMA_LOCATION_TOPLEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CHROMA_LOCATION_TOPLEFT = 3,
		}

		/// <summary>
		///   <para>Colorspace definitions.</para>
		/// </summary>
		/// <remarks>
		///   <para>Since similar colorspaces may vary in their details (matrix, transferfunction, etc.), this is not an exhaustive list, but rather arepresentative sample of the kinds of colorspaces supported in SDL.</para>
		/// </remarks>
		/// <seealso cref="SDL_ColorPrimaries" />
		/// <seealso cref="SDL_ColorRange" />
		/// <seealso cref="SDL_ColorType" />
		/// <seealso cref="SDL_MatrixCoefficients" />
		/// <seealso cref="SDL_TransferCharacteristics" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Colorspace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_Colorspace
		/// {
		///     SDL_COLORSPACE_UNKNOWN = 0,
		/// 
		///     /* sRGB is a gamma corrected colorspace, and the default colorspace for SDL rendering and 8-bit RGB surfaces */
		///     SDL_COLORSPACE_SRGB = 0x120005a0u, /**&lt; Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT709,
		///                                  SDL_TRANSFER_CHARACTERISTICS_SRGB,
		///                                  SDL_MATRIX_COEFFICIENTS_IDENTITY,
		///                                  SDL_CHROMA_LOCATION_NONE), */
		/// 
		///     /* This is a linear colorspace and the default colorspace for floating point surfaces. On Windows this is the scRGB colorspace, and on Apple platforms this is kCGColorSpaceExtendedLinearSRGB for EDR content */
		///     SDL_COLORSPACE_SRGB_LINEAR = 0x12000500u, /**&lt; Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709  */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT709,
		///                                  SDL_TRANSFER_CHARACTERISTICS_LINEAR,
		///                                  SDL_MATRIX_COEFFICIENTS_IDENTITY,
		///                                  SDL_CHROMA_LOCATION_NONE), */
		/// 
		///     /* HDR10 is a non-linear HDR colorspace and the default colorspace for 10-bit surfaces */
		///     SDL_COLORSPACE_HDR10 = 0x12002600u, /**&lt; Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020  */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT2020,
		///                                  SDL_TRANSFER_CHARACTERISTICS_PQ,
		///                                  SDL_MATRIX_COEFFICIENTS_IDENTITY,
		///                                  SDL_CHROMA_LOCATION_NONE), */
		/// 
		///     SDL_COLORSPACE_JPEG = 0x220004c6u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT709,
		///                                  SDL_TRANSFER_CHARACTERISTICS_BT601,
		///                                  SDL_MATRIX_COEFFICIENTS_BT601,
		///                                  SDL_CHROMA_LOCATION_NONE), */
		/// 
		///     SDL_COLORSPACE_BT601_LIMITED = 0x211018c6u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_LIMITED,
		///                                  SDL_COLOR_PRIMARIES_BT601,
		///                                  SDL_TRANSFER_CHARACTERISTICS_BT601,
		///                                  SDL_MATRIX_COEFFICIENTS_BT601,
		///                                  SDL_CHROMA_LOCATION_LEFT), */
		/// 
		///     SDL_COLORSPACE_BT601_FULL = 0x221018c6u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT601,
		///                                  SDL_TRANSFER_CHARACTERISTICS_BT601,
		///                                  SDL_MATRIX_COEFFICIENTS_BT601,
		///                                  SDL_CHROMA_LOCATION_LEFT), */
		/// 
		///     SDL_COLORSPACE_BT709_LIMITED = 0x21100421u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_LIMITED,
		///                                  SDL_COLOR_PRIMARIES_BT709,
		///                                  SDL_TRANSFER_CHARACTERISTICS_BT709,
		///                                  SDL_MATRIX_COEFFICIENTS_BT709,
		///                                  SDL_CHROMA_LOCATION_LEFT), */
		/// 
		///     SDL_COLORSPACE_BT709_FULL = 0x22100421u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT709,
		///                                  SDL_TRANSFER_CHARACTERISTICS_BT709,
		///                                  SDL_MATRIX_COEFFICIENTS_BT709,
		///                                  SDL_CHROMA_LOCATION_LEFT), */
		/// 
		///     SDL_COLORSPACE_BT2020_LIMITED = 0x21102609u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_LIMITED,
		///                                  SDL_COLOR_PRIMARIES_BT2020,
		///                                  SDL_TRANSFER_CHARACTERISTICS_PQ,
		///                                  SDL_MATRIX_COEFFICIENTS_BT2020_NCL,
		///                                  SDL_CHROMA_LOCATION_LEFT), */
		/// 
		///     SDL_COLORSPACE_BT2020_FULL = 0x22102609u, /**&lt; Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 */
		///         /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,
		///                                  SDL_COLOR_RANGE_FULL,
		///                                  SDL_COLOR_PRIMARIES_BT2020,
		///                                  SDL_TRANSFER_CHARACTERISTICS_PQ,
		///                                  SDL_MATRIX_COEFFICIENTS_BT2020_NCL,
		///                                  SDL_CHROMA_LOCATION_LEFT), */
		/// 
		///     SDL_COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_SRGB, /**&lt; The default colorspace for RGB surfaces if no colorspace is specified */
		///     SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG  /**&lt; The default colorspace for YUV surfaces if no colorspace is specified */
		/// } SDL_Colorspace;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public enum SDL_Colorspace
		{
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_SRGB = 301991328,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_SRGB_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_SRGB_LINEAR = 301991168,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_HDR10<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_HDR10 = 301999616,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_JPEG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_JPEG = 570426566,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_BT601_LIMITED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_BT601_LIMITED = 554703046,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_BT601_FULL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_BT601_FULL = 571480262,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_BT709_LIMITED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_BT709_LIMITED = 554697761,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_BT709_FULL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_BT709_FULL = 571474977,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_BT2020_LIMITED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_BT2020_LIMITED = 554706441,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_BT2020_FULL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_BT2020_FULL = 571483657,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_RGB_DEFAULT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_RGB_DEFAULT = 301991328,
			/// <summary><para>Please refer to <see cref="SDL_Colorspace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_COLORSPACE_YUV_DEFAULT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_COLORSPACE_YUV_DEFAULT = 570426566,
		}

		/// <summary>
		///   <para>A structure that represents a color as RGBA components.</para>
		/// </summary>
		/// <remarks>
		///   <para>The bits of this structure can be directly reinterpreted as aninteger-packed color which uses the<see cref="SDL_PixelFormat.SDL_PIXELFORMAT_RGBA32" /> format(<see cref="SDL_PixelFormat.SDL_PIXELFORMAT_ABGR8888" /> on little-endiansystems and <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_RGBA8888" /> onbig-endian systems).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Color<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Color
		/// {
		///     Uint8 r;
		///     Uint8 g;
		///     Uint8 b;
		///     Uint8 a;
		/// } SDL_Color;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Color
		{
			public byte r;
			public byte g;
			public byte b;
			public byte a;
		}

		/// <summary>
		///   <para>The bits of this structure can be directly reinterpreted as a float-packed color which uses the <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_RGBA128_FLOAT" /> format</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FColor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_FColor
		/// {
		///     float r;
		///     float g;
		///     float b;
		///     float a;
		/// } SDL_FColor;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_FColor
		{
			public float r;
			public float g;
			public float b;
			public float a;
		}

		/// <summary>
		///   <para>A set of indexed colors representing a palette.</para>
		/// </summary>
		/// <seealso cref="SDL_SetPaletteColors" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Palette<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Palette
		/// {
		///     int ncolors;        /**&lt; number of elements in `colors`. */
		///     SDL_Color *colors;  /**&lt; an array of colors, `ncolors` long. */
		///     Uint32 version;     /**&lt; internal use only, do not touch. */
		///     int refcount;       /**&lt; internal use only, do not touch. */
		/// } SDL_Palette;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Palette
		{
			public int ncolors;
			public SDL_Color* colors;
			public uint version;
			public int refcount;
		}

		/// <summary>
		///   <para>Details about the format of a pixel.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PixelFormatDetails<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_PixelFormatDetails
		/// {
		///     SDL_PixelFormat format;
		///     Uint8 bits_per_pixel;
		///     Uint8 bytes_per_pixel;
		///     Uint8 padding[2];
		///     Uint32 Rmask;
		///     Uint32 Gmask;
		///     Uint32 Bmask;
		///     Uint32 Amask;
		///     Uint8 Rbits;
		///     Uint8 Gbits;
		///     Uint8 Bbits;
		///     Uint8 Abits;
		///     Uint8 Rshift;
		///     Uint8 Gshift;
		///     Uint8 Bshift;
		///     Uint8 Ashift;
		/// } SDL_PixelFormatDetails;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PixelFormatDetails
		{
			public SDL_PixelFormat format;
			public byte bits_per_pixel;
			public byte bytes_per_pixel;
			public fixed byte padding[2];
			public uint Rmask;
			public uint Gmask;
			public uint Bmask;
			public uint Amask;
			public byte Rbits;
			public byte Gbits;
			public byte Bbits;
			public byte Abits;
			public byte Rshift;
			public byte Gshift;
			public byte Bshift;
			public byte Ashift;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPixelFormatName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetPixelFormatName(SDL_PixelFormat format);
		/// <summary>
		///   <para>Get the human readable name of a pixel format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> the pixel format to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the human readable name of the specified pixelformat or "<see cref="SDL_PixelFormat.SDL_PIXELFORMAT_UNKNOWN" />" if theformat isn't recognized.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPixelFormatName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetPixelFormatName(SDL_PixelFormat format);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		public static string SDL_GetPixelFormatName(SDL_PixelFormat format)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetPixelFormatName(format));
		}

		/// <summary>
		///   <para>Convert one of the enumerated pixel formats to a bpp value and RGBA masks.</para>
		/// </summary>
		/// <param name="format">
		///   <para> one of the <see cref="SDL_PixelFormat" /> values.   </para>
		/// </param>
		/// <param name="bpp">
		///   <para> a bits per pixel value; usually 15, 16, or 32.          </para>
		/// </param>
		/// <param name="Rmask">
		///   <para> a pointer filled in with the red mask for the format.   </para>
		/// </param>
		/// <param name="Gmask">
		///   <para> a pointer filled in with the green mask for the format. </para>
		/// </param>
		/// <param name="Bmask">
		///   <para> a pointer filled in with the blue mask for the format.  </para>
		/// </param>
		/// <param name="Amask">
		///   <para> a pointer filled in with the alpha mask for the format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPixelFormatForMasks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMasksForPixelFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int *bpp, Uint32 *Rmask, Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, out int bpp, out uint Rmask, out uint Gmask, out uint Bmask, out uint Amask);

		/// <summary>
		///   <para>Convert a bpp value and RGBA masks to an enumerated pixel format.</para>
		/// </summary>
		/// <param name="bpp">
		///   <para> a bits per pixel value; usually 15, 16, or 32. </para>
		/// </param>
		/// <param name="Rmask">
		///   <para> the red mask for the format.                   </para>
		/// </param>
		/// <param name="Gmask">
		///   <para> the green mask for the format.                 </para>
		/// </param>
		/// <param name="Bmask">
		///   <para> the blue mask for the format.                  </para>
		/// </param>
		/// <param name="Amask">
		///   <para> the alpha mask for the format.                 </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PixelFormat" />) Returns the<see cref="SDL_PixelFormat" /> value corresponding to the format masks,or <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_UNKNOWN" /> if there isn't amatch.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will return <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_UNKNOWN" /> ifthe conversion wasn't possible.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetMasksForPixelFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPixelFormatForMasks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
		/// </code><para>                                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

		/// <summary>
		///   <para>Create an <see cref="SDL_PixelFormatDetails" /> structure corresponding to a pixel format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> one of the <see cref="SDL_PixelFormat" /> values. </para>
		/// </param>
		/// <returns>
		///   <para>(const <see cref="SDL_PixelFormatDetails" /> *) Returns apointer to a <see cref="SDL_PixelFormatDetails" /> structure orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Returned structure may come from a shared global cache (i.e. not newlyallocated), and hence should not be modified, especially the palette. Weirderrors such as <c>Blit combination not supported</c> may occur.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPixelFormatDetails<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>const SDL_PixelFormatDetails * SDL_GetPixelFormatDetails(SDL_PixelFormat format);
		/// </code><para>                                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetPixelFormatDetails(SDL_PixelFormat format);

		/// <summary>
		///   <para>Create a palette structure with the specified number of color entries.</para>
		/// </summary>
		/// <param name="ncolors">
		///   <para> represents the number of color entries in the color palette. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Palette" /> *) Returns a new <see cref="SDL_Palette" />structure on success or NULL on failure (e.g. if there wasn't enoughmemory); call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The palette entries are initialized to white.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroyPalette" />
		/// <seealso cref="SDL_SetPaletteColors" />
		/// <seealso cref="SDL_SetSurfacePalette" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreatePalette<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Palette * SDL_CreatePalette(int ncolors);
		/// </code><para>                                                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreatePalette(int ncolors);

		/// <summary>
		///   <para>Set a range of colors in a palette.</para>
		/// </summary>
		/// <param name="palette">
		///   <para> the <see cref="SDL_Palette" /> structure to modify.                     </para>
		/// </param>
		/// <param name="colors">
		///   <para> an array of <see cref="SDL_Color" /> structures to copy into the palette. </para>
		/// </param>
		/// <param name="firstcolor">
		///   <para> the index of the first palette entry to modify.                         </para>
		/// </param>
		/// <param name="ncolors">
		///   <para> the number of entries to modify.                                        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetPaletteColors<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors, int firstcolor, int ncolors);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as long as the palette isnot modified or destroyed in another thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetPaletteColors(IntPtr palette, SDL_Color[] colors, int firstcolor, int ncolors);

		/// <summary>
		///   <para>Free a palette created with <see cref="SDL_CreatePalette" />().</para>
		/// </summary>
		/// <param name="palette">
		///   <para> the <see cref="SDL_Palette" /> structure to be freed. </para>
		/// </param>
		/// <seealso cref="SDL_CreatePalette" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyPalette<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyPalette(SDL_Palette *palette);
		/// </code><para>                                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as long as the palette isnot modified or destroyed in another thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyPalette(IntPtr palette);

		/// <summary>
		///   <para>Map an RGB triple to an opaque pixel value for a given pixel format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> a pointer to <see cref="SDL_PixelFormatDetails" /> describing the pixel format. </para>
		/// </param>
		/// <param name="palette">
		///   <para> an optional palette for indexed formats, may be NULL.                                      </para>
		/// </param>
		/// <param name="r">
		///   <para> the red component of the pixel in the range 0-255.                                         </para>
		/// </param>
		/// <param name="g">
		///   <para> the green component of the pixel in the range 0-255.                                       </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue component of the pixel in the range 0-255.                                        </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns a pixel value.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function maps the RGB color value to the specified pixel format andreturns the pixel value best approximating the given RGB color value forthe given pixel format.</para>
		///   <para>If the format has a palette (8-bit) the index of the closest matching colorin the palette will be returned.</para>
		///   <para>If the specified pixel format has an alpha component it will be returned asall 1 bits (fully opaque).</para>
		///   <para>If the pixel format bpp (color depth) is less than 32-bpp then the unusedupper bits of the return value can safely be ignored (e.g., with a 16-bppformat the return value can be assigned to a Uint16, and similarly a Uint8for an 8-bpp format).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPixelFormatDetails" />
		/// <seealso cref="SDL_GetRGB" />
		/// <seealso cref="SDL_MapRGBA" />
		/// <seealso cref="SDL_MapSurfaceRGB" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MapRGB<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_MapRGB(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as long as the palette isnot modified.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_MapRGB(IntPtr format, IntPtr palette, byte r, byte g, byte b);

		/// <summary>
		///   <para>Map an RGBA quadruple to a pixel value for a given pixel format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> a pointer to <see cref="SDL_PixelFormatDetails" /> describing the pixel format. </para>
		/// </param>
		/// <param name="palette">
		///   <para> an optional palette for indexed formats, may be NULL.                                      </para>
		/// </param>
		/// <param name="r">
		///   <para> the red component of the pixel in the range 0-255.                                         </para>
		/// </param>
		/// <param name="g">
		///   <para> the green component of the pixel in the range 0-255.                                       </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue component of the pixel in the range 0-255.                                        </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha component of the pixel in the range 0-255.                                       </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns a pixel value.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function maps the RGBA color value to the specified pixel format andreturns the pixel value best approximating the given RGBA color value forthe given pixel format.</para>
		///   <para>If the specified pixel format has no alpha component the alpha value willbe ignored (as it will be in formats with a palette).</para>
		///   <para>If the format has a palette (8-bit) the index of the closest matching colorin the palette will be returned.</para>
		///   <para>If the pixel format bpp (color depth) is less than 32-bpp then the unusedupper bits of the return value can safely be ignored (e.g., with a 16-bppformat the return value can be assigned to a Uint16, and similarly a Uint8for an 8-bpp format).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPixelFormatDetails" />
		/// <seealso cref="SDL_GetRGBA" />
		/// <seealso cref="SDL_MapRGB" />
		/// <seealso cref="SDL_MapSurfaceRGBA" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MapRGBA<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_MapRGBA(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as long as the palette isnot modified.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_MapRGBA(IntPtr format, IntPtr palette, byte r, byte g, byte b, byte a);

		/// <summary>
		///   <para>Get RGB values from a pixel in the specified format.</para>
		/// </summary>
		/// <param name="pixel">
		///   <para> a pixel value.                                                                             </para>
		/// </param>
		/// <param name="format">
		///   <para> a pointer to <see cref="SDL_PixelFormatDetails" /> describing the pixel format. </para>
		/// </param>
		/// <param name="palette">
		///   <para> an optional palette for indexed formats, may be NULL.                                      </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the red component, may be NULL.                                   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the green component, may be NULL.                                 </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the blue component, may be NULL.                                  </para>
		/// </param>
		/// <remarks>
		///   <para>This function uses the entire 8-bit [0..255] range when converting colorcomponents from pixel formats with less than 8-bits per RGB component(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,0xff, 0xff] not [0xf8, 0xfc, 0xf8]).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPixelFormatDetails" />
		/// <seealso cref="SDL_GetRGBA" />
		/// <seealso cref="SDL_MapRGB" />
		/// <seealso cref="SDL_MapRGBA" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRGB<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as long as the palette isnot modified.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GetRGB(uint pixel, IntPtr format, IntPtr palette, out byte r, out byte g, out byte b);

		/// <summary>
		///   <para>Get RGBA values from a pixel in the specified format.</para>
		/// </summary>
		/// <param name="pixel">
		///   <para> a pixel value.                                                                             </para>
		/// </param>
		/// <param name="format">
		///   <para> a pointer to <see cref="SDL_PixelFormatDetails" /> describing the pixel format. </para>
		/// </param>
		/// <param name="palette">
		///   <para> an optional palette for indexed formats, may be NULL.                                      </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the red component, may be NULL.                                   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the green component, may be NULL.                                 </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the blue component, may be NULL.                                  </para>
		/// </param>
		/// <param name="a">
		///   <para> a pointer filled in with the alpha component, may be NULL.                                 </para>
		/// </param>
		/// <remarks>
		///   <para>This function uses the entire 8-bit [0..255] range when converting colorcomponents from pixel formats with less than 8-bits per RGB component(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,0xff, 0xff] not [0xf8, 0xfc, 0xf8]).</para>
		///   <para>If the surface has no alpha component, the alpha will be returned as 0xff(100% opaque).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPixelFormatDetails" />
		/// <seealso cref="SDL_GetRGB" />
		/// <seealso cref="SDL_MapRGB" />
		/// <seealso cref="SDL_MapRGBA" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRGBA<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pixels.h">&lt;SDL3/SDL_pixels.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, as long as the palette isnot modified.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPixels">CategoryPixels</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GetRGBA(uint pixel, IntPtr format, IntPtr palette, out byte r, out byte g, out byte b, out byte a);

		// /usr/local/include/SDL3/SDL_rect.h

		/// <summary>
		///   <para>The structure that defines a point (using integers).</para>
		/// </summary>
		/// <seealso cref="SDL_GetRectEnclosingPoints" />
		/// <seealso cref="SDL_PointInRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Point<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Point
		/// {
		///     int x;
		///     int y;
		/// } SDL_Point;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Point
		{
			public int x;
			public int y;
		}

		/// <summary>
		///   <para>The structure that defines a point (using floating point values).</para>
		/// </summary>
		/// <seealso cref="SDL_GetRectEnclosingPointsFloat" />
		/// <seealso cref="SDL_PointInRectFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FPoint<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_FPoint
		/// {
		///     float x;
		///     float y;
		/// } SDL_FPoint;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_FPoint
		{
			public float x;
			public float y;
		}

		/// <summary>
		///   <para>A rectangle, with the origin at the upper left (using integers).</para>
		/// </summary>
		/// <seealso cref="SDL_RectEmpty" />
		/// <seealso cref="SDL_RectsEqual" />
		/// <seealso cref="SDL_HasRectIntersection" />
		/// <seealso cref="SDL_GetRectIntersection" />
		/// <seealso cref="SDL_GetRectAndLineIntersection" />
		/// <seealso cref="SDL_GetRectUnion" />
		/// <seealso cref="SDL_GetRectEnclosingPoints" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Rect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Rect
		/// {
		///     int x, y;
		///     int w, h;
		/// } SDL_Rect;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Rect
		{
			public int x;
			public int y;
			public int w;
			public int h;
		}

		/// <summary>
		///   <para>A rectangle, with the origin at the upper left (using floating point values).</para>
		/// </summary>
		/// <seealso cref="SDL_RectEmptyFloat" />
		/// <seealso cref="SDL_RectsEqualFloat" />
		/// <seealso cref="SDL_RectsEqualEpsilon" />
		/// <seealso cref="SDL_HasRectIntersectionFloat" />
		/// <seealso cref="SDL_GetRectIntersectionFloat" />
		/// <seealso cref="SDL_GetRectAndLineIntersectionFloat" />
		/// <seealso cref="SDL_GetRectUnionFloat" />
		/// <seealso cref="SDL_GetRectEnclosingPointsFloat" />
		/// <seealso cref="SDL_PointInRectFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_FRect
		/// {
		///     float x;
		///     float y;
		///     float w;
		///     float h;
		/// } SDL_FRect;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_FRect
		{
			public float x;
			public float y;
			public float w;
			public float h;
		}

		/// <summary>
		///   <para>Convert an <see cref="SDL_Rect" /> to <see cref="SDL_FRect" /></para>
		/// </summary>
		/// <param name="rect">
		///   <para> a pointer to an <see cref="SDL_Rect" />.                                 </para>
		/// </param>
		/// <param name="frect">
		///   <para> a pointer filled in with the floating point representation of <c>rect</c>. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RectToFRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE void SDL_RectToFRect(const SDL_Rect *rect, SDL_FRect *frect);
		/// </code><para>                                                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_RectToFRect(ref SDL_Rect rect, out SDL_FRect frect);

		/// <summary>
		///   <para>Determine whether a point resides inside a rectangle.</para>
		/// </summary>
		/// <param name="p">
		///   <para> the point to test.     </para>
		/// </param>
		/// <param name="r">
		///   <para> the rectangle to test. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if <c>p</c> is contained by <c>r</c>, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>A point is considered part of a rectangle if both <c>p</c> and <c>r</c> are not NULL,and <c>p</c>'s x and y coordinates are &gt;= to the rectangle's top left corner,and &lt; the rectangle's x+w and y+h. So a 1x1 rectangle considers point (0,0)as "inside" and (0,1) as not.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PointInRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PointInRect(ref SDL_Point p, ref SDL_Rect r);

		/// <summary>
		///   <para>Determine whether a rectangle has no area.</para>
		/// </summary>
		/// <param name="r">
		///   <para> the rectangle to test. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the rectangle is "empty", false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>A rectangle is considered "empty" for this function if <c>r</c> is NULL, or if<c>r</c>'s width and/or height are &lt;= 0.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RectEmpty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_RectEmpty(const SDL_Rect *r);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RectEmpty(ref SDL_Rect r);

		/// <summary>
		///   <para>Determine whether two rectangles are equal.</para>
		/// </summary>
		/// <param name="a">
		///   <para> the first rectangle to test.  </para>
		/// </param>
		/// <param name="b">
		///   <para> the second rectangle to test. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the rectangles are equal, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Rectangles are considered equal if both are not NULL and each of their x,y, width and height match.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RectsEqual<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_RectsEqual(const SDL_Rect *a, const SDL_Rect *b);
		/// </code><para>                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RectsEqual(ref SDL_Rect a, ref SDL_Rect b);

		/// <summary>
		///   <para>Determine whether two rectangles intersect.</para>
		/// </summary>
		/// <param name="A">
		///   <para> an <see cref="SDL_Rect" /> structure representing the first rectangle.  </para>
		/// </param>
		/// <param name="B">
		///   <para> an <see cref="SDL_Rect" /> structure representing the second rectangle. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is an intersection, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If either pointer is NULL the function will return false.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRectIntersection" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasRectIntersection<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasRectIntersection(const SDL_Rect *A, const SDL_Rect *B);
		/// </code><para>                                                                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasRectIntersection(ref SDL_Rect A, ref SDL_Rect B);

		/// <summary>
		///   <para>Calculate the intersection of two rectangles.</para>
		/// </summary>
		/// <param name="A">
		///   <para> an <see cref="SDL_Rect" /> structure representing the first rectangle.                          </para>
		/// </param>
		/// <param name="B">
		///   <para> an <see cref="SDL_Rect" /> structure representing the second rectangle.                         </para>
		/// </param>
		/// <param name="result">
		///   <para> an <see cref="SDL_Rect" /> structure filled in with the intersection of rectangles <c>A</c> and <c>B</c>. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is an intersection, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>result</c> is NULL then this function will return false.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasRectIntersection" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectIntersection<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectIntersection(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
		/// </code><para>                                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectIntersection(ref SDL_Rect A, ref SDL_Rect B, out SDL_Rect result);

		/// <summary>
		///   <para>Calculate the union of two rectangles.</para>
		/// </summary>
		/// <param name="A">
		///   <para> an <see cref="SDL_Rect" /> structure representing the first rectangle.                   </para>
		/// </param>
		/// <param name="B">
		///   <para> an <see cref="SDL_Rect" /> structure representing the second rectangle.                  </para>
		/// </param>
		/// <param name="result">
		///   <para> an <see cref="SDL_Rect" /> structure filled in with the union of rectangles <c>A</c> and <c>B</c>. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectUnion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectUnion(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
		/// </code><para>                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectUnion(ref SDL_Rect A, ref SDL_Rect B, out SDL_Rect result);

		/// <summary>
		///   <para>Calculate a minimal rectangle enclosing a set of points.</para>
		/// </summary>
		/// <param name="points">
		///   <para> an array of <see cref="SDL_Point" /> structures representing points to be enclosed. </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of structures in the <c>points</c> array.                                   </para>
		/// </param>
		/// <param name="clip">
		///   <para> an <see cref="SDL_Rect" /> used for clipping or NULL to enclose all points.          </para>
		/// </param>
		/// <param name="result">
		///   <para> an <see cref="SDL_Rect" /> structure filled in with the minimal enclosing rectangle. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if any points were enclosed or false if all the pointswere outside of the clipping rectangle.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>clip</c> is not NULL then only points inside of the clipping rectangle areconsidered.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectEnclosingPoints<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectEnclosingPoints(const SDL_Point *points, int count, const SDL_Rect *clip, SDL_Rect *result);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectEnclosingPoints(SDL_Point[] points, int count, ref SDL_Rect clip, out SDL_Rect result);

		/// <summary>
		///   <para>Calculate the intersection of a rectangle and line segment.</para>
		/// </summary>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure representing the rectangle to intersect. </para>
		/// </param>
		/// <param name="X1">
		///   <para> a pointer to the starting X-coordinate of the line.                        </para>
		/// </param>
		/// <param name="Y1">
		///   <para> a pointer to the starting Y-coordinate of the line.                        </para>
		/// </param>
		/// <param name="X2">
		///   <para> a pointer to the ending X-coordinate of the line.                          </para>
		/// </param>
		/// <param name="Y2">
		///   <para> a pointer to the ending Y-coordinate of the line.                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is an intersection, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is used to clip a line segment to a rectangle. A line segmentcontained entirely within the rectangle or that does not intersect willremain unchanged. A line segment that crosses the rectangle at either orboth ends will be clipped to the boundary of the rectangle and the newcoordinates saved in <c>X1</c>, <c>Y1</c>, <c>X2</c>, and/or <c>Y2</c> as necessary.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectAndLineIntersection<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectAndLineIntersection(const SDL_Rect *rect, int *X1, int *Y1, int *X2, int *Y2);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectAndLineIntersection(ref SDL_Rect rect, ref int X1, ref int Y1, ref int X2, ref int Y2);

		/// <summary>
		///   <para>Determine whether a point resides inside a floating point rectangle.</para>
		/// </summary>
		/// <param name="p">
		///   <para> the point to test.     </para>
		/// </param>
		/// <param name="r">
		///   <para> the rectangle to test. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if <c>p</c> is contained by <c>r</c>, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>A point is considered part of a rectangle if both <c>p</c> and <c>r</c> are not NULL,and <c>p</c>'s x and y coordinates are &gt;= to the rectangle's top left corner,and &lt;= the rectangle's x+w and y+h. So a 1x1 rectangle considers point(0,0) and (0,1) as "inside" and (0,2) as not.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PointInRectFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_PointInRectFloat(const SDL_FPoint *p, const SDL_FRect *r);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PointInRectFloat(ref SDL_FPoint p, ref SDL_FRect r);

		/// <summary>
		///   <para>Determine whether a floating point rectangle can contain any point.</para>
		/// </summary>
		/// <param name="r">
		///   <para> the rectangle to test. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the rectangle is "empty", false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>A rectangle is considered "empty" for this function if <c>r</c> is NULL, or if<c>r</c>'s width and/or height are &lt; 0.0f.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RectEmptyFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_RectEmptyFloat(const SDL_FRect *r);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RectEmptyFloat(ref SDL_FRect r);

		/// <summary>
		///   <para>Determine whether two floating point rectangles are equal, within some given epsilon.</para>
		/// </summary>
		/// <param name="a">
		///   <para> the first rectangle to test.      </para>
		/// </param>
		/// <param name="b">
		///   <para> the second rectangle to test.     </para>
		/// </param>
		/// <param name="epsilon">
		///   <para> the epsilon value for comparison. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the rectangles are equal, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Rectangles are considered equal if both are not NULL and each of their x,y, width and height are within <c>epsilon</c> of each other. If you don't knowwhat value to use for <c>epsilon</c>, you should call the<see cref="SDL_RectsEqualFloat" /> function instead.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <seealso cref="SDL_RectsEqualFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RectsEqualEpsilon<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_RectsEqualEpsilon(const SDL_FRect *a, const SDL_FRect *b, const float epsilon);
		/// </code><para>                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RectsEqualEpsilon(ref SDL_FRect a, ref SDL_FRect b, float epsilon);

		/// <summary>
		///   <para>Determine whether two floating point rectangles are equal, within a default epsilon.</para>
		/// </summary>
		/// <param name="a">
		///   <para> the first rectangle to test.  </para>
		/// </param>
		/// <param name="b">
		///   <para> the second rectangle to test. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the rectangles are equal, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>Rectangles are considered equal if both are not NULL and each of their x,y, width and height are within <see cref="SDL_FLT_EPSILON" /> of eachother. This is often a reasonable way to compare two floating pointrectangles and deal with the slight precision variations in floating pointcalculations that tend to pop up.</para>
		///   <para>Note that this is a forced-inline function in a header, and not a publicAPI function available in the SDL library (which is to say, the code isembedded in the calling program and the linker and dynamic loader will notbe able to find this function inside SDL itself).</para>
		/// </remarks>
		/// <seealso cref="SDL_RectsEqualEpsilon" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RectsEqualFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FORCE_INLINE bool SDL_RectsEqualFloat(const SDL_FRect *a, const SDL_FRect *b);
		/// </code><para>                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RectsEqualFloat(ref SDL_FRect a, ref SDL_FRect b);

		/// <summary>
		///   <para>Determine whether two rectangles intersect with float precision.</para>
		/// </summary>
		/// <param name="A">
		///   <para> an <see cref="SDL_FRect" /> structure representing the first rectangle.  </para>
		/// </param>
		/// <param name="B">
		///   <para> an <see cref="SDL_FRect" /> structure representing the second rectangle. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is an intersection, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If either pointer is NULL the function will return false.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRectIntersection" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasRectIntersectionFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasRectIntersectionFloat(ref SDL_FRect A, ref SDL_FRect B);

		/// <summary>
		///   <para>Calculate the intersection of two rectangles with float precision.</para>
		/// </summary>
		/// <param name="A">
		///   <para> an <see cref="SDL_FRect" /> structure representing the first rectangle.                          </para>
		/// </param>
		/// <param name="B">
		///   <para> an <see cref="SDL_FRect" /> structure representing the second rectangle.                         </para>
		/// </param>
		/// <param name="result">
		///   <para> an <see cref="SDL_FRect" /> structure filled in with the intersection of rectangles <c>A</c> and <c>B</c>. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is an intersection, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>result</c> is NULL then this function will return false.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasRectIntersectionFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectIntersectionFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);
		/// </code><para>                                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectIntersectionFloat(ref SDL_FRect A, ref SDL_FRect B, out SDL_FRect result);

		/// <summary>
		///   <para>Calculate the union of two rectangles with float precision.</para>
		/// </summary>
		/// <param name="A">
		///   <para> an <see cref="SDL_FRect" /> structure representing the first rectangle.                   </para>
		/// </param>
		/// <param name="B">
		///   <para> an <see cref="SDL_FRect" /> structure representing the second rectangle.                  </para>
		/// </param>
		/// <param name="result">
		///   <para> an <see cref="SDL_FRect" /> structure filled in with the union of rectangles <c>A</c> and <c>B</c>. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectUnionFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectUnionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);
		/// </code><para>                                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectUnionFloat(ref SDL_FRect A, ref SDL_FRect B, out SDL_FRect result);

		/// <summary>
		///   <para>Calculate a minimal rectangle enclosing a set of points with float precision.</para>
		/// </summary>
		/// <param name="points">
		///   <para> an array of <see cref="SDL_FPoint" /> structures representing points to be enclosed. </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of structures in the <c>points</c> array.                                     </para>
		/// </param>
		/// <param name="clip">
		///   <para> an <see cref="SDL_FRect" /> used for clipping or NULL to enclose all points.          </para>
		/// </param>
		/// <param name="result">
		///   <para> an <see cref="SDL_FRect" /> structure filled in with the minimal enclosing rectangle. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if any points were enclosed or false if all the pointswere outside of the clipping rectangle.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>clip</c> is not NULL then only points inside of the clipping rectangle areconsidered.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectEnclosingPointsFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectEnclosingPointsFloat(const SDL_FPoint *points, int count, const SDL_FRect *clip, SDL_FRect *result);
		/// </code><para>                                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectEnclosingPointsFloat(SDL_FPoint[] points, int count, ref SDL_FRect clip, out SDL_FRect result);

		/// <summary>
		///   <para>Calculate the intersection of a rectangle and line segment with float precision.</para>
		/// </summary>
		/// <param name="rect">
		///   <para> an <see cref="SDL_FRect" /> structure representing the rectangle to intersect. </para>
		/// </param>
		/// <param name="X1">
		///   <para> a pointer to the starting X-coordinate of the line.                          </para>
		/// </param>
		/// <param name="Y1">
		///   <para> a pointer to the starting Y-coordinate of the line.                          </para>
		/// </param>
		/// <param name="X2">
		///   <para> a pointer to the ending X-coordinate of the line.                            </para>
		/// </param>
		/// <param name="Y2">
		///   <para> a pointer to the ending Y-coordinate of the line.                            </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is an intersection, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is used to clip a line segment to a rectangle. A line segmentcontained entirely within the rectangle or that does not intersect willremain unchanged. A line segment that crosses the rectangle at either orboth ends will be clipped to the boundary of the rectangle and the newcoordinates saved in <c>X1</c>, <c>Y1</c>, <c>X2</c>, and/or <c>Y2</c> as necessary.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRectAndLineIntersectionFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_rect.h">&lt;SDL3/SDL_rect.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRectAndLineIntersectionFloat(const SDL_FRect *rect, float *X1, float *Y1, float *X2, float *Y2);
		/// </code><para>                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRect">CategoryRect</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRectAndLineIntersectionFloat(ref SDL_FRect rect, ref float X1, ref float Y1, ref float X2, ref float Y2);

		// /usr/local/include/SDL3/SDL_surface.h

		/// <summary>
		///   <para>The flags on an <see cref="SDL_Surface" />.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are generally considered read-only.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SurfaceFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_SurfaceFlags;
		/// 
		/// #define SDL_SURFACE_PREALLOCATED    0x00000001u /**&lt; Surface uses preallocated pixel memory */
		/// #define SDL_SURFACE_LOCK_NEEDED     0x00000002u /**&lt; Surface needs to be locked to access pixels */
		/// #define SDL_SURFACE_LOCKED          0x00000004u /**&lt; Surface is currently locked */
		/// #define SDL_SURFACE_SIMD_ALIGNED    0x00000008u /**&lt; Surface uses pixel memory allocated with SDL_aligned_alloc() */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[Flags]
		public enum SDL_SurfaceFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_SurfaceFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SURFACE_PREALLOCATED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_SURFACE_PREALLOCATED = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_SurfaceFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SURFACE_LOCK_NEEDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_SURFACE_LOCK_NEEDED = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_SurfaceFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SURFACE_LOCKED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_SURFACE_LOCKED = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_SurfaceFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SURFACE_SIMD_ALIGNED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_SURFACE_SIMD_ALIGNED = 0x08,
		}

		/// <summary>
		///   <para>The scaling mode.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ScaleMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ScaleMode
		/// {
		///     SDL_SCALEMODE_NEAREST, /**&lt; nearest pixel sampling */
		///     SDL_SCALEMODE_LINEAR   /**&lt; linear filtering */
		/// } SDL_ScaleMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		public enum SDL_ScaleMode
		{
			/// <summary><para>Please refer to <see cref="SDL_ScaleMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCALEMODE_NEAREST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCALEMODE_NEAREST = 0,
			/// <summary><para>Please refer to <see cref="SDL_ScaleMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCALEMODE_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCALEMODE_LINEAR = 1,
		}

		/// <summary>
		///   <para>The flip mode.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlipMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_FlipMode
		/// {
		///     SDL_FLIP_NONE,          /**&lt; Do not flip */
		///     SDL_FLIP_HORIZONTAL,    /**&lt; flip horizontally */
		///     SDL_FLIP_VERTICAL       /**&lt; flip vertically */
		/// } SDL_FlipMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		public enum SDL_FlipMode
		{
			/// <summary><para>Please refer to <see cref="SDL_FlipMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FLIP_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FLIP_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_FlipMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FLIP_HORIZONTAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FLIP_HORIZONTAL = 1,
			/// <summary><para>Please refer to <see cref="SDL_FlipMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FLIP_VERTICAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FLIP_VERTICAL = 2,
		}

		/// <summary>
		///   <para>A collection of pixels used in software blitting.</para>
		/// </summary>
		/// <remarks>
		///   <para>Pixels are arranged in memory in rows, with the top row first. Each rowoccupies an amount of memory given by the pitch (sometimes known as the rowstride in non-SDL APIs).</para>
		///   <para>Within each row, pixels are arranged from left to right until the width isreached. Each pixel occupies a number of bits appropriate for its format,with most formats representing each pixel as one or more whole bytes (insome indexed formats, instead multiple pixels are packed into each byte),and a byte order given by the format. After encoding all pixels, anyremaining bytes to reach the pitch are used as padding to reach a desiredalignment, and have undefined contents.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateSurface" />
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Surface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>struct SDL_Surface
		/// {
		///     SDL_SurfaceFlags flags;     /**&lt; The flags of the surface, read-only */
		///     SDL_PixelFormat format;     /**&lt; The format of the surface, read-only */
		///     int w;                      /**&lt; The width of the surface, read-only. */
		///     int h;                      /**&lt; The height of the surface, read-only. */
		///     int pitch;                  /**&lt; The distance in bytes between rows of pixels, read-only */
		///     void *pixels;               /**&lt; A pointer to the pixels of the surface, the pixels are writeable if non-NULL */
		/// 
		///     int refcount;               /**&lt; Application reference count, used when freeing surface */
		/// 
		///     void *reserved;             /**&lt; Reserved for internal use */
		/// };
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Surface
		{
			public SDL_SurfaceFlags flags;
			public SDL_PixelFormat format;
			public int w;
			public int h;
			public int pitch;
			public IntPtr pixels;
			public int refcount;
			public IntPtr reserved;
		}

		/// <summary>
		///   <para>Allocate a new surface with a specific pixel format.</para>
		/// </summary>
		/// <param name="width">
		///   <para> the width of the surface.                                                  </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the surface.                                                 </para>
		/// </param>
		/// <param name="format">
		///   <para> the <see cref="SDL_PixelFormat" /> for the new surface's pixel format. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns the new <see cref="SDL_Surface" />structure that is created or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixels of the new surface are initialized to zero.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateSurfaceFrom" />
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_CreateSurface(int width, int height, SDL_PixelFormat format);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateSurface(int width, int height, SDL_PixelFormat format);

		/// <summary>
		///   <para>Allocate a new surface with a specific pixel format and existing pixel data.</para>
		/// </summary>
		/// <param name="width">
		///   <para> the width of the surface.                                                  </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the surface.                                                 </para>
		/// </param>
		/// <param name="format">
		///   <para> the <see cref="SDL_PixelFormat" /> for the new surface's pixel format. </para>
		/// </param>
		/// <param name="pixels">
		///   <para> a pointer to existing pixel data.                                          </para>
		/// </param>
		/// <param name="pitch">
		///   <para> the number of bytes between each row, including padding.                   </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns the new <see cref="SDL_Surface" />structure that is created or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>No copy is made of the pixel data. Pixel data is not managed automatically;you must free the surface before you free the pixel data.</para>
		///   <para>Pitch is the offset in bytes from one row of pixels to the next, e.g.<c>width*4</c> for <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_RGBA8888" />.</para>
		///   <para>You may pass NULL for pixels and 0 for pitch to create a surface that youwill fill in with valid values later.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateSurface" />
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateSurfaceFrom<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void *pixels, int pitch);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, IntPtr pixels, int pitch);

		/// <summary>
		///   <para>Free a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> to free. </para>
		/// </param>
		/// <remarks>
		///   <para>It is safe to pass NULL to this function.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateStackSurface" />
		/// <seealso cref="SDL_CreateSurface" />
		/// <seealso cref="SDL_CreateSurfaceFrom" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroySurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroySurface(SDL_Surface *surface);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroySurface(IntPtr surface);

		/// <summary>
		///   <para>Get the properties associated with a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following properties are understood by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT" />:for HDR10 and floating point surfaces, this defines the value of 100%diffuse white, with higher values being displayed in the High DynamicRange headroom. This defaults to 203 for HDR10 surfaces and 1.0 forfloating point surfaces.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT" />:for HDR10 and floating point surfaces, this defines the maximum dynamicrange used by the content, in terms of the SDR white point. This defaultsto 0.0, which disables tone mapping.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING" />:the tone mapping operator used when compressing from a surface with highdynamic range to another with lower dynamic range. Currently thissupports "chrome", which uses the same tone mapping that Chrome uses forHDR content, the form "*=N", where N is a floating point scale factorapplied in linear space, and "none", which disables tone mapping. Thisdefaults to "chrome".</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface *surface);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetSurfaceProperties(IntPtr surface);

		/// <summary>
		///   <para>Set the colorspace used by a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update.                          </para>
		/// </param>
		/// <param name="colorspace">
		///   <para> an <see cref="SDL_ColorSpace" /> value describing the surface colorspace. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Setting the colorspace doesn't change the pixels, only how they areinterpreted in color operations.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetSurfaceColorspace" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceColorspace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceColorspace(SDL_Surface *surface, SDL_Colorspace colorspace);
		/// </code><para>                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceColorspace(IntPtr surface, SDL_Colorspace colorspace);

		/// <summary>
		///   <para>Get the colorspace used by a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Colorspace" />) Returns the colorspace used by thesurface, or <see cref="SDL_Colorspace.SDL_COLORSPACE_UNKNOWN" /> if the surfaceis NULL.</para>
		/// </returns>
		/// <remarks>
		///   <para>The colorspace defaults to<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" /> for floating pointformats, <see cref="SDL_Colorspace.SDL_COLORSPACE_HDR10" /> for 10-bit formats,<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB" /> for other RGB surfaces and<see cref="SDL_Colorspace.SDL_COLORSPACE_BT709_FULL" /> for YUV textures.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetSurfaceColorspace" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceColorspace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface *surface);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_Colorspace SDL_GetSurfaceColorspace(IntPtr surface);

		/// <summary>
		///   <para>Create a palette and associate it with a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Palette" /> *) Returns a new <see cref="SDL_Palette" />structure on success or NULL on failure (e.g. if the surface didn't have anindex format); call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function creates a palette compatible with the provided surface. Thepalette is then returned for you to modify, and the surface willautomatically use the new palette in future operations. You do not need todestroy the returned palette, it will be freed when the reference countreaches 0, usually when the surface is destroyed.</para>
		///   <para>Bitmap surfaces (with format<see cref="SDL_PixelFormat.SDL_PIXELFORMAT_INDEX1LSB" /> or<see cref="SDL_PixelFormat.SDL_PIXELFORMAT_INDEX1MSB" />) will have thepalette initialized with 0 as white and 1 as black. Other surfaces will geta palette initialized with white in every entry.</para>
		///   <para>If this function is called for a surface that already has a palette, a newpalette will be created to replace it.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetPaletteColors" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateSurfacePalette<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Palette * SDL_CreateSurfacePalette(SDL_Surface *surface);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateSurfacePalette(IntPtr surface);

		/// <summary>
		///   <para>Set the palette used by a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update. </para>
		/// </param>
		/// <param name="palette">
		///   <para> the <see cref="SDL_Palette" /> structure to use.    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>A single palette can be shared with many surfaces.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreatePalette" />
		/// <seealso cref="SDL_GetSurfacePalette" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfacePalette<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfacePalette(SDL_Surface *surface, SDL_Palette *palette);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfacePalette(IntPtr surface, IntPtr palette);

		/// <summary>
		///   <para>Get the palette used by a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Palette" /> *) Returns a pointer to the palette used by thesurface, or NULL if there is no palette used.</para>
		/// </returns>
		/// <seealso cref="SDL_SetSurfacePalette" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfacePalette<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Palette * SDL_GetSurfacePalette(SDL_Surface *surface);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetSurfacePalette(IntPtr surface);

		/// <summary>
		///   <para>Add an alternate version of a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update.                                  </para>
		/// </param>
		/// <param name="image">
		///   <para> a pointer to an alternate <see cref="SDL_Surface" /> to associate with this surface. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function adds an alternate version of this surface, usually used forcontent with high DPI representations like cursors or icons. The size,format, and content do not need to match the original surface, and thesealternate versions will not be updated when the original surface changes.</para>
		///   <para>This function adds a reference to the alternate version, so you should call<see cref="SDL_DestroySurface" />() on the image after this call.</para>
		/// </remarks>
		/// <seealso cref="SDL_RemoveSurfaceAlternateImages" />
		/// <seealso cref="SDL_GetSurfaceImages" />
		/// <seealso cref="SDL_SurfaceHasAlternateImages" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddSurfaceAlternateImage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_AddSurfaceAlternateImage(SDL_Surface *surface, SDL_Surface *image);
		/// </code><para>                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_AddSurfaceAlternateImage(IntPtr surface, IntPtr image);

		/// <summary>
		///   <para>Return whether a surface has alternate versions available.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if alternate versions are available or true otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_AddSurfaceAlternateImage" />
		/// <seealso cref="SDL_RemoveSurfaceAlternateImages" />
		/// <seealso cref="SDL_GetSurfaceImages" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SurfaceHasAlternateImages<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SurfaceHasAlternateImages(SDL_Surface *surface);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SurfaceHasAlternateImages(IntPtr surface);

		/// <summary>
		///   <para>Get an array including all versions of a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query.                             </para>
		/// </param>
		/// <param name="count">
		///   <para> a pointer filled in with the number of surface pointers returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> **) Returns a NULL terminated array of<see cref="SDL_Surface" /> pointers or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns all versions of a surface, with the surface being queried asthe first element in the returned array.</para>
		///   <para>Freeing the array of surfaces does not affect the surfaces in the array.They are still referenced by the surface being queried and will be cleanedup normally.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddSurfaceAlternateImage" />
		/// <seealso cref="SDL_RemoveSurfaceAlternateImages" />
		/// <seealso cref="SDL_SurfaceHasAlternateImages" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceImages<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface ** SDL_GetSurfaceImages(SDL_Surface *surface, int *count);
		/// </code><para>                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetSurfaceImages(IntPtr surface, out int count);

		/// <summary>
		///   <para>Remove all alternate versions of a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update. </para>
		/// </param>
		/// <remarks>
		///   <para>This function removes a reference from all the alternative versions,destroying them if this is the last reference to them.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddSurfaceAlternateImage" />
		/// <seealso cref="SDL_GetSurfaceImages" />
		/// <seealso cref="SDL_SurfaceHasAlternateImages" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RemoveSurfaceAlternateImages<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_RemoveSurfaceAlternateImages(SDL_Surface *surface);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_RemoveSurfaceAlternateImages(IntPtr surface);

		/// <summary>
		///   <para>Set up a surface for directly accessing the pixels.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to be locked. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Between calls to <see cref="SDL_LockSurface" />() /<see cref="SDL_UnlockSurface" />(), you can write to and read from<c>surface-&gt;pixels</c>, using the pixel format stored in <c>surface-&gt;format</c>. Onceyou are done accessing the surface, you should use<see cref="SDL_UnlockSurface" />() to release it.</para>
		///   <para>Not all surfaces require locking. If <c>SDL_MUSTLOCK(surface)</c> evaluates to0, then you can read and write to the surface at any time, and the pixelformat of the surface will not change.</para>
		/// </remarks>
		/// <seealso cref="SDL_MUSTLOCK" />
		/// <seealso cref="SDL_UnlockSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LockSurface(SDL_Surface *surface);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_LockSurface(IntPtr surface);

		/// <summary>
		///   <para>Release a surface after directly accessing the pixels.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to be unlocked. </para>
		/// </param>
		/// <seealso cref="SDL_LockSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockSurface(SDL_Surface *surface);
		/// </code><para>                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockSurface(IntPtr surface);

		/// <summary>
		///   <para>Load a BMP image from a seekable SDL data stream.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the data stream for the surface.                                                                     </para>
		/// </param>
		/// <param name="closeio">
		///   <para> if true, calls <see cref="SDL_CloseIO" />() on <c>src</c> before returning, even in the case of an error. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns a pointer to a new<see cref="SDL_Surface" /> structure or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The new surface should be freed with<see cref="SDL_DestroySurface" />(). Not doing so will result in amemory leak.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroySurface" />
		/// <seealso cref="SDL_LoadBMP" />
		/// <seealso cref="SDL_SaveBMP_IO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadBMP_IO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_LoadBMP_IO(SDL_IOStream *src, bool closeio);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_LoadBMP_IO(IntPtr src, SDLBool closeio);

		[DllImport(nativeLibName, EntryPoint = "SDL_LoadBMP", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_LoadBMP(byte* file);
		/// <summary>
		///   <para>Load a BMP image from a file.</para>
		/// </summary>
		/// <param name="file">
		///   <para> the BMP file to load. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns a pointer to a new<see cref="SDL_Surface" /> structure or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The new surface should be freed with<see cref="SDL_DestroySurface" />(). Not doing so will result in amemory leak.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroySurface" />
		/// <seealso cref="SDL_LoadBMP_IO" />
		/// <seealso cref="SDL_SaveBMP" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadBMP<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_LoadBMP(const char *file);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		public static IntPtr SDL_LoadBMP(string file)
		{
			var fileUTF8 = EncodeAsUTF8(file);
			var result = INTERNAL_SDL_LoadBMP(fileUTF8);

			SDL_free((IntPtr) fileUTF8);
			return result;
		}

		/// <summary>
		///   <para>Save a surface to a seekable SDL data stream in BMP format.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure containing the image to be saved.                           </para>
		/// </param>
		/// <param name="dst">
		///   <para> a data stream to save to.                                                                            </para>
		/// </param>
		/// <param name="closeio">
		///   <para> if true, calls <see cref="SDL_CloseIO" />() on <c>dst</c> before returning, even in the case of an error. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in theBMP directly. Other RGB formats with 8-bit or higher get converted to a24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bitsurface before they are saved. YUV and paletted 1-bit and 4-bit formats arenot supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_LoadBMP_IO" />
		/// <seealso cref="SDL_SaveBMP" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SaveBMP_IO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SaveBMP_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SaveBMP_IO(IntPtr surface, IntPtr dst, SDLBool closeio);

		[DllImport(nativeLibName, EntryPoint = "SDL_SaveBMP", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SaveBMP(IntPtr surface, byte* file);
		/// <summary>
		///   <para>Save a surface to a file.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure containing the image to be saved. </para>
		/// </param>
		/// <param name="file">
		///   <para> a file to save to.                                                         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in theBMP directly. Other RGB formats with 8-bit or higher get converted to a24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bitsurface before they are saved. YUV and paletted 1-bit and 4-bit formats arenot supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_LoadBMP" />
		/// <seealso cref="SDL_SaveBMP_IO" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SaveBMP<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SaveBMP(SDL_Surface *surface, const char *file);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		public static SDLBool SDL_SaveBMP(IntPtr surface, string file)
		{
			var fileUTF8 = EncodeAsUTF8(file);
			var result = INTERNAL_SDL_SaveBMP(surface, fileUTF8);

			SDL_free((IntPtr) fileUTF8);
			return result;
		}

		/// <summary>
		///   <para>Set the RLE acceleration hint for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to optimize. </para>
		/// </param>
		/// <param name="enabled">
		///   <para> true to enable RLE acceleration, false to disable it. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If RLE is enabled, color key and alpha blending blits are much faster, butthe surface must be locked before directly accessing the pixels.</para>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurface" />
		/// <seealso cref="SDL_LockSurface" />
		/// <seealso cref="SDL_UnlockSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceRLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceRLE(SDL_Surface *surface, bool enabled);
		/// </code><para>                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceRLE(IntPtr surface, SDLBool enabled);

		/// <summary>
		///   <para>Returns whether the surface is RLE enabled.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the surface is RLE enabled, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>It is safe to pass a NULL <c>surface</c> here; it will return false.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetSurfaceRLE" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SurfaceHasRLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SurfaceHasRLE(SDL_Surface *surface);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SurfaceHasRLE(IntPtr surface);

		/// <summary>
		///   <para>Set the color key (transparent pixel) in a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update.   </para>
		/// </param>
		/// <param name="enabled">
		///   <para> true to enable color key, false to disable color key. </para>
		/// </param>
		/// <param name="key">
		///   <para> the transparent pixel.                                </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The color key defines a pixel value that will be treated as transparent ina blit. For example, one can use this to specify that cyan pixels should beconsidered transparent, and therefore not rendered.</para>
		///   <para>It is a pixel of the format used by the surface, as generated by<see cref="SDL_MapRGB" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetSurfaceColorKey" />
		/// <seealso cref="SDL_SetSurfaceRLE" />
		/// <seealso cref="SDL_SurfaceHasColorKey" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceColorKey<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceColorKey(SDL_Surface *surface, bool enabled, Uint32 key);
		/// </code><para>                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceColorKey(IntPtr surface, SDLBool enabled, uint key);

		/// <summary>
		///   <para>Returns whether the surface has a color key.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the surface has a color key, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>It is safe to pass a NULL <c>surface</c> here; it will return false.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetSurfaceColorKey" />
		/// <seealso cref="SDL_GetSurfaceColorKey" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SurfaceHasColorKey<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SurfaceHasColorKey(SDL_Surface *surface);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SurfaceHasColorKey(IntPtr surface);

		/// <summary>
		///   <para>Get the color key (transparent pixel) for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <param name="key">
		///   <para> a pointer filled in with the transparent pixel.    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The color key is a pixel of the format used by the surface, as generated by<see cref="SDL_MapRGB" />().</para>
		///   <para>If the surface doesn't have color key enabled this function returns false.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetSurfaceColorKey" />
		/// <seealso cref="SDL_SurfaceHasColorKey" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceColorKey<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetSurfaceColorKey(SDL_Surface *surface, Uint32 *key);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetSurfaceColorKey(IntPtr surface, out uint key);

		/// <summary>
		///   <para>Set an additional color value multiplied into blit operations.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update.    </para>
		/// </param>
		/// <param name="r">
		///   <para> the red color value multiplied into blit operations.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green color value multiplied into blit operations. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue color value multiplied into blit operations.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When this surface is blitted, during the blit operation each source colorchannel is modulated by the appropriate color value according to thefollowing formula:</para>
		///   <para>
		///     <c>srcC = srcC * (color / 255)</c>
		///   </para>
		/// </remarks>
		/// <seealso cref="SDL_GetSurfaceColorMod" />
		/// <seealso cref="SDL_SetSurfaceAlphaMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceColorMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceColorMod(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceColorMod(IntPtr surface, byte r, byte g, byte b);

		/// <summary>
		///   <para>Get the additional color value multiplied into blit operations.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query.      </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the current red color value.   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the current green color value. </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the current blue color value.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetSurfaceAlphaMod" />
		/// <seealso cref="SDL_SetSurfaceColorMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceColorMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetSurfaceColorMod(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetSurfaceColorMod(IntPtr surface, out byte r, out byte g, out byte b);

		/// <summary>
		///   <para>Set an additional alpha value used in blit operations.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update. </para>
		/// </param>
		/// <param name="alpha">
		///   <para> the alpha value multiplied into blit operations.    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When this surface is blitted, during the blit operation the source alphavalue is modulated by this alpha value according to the following formula:</para>
		///   <para>
		///     <c>srcA = srcA * (alpha / 255)</c>
		///   </para>
		/// </remarks>
		/// <seealso cref="SDL_GetSurfaceAlphaMod" />
		/// <seealso cref="SDL_SetSurfaceColorMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceAlphaMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceAlphaMod(SDL_Surface *surface, Uint8 alpha);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceAlphaMod(IntPtr surface, byte alpha);

		/// <summary>
		///   <para>Get the additional alpha value used in blit operations.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query. </para>
		/// </param>
		/// <param name="alpha">
		///   <para> a pointer filled in with the current alpha value.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetSurfaceColorMod" />
		/// <seealso cref="SDL_SetSurfaceAlphaMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceAlphaMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetSurfaceAlphaMod(SDL_Surface *surface, Uint8 *alpha);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetSurfaceAlphaMod(IntPtr surface, out byte alpha);

		/// <summary>
		///   <para>Set the blend mode used for blit operations.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to update.          </para>
		/// </param>
		/// <param name="blendMode">
		///   <para> the <see cref="SDL_BlendMode" /> to use for blit blending. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>To copy a surface to another surface (or texture) without blending with theexisting data, the blendmode of the SOURCE surface should be set to<see cref="SDL_BLENDMODE_NONE" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetSurfaceBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode blendMode);
		/// </code><para>                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceBlendMode(IntPtr surface, uint blendMode);

		/// <summary>
		///   <para>Get the blend mode used for blit operations.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to query.                   </para>
		/// </param>
		/// <param name="blendMode">
		///   <para> a pointer filled in with the current <see cref="SDL_BlendMode" />. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetSurfaceBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode);
		/// </code><para>                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetSurfaceBlendMode(IntPtr surface, IntPtr blendMode);

		/// <summary>
		///   <para>Set the clipping rectangle for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure to be clipped.                                              </para>
		/// </param>
		/// <param name="rect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the clipping rectangle, or NULL to disable clipping. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the rectangle intersects the surface, otherwisefalse and blits will be completely clipped.</para>
		/// </returns>
		/// <remarks>
		///   <para>When <c>surface</c> is the destination of a blit, only the area within the cliprectangle is drawn into.</para>
		///   <para>Note that blits are automatically clipped to the edges of the source anddestination surfaces.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetSurfaceClipRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetSurfaceClipRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetSurfaceClipRect(SDL_Surface *surface, const SDL_Rect *rect);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetSurfaceClipRect(IntPtr surface, ref SDL_Rect rect);

		/// <summary>
		///   <para>Get the clipping rectangle for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure representing the surface to be clipped.         </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure filled in with the clipping rectangle for the surface. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When <c>surface</c> is the destination of a blit, only the area within the cliprectangle is drawn into.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetSurfaceClipRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSurfaceClipRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetSurfaceClipRect(SDL_Surface *surface, SDL_Rect *rect);
		/// </code><para>                                                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetSurfaceClipRect(IntPtr surface, out SDL_Rect rect);

		/// <summary>
		///   <para>Flip a surface vertically or horizontally.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to flip.   </para>
		/// </param>
		/// <param name="flip">
		///   <para> the direction to flip. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlipSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FlipSurface(SDL_Surface *surface, SDL_FlipMode flip);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FlipSurface(IntPtr surface, SDL_FlipMode flip);

		/// <summary>
		///   <para>Creates a new surface identical to the existing surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to duplicate. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns a copy of the surface or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the original surface has alternate images, the new surface will have areference to them as well.</para>
		///   <para>The returned surface should be freed with<see cref="SDL_DestroySurface" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DuplicateSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_DuplicateSurface(SDL_Surface *surface);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_DuplicateSurface(IntPtr surface);

		/// <summary>
		///   <para>Creates a new surface identical to the existing surface, scaled to the desired size.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to duplicate and scale.            </para>
		/// </param>
		/// <param name="width">
		///   <para> the width of the new surface.                  </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the new surface.                 </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> the <see cref="SDL_ScaleMode" /> to be used. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns a copy of the surface or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The returned surface should be freed with<see cref="SDL_DestroySurface" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ScaleSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_ScaleSurface(SDL_Surface *surface, int width, int height, SDL_ScaleMode scaleMode);
		/// </code><para>                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_ScaleSurface(IntPtr surface, int width, int height, SDL_ScaleMode scaleMode);

		/// <summary>
		///   <para>Copy an existing surface to a new surface of the specified format.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the existing <see cref="SDL_Surface" /> structure to convert. </para>
		/// </param>
		/// <param name="format">
		///   <para> the new pixel format.                                         </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns the new <see cref="SDL_Surface" />structure that is created or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is used to optimize images for faster repeat blitting. Thisis accomplished by converting the original and storing the result as a newsurface. The new, optimized surface can then be used as the source forfuture blits, making them faster.</para>
		///   <para>If you are converting to an indexed surface and want to map colors to apalette, you can use<see cref="SDL_ConvertSurfaceAndColorspace" />()instead.</para>
		///   <para>If the original surface has alternate images, the new surface will have areference to them as well.</para>
		/// </remarks>
		/// <seealso cref="SDL_ConvertSurfaceAndColorspace" />
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ConvertSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_ConvertSurface(SDL_Surface *surface, SDL_PixelFormat format);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>
		/// SDL_Surface *input;
		/// SDL_Surface *output = SDL_ConvertSurface(input, SDL_PIXELFORMAT_RGBA32);
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_ConvertSurface(IntPtr surface, SDL_PixelFormat format);

		/// <summary>
		///   <para>Copy an existing surface to a new surface of the specified format and colorspace.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the existing <see cref="SDL_Surface" /> structure to convert.                   </para>
		/// </param>
		/// <param name="format">
		///   <para> the new pixel format.                                                           </para>
		/// </param>
		/// <param name="palette">
		///   <para> an optional palette to use for indexed formats, may be NULL.                    </para>
		/// </param>
		/// <param name="colorspace">
		///   <para> the new colorspace.                                                             </para>
		/// </param>
		/// <param name="props">
		///   <para> an <see cref="SDL_PropertiesID" /> with additional color properties, or 0. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns the new <see cref="SDL_Surface" />structure that is created or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function converts an existing surface to a new format and colorspaceand returns the new surface. This will perform any pixel format andcolorspace conversion needed.</para>
		///   <para>If the original surface has alternate images, the new surface will have areference to them as well.</para>
		/// </remarks>
		/// <seealso cref="SDL_ConvertSurface" />
		/// <seealso cref="SDL_ConvertSurface" />
		/// <seealso cref="SDL_DestroySurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ConvertSurfaceAndColorspace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_ConvertSurfaceAndColorspace(SDL_Surface *surface, SDL_PixelFormat format, SDL_Palette *palette, SDL_Colorspace colorspace, SDL_PropertiesID props);
		/// </code><para>                                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_ConvertSurfaceAndColorspace(IntPtr surface, SDL_PixelFormat format, IntPtr palette, SDL_Colorspace colorspace, uint props);

		/// <summary>
		///   <para>Copy a block of pixels of one format to another format.</para>
		/// </summary>
		/// <param name="width">
		///   <para> the width of the block to copy, in pixels.                              </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the block to copy, in pixels.                             </para>
		/// </param>
		/// <param name="src_format">
		///   <para> an <see cref="SDL_PixelFormat" /> value of the <c>src</c> pixels format. </para>
		/// </param>
		/// <param name="src">
		///   <para> a pointer to the source pixels.                                         </para>
		/// </param>
		/// <param name="src_pitch">
		///   <para> the pitch of the source pixels, in bytes.                               </para>
		/// </param>
		/// <param name="dst_format">
		///   <para> an <see cref="SDL_PixelFormat" /> value of the <c>dst</c> pixels format. </para>
		/// </param>
		/// <param name="dst">
		///   <para> a pointer to be filled in with new pixel data.                          </para>
		/// </param>
		/// <param name="dst_pitch">
		///   <para> the pitch of the destination pixels, in bytes.                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns false on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_ConvertPixelsAndColorspace" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ConvertPixels<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, IntPtr src, int src_pitch, SDL_PixelFormat dst_format, IntPtr dst, int dst_pitch);

		/// <summary>
		///   <para>Copy a block of pixels of one format and colorspace to another format and colorspace.</para>
		/// </summary>
		/// <param name="width">
		///   <para> the width of the block to copy, in pixels.                                                  </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the block to copy, in pixels.                                                 </para>
		/// </param>
		/// <param name="src_format">
		///   <para> an <see cref="SDL_PixelFormat" /> value of the <c>src</c> pixels format.                     </para>
		/// </param>
		/// <param name="src_colorspace">
		///   <para> an <see cref="SDL_ColorSpace" /> value describing the colorspace of the <c>src</c> pixels.    </para>
		/// </param>
		/// <param name="src_properties">
		///   <para> an <see cref="SDL_PropertiesID" /> with additional source color properties, or 0.      </para>
		/// </param>
		/// <param name="src">
		///   <para> a pointer to the source pixels.                                                             </para>
		/// </param>
		/// <param name="src_pitch">
		///   <para> the pitch of the source pixels, in bytes.                                                   </para>
		/// </param>
		/// <param name="dst_format">
		///   <para> an <see cref="SDL_PixelFormat" /> value of the <c>dst</c> pixels format.                     </para>
		/// </param>
		/// <param name="dst_colorspace">
		///   <para> an <see cref="SDL_ColorSpace" /> value describing the colorspace of the <c>dst</c> pixels.    </para>
		/// </param>
		/// <param name="dst_properties">
		///   <para> an <see cref="SDL_PropertiesID" /> with additional destination color properties, or 0. </para>
		/// </param>
		/// <param name="dst">
		///   <para> a pointer to be filled in with new pixel data.                                              </para>
		/// </param>
		/// <param name="dst_pitch">
		///   <para> the pitch of the destination pixels, in bytes.                                              </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns false on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_ConvertPixels" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ConvertPixelsAndColorspace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, const void *src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void *dst, int dst_pitch);
		/// </code><para>                                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, uint src_properties, IntPtr src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, uint dst_properties, IntPtr dst, int dst_pitch);

		/// <summary>
		///   <para>Premultiply the alpha on a block of pixels.</para>
		/// </summary>
		/// <param name="width">
		///   <para> the width of the block to convert, in pixels.                                                                     </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the block to convert, in pixels.                                                                    </para>
		/// </param>
		/// <param name="src_format">
		///   <para> an <see cref="SDL_PixelFormat" /> value of the <c>src</c> pixels format.                                           </para>
		/// </param>
		/// <param name="src">
		///   <para> a pointer to the source pixels.                                                                                   </para>
		/// </param>
		/// <param name="src_pitch">
		///   <para> the pitch of the source pixels, in bytes.                                                                         </para>
		/// </param>
		/// <param name="dst_format">
		///   <para> an <see cref="SDL_PixelFormat" /> value of the <c>dst</c> pixels format.                                           </para>
		/// </param>
		/// <param name="dst">
		///   <para> a pointer to be filled in with premultiplied pixel data.                                                          </para>
		/// </param>
		/// <param name="dst_pitch">
		///   <para> the pitch of the destination pixels, in bytes.                                                                    </para>
		/// </param>
		/// <param name="linear">
		///   <para> true to convert from sRGB to linear space for the alpha multiplication, false to do multiplication in sRGB space. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is safe to use with src == dst, but not for other overlapping areas.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PremultiplyAlpha<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch, bool linear);
		/// </code><para>                                                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, IntPtr src, int src_pitch, SDL_PixelFormat dst_format, IntPtr dst, int dst_pitch, SDLBool linear);

		/// <summary>
		///   <para>Premultiply the alpha in a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to modify.                                                                                            </para>
		/// </param>
		/// <param name="linear">
		///   <para> true to convert from sRGB to linear space for the alpha multiplication, false to do multiplication in sRGB space. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is safe to use with src == dst, but not for other overlapping areas.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PremultiplySurfaceAlpha<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PremultiplySurfaceAlpha(SDL_Surface *surface, bool linear);
		/// </code><para>                                                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PremultiplySurfaceAlpha(IntPtr surface, SDLBool linear);

		/// <summary>
		///   <para>Clear a surface with a specific color, with floating point precision.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> to clear.                     </para>
		/// </param>
		/// <param name="r">
		///   <para> the red component of the pixel, normally in the range 0-1.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green component of the pixel, normally in the range 0-1. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue component of the pixel, normally in the range 0-1.  </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha component of the pixel, normally in the range 0-1. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function handles all surface formats, and ignores any clip rectangle.</para>
		///   <para>If the surface is YUV, the color is assumed to be in the sRGB colorspace,otherwise the color is assumed to be in the colorspace of the suface.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClearSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClearSurface(SDL_Surface *surface, float r, float g, float b, float a);
		/// </code><para>                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ClearSurface(IntPtr surface, float r, float g, float b, float a);

		/// <summary>
		///   <para>Perform a fast fill of a rectangle with a specific color.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the drawing target.                                       </para>
		/// </param>
		/// <param name="rect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to fill, or NULL to fill the entire surface. </para>
		/// </param>
		/// <param name="color">
		///   <para> the color to fill with.                                                                                    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <c>color</c> should be a pixel of the format used by the surface, and can begenerated by <see cref="SDL_MapRGB" />() or <see cref="SDL_MapRGBA" />(). Ifthe color value contains an alpha component then the destination is simplyfilled with that alpha information, no blending takes place.</para>
		///   <para>If there is a clip rectangle set on the destination (set via<see cref="SDL_SetSurfaceClipRect" />()), then this functionwill fill based on the intersection of the clip rectangle and <c>rect</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_FillSurfaceRects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FillSurfaceRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FillSurfaceRect(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color);
		/// </code><para>                                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FillSurfaceRect(IntPtr dst, IntPtr rect, uint color); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform a fast fill of a set of rectangles with a specific color.</para>
		/// </summary>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the drawing target.    </para>
		/// </param>
		/// <param name="rects">
		///   <para> an array of <see cref="SDL_Rects" /> representing the rectangles to fill. </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of rectangles in the array.                                  </para>
		/// </param>
		/// <param name="color">
		///   <para> the color to fill with.                                                 </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <c>color</c> should be a pixel of the format used by the surface, and can begenerated by <see cref="SDL_MapRGB" />() or <see cref="SDL_MapRGBA" />(). Ifthe color value contains an alpha component then the destination is simplyfilled with that alpha information, no blending takes place.</para>
		///   <para>If there is a clip rectangle set on the destination (set via<see cref="SDL_SetSurfaceClipRect" />()), then this functionwill fill based on the intersection of the clip rectangle and <c>rect</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_FillSurfaceRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FillSurfaceRects<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FillSurfaceRects(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FillSurfaceRects(IntPtr dst, SDL_Rect[] rects, int count, uint color);

		/// <summary>
		///   <para>Performs a fast blit from the source surface to the destination surface.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                                                                                                                                                                                                    </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be copied, or NULL to copy the entire surface.                                                                                                                                                                                </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                                                                                                                                                                                              </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the x and y position in the destination surface, or NULL for (0,0). The width and height are ignored, and are copied from <c>srcrect</c>. If you want a specific width and height, you should use <see cref="SDL_BlitSurfaceScaled" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This assumes that the source and destination rectangles are the same size.If either <c>srcrect</c> or <c>dstrect</c> are NULL, the entire surface (<c>src</c> or<c>dst</c>) is copied. The final blit rectangles are saved in <c>srcrect</c> and<c>dstrect</c> after all clipping is performed.</para>
		///   <para>The blit function should not be called on a locked surface.</para>
		///   <para>The blit semantics for surfaces with and without blending and colorkey aredefined as follows:</para>
		///   <code>   RGBA-&gt;RGB:
		///      Source surface blend mode set to SDL_BLENDMODE_BLEND:
		///       alpha-blend (using the source alpha-channel and per-surface alpha)
		///       SDL_SRCCOLORKEY ignored.
		///     Source surface blend mode set to SDL_BLENDMODE_NONE:
		///       copy RGB.
		///       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
		///       RGB values of the source color key, ignoring alpha in the
		///       comparison.
		/// 
		///   RGB-&gt;RGBA:
		///     Source surface blend mode set to SDL_BLENDMODE_BLEND:
		///       alpha-blend (using the source per-surface alpha)
		///     Source surface blend mode set to SDL_BLENDMODE_NONE:
		///       copy RGB, set destination alpha to source per-surface alpha value.
		///     both:
		///       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
		///       source color key.
		/// 
		///   RGBA-&gt;RGBA:
		///     Source surface blend mode set to SDL_BLENDMODE_BLEND:
		///       alpha-blend (using the source alpha-channel and per-surface alpha)
		///       SDL_SRCCOLORKEY ignored.
		///     Source surface blend mode set to SDL_BLENDMODE_NONE:
		///       copy all of RGBA to the destination.
		///       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
		///       RGB values of the source color key, ignoring alpha in the
		///       comparison.
		/// 
		///   RGB-&gt;RGB:
		///     Source surface blend mode set to SDL_BLENDMODE_BLEND:
		///       alpha-blend (using the source per-surface alpha)
		///     Source surface blend mode set to SDL_BLENDMODE_NONE:
		///       copy RGB.
		///     both:
		///       if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
		///       source color key.
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurfaceScaled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
		/// </code><para>                                                                                                                                                                                                                                                                                                </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>SDL_Surface *surface;
		/// SDL_Rect source_rect;
		/// SDL_Surface *temp_surface;
		/// 
		/// SDL_BlitSurface(surface, &amp;source_rect, temp_surface, NULL);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurface(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform low-level surface blitting only.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                       </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be copied, may not be NULL.                      </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                 </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the target rectangle in the destination surface, may not be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is a semi-private blit function and it performs low-level surfaceblitting, assuming the input rectangles have already been clipped.</para>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurfaceUnchecked<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurfaceUnchecked(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
		/// </code><para>                                                                                                                   </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurfaceUnchecked(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform a scaled blit to a destination surface, which may be of a different format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                                                      </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be copied, or NULL to copy the entire surface.                                  </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                                                </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the target rectangle in the destination surface, or NULL to fill the entire destination surface. </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> the <see cref="SDL_ScaleMode" /> to be used.                                                                                                   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_BlitSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurfaceScaled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurfaceScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);
		/// </code><para>                                                                                                                                                  </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurfaceScaled(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect, SDL_ScaleMode scaleMode); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform low-level surface scaled blitting only.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                       </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be copied, may not be NULL.                      </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                 </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the target rectangle in the destination surface, may not be NULL. </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> the <see cref="SDL_ScaleMode" /> to be used.                                                                    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is a semi-private function and it performs low-level surface blitting,assuming the input rectangles have already been clipped.</para>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurfaceScaled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurfaceUncheckedScaled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurfaceUncheckedScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);
		/// </code><para>                                                                                                                   </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurfaceUncheckedScaled(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect, SDL_ScaleMode scaleMode); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform a tiled blit to a destination surface, which may be of a different format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                                          </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be copied, or NULL to copy the entire surface.                      </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                                    </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the target rectangle in the destination surface, or NULL to fill the entire surface. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixels in <c>srcrect</c> will be repeated as many times as needed tocompletely fill <c>dstrect</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurfaceTiled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurfaceTiled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
		/// </code><para>                                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurfaceTiled(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform a scaled and tiled blit to a destination surface, which may be of a different format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                                          </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be copied, or NULL to copy the entire surface.                      </para>
		/// </param>
		/// <param name="scale">
		///   <para> the scale used to transform srcrect into the destination rectangle, e.g. a 32x32 texture with a scale of 2 would fill 64x64 tiles.   </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> scale algorithm to be used.                                                                                                          </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                                    </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the target rectangle in the destination surface, or NULL to fill the entire surface. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixels in <c>srcrect</c> will be scaled and repeated as many times as neededto completely fill <c>dstrect</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurfaceTiledWithScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurfaceTiledWithScale(SDL_Surface *src, const SDL_Rect *srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);
		/// </code><para>                                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurfaceTiledWithScale(IntPtr src, IntPtr srcrect, float scale, SDL_ScaleMode scaleMode, IntPtr dst, IntPtr dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform a scaled blit using the 9-grid algorithm to a destination surface, which may be of a different format.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the <see cref="SDL_Surface" /> structure to be copied from.                                                                          </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be used for the 9-grid, or NULL to use the entire surface.          </para>
		/// </param>
		/// <param name="left_width">
		///   <para> the width, in pixels, of the left corners in <c>srcrect</c>.                                                                              </para>
		/// </param>
		/// <param name="right_width">
		///   <para> the width, in pixels, of the right corners in <c>srcrect</c>.                                                                             </para>
		/// </param>
		/// <param name="top_height">
		///   <para> the height, in pixels, of the top corners in <c>srcrect</c>.                                                                              </para>
		/// </param>
		/// <param name="bottom_height">
		///   <para> the height, in pixels, of the bottom corners in <c>srcrect</c>.                                                                           </para>
		/// </param>
		/// <param name="scale">
		///   <para> the scale used to transform the corner of <c>srcrect</c> into the corner of <c>dstrect</c>, or 0.0f for an unscaled blit.                      </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> scale algorithm to be used.                                                                                                          </para>
		/// </param>
		/// <param name="dst">
		///   <para> the <see cref="SDL_Surface" /> structure that is the blit target.                                                                    </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the target rectangle in the destination surface, or NULL to fill the entire surface. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixels in the source surface are split into a 3x3 grid, using thedifferent corner sizes for each corner, and the sides and center making upthe remaining pixels. The corners are then scaled using <c>scale</c> and fitinto the corners of the destination rectangle. The sides and center arethen stretched into place to cover the remaining destination rectangle.</para>
		/// </remarks>
		/// <seealso cref="SDL_BlitSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitSurface9Grid<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_BlitSurface9Grid(SDL_Surface *src, const SDL_Rect *srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);
		/// </code><para>                                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>The same destination surface should not be used from two threads at once.It is safe to use the same source surface from multiple threads.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_BlitSurface9Grid(IntPtr src, IntPtr srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, IntPtr dst, IntPtr dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Map an RGB triple to an opaque pixel value for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to use for the pixel format and palette. </para>
		/// </param>
		/// <param name="r">
		///   <para> the red component of the pixel in the range 0-255.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green component of the pixel in the range 0-255. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue component of the pixel in the range 0-255.  </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns a pixel value.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function maps the RGB color value to the specified pixel format andreturns the pixel value best approximating the given RGB color value forthe given pixel format.</para>
		///   <para>If the surface has a palette, the index of the closest matching color inthe palette will be returned.</para>
		///   <para>If the surface pixel format has an alpha component it will be returned asall 1 bits (fully opaque).</para>
		///   <para>If the pixel format bpp (color depth) is less than 32-bpp then the unusedupper bits of the return value can safely be ignored (e.g., with a 16-bppformat the return value can be assigned to a Uint16, and similarly a Uint8for an 8-bpp format).</para>
		/// </remarks>
		/// <seealso cref="SDL_MapSurfaceRGBA" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MapSurfaceRGB<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_MapSurfaceRGB(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_MapSurfaceRGB(IntPtr surface, byte r, byte g, byte b);

		/// <summary>
		///   <para>Map an RGBA quadruple to a pixel value for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to use for the pixel format and palette. </para>
		/// </param>
		/// <param name="r">
		///   <para> the red component of the pixel in the range 0-255.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green component of the pixel in the range 0-255. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue component of the pixel in the range 0-255.  </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha component of the pixel in the range 0-255. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns a pixel value.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function maps the RGBA color value to the specified pixel format andreturns the pixel value best approximating the given RGBA color value forthe given pixel format.</para>
		///   <para>If the surface pixel format has no alpha component the alpha value will beignored (as it will be in formats with a palette).</para>
		///   <para>If the surface has a palette, the index of the closest matching color inthe palette will be returned.</para>
		///   <para>If the pixel format bpp (color depth) is less than 32-bpp then the unusedupper bits of the return value can safely be ignored (e.g., with a 16-bppformat the return value can be assigned to a Uint16, and similarly a Uint8for an 8-bpp format).</para>
		/// </remarks>
		/// <seealso cref="SDL_MapSurfaceRGB" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MapSurfaceRGBA<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_MapSurfaceRGBA(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_MapSurfaceRGBA(IntPtr surface, byte r, byte g, byte b, byte a);

		/// <summary>
		///   <para>Retrieves a single pixel from a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to read.                                                               </para>
		/// </param>
		/// <param name="x">
		///   <para> the horizontal coordinate, 0 &lt;= x &lt; width.                                         </para>
		/// </param>
		/// <param name="y">
		///   <para> the vertical coordinate, 0 &lt;= y &lt; height.                                          </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the red channel, 0-255, or NULL to ignore this channel.   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the green channel, 0-255, or NULL to ignore this channel. </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the blue channel, 0-255, or NULL to ignore this channel.  </para>
		/// </param>
		/// <param name="a">
		///   <para> a pointer filled in with the alpha channel, 0-255, or NULL to ignore this channel. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function prioritizes correctness over speed: it is suitable for unittests, but is not intended for use in a game engine.</para>
		///   <para>Like <see cref="SDL_GetRGBA" />, this uses the entire 0..255 range whenconverting color components from pixel formats with less than 8 bits perRGB component.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadSurfacePixel<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
		/// </code><para>                                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadSurfacePixel(IntPtr surface, int x, int y, out byte r, out byte g, out byte b, out byte a);

		/// <summary>
		///   <para>Retrieves a single pixel from a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to read.                                                                                   </para>
		/// </param>
		/// <param name="x">
		///   <para> the horizontal coordinate, 0 &lt;= x &lt; width.                                                             </para>
		/// </param>
		/// <param name="y">
		///   <para> the vertical coordinate, 0 &lt;= y &lt; height.                                                              </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the red channel, normally in the range 0-1, or NULL to ignore this channel.   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the green channel, normally in the range 0-1, or NULL to ignore this channel. </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the blue channel, normally in the range 0-1, or NULL to ignore this channel.  </para>
		/// </param>
		/// <param name="a">
		///   <para> a pointer filled in with the alpha channel, normally in the range 0-1, or NULL to ignore this channel. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function prioritizes correctness over speed: it is suitable for unittests, but is not intended for use in a game engine.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadSurfacePixelFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadSurfacePixelFloat(SDL_Surface *surface, int x, int y, float *r, float *g, float *b, float *a);
		/// </code><para>                                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReadSurfacePixelFloat(IntPtr surface, int x, int y, out float r, out float g, out float b, out float a);

		/// <summary>
		///   <para>Writes a single pixel to a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to write.                      </para>
		/// </param>
		/// <param name="x">
		///   <para> the horizontal coordinate, 0 &lt;= x &lt; width. </para>
		/// </param>
		/// <param name="y">
		///   <para> the vertical coordinate, 0 &lt;= y &lt; height.  </para>
		/// </param>
		/// <param name="r">
		///   <para> the red channel value, 0-255.              </para>
		/// </param>
		/// <param name="g">
		///   <para> the green channel value, 0-255.            </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue channel value, 0-255.             </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha channel value, 0-255.            </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function prioritizes correctness over speed: it is suitable for unittests, but is not intended for use in a game engine.</para>
		///   <para>Like <see cref="SDL_MapRGBA" />, this uses the entire 0..255 range whenconverting color components from pixel formats with less than 8 bits perRGB component.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteSurfacePixel<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteSurfacePixel(IntPtr surface, int x, int y, byte r, byte g, byte b, byte a);

		/// <summary>
		///   <para>Writes a single pixel to a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the surface to write.                               </para>
		/// </param>
		/// <param name="x">
		///   <para> the horizontal coordinate, 0 &lt;= x &lt; width.          </para>
		/// </param>
		/// <param name="y">
		///   <para> the vertical coordinate, 0 &lt;= y &lt; height.           </para>
		/// </param>
		/// <param name="r">
		///   <para> the red channel value, normally in the range 0-1.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green channel value, normally in the range 0-1. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue channel value, normally in the range 0-1.  </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha channel value, normally in the range 0-1. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function prioritizes correctness over speed: it is suitable for unittests, but is not intended for use in a game engine.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteSurfacePixelFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_surface.h">&lt;SDL3/SDL_surface.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteSurfacePixelFloat(SDL_Surface *surface, int x, int y, float r, float g, float b, float a);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySurface">CategorySurface</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WriteSurfacePixelFloat(IntPtr surface, int x, int y, float r, float g, float b, float a);

		// /usr/local/include/SDL3/SDL_camera.h

		/// <summary>
		///   <para>The details of an output format for a camera device.</para>
		/// </summary>
		/// <remarks>
		///   <para>Cameras often support multiple formats; each one will be encapsulated inthis struct.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCameraSupportedFormats" />
		/// <seealso cref="SDL_GetCameraFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CameraSpec<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_CameraSpec
		/// {
		///     SDL_PixelFormat format;     /**&lt; Frame format */
		///     SDL_Colorspace colorspace;  /**&lt; Frame colorspace */
		///     int width;                  /**&lt; Frame width */
		///     int height;                 /**&lt; Frame height */
		///     int framerate_numerator;     /**&lt; Frame rate numerator ((num / denom) == FPS, (denom / num) == duration in seconds) */
		///     int framerate_denominator;   /**&lt; Frame rate demoninator ((num / denom) == FPS, (denom / num) == duration in seconds) */
		/// } SDL_CameraSpec;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_CameraSpec
		{
			public SDL_PixelFormat format;
			public SDL_Colorspace colorspace;
			public int width;
			public int height;
			public int framerate_numerator;
			public int framerate_denominator;
		}

		/// <summary>
		///   <para>The position of camera in relation to system device.</para>
		/// </summary>
		/// <seealso cref="SDL_GetCameraPosition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CameraPosition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_CameraPosition
		/// {
		///     SDL_CAMERA_POSITION_UNKNOWN,
		///     SDL_CAMERA_POSITION_FRONT_FACING,
		///     SDL_CAMERA_POSITION_BACK_FACING
		/// } SDL_CameraPosition;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		public enum SDL_CameraPosition
		{
			/// <summary><para>Please refer to <see cref="SDL_CameraPosition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAMERA_POSITION_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAMERA_POSITION_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_CameraPosition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAMERA_POSITION_FRONT_FACING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAMERA_POSITION_FRONT_FACING = 1,
			/// <summary><para>Please refer to <see cref="SDL_CameraPosition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAMERA_POSITION_BACK_FACING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAMERA_POSITION_BACK_FACING = 2,
		}

		/// <summary>
		///   <para>Use this function to get the number of built-in camera drivers.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the number of built-in camera drivers.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns a hardcoded number. This never returns a negativevalue; if there are no drivers compiled into this build of SDL, thisfunction returns zero. The presence of a driver in this list does not meanit will function, it just means SDL is capable of interacting with thatinterface. For example, a build of SDL might have v4l2 support, but ifthere's no kernel support available, SDL's v4l2 driver would fail if used.</para>
		///   <para>By default, SDL tries all drivers, in its preferred order, until one isfound to be usable.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCameraDriver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumCameraDrivers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumCameraDrivers(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumCameraDrivers();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetCameraDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetCameraDriver(int index);
		/// <summary>
		///   <para>Use this function to get the name of a built in camera driver.</para>
		/// </summary>
		/// <param name="index">
		///   <para> the index of the camera driver; the value ranges from 0 to <see cref="SDL_GetNumCameraDrivers" />() - 1. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the camera driver at the requestedindex, or NULL if an invalid index was specified.</para>
		/// </returns>
		/// <remarks>
		///   <para>The list of camera drivers is given in the order that they are normallyinitialized by default; the drivers that seem more reasonable to choosefirst (as far as the SDL developers believe) are earlier in the list.</para>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "v4l2","coremedia" or "android". These never have Unicode characters, and are notmeant to be proper names.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumCameraDrivers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetCameraDriver(int index);
		/// </code><para>                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		public static string SDL_GetCameraDriver(int index)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetCameraDriver(index));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetCurrentCameraDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetCurrentCameraDriver();
		/// <summary>
		///   <para>Get the name of the current camera driver.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns the name of the current camera driver or NULL if nodriver has been initialized.</para>
		/// </returns>
		/// <remarks>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "v4l2","coremedia" or "android". These never have Unicode characters, and are notmeant to be proper names.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentCameraDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetCurrentCameraDriver(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		public static string SDL_GetCurrentCameraDriver()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetCurrentCameraDriver());
		}

		/// <summary>
		///   <para>Get a list of currently connected camera devices.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of cameras returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_CameraID" /> *) Returns a 0 terminated array of camerainstance IDs or NULL on failure; call <see cref="SDL_GetError" />() formore information. This should be freed with <see cref="SDL_free" />() when itis no longer needed.</para>
		/// </returns>
		/// <seealso cref="SDL_OpenCamera" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameras<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_CameraID * SDL_GetCameras(int *count);
		/// </code><para>                                                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetCameras(out int count);

		/// <summary>
		///   <para>Get the list of native formats/sizes a camera supports.</para>
		/// </summary>
		/// <param name="devid">
		///   <para> the camera device instance ID to query.                                   </para>
		/// </param>
		/// <param name="count">
		///   <para> a pointer filled in with the number of elements in the list, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_CameraSpec" /> **) Returns a NULL terminated array ofpointers to <see cref="SDL_CameraSpec" /> or NULL on failure; call<see cref="SDL_GetError" />() for more information. This is a singleallocation that should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns a list of all formats and frame sizes that a specific cameracan offer. This is useful if your app can accept a variety of image formatsand sizes and so want to find the optimal spec that doesn't requireconversion.</para>
		///   <para>This function isn't strictly required; if you call<see cref="SDL_OpenCamera" /> with a NULL spec, SDL will choose a nativeformat for you, and if you instead specify a desired format, it willtransparently convert to the requested format on your behalf.</para>
		///   <para>If <c>count</c> is not NULL, it will be filled with the number of elements inthe returned array.</para>
		///   <para>Note that it's legal for a camera to supply an empty list. This is whatwill happen on Emscripten builds, since that platform won't tell anythingabout available cameras until you've opened one, and won't even tell ifthere is a camera until the user has given you permission to checkthrough a scary warning popup.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCameras" />
		/// <seealso cref="SDL_OpenCamera" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraSupportedFormats<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_CameraSpec ** SDL_GetCameraSupportedFormats(SDL_CameraID devid, int *count);
		/// </code><para>                                                                           </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetCameraSupportedFormats(uint devid, out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetCameraName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetCameraName(uint instance_id);
		/// <summary>
		///   <para>Get the human-readable device name for a camera.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the camera device instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a human-readable device name or NULL on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetCameras" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetCameraName(SDL_CameraID instance_id);
		/// </code><para>                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		public static string SDL_GetCameraName(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetCameraName(instance_id));
		}

		/// <summary>
		///   <para>Get the position of the camera in relation to the system.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the camera device instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_CameraPosition" />) Returns the position of thecamera on the system hardware.</para>
		/// </returns>
		/// <remarks>
		///   <para>Most platforms will report UNKNOWN, but mobile devices, like phones, canoften make a distinction between cameras on the front of the device (thatpoints towards the user, for taking "selfies") and cameras on the back (forfilming in the direction the user is facing).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCameras" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraPosition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_CameraPosition SDL_GetCameraPosition(SDL_CameraID instance_id);
		/// </code><para>                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_CameraPosition SDL_GetCameraPosition(uint instance_id);

		/// <summary>
		///   <para>Open a video recording device (a "camera").</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the camera device instance ID.                                    </para>
		/// </param>
		/// <param name="spec">
		///   <para> the desired format for data the device will provide. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Camera" /> *) Returns an <see cref="SDL_Camera" /> object orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can open the device with any reasonable spec, and if the hardware can'tdirectly support it, it will convert data seamlessly to the requestedformat. This might incur overhead, including scaling of image data.</para>
		///   <para>If you would rather accept whatever format the device offers, you can passa NULL spec here and it will choose one for you (and you can use<see cref="SDL_Surface" />'s conversion/scaling functions directly ifnecessary).</para>
		///   <para>You can call <see cref="SDL_GetCameraFormat" />() to get the actualdata format if passing a NULL spec here. You can see the exact specs adevice can support without conversion with<see cref="SDL_GetCameraSupportedFormats" />().</para>
		///   <para>SDL will not attempt to emulate framerate; it will try to set the hardwareto the rate closest to the requested speed, but it won't attempt to limitor duplicate frames artificially; call<see cref="SDL_GetCameraFormat" />() to see the actual framerate ofthe opened the device, and check your timestamps if this is crucial to yourapp!</para>
		///   <para>Note that the camera is not usable until the user approves its use! On someplatforms, the operating system will prompt the user to permit access tothe camera, and they can choose Yes or No at that point. Until they do, thecamera will not be usable. The app should either wait for an<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_APPROVED" /> (or<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_DENIED" />) event, orpoll <see cref="SDL_GetCameraPermissionState" />()occasionally until it returns non-zero. On platforms that don't requireexplicit user approval (and perhaps in places where the user previouslypermitted access), the approval event might come immediately, but it mightcome seconds, minutes, or hours later!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCameras" />
		/// <seealso cref="SDL_GetCameraFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenCamera<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Camera * SDL_OpenCamera(SDL_CameraID instance_id, const SDL_CameraSpec *spec);
		/// </code><para>                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenCamera(uint instance_id, ref SDL_CameraSpec spec);

		/// <summary>
		///   <para>Query if camera access has been approved by the user.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> the opened camera device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns -1 if user denied access to the camera, 1 if user approvedaccess, 0 if no decision has been made yet.</para>
		/// </returns>
		/// <remarks>
		///   <para>Cameras will not function between when the device is opened by the app andwhen the user permits access to the hardware. On some platforms, thispresents as a popup dialog where the user has to explicitly approve access;on others the approval might be implicit and not alert the user at all.</para>
		///   <para>This function can be used to check the status of that approval. It willreturn 0 if still waiting for user response, 1 if the camera is approvedfor use, and -1 if the user denied access.</para>
		///   <para>Instead of polling with this function, you can wait for a<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_APPROVED" /> (or<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_DENIED" />) event inthe standard SDL event loop, which is guaranteed to be sent once whenpermission to use the camera is decided.</para>
		///   <para>If a camera is declined, there's nothing to be done but call<see cref="SDL_CloseCamera" />() to dispose of it.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenCamera" />
		/// <seealso cref="SDL_CloseCamera" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraPermissionState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetCameraPermissionState(SDL_Camera *camera);
		/// </code><para>                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetCameraPermissionState(IntPtr camera);

		/// <summary>
		///   <para>Get the instance ID of an opened camera.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> an <see cref="SDL_Camera" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_CameraID" />) Returns the instance ID of the specifiedcamera on success or 0 on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <seealso cref="SDL_OpenCamera" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_CameraID SDL_GetCameraID(SDL_Camera *camera);
		/// </code><para>                                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetCameraID(IntPtr camera);

		/// <summary>
		///   <para>Get the properties associated with an opened camera.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> the <see cref="SDL_Camera" /> obtained from <see cref="SDL_OpenCamera" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetCameraProperties(SDL_Camera *camera);
		/// </code><para>                                                                                </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetCameraProperties(IntPtr camera);

		/// <summary>
		///   <para>Get the spec that a camera is using when generating images.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> opened camera device.                                                    </para>
		/// </param>
		/// <param name="spec">
		///   <para> the <see cref="SDL_CameraSpec" /> to be initialized by this function. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that this might not be the native format of the hardware, as SDL mightbe converting to this format behind the scenes.</para>
		///   <para>If the system is waiting for the user to approve access to the camera, assome platforms require, this will return false, but this isn't necessarilya fatal error; you should either wait for an<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_APPROVED" /> (or<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_DENIED" />) event, orpoll <see cref="SDL_GetCameraPermissionState" />()occasionally until it returns non-zero.</para>
		/// </remarks>
		/// <seealso cref="SDL_OpenCamera" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCameraFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetCameraFormat(SDL_Camera *camera, SDL_CameraSpec *spec);
		/// </code><para>                                                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetCameraFormat(IntPtr camera, out SDL_CameraSpec spec);

		/// <summary>
		///   <para>Acquire a frame.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> opened camera device.                                                       </para>
		/// </param>
		/// <param name="timestampNS">
		///   <para> a pointer filled in with the frame's timestamp, or 0 on error. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns a new frame of video on success,NULL if none is currently available.</para>
		/// </returns>
		/// <remarks>
		///   <para>The frame is a memory pointer to the image data, whose size and format aregiven by the spec requested when opening the device.</para>
		///   <para>This is a non blocking API. If there is a frame available, a non-NULLsurface is returned, and timestampNS will be filled with a non-zero value.</para>
		///   <para>Note that an error case can also return NULL, but a NULL by itself isnormal and just signifies that a new frame is not yet available. Note thateven if a camera device fails outright (a USB camera is unplugged while inuse, etc), SDL will send an event separately to notify the app, butcontinue to provide blank frames at ongoing intervals until<see cref="SDL_CloseCamera" />() is called, so real failure here isalmost always an out of memory condition.</para>
		///   <para>After use, the frame should be released with<see cref="SDL_ReleaseCameraFrame" />(). If you don't do this,the system may stop providing more video!</para>
		///   <para>Do not call <see cref="SDL_FreeSurface" />() on the returned surface!It must be given back to the camera subsystem with<see cref="SDL_ReleaseCameraFrame" />!</para>
		///   <para>If the system is waiting for the user to approve access to the camera, assome platforms require, this will return NULL (no frames available); youshould either wait for an<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_APPROVED" /> (or<see cref="SDL_EventType.SDL_EVENT_CAMERA_DEVICE_DENIED" />) event, orpoll <see cref="SDL_GetCameraPermissionState" />()occasionally until it returns non-zero.</para>
		/// </remarks>
		/// <seealso cref="SDL_ReleaseCameraFrame" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AcquireCameraFrame<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_AcquireCameraFrame(SDL_Camera *camera, Uint64 *timestampNS);
		/// </code><para>                                                                             </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_AcquireCameraFrame(IntPtr camera, out ulong timestampNS);

		/// <summary>
		///   <para>Release a frame of video acquired from a camera.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> opened camera device.               </para>
		/// </param>
		/// <param name="frame">
		///   <para> the video frame surface to release. </para>
		/// </param>
		/// <remarks>
		///   <para>Let the back-end re-use the internal buffer for camera.</para>
		///   <para>This function must be called only on surface objects returned by<see cref="SDL_AcquireCameraFrame" />(). This function should becalled as quickly as possible after acquisition, as SDL keeps a small FIFOqueue of surfaces for video frames; if surfaces aren't released in a timelymanner, SDL may drop upcoming video frames from the camera.</para>
		///   <para>If the app needs to keep the surface for a significant time, they shouldmake a copy of it and release the original.</para>
		///   <para>The app should not use the surface again after calling this function;assume the surface is freed and the pointer is invalid.</para>
		/// </remarks>
		/// <seealso cref="SDL_AcquireCameraFrame" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseCameraFrame<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseCameraFrame(SDL_Camera *camera, SDL_Surface *frame);
		/// </code><para>                                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseCameraFrame(IntPtr camera, IntPtr frame);

		/// <summary>
		///   <para>Use this function to shut down camera processing and close the camera device.</para>
		/// </summary>
		/// <param name="camera">
		///   <para> opened camera device. </para>
		/// </param>
		/// <seealso cref="SDL_OpenCameraWithSpec" />
		/// <seealso cref="SDL_OpenCamera" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseCamera<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_camera.h">&lt;SDL3/SDL_camera.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CloseCamera(SDL_Camera *camera);
		/// </code><para>                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, but no thread mayreference <c>device</c> once this function is called.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCamera">CategoryCamera</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CloseCamera(IntPtr camera);

		// /usr/local/include/SDL3/SDL_clipboard.h

		[DllImport(nativeLibName, EntryPoint = "SDL_SetClipboardText", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetClipboardText(byte* text);
		/// <summary>
		///   <para>Put UTF-8 text into the clipboard.</para>
		/// </summary>
		/// <param name="text">
		///   <para> the text to store in the clipboard. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetClipboardText" />
		/// <seealso cref="SDL_HasClipboardText" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetClipboardText<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetClipboardText(const char *text);
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		public static SDLBool SDL_SetClipboardText(string text)
		{
			var textUTF8 = EncodeAsUTF8(text);
			var result = INTERNAL_SDL_SetClipboardText(textUTF8);

			SDL_free((IntPtr) textUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetClipboardText", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetClipboardText();
		/// <summary>
		///   <para>Get UTF-8 text from the clipboard.</para>
		/// </summary>
		/// <returns>
		///   <para>(char *) Returns the clipboard text on success or an empty string onfailure; call <see cref="SDL_GetError" />() for more information. Thisshould be freed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This functions returns empty string if there was not enough memory left fora copy of the clipboard's content.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasClipboardText" />
		/// <seealso cref="SDL_SetClipboardText" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetClipboardText<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>char * SDL_GetClipboardText(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		public static string SDL_GetClipboardText()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetClipboardText(), shouldFree: true);
		}

		/// <summary>
		///   <para>Query whether the clipboard exists and contains a non-empty text string.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the clipboard has text, or false if it does not.</para>
		/// </returns>
		/// <seealso cref="SDL_GetClipboardText" />
		/// <seealso cref="SDL_SetClipboardText" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasClipboardText<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasClipboardText(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasClipboardText();

		[DllImport(nativeLibName, EntryPoint = "SDL_SetPrimarySelectionText", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetPrimarySelectionText(byte* text);
		/// <summary>
		///   <para>Put UTF-8 text into the primary selection.</para>
		/// </summary>
		/// <param name="text">
		///   <para> the text to store in the primary selection. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPrimarySelectionText" />
		/// <seealso cref="SDL_HasPrimarySelectionText" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetPrimarySelectionText<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetPrimarySelectionText(const char *text);
		/// </code><para>                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		public static SDLBool SDL_SetPrimarySelectionText(string text)
		{
			var textUTF8 = EncodeAsUTF8(text);
			var result = INTERNAL_SDL_SetPrimarySelectionText(textUTF8);

			SDL_free((IntPtr) textUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPrimarySelectionText", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetPrimarySelectionText();
		/// <summary>
		///   <para>Get UTF-8 text from the primary selection.</para>
		/// </summary>
		/// <returns>
		///   <para>(char *) Returns the primary selection text on success or an empty stringon failure; call <see cref="SDL_GetError" />() for more information. Thisshould be freed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This functions returns empty string if there was not enough memory left fora copy of the primary selection's content.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasPrimarySelectionText" />
		/// <seealso cref="SDL_SetPrimarySelectionText" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPrimarySelectionText<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>char * SDL_GetPrimarySelectionText(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		public static string SDL_GetPrimarySelectionText()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetPrimarySelectionText(), shouldFree: true);
		}

		/// <summary>
		///   <para>Query whether the primary selection exists and contains a non-empty text string.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the primary selection has text, or false if it doesnot.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPrimarySelectionText" />
		/// <seealso cref="SDL_SetPrimarySelectionText" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasPrimarySelectionText<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasPrimarySelectionText(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasPrimarySelectionText();

		/// <summary>
		///   <para>Callback function that will be called when data for the specified mime-type is requested by the OS.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns a pointer to the data for the provided mime-type. Returning NULL orsetting length to 0 will cause no data to be sent to the "receiver". It isup to the receiver to handle this. Essentially returning no data is more orless undefined behavior and may cause breakage in receiving applications.The returned data will not be freed so it needs to be retained and dealtwith internally.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is called with NULL as the mime_type when theclipboard is cleared or new data is set. The clipboard is automaticallycleared in <see cref="SDL_Quit" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_SetClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClipboardDataCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef const void *(SDLCALL *SDL_ClipboardDataCallback)(void *userdata, const char *mime_type, size_t *size);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate IntPtr SDL_ClipboardDataCallback(IntPtr userdata, byte* mime_type, IntPtr size);

		/// <summary>
		///   <para>Callback function that will be called when the clipboard is cleared, or new data is set.</para>
		/// </summary>
		/// <seealso cref="SDL_SetClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClipboardCleanupCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_ClipboardCleanupCallback)(void *userdata);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_ClipboardCleanupCallback(IntPtr userdata);

		/// <summary>
		///   <para>Offer clipboard data to the OS.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> a function pointer to the function that provides the clipboard data.  </para>
		/// </param>
		/// <param name="cleanup">
		///   <para> a function pointer to the function that cleans up the clipboard data. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> an opaque pointer that will be forwarded to the callbacks.            </para>
		/// </param>
		/// <param name="mime_types">
		///   <para> a list of mime-types that are being offered.                          </para>
		/// </param>
		/// <param name="num_mime_types">
		///   <para> the number of mime-types in the mime_types list.                      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Tell the operating system that the application is offering clipboard datafor each of the proivded mime-types. Once another application requests thedata the callback function will be called allowing it to generate andrespond with the data for the requested mime-type.</para>
		///   <para>The size of text data does not include any terminator, and the text doesnot need to be null terminated (e.g. you can directly copy a portion of adocument)</para>
		/// </remarks>
		/// <seealso cref="SDL_ClearClipboardData" />
		/// <seealso cref="SDL_GetClipboardData" />
		/// <seealso cref="SDL_HasClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetClipboardData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void *userdata, const char **mime_types, size_t num_mime_types);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, IntPtr userdata, IntPtr mime_types, UIntPtr num_mime_types);

		/// <summary>
		///   <para>Clear the clipboard data.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClearClipboardData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClearClipboardData(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ClearClipboardData();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetClipboardData", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetClipboardData(byte* mime_type, out UIntPtr size);
		/// <summary>
		///   <para>Get the data from clipboard for a given mime type.</para>
		/// </summary>
		/// <param name="mime_type">
		///   <para> the mime type to read from the clipboard.                 </para>
		/// </param>
		/// <param name="size">
		///   <para> a pointer filled in with the length of the returned data. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the retrieved data buffer or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>The size of text data does not include the terminator, but the text isguaranteed to be null terminated.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasClipboardData" />
		/// <seealso cref="SDL_SetClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetClipboardData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetClipboardData(const char *mime_type, size_t *size);
		/// </code><para>                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		public static IntPtr SDL_GetClipboardData(string mime_type, out UIntPtr size)
		{
			var mime_typeUTF8 = EncodeAsUTF8(mime_type);
			var result = INTERNAL_SDL_GetClipboardData(mime_typeUTF8, out size);

			SDL_free((IntPtr) mime_typeUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_HasClipboardData", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_HasClipboardData(byte* mime_type);
		/// <summary>
		///   <para>Query whether there is data in the clipboard for the provided mime type.</para>
		/// </summary>
		/// <param name="mime_type">
		///   <para> the mime type to check for data for. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there exists data in clipboard for the provided mimetype, false if it does not.</para>
		/// </returns>
		/// <seealso cref="SDL_SetClipboardData" />
		/// <seealso cref="SDL_GetClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasClipboardData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasClipboardData(const char *mime_type);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		public static SDLBool SDL_HasClipboardData(string mime_type)
		{
			var mime_typeUTF8 = EncodeAsUTF8(mime_type);
			var result = INTERNAL_SDL_HasClipboardData(mime_typeUTF8);

			SDL_free((IntPtr) mime_typeUTF8);
			return result;
		}

		/// <summary>
		///   <para>Retrieve the list of mime types available in the clipboard.</para>
		/// </summary>
		/// <param name="num_mime_types">
		///   <para> a pointer filled with the number of mime types, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(char **) Returns a null terminated array of strings with mime types, orNULL on failure; call <see cref="SDL_GetError" />() for more information.This should be freed with <see cref="SDL_free" />() when it is no longerneeded.</para>
		/// </returns>
		/// <seealso cref="SDL_SetClipboardData" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetClipboardMimeTypes<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_clipboard.h">&lt;SDL3/SDL_clipboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>char ** SDL_GetClipboardMimeTypes(size_t *num_mime_types);
		/// </code><para>                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryClipboard">CategoryClipboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetClipboardMimeTypes(out UIntPtr num_mime_types);

		// /usr/local/include/SDL3/SDL_cpuinfo.h

		/// <summary>
		///   <para>Get the number of logical CPU cores available.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the total number of logical CPU cores. On CPUs that includetechnologies such as hyperthreading, the number of logical cores may bemore than the number of physical cores.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumLogicalCPUCores<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumLogicalCPUCores(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumLogicalCPUCores();

		/// <summary>
		///   <para>Determine the L1 cache line size of the CPU.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the L1 cache line size of the CPU, in bytes.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is useful for determining multi-threaded structure padding or SIMDprefetch sizes.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCPUCacheLineSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetCPUCacheLineSize(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetCPUCacheLineSize();

		/// <summary>
		///   <para>Determine whether the CPU has AltiVec features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has AltiVec features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using PowerPC instructionsets.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasAltiVec<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasAltiVec(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasAltiVec();

		/// <summary>
		///   <para>Determine whether the CPU has MMX features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has MMX features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasMMX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasMMX(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasMMX();

		/// <summary>
		///   <para>Determine whether the CPU has SSE features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has SSE features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasSSE2" />
		/// <seealso cref="SDL_HasSSE3" />
		/// <seealso cref="SDL_HasSSE41" />
		/// <seealso cref="SDL_HasSSE42" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasSSE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasSSE(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasSSE();

		/// <summary>
		///   <para>Determine whether the CPU has SSE2 features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has SSE2 features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasSSE" />
		/// <seealso cref="SDL_HasSSE3" />
		/// <seealso cref="SDL_HasSSE41" />
		/// <seealso cref="SDL_HasSSE42" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasSSE2<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasSSE2(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasSSE2();

		/// <summary>
		///   <para>Determine whether the CPU has SSE3 features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has SSE3 features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasSSE" />
		/// <seealso cref="SDL_HasSSE2" />
		/// <seealso cref="SDL_HasSSE41" />
		/// <seealso cref="SDL_HasSSE42" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasSSE3<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasSSE3(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasSSE3();

		/// <summary>
		///   <para>Determine whether the CPU has SSE4.1 features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has SSE4.1 features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasSSE" />
		/// <seealso cref="SDL_HasSSE2" />
		/// <seealso cref="SDL_HasSSE3" />
		/// <seealso cref="SDL_HasSSE42" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasSSE41<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasSSE41(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasSSE41();

		/// <summary>
		///   <para>Determine whether the CPU has SSE4.2 features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has SSE4.2 features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasSSE" />
		/// <seealso cref="SDL_HasSSE2" />
		/// <seealso cref="SDL_HasSSE3" />
		/// <seealso cref="SDL_HasSSE41" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasSSE42<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasSSE42(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasSSE42();

		/// <summary>
		///   <para>Determine whether the CPU has AVX features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has AVX features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasAVX2" />
		/// <seealso cref="SDL_HasAVX512F" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasAVX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasAVX(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasAVX();

		/// <summary>
		///   <para>Determine whether the CPU has AVX2 features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has AVX2 features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasAVX" />
		/// <seealso cref="SDL_HasAVX512F" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasAVX2<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasAVX2(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasAVX2();

		/// <summary>
		///   <para>Determine whether the CPU has AVX-512F (foundation) features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has AVX-512F features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using Intel instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasAVX" />
		/// <seealso cref="SDL_HasAVX2" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasAVX512F<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasAVX512F(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasAVX512F();

		/// <summary>
		///   <para>Determine whether the CPU has ARM SIMD (ARMv6) features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has ARM SIMD features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is different from ARM NEON, which is a different instruction set.</para>
		///   <para>This always returns false on CPUs that aren't using ARM instruction sets.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasNEON" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasARMSIMD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasARMSIMD(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasARMSIMD();

		/// <summary>
		///   <para>Determine whether the CPU has NEON (ARM SIMD) features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has ARM NEON features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using ARM instruction sets.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasNEON<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasNEON(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasNEON();

		/// <summary>
		///   <para>Determine whether the CPU has LSX (LOONGARCH SIMD) features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has LOONGARCH LSX features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using LOONGARCH instructionsets.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasLSX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasLSX(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasLSX();

		/// <summary>
		///   <para>Determine whether the CPU has LASX (LOONGARCH SIMD) features.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the CPU has LOONGARCH LASX features or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>This always returns false on CPUs that aren't using LOONGARCH instructionsets.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasLASX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasLASX(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasLASX();

		/// <summary>
		///   <para>Get the amount of RAM configured in the system.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the amount of RAM configured in the system in MiB.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSystemRAM<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetSystemRAM(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetSystemRAM();

		/// <summary>
		///   <para>Report the alignment this system needs for SIMD allocations.</para>
		/// </summary>
		/// <returns>
		///   <para>(size_t) Returns the alignment in bytes needed for available, known SIMDinstructions.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will return the minimum number of bytes to which a pointer must bealigned to be compatible with SIMD instructions on the current machine. Forexample, if the machine supports SSE only, it will return 16, but if itsupports AVX-512F, it'll return 64 (etc). This only reports values forinstruction sets SDL knows about, so if your SDL build doesn't have<see cref="SDL_HasAVX512F" />(), then it might return 16 for the SSEsupport it sees and not 64 for the AVX-512 instructions that exist but SDLdoesn't know about. Plan accordingly.</para>
		/// </remarks>
		/// <seealso cref="SDL_aligned_alloc" />
		/// <seealso cref="SDL_aligned_free" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSIMDAlignment<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_cpuinfo.h">&lt;SDL3/SDL_cpuinfo.h&gt;</see></para><br /><b>## Syntax ##</b><code>size_t SDL_GetSIMDAlignment(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryCPUInfo">CategoryCPUInfo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern UIntPtr SDL_GetSIMDAlignment();

		// /usr/local/include/SDL3/SDL_video.h

		/// <summary>
		///   <para>System theme.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SystemTheme<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_SystemTheme
		/// {
		///     SDL_SYSTEM_THEME_UNKNOWN,   /**&lt; Unknown system theme */
		///     SDL_SYSTEM_THEME_LIGHT,     /**&lt; Light colored system theme */
		///     SDL_SYSTEM_THEME_DARK       /**&lt; Dark colored system theme */
		/// } SDL_SystemTheme;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_SystemTheme
		{
			/// <summary><para>Please refer to <see cref="SDL_SystemTheme" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_THEME_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_THEME_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_SystemTheme" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_THEME_LIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_THEME_LIGHT = 1,
			/// <summary><para>Please refer to <see cref="SDL_SystemTheme" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_THEME_DARK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_THEME_DARK = 2,
		}

		/// <summary>
		///   <para>The structure that defines a display mode.</para>
		/// </summary>
		/// <seealso cref="SDL_GetFullscreenDisplayModes" />
		/// <seealso cref="SDL_GetDesktopDisplayMode" />
		/// <seealso cref="SDL_GetCurrentDisplayMode" />
		/// <seealso cref="SDL_SetWindowFullscreenMode" />
		/// <seealso cref="SDL_GetWindowFullscreenMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DisplayMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_DisplayMode
		/// {
		///     SDL_DisplayID displayID;        /**&lt; the display this mode is associated with */
		///     SDL_PixelFormat format;         /**&lt; pixel format */
		///     int w;                          /**&lt; width */
		///     int h;                          /**&lt; height */
		///     float pixel_density;            /**&lt; scale converting size to pixels (e.g. a 1920x1080 mode with 2.0 scale would have 3840x2160 pixels) */
		///     float refresh_rate;             /**&lt; refresh rate (or 0.0f for unspecified) */
		///     int refresh_rate_numerator;     /**&lt; precise refresh rate numerator (or 0 for unspecified) */
		///     int refresh_rate_denominator;   /**&lt; precise refresh rate denominator */
		/// 
		///     SDL_DisplayModeData *internal;  /**&lt; Private */
		/// 
		/// } SDL_DisplayMode;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_DisplayMode
		{
			public uint displayID;
			public SDL_PixelFormat format;
			public int w;
			public int h;
			public float pixel_density;
			public float refresh_rate;
			public int refresh_rate_numerator;
			public int refresh_rate_denominator;
			public IntPtr @internal;
		}

		/// <summary>
		///   <para>Display orientation values; the way a display is rotated.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DisplayOrientation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_DisplayOrientation
		/// {
		///     SDL_ORIENTATION_UNKNOWN,            /**&lt; The display orientation can't be determined */
		///     SDL_ORIENTATION_LANDSCAPE,          /**&lt; The display is in landscape mode, with the right side up, relative to portrait mode */
		///     SDL_ORIENTATION_LANDSCAPE_FLIPPED,  /**&lt; The display is in landscape mode, with the left side up, relative to portrait mode */
		///     SDL_ORIENTATION_PORTRAIT,           /**&lt; The display is in portrait mode */
		///     SDL_ORIENTATION_PORTRAIT_FLIPPED    /**&lt; The display is in portrait mode, upside down */
		/// } SDL_DisplayOrientation;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_DisplayOrientation
		{
			/// <summary><para>Please refer to <see cref="SDL_DisplayOrientation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ORIENTATION_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ORIENTATION_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_DisplayOrientation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ORIENTATION_LANDSCAPE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ORIENTATION_LANDSCAPE = 1,
			/// <summary><para>Please refer to <see cref="SDL_DisplayOrientation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ORIENTATION_LANDSCAPE_FLIPPED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
			/// <summary><para>Please refer to <see cref="SDL_DisplayOrientation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ORIENTATION_PORTRAIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ORIENTATION_PORTRAIT = 3,
			/// <summary><para>Please refer to <see cref="SDL_DisplayOrientation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ORIENTATION_PORTRAIT_FLIPPED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ORIENTATION_PORTRAIT_FLIPPED = 4,
		}

		/// <summary>
		///   <para>The flags on a window.</para>
		/// </summary>
		/// <remarks>
		///   <para>These cover a lot of true/false, or on/off, window state. Some of it isimmutable after being set through <see cref="SDL_CreateWindow" />(),some of it can be changed on existing windows by the app, and some of itmight be altered by the user or system outside of the app's control.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFlags" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WindowFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint64 SDL_WindowFlags;
		/// 
		/// #define SDL_WINDOW_FULLSCREEN           SDL_UINT64_C(0x0000000000000001)    /**&lt; window is in fullscreen mode */
		/// #define SDL_WINDOW_OPENGL               SDL_UINT64_C(0x0000000000000002)    /**&lt; window usable with OpenGL context */
		/// #define SDL_WINDOW_OCCLUDED             SDL_UINT64_C(0x0000000000000004)    /**&lt; window is occluded */
		/// #define SDL_WINDOW_HIDDEN               SDL_UINT64_C(0x0000000000000008)    /**&lt; window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; SDL_ShowWindow() is required for it to become visible */
		/// #define SDL_WINDOW_BORDERLESS           SDL_UINT64_C(0x0000000000000010)    /**&lt; no window decoration */
		/// #define SDL_WINDOW_RESIZABLE            SDL_UINT64_C(0x0000000000000020)    /**&lt; window can be resized */
		/// #define SDL_WINDOW_MINIMIZED            SDL_UINT64_C(0x0000000000000040)    /**&lt; window is minimized */
		/// #define SDL_WINDOW_MAXIMIZED            SDL_UINT64_C(0x0000000000000080)    /**&lt; window is maximized */
		/// #define SDL_WINDOW_MOUSE_GRABBED        SDL_UINT64_C(0x0000000000000100)    /**&lt; window has grabbed mouse input */
		/// #define SDL_WINDOW_INPUT_FOCUS          SDL_UINT64_C(0x0000000000000200)    /**&lt; window has input focus */
		/// #define SDL_WINDOW_MOUSE_FOCUS          SDL_UINT64_C(0x0000000000000400)    /**&lt; window has mouse focus */
		/// #define SDL_WINDOW_EXTERNAL             SDL_UINT64_C(0x0000000000000800)    /**&lt; window not created by SDL */
		/// #define SDL_WINDOW_MODAL                SDL_UINT64_C(0x0000000000001000)    /**&lt; window is modal */
		/// #define SDL_WINDOW_HIGH_PIXEL_DENSITY   SDL_UINT64_C(0x0000000000002000)    /**&lt; window uses high pixel density back buffer if possible */
		/// #define SDL_WINDOW_MOUSE_CAPTURE        SDL_UINT64_C(0x0000000000004000)    /**&lt; window has mouse captured (unrelated to MOUSE_GRABBED) */
		/// #define SDL_WINDOW_MOUSE_RELATIVE_MODE  SDL_UINT64_C(0x0000000000008000)    /**&lt; window has relative mode enabled */
		/// #define SDL_WINDOW_ALWAYS_ON_TOP        SDL_UINT64_C(0x0000000000010000)    /**&lt; window should always be above others */
		/// #define SDL_WINDOW_UTILITY              SDL_UINT64_C(0x0000000000020000)    /**&lt; window should be treated as a utility window, not showing in the task bar and window list */
		/// #define SDL_WINDOW_TOOLTIP              SDL_UINT64_C(0x0000000000040000)    /**&lt; window should be treated as a tooltip and does not get mouse or keyboard focus, requires a parent window */
		/// #define SDL_WINDOW_POPUP_MENU           SDL_UINT64_C(0x0000000000080000)    /**&lt; window should be treated as a popup menu, requires a parent window */
		/// #define SDL_WINDOW_KEYBOARD_GRABBED     SDL_UINT64_C(0x0000000000100000)    /**&lt; window has grabbed keyboard input */
		/// #define SDL_WINDOW_VULKAN               SDL_UINT64_C(0x0000000010000000)    /**&lt; window usable for Vulkan surface */
		/// #define SDL_WINDOW_METAL                SDL_UINT64_C(0x0000000020000000)    /**&lt; window usable for Metal view */
		/// #define SDL_WINDOW_TRANSPARENT          SDL_UINT64_C(0x0000000040000000)    /**&lt; window with transparent buffer */
		/// #define SDL_WINDOW_NOT_FOCUSABLE        SDL_UINT64_C(0x0000000080000000)    /**&lt; window should not be focusable */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[Flags]
		public enum SDL_WindowFlags : ulong
		{
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_FULLSCREEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_FULLSCREEN = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_OPENGL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_OPENGL = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_OCCLUDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_OCCLUDED = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_HIDDEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_HIDDEN = 0x08,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_BORDERLESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_BORDERLESS = 0x10,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_RESIZABLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_RESIZABLE = 0x20,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MINIMIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MINIMIZED = 0x40,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MAXIMIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MAXIMIZED = 0x080,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MOUSE_GRABBED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MOUSE_GRABBED = 0x100,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_INPUT_FOCUS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_INPUT_FOCUS = 0x200,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MOUSE_FOCUS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MOUSE_FOCUS = 0x400,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_EXTERNAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_EXTERNAL = 0x0800,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MODAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MODAL = 0x1000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_HIGH_PIXEL_DENSITY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_HIGH_PIXEL_DENSITY = 0x2000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MOUSE_CAPTURE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MOUSE_CAPTURE = 0x4000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_MOUSE_RELATIVE_MODE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_MOUSE_RELATIVE_MODE = 0x08000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_ALWAYS_ON_TOP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_ALWAYS_ON_TOP = 0x10000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_UTILITY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_UTILITY = 0x20000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_TOOLTIP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_TOOLTIP = 0x40000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_POPUP_MENU<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_POPUP_MENU = 0x080000,
			/// <summary><para>Please refer to <see cref="SDL_WindowFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_WINDOW_KEYBOARD_GRABBED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_WINDOW_KEYBOARD_GRABBED = 0x100000,
			SDL_WINDOW_VULKAN = 0x10000000,
			SDL_WINDOW_METAL = 0x20000000,
			SDL_WINDOW_TRANSPARENT = 0x40000000,
			SDL_WINDOW_NOT_FOCUSABLE = 0x080000000,
		}

		/// <summary>
		///   <para>Window flash operation.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlashOperation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_FlashOperation
		/// {
		///     SDL_FLASH_CANCEL,                   /**&lt; Cancel any window flash state */
		///     SDL_FLASH_BRIEFLY,                  /**&lt; Flash the window briefly to get attention */
		///     SDL_FLASH_UNTIL_FOCUSED             /**&lt; Flash the window until it gets focus */
		/// } SDL_FlashOperation;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_FlashOperation
		{
			/// <summary><para>Please refer to <see cref="SDL_FlashOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FLASH_CANCEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FLASH_CANCEL = 0,
			/// <summary><para>Please refer to <see cref="SDL_FlashOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FLASH_BRIEFLY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FLASH_BRIEFLY = 1,
			/// <summary><para>Please refer to <see cref="SDL_FlashOperation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FLASH_UNTIL_FOCUSED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FLASH_UNTIL_FOCUSED = 2,
		}

		/// <summary>
		///   <para>EGL platform attribute initialization callback.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns a newly-allocated array of attributes, terminated with <c>EGL_NONE</c>.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is called when SDL is attempting to create an EGL context, to let theapp add extra attributes to its eglGetPlatformDisplay() call.</para>
		///   <para>The callback should return a pointer to an EGL attribute array terminatedwith <c>EGL_NONE</c>. If this function returns NULL, the<see cref="SDL_CreateWindow" /> process will fail gracefully.</para>
		///   <para>The returned pointer should be allocated with <see cref="SDL_malloc" />()and will be passed to <see cref="SDL_free" />().</para>
		///   <para>The arrays returned by each callback will be appended to the existingattribute arrays defined by SDL.</para>
		/// </remarks>
		/// <seealso cref="SDL_EGL_SetAttributeCallbacks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGLAttribArrayCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef SDL_EGLAttrib *(SDLCALL *SDL_EGLAttribArrayCallback)(void *userdata);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate IntPtr SDL_EGLAttribArrayCallback();

		/// <summary>
		///   <para>EGL surface/context attribute initialization callback types.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns a newly-allocated array of attributes, terminated with <c>EGL_NONE</c>.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is called when SDL is attempting to create an EGL surface, to let theapp add extra attributes to its eglCreateWindowSurface() oreglCreateContext calls.</para>
		///   <para>For convenience, the EGLDisplay and EGLConfig to use are provided to thecallback.</para>
		///   <para>The callback should return a pointer to an EGL attribute array terminatedwith <c>EGL_NONE</c>. If this function returns NULL, the<see cref="SDL_CreateWindow" /> process will fail gracefully.</para>
		///   <para>The returned pointer should be allocated with <see cref="SDL_malloc" />()and will be passed to <see cref="SDL_free" />().</para>
		///   <para>The arrays returned by each callback will be appended to the existingattribute arrays defined by SDL.</para>
		/// </remarks>
		/// <seealso cref="SDL_EGL_SetAttributeCallbacks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGLIntArrayCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef SDL_EGLint *(SDLCALL *SDL_EGLIntArrayCallback)(void *userdata, SDL_EGLDisplay display, SDL_EGLConfig config);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate IntPtr SDL_EGLIntArrayCallback();

		/// <summary>
		///   <para>An enumeration of OpenGL configuration attributes.</para>
		/// </summary>
		/// <remarks>
		///   <para>While you can set most OpenGL attributes normally, the attributes listedabove must be known before SDL creates the window that will be used withthe OpenGL context. These attributes are set and read with<see cref="SDL_GL_SetAttribute" />() and<see cref="SDL_GL_GetAttribute" />().</para>
		///   <para>In some cases, these attributes are minimum requests; the GL does notpromise to give you exactly what you asked for. It's possible to ask for a16-bit depth buffer and get a 24-bit one instead, for example, or to askfor no stencil buffer and still have one available. Context creation shouldfail if the GL can't provide your requested attributes at a minimum, butyou should check to see exactly what you got.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GLattr<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GLattr
		/// {
		///     SDL_GL_RED_SIZE,                    /**&lt; the minimum number of bits for the red channel of the color buffer; defaults to 3. */
		///     SDL_GL_GREEN_SIZE,                  /**&lt; the minimum number of bits for the green channel of the color buffer; defaults to 3. */
		///     SDL_GL_BLUE_SIZE,                   /**&lt; the minimum number of bits for the blue channel of the color buffer; defaults to 2. */
		///     SDL_GL_ALPHA_SIZE,                  /**&lt; the minimum number of bits for the alpha channel of the color buffer; defaults to 0. */
		///     SDL_GL_BUFFER_SIZE,                 /**&lt; the minimum number of bits for frame buffer size; defaults to 0. */
		///     SDL_GL_DOUBLEBUFFER,                /**&lt; whether the output is single or double buffered; defaults to double buffering on. */
		///     SDL_GL_DEPTH_SIZE,                  /**&lt; the minimum number of bits in the depth buffer; defaults to 16. */
		///     SDL_GL_STENCIL_SIZE,                /**&lt; the minimum number of bits in the stencil buffer; defaults to 0. */
		///     SDL_GL_ACCUM_RED_SIZE,              /**&lt; the minimum number of bits for the red channel of the accumulation buffer; defaults to 0. */
		///     SDL_GL_ACCUM_GREEN_SIZE,            /**&lt; the minimum number of bits for the green channel of the accumulation buffer; defaults to 0. */
		///     SDL_GL_ACCUM_BLUE_SIZE,             /**&lt; the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0. */
		///     SDL_GL_ACCUM_ALPHA_SIZE,            /**&lt; the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0. */
		///     SDL_GL_STEREO,                      /**&lt; whether the output is stereo 3D; defaults to off. */
		///     SDL_GL_MULTISAMPLEBUFFERS,          /**&lt; the number of buffers used for multisample anti-aliasing; defaults to 0. */
		///     SDL_GL_MULTISAMPLESAMPLES,          /**&lt; the number of samples used around the current pixel used for multisample anti-aliasing. */
		///     SDL_GL_ACCELERATED_VISUAL,          /**&lt; set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either. */
		///     SDL_GL_RETAINED_BACKING,            /**&lt; not used (deprecated). */
		///     SDL_GL_CONTEXT_MAJOR_VERSION,       /**&lt; OpenGL context major version. */
		///     SDL_GL_CONTEXT_MINOR_VERSION,       /**&lt; OpenGL context minor version. */
		///     SDL_GL_CONTEXT_FLAGS,               /**&lt; some combination of 0 or more of elements of the SDL_GLcontextFlag enumeration; defaults to 0. */
		///     SDL_GL_CONTEXT_PROFILE_MASK,        /**&lt; type of GL context (Core, Compatibility, ES). See SDL_GLprofile; default value depends on platform. */
		///     SDL_GL_SHARE_WITH_CURRENT_CONTEXT,  /**&lt; OpenGL context sharing; defaults to 0. */
		///     SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,    /**&lt; requests sRGB capable visual; defaults to 0. */
		///     SDL_GL_CONTEXT_RELEASE_BEHAVIOR,    /**&lt; sets context the release behavior. See SDL_GLcontextReleaseFlag; defaults to FLUSH. */
		///     SDL_GL_CONTEXT_RESET_NOTIFICATION,  /**&lt; set context reset notification. See SDL_GLContextResetNotification; defaults to NO_NOTIFICATION. */
		///     SDL_GL_CONTEXT_NO_ERROR,
		///     SDL_GL_FLOATBUFFERS,
		///     SDL_GL_EGL_PLATFORM
		/// } SDL_GLattr;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_GLattr
		{
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_RED_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_RED_SIZE = 0,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_GREEN_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_GREEN_SIZE = 1,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_BLUE_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_BLUE_SIZE = 2,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_ALPHA_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_ALPHA_SIZE = 3,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_BUFFER_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_BUFFER_SIZE = 4,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_DOUBLEBUFFER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_DOUBLEBUFFER = 5,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_DEPTH_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_DEPTH_SIZE = 6,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_STENCIL_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_STENCIL_SIZE = 7,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_ACCUM_RED_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_ACCUM_RED_SIZE = 8,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_ACCUM_GREEN_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_ACCUM_GREEN_SIZE = 9,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_ACCUM_BLUE_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_ACCUM_BLUE_SIZE = 10,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_ACCUM_ALPHA_SIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_ACCUM_ALPHA_SIZE = 11,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_STEREO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_STEREO = 12,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_MULTISAMPLEBUFFERS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_MULTISAMPLEBUFFERS = 13,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_MULTISAMPLESAMPLES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_MULTISAMPLESAMPLES = 14,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_ACCELERATED_VISUAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_ACCELERATED_VISUAL = 15,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_RETAINED_BACKING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_RETAINED_BACKING = 16,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_MAJOR_VERSION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_MAJOR_VERSION = 17,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_MINOR_VERSION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_MINOR_VERSION = 18,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_FLAGS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_FLAGS = 19,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_PROFILE_MASK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_PROFILE_MASK = 20,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_SHARE_WITH_CURRENT_CONTEXT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_FRAMEBUFFER_SRGB_CAPABLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RELEASE_BEHAVIOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RESET_NOTIFICATION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RESET_NOTIFICATION = 24,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_NO_ERROR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_NO_ERROR = 25,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_FLOATBUFFERS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_FLOATBUFFERS = 26,
			/// <summary><para>Please refer to <see cref="SDL_GLattr" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_EGL_PLATFORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_EGL_PLATFORM = 27,
		}

		/// <summary>
		///   <para>Possible values to be set for the <see cref="SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK" /> attribute.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GLprofile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GLprofile
		/// {
		///     SDL_GL_CONTEXT_PROFILE_CORE           = 0x0001,
		///     SDL_GL_CONTEXT_PROFILE_COMPATIBILITY  = 0x0002,
		///     SDL_GL_CONTEXT_PROFILE_ES             = 0x0004 /**&lt; GLX_CONTEXT_ES2_PROFILE_BIT_EXT */
		/// } SDL_GLprofile;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_GLprofile
		{
			/// <summary><para>Please refer to <see cref="SDL_GLprofile" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_PROFILE_CORE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_PROFILE_CORE = 1,
			/// <summary><para>Please refer to <see cref="SDL_GLprofile" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_PROFILE_COMPATIBILITY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2,
			/// <summary><para>Please refer to <see cref="SDL_GLprofile" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_PROFILE_ES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_PROFILE_ES = 4,
		}

		/// <summary>
		///   <para>Possible values to be set for the <see cref="SDL_GLattr.SDL_GL_CONTEXT_FLAGS" /> attribute.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GLcontextFlag<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GLcontextFlag
		/// {
		///     SDL_GL_CONTEXT_DEBUG_FLAG              = 0x0001,
		///     SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
		///     SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG      = 0x0004,
		///     SDL_GL_CONTEXT_RESET_ISOLATION_FLAG    = 0x0008
		/// } SDL_GLcontextFlag;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_GLcontextFlag
		{
			/// <summary><para>Please refer to <see cref="SDL_GLcontextFlag" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_DEBUG_FLAG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_DEBUG_FLAG = 1,
			/// <summary><para>Please refer to <see cref="SDL_GLcontextFlag" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2,
			/// <summary><para>Please refer to <see cref="SDL_GLcontextFlag" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4,
			/// <summary><para>Please refer to <see cref="SDL_GLcontextFlag" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RESET_ISOLATION_FLAG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8,
		}

		/// <summary>
		///   <para>Possible values to be set for the <see cref="SDL_GLattr.SDL_GL_CONTEXT_RELEASE_BEHAVIOR" /> attribute.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GLcontextReleaseFlag<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GLcontextReleaseFlag
		/// {
		///     SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE   = 0x0000,
		///     SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH  = 0x0001
		/// } SDL_GLcontextReleaseFlag;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_GLcontextReleaseFlag
		{
			/// <summary><para>Please refer to <see cref="SDL_GLcontextReleaseFlag" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_GLcontextReleaseFlag" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1,
		}

		/// <summary>
		///   <para>Possible values to be set <see cref="SDL_GLattr.SDL_GL_CONTEXT_RESET_NOTIFICATION" /> attribute.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GLContextResetNotification<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GLContextResetNotification
		/// {
		///     SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0x0000,
		///     SDL_GL_CONTEXT_RESET_LOSE_CONTEXT    = 0x0001
		/// } SDL_GLContextResetNotification;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_GLContextResetNotification
		{
			/// <summary><para>Please refer to <see cref="SDL_GLContextResetNotification" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RESET_NO_NOTIFICATION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0,
			/// <summary><para>Please refer to <see cref="SDL_GLContextResetNotification" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GL_CONTEXT_RESET_LOSE_CONTEXT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1,
		}

		/// <summary>
		///   <para>Get the number of video drivers compiled into SDL.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the number of built in video drivers.</para>
		/// </returns>
		/// <seealso cref="SDL_GetVideoDriver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumVideoDrivers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumVideoDrivers(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumVideoDrivers();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetVideoDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetVideoDriver(int index);
		/// <summary>
		///   <para>Get the name of a built in video driver.</para>
		/// </summary>
		/// <param name="index">
		///   <para> the index of a video driver. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the video driver with the givenindex.</para>
		/// </returns>
		/// <remarks>
		///   <para>The video drivers are presented in the order in which they are normallychecked during initialization.</para>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "cocoa","x11" or "windows". These never have Unicode characters, and are not meantto be proper names.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumVideoDrivers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetVideoDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetVideoDriver(int index);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static string SDL_GetVideoDriver(int index)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetVideoDriver(index));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetCurrentVideoDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetCurrentVideoDriver();
		/// <summary>
		///   <para>Get the name of the currently initialized video driver.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns the name of the current video driver or NULL if nodriver has been initialized.</para>
		/// </returns>
		/// <remarks>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "cocoa","x11" or "windows". These never have Unicode characters, and are not meantto be proper names.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumVideoDrivers" />
		/// <seealso cref="SDL_GetVideoDriver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentVideoDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetCurrentVideoDriver(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static string SDL_GetCurrentVideoDriver()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetCurrentVideoDriver());
		}

		/// <summary>
		///   <para>Get the current system theme.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_SystemTheme" />) Returns the current system theme,light, dark, or unknown.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSystemTheme<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_SystemTheme SDL_GetSystemTheme(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_SystemTheme SDL_GetSystemTheme();

		/// <summary>
		///   <para>Get a list of currently connected displays.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of displays returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayID" /> *) Returns a 0 terminated array of displayinstance IDs or NULL on failure; call <see cref="SDL_GetError" />() formore information. This should be freed with <see cref="SDL_free" />() when itis no longer needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplays<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayID * SDL_GetDisplays(int *count);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetDisplays(out int count);

		/// <summary>
		///   <para>Return the primary display.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayID" />) Returns the instance ID of the primarydisplay on success or 0 on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPrimaryDisplay<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayID SDL_GetPrimaryDisplay(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetPrimaryDisplay();

		/// <summary>
		///   <para>Get the properties associated with a display.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN" />:true if the display has HDR headroom above the SDR white point. This isfor informational and diagnostic purposes only, as not all platformsprovide this information at the display level.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On KMS/DRM:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER" />:the "panel orientation" property for the display in degrees of clockwiserotation. Note that this is provided only as a hint, and the applicationis responsible for any coordinate transformations needed to conform tothe requested display orientation.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetDisplayProperties(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetDisplayProperties(uint displayID);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetDisplayName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetDisplayName(uint displayID);
		/// <summary>
		///   <para>Get the name of a display in UTF-8 encoding.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of a display or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetDisplayName(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static string SDL_GetDisplayName(uint displayID)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetDisplayName(displayID));
		}

		/// <summary>
		///   <para>Get the desktop area represented by a display.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query.                              </para>
		/// </param>
		/// <param name="rect">
		///   <para> the <see cref="SDL_Rect" /> structure filled in with the display bounds. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The primary display is always located at (0,0).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetDisplayUsableBounds" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayBounds<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect *rect);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetDisplayBounds(uint displayID, out SDL_Rect rect);

		/// <summary>
		///   <para>Get the usable desktop area represented by a display, in screen coordinates.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query.                              </para>
		/// </param>
		/// <param name="rect">
		///   <para> the <see cref="SDL_Rect" /> structure filled in with the display bounds. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is the same area as <see cref="SDL_GetDisplayBounds" />()reports, but with portions reserved by the system removed. For example, onApple's macOS, this subtracts the area occupied by the menu bar and dock.</para>
		///   <para>Setting a window to be fullscreen generally bypasses these unusable areas,so these are good guidelines for the maximum space available to anon-fullscreen window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetDisplayBounds" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayUsableBounds<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect *rect);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetDisplayUsableBounds(uint displayID, out SDL_Rect rect);

		/// <summary>
		///   <para>Get the orientation of a display when it is unrotated.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayOrientation" />) Returns the<see cref="SDL_DisplayOrientation" /> enum value of the display,or <see cref="SDL_DisplayOrientation.SDL_ORIENTATION_UNKNOWN" /> if it isn'tavailable.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNaturalDisplayOrientation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(uint displayID);

		/// <summary>
		///   <para>Get the orientation of a display.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayOrientation" />) Returns the<see cref="SDL_DisplayOrientation" /> enum value of the display,or <see cref="SDL_DisplayOrientation.SDL_ORIENTATION_UNKNOWN" /> if it isn'tavailable.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentDisplayOrientation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(uint displayID);

		/// <summary>
		///   <para>Get the content scale of a display.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the content scale of the display, or 0.0f on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The content scale is the expected scale for content based on the DPIsettings of the display. For example, a 4K display might have a 2.0 (200%)display scale, which means that the user expects UI elements to be twice asbig on this display, to aid in readability.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayContentScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetDisplayContentScale(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetDisplayContentScale(uint displayID);

		/// <summary>
		///   <para>Get a list of fullscreen display modes available on a display.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query.                                    </para>
		/// </param>
		/// <param name="count">
		///   <para> a pointer filled in with the number of display modes returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayMode" /> **) Returns a NULL terminated array ofdisplay mode pointers or NULL on failure; call<see cref="SDL_GetError" />() for more information. This is a singleallocation that should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>The display modes are sorted in this priority:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>w -&gt; largest to smallest</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>h -&gt; largest to smallest</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>bits per pixel -&gt; more colors to fewer colors</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>packed pixel layout -&gt; largest to smallest</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>refresh rate -&gt; highest to lowest</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>pixel density -&gt; lowest to highest</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetFullscreenDisplayModes<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayMode ** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, int *count);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetFullscreenDisplayModes(uint displayID, out int count);

		/// <summary>
		///   <para>Get the closest match to the requested display mode.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query.                                                    </para>
		/// </param>
		/// <param name="w">
		///   <para> the width in pixels of the desired display mode.                                            </para>
		/// </param>
		/// <param name="h">
		///   <para> the height in pixels of the desired display mode.                                           </para>
		/// </param>
		/// <param name="refresh_rate">
		///   <para> the refresh rate of the desired display mode, or 0.0f for the desktop refresh rate.         </para>
		/// </param>
		/// <param name="include_high_density_modes">
		///   <para> boolean to include high density modes in the search.                                        </para>
		/// </param>
		/// <param name="mode">
		///   <para> a pointer filled in with the closest display mode equal to or larger than the desired mode. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The available display modes are scanned and <c>closest</c> is filled in with theclosest mode matching the requested mode and returned. The mode format andrefresh rate default to the desktop mode if they are set to 0. The modesare scanned with size being first priority, format being second priority,and finally checking the refresh rate. If all the available modes are toosmall, then NULL is returned.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetDisplays" />
		/// <seealso cref="SDL_GetFullscreenDisplayModes" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetClosestFullscreenDisplayMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, bool include_high_density_modes, SDL_DisplayMode *mode);
		/// </code><para>                                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetClosestFullscreenDisplayMode(uint displayID, int w, int h, float refresh_rate, SDLBool include_high_density_modes, out SDL_DisplayMode mode);

		/// <summary>
		///   <para>Get information about the desktop's display mode.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const <see cref="SDL_DisplayMode" /> *) Returns a pointer to thedesktop display mode or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>There's a difference between this function and<see cref="SDL_GetCurrentDisplayMode" />() when SDL runsfullscreen and has changed the resolution. In that case this function willreturn the previous native display mode, and not the current display mode.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCurrentDisplayMode" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDesktopDisplayMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const SDL_DisplayMode * SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetDesktopDisplayMode(uint displayID);

		/// <summary>
		///   <para>Get information about the current display mode.</para>
		/// </summary>
		/// <param name="displayID">
		///   <para> the instance ID of the display to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const <see cref="SDL_DisplayMode" /> *) Returns a pointer to thedesktop display mode or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>There's a difference between this function and<see cref="SDL_GetDesktopDisplayMode" />() when SDL runsfullscreen and has changed the resolution. In that case this function willreturn the current display mode, and not the previous native display mode.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetDesktopDisplayMode" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentDisplayMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const SDL_DisplayMode * SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetCurrentDisplayMode(uint displayID);

		/// <summary>
		///   <para>Get the display containing a point.</para>
		/// </summary>
		/// <param name="point">
		///   <para> the point to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayID" />) Returns the instance ID of the displaycontaining the point or 0 on failure; call <see cref="SDL_GetError" />()for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplayBounds" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayForPoint<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayID SDL_GetDisplayForPoint(const SDL_Point *point);
		/// </code><para>                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetDisplayForPoint(ref SDL_Point point);

		/// <summary>
		///   <para>Get the display primarily containing a rect.</para>
		/// </summary>
		/// <param name="rect">
		///   <para> the rect to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayID" />) Returns the instance ID of the displayentirely containing the rect or closest to the center of the rect onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplayBounds" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayForRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayID SDL_GetDisplayForRect(const SDL_Rect *rect);
		/// </code><para>                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetDisplayForRect(ref SDL_Rect rect);

		/// <summary>
		///   <para>Get the display associated with a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_DisplayID" />) Returns the instance ID of the displaycontaining the center of the window on success or 0 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetDisplayBounds" />
		/// <seealso cref="SDL_GetDisplays" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDisplayForWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_DisplayID SDL_GetDisplayForWindow(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetDisplayForWindow(IntPtr window);

		/// <summary>
		///   <para>Get the pixel density of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the pixel density or 0.0f on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is a ratio of pixel size to window size. For example, if the window is1920x1080 and it has a high density back buffer of 3840x2160 pixels, itwould have a pixel density of 2.0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowDisplayScale" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowPixelDensity<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetWindowPixelDensity(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetWindowPixelDensity(IntPtr window);

		/// <summary>
		///   <para>Get the content display scale relative to a window's pixel size.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the display scale, or 0.0f on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is a combination of the window pixel density and the display contentscale, and is the expected scale for displaying content in this window. Forexample, if a 3840x2160 window had a display scale of 2.0, the user expectsthe content to take twice as many pixels and be the same physical size asif it were being displayed in a 1920x1080 window with a display scale of1.0.</para>
		///   <para>Conceptually this value corresponds to the scale display setting, and isupdated when that setting is changed, or the window moves to a display witha different scale setting.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowDisplayScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetWindowDisplayScale(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetWindowDisplayScale(IntPtr window);

		/// <summary>
		///   <para>Set the display mode to use when a window is visible and fullscreen.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to affect.                                                                                                                                                                                                                            </para>
		/// </param>
		/// <param name="mode">
		///   <para> a pointer to the display mode to use, which can be NULL for borderless fullscreen desktop mode, or one of the fullscreen modes returned by <see cref="SDL_GetFullscreenDisplayModes" />() to set an exclusive fullscreen mode. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This only affects the display mode used when the window is fullscreen. Tochange the window size when the window is not fullscreen, use<see cref="SDL_SetWindowSize" />().</para>
		///   <para>If the window is currently in the fullscreen state, this request isasynchronous on some windowing systems and the new mode dimensions may notbe applied immediately upon the return of this function. If an immediatechange is required, call <see cref="SDL_SyncWindow" />() to block untilthe changes have taken effect.</para>
		///   <para>When the new mode takes effect, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_RESIZED" /> and/or an<see cref="SDL_EventType.SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED" />event will be emitted with the new mode dimensions.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFullscreenMode" />
		/// <seealso cref="SDL_SetWindowFullscreen" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowFullscreenMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowFullscreenMode(SDL_Window *window, const SDL_DisplayMode *mode);
		/// </code><para>                                                                                                                                                                                                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowFullscreenMode(IntPtr window, ref SDL_DisplayMode mode);

		/// <summary>
		///   <para>Query the display mode to use when a window is visible at fullscreen.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const <see cref="SDL_DisplayMode" /> *) Returns a pointer to theexclusive fullscreen mode to use or NULL for borderless fullscreen desktopmode.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowFullscreenMode" />
		/// <seealso cref="SDL_SetWindowFullscreen" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowFullscreenMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const SDL_DisplayMode * SDL_GetWindowFullscreenMode(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowFullscreenMode(IntPtr window);

		/// <summary>
		///   <para>Get the raw ICC profile data for the screen the window is currently on.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query.         </para>
		/// </param>
		/// <param name="size">
		///   <para> the size of the ICC profile. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the raw ICC profile data on success or NULL on failure;call <see cref="SDL_GetError" />() for more information. This should befreed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowICCProfile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetWindowICCProfile(SDL_Window *window, size_t *size);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowICCProfile(IntPtr window, out UIntPtr size);

		/// <summary>
		///   <para>Get the pixel format associated with the window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PixelFormat" />) Returns the pixel format of the windowon success or <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_UNKNOWN" /> onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowPixelFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PixelFormat SDL_GetWindowPixelFormat(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_PixelFormat SDL_GetWindowPixelFormat(IntPtr window);

		/// <summary>
		///   <para>Get a list of valid windows.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of windows returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> **) Returns a NULL terminated array of<see cref="SDL_Window" /> pointers or NULL on failure; call<see cref="SDL_GetError" />() for more information. This is a singleallocation that should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindows<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window ** SDL_GetWindows(int *count);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindows(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateWindow", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_CreateWindow(byte* title, int w, int h, SDL_WindowFlags flags);
		/// <summary>
		///   <para>Create a window with the specified dimensions and flags.</para>
		/// </summary>
		/// <param name="title">
		///   <para> the title of the window, in UTF-8 encoding.                         </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the window.                                            </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the window.                                           </para>
		/// </param>
		/// <param name="flags">
		///   <para> 0, or one or more <see cref="SDL_WindowFlags" /> OR'd together. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window that was created or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <c>flags</c> may be any of the following OR'd together:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_FULLSCREEN" />: fullscreen window atdesktop resolution</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_OPENGL" />: window usable with an OpenGLcontext</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_OCCLUDED" />: window partially orcompletely obscured by another window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_HIDDEN" />: window is not visible</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_BORDERLESS" />: no window decoration</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_RESIZABLE" />: window can be resized</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MINIMIZED" />: window is minimized</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MAXIMIZED" />: window is maximized</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MOUSE_GRABBED" />: window hasgrabbed mouse focus</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_INPUT_FOCUS" />: window has inputfocus</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MOUSE_FOCUS" />: window has mousefocus</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_EXTERNAL" />: window not created by SDL</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MODAL" />: window is modal</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_HIGH_PIXEL_DENSITY" />: windowuses high pixel density back buffer if possible</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MOUSE_CAPTURE" />: window has mousecaptured (unrelated to MOUSE_GRABBED)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_ALWAYS_ON_TOP" />: window shouldalways be above others</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_UTILITY" />: window should be treated as autility window, not showing in the task bar and window list</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_TOOLTIP" />: window should be treated as atooltip and does not get mouse or keyboard focus, requires a parentwindow</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_POPUP_MENU" />: window should betreated as a popup menu, requires a parent window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_KEYBOARD_GRABBED" />: window hasgrabbed keyboard input</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WINDOW_VULKAN" />: window usable with a Vulkaninstance</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WINDOW_METAL" />: window usable with a Metalinstance</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WINDOW_TRANSPARENT" />: window withtransparent buffer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WINDOW_NOT_FOCUSABLE" />: window should notbe focusable</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The <see cref="SDL_Window" /> is implicitly shown if<see cref="SDL_WindowFlags.SDL_WINDOW_HIDDEN" /> is not set.</para>
		///   <para>On Apple's macOS, you must set the NSHighResolutionCapable Info.plistproperty to YES, otherwise you will not receive a High-DPI OpenGL canvas.</para>
		///   <para>The window pixel size may differ from its window coordinate size if thewindow is on a high pixel density display. Use<see cref="SDL_GetWindowSize" />() to query the client area's size inwindow coordinates, and<see cref="SDL_GetWindowSizeInPixels" />() or<see cref="SDL_GetRenderOutputSize" />() to query the drawablesize in pixels. Note that the drawable size can vary after the window iscreated and should be queried again if you get an<see cref="SDL_EventType.SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED" />event.</para>
		///   <para>If the window is created with any of the<see cref="SDL_WindowFlags.SDL_WINDOW_OPENGL" /> or<see cref="SDL_WINDOW_VULKAN" /> flags, then the correspondingLoadLibrary function (<see cref="SDL_GL_LoadLibrary" /> or<see cref="SDL_Vulkan_LoadLibrary" />) is called and thecorresponding UnloadLibrary function is called by<see cref="SDL_DestroyWindow" />().</para>
		///   <para>If <see cref="SDL_WINDOW_VULKAN" /> is specified and there isn't aworking Vulkan driver, <see cref="SDL_CreateWindow" />() will fail,because <see cref="SDL_Vulkan_LoadLibrary" />() will fail.</para>
		///   <para>If <see cref="SDL_WINDOW_METAL" /> is specified on an OS that does notsupport Metal, <see cref="SDL_CreateWindow" />() will fail.</para>
		///   <para>If you intend to use this window with an <see cref="SDL_Renderer" />, youshould use <see cref="SDL_CreateWindowAndRenderer" />()instead of this function, to avoid window flicker.</para>
		///   <para>On non-Apple devices, SDL requires you to either not link to the Vulkanloader or link to a dynamic library version. This limitation may be removedin a future version of SDL.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateWindowAndRenderer" />
		/// <seealso cref="SDL_CreatePopupWindow" />
		/// <seealso cref="SDL_CreateWindowWithProperties" />
		/// <seealso cref="SDL_DestroyWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_CreateWindow(const char *title, int w, int h, SDL_WindowFlags flags);
		/// </code><para>                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>// Example program:
		/// // Using SDL3 to create an application window
		/// 
		/// #include &lt;SDL3/SDL.h&gt;
		/// 
		/// int main(int argc, char* argv[]) {
		/// 
		///     SDL_Window *window;                    // Declare a pointer
		/// 
		///     SDL_Init(SDL_INIT_VIDEO);              // Initialize SDL3
		/// 
		///     // Create an application window with the following settings:
		///     window = SDL_CreateWindow(
		///         "An SDL3 window",                  // window title
		///         640,                               // width, in pixels
		///         480,                               // height, in pixels
		///         SDL_WINDOW_OPENGL                  // flags - see below
		///     );
		/// 
		///     // Check that the window was successfully created
		///     if (window == NULL) {
		///         // In the case that the window could not be made...
		///         SDL_LogError(SDL_LOG_CATEGORY_ERROR, "Could not create window: %s\n", SDL_GetError());
		///         return 1;
		///     }
		/// 
		///     // The window is open: could enter program loop here (see SDL_PollEvent())
		/// 
		///     SDL_Delay(3000);  // Pause execution for 3000 milliseconds, for example
		/// 
		///     // Close and destroy the window
		///     SDL_DestroyWindow(window);
		/// 
		///     // Clean up
		///     SDL_Quit();
		///     return 0;
		/// }
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static IntPtr SDL_CreateWindow(string title, int w, int h, SDL_WindowFlags flags)
		{
			var titleUTF8 = EncodeAsUTF8(title);
			var result = INTERNAL_SDL_CreateWindow(titleUTF8, w, h, flags);

			SDL_free((IntPtr) titleUTF8);
			return result;
		}

		/// <summary>
		///   <para>Create a child popup window of the specified parent window.</para>
		/// </summary>
		/// <param name="parent">
		///   <para> the parent of the window, must not be NULL.                                                                                                                               </para>
		/// </param>
		/// <param name="offset_x">
		///   <para> the x position of the popup window relative to the origin of the parent.                                                                                                  </para>
		/// </param>
		/// <param name="offset_y">
		///   <para> the y position of the popup window relative to the origin of the parent window.                                                                                           </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the window.                                                                                                                                                  </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the window.                                                                                                                                                 </para>
		/// </param>
		/// <param name="flags">
		///   <para> <see cref="SDL_WindowFlags.SDL_WINDOW_TOOLTIP" /> or <see cref="SDL_WindowFlags.SDL_WINDOW_POPUP_MENU" />, and zero or more additional <see cref="SDL_WindowFlags" /> OR'd together. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window that was created or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The flags parameter must contain at least one of the following:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_TOOLTIP" />: The popup window is a tooltipand will not pass any input events.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_POPUP_MENU" />: The popup window is apopup menu. The topmost popup menu will implicitly gain the keyboardfocus.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The following flags are not relevant to popup window creation and will beignored:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MINIMIZED" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MAXIMIZED" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_FULLSCREEN" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_BORDERLESS" />
		///         </para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The following flags are incompatible with popup window creation and willcause it to fail:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_UTILITY" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_WindowFlags.SDL_WINDOW_MODAL" />
		///         </para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The parent parameter must be non-null and a valid window. The parent ofa popup window can be either a regular, toplevel window, or another popupwindow.</para>
		///   <para>Popup windows cannot be minimized, maximized, made fullscreen, raised,flash, be made a modal window, be the parent of a toplevel window, or grabthe mouse and/or keyboard. Attempts to do so will fail.</para>
		///   <para>Popup windows implicitly do not have a border/decorations and do not appearon the taskbar/dock or in lists of windows such as alt-tab menus.</para>
		///   <para>If a parent window is hidden or destroyed, any child popup windows will berecursively hidden or destroyed as well. Child popup windows not explicitlyhidden will be restored when the parent is shown.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateWindow" />
		/// <seealso cref="SDL_CreateWindowWithProperties" />
		/// <seealso cref="SDL_DestroyWindow" />
		/// <seealso cref="SDL_GetWindowParent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreatePopupWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_CreatePopupWindow(SDL_Window *parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);
		/// </code><para>                                                                                                                                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreatePopupWindow(IntPtr parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);

		/// <summary>
		///   <para>Create a window with the specified properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window that was created or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN" />:true if the window should be always on top</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN" />:true if the window has no window decoration</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN" />:true if the window will be used with an externally managed graphicscontext.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN" />:true if the window should accept keyboard input (defaults true)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN" />:true if the window should start in fullscreen mode at desktop resolution</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER" />:the height of the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN" />:true if the window should start hidden</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN" />:true if the window uses a high pixel density buffer if possible</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN" />:true if the window should start maximized</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN" />:true if the window is a popup menu</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN" />:true if the window will be used with Metal rendering</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN" />:true if the window should start minimized</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN" />:true if the window is modal to its parent</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN" />:true if the window starts with grabbed mouse focus</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN" />:true if the window will be used with OpenGL rendering</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_PARENT_POINTER" />:an <see cref="SDL_Window" /> that will be the parent of this window,required for windows with the "tooltip", "menu", and "modal" properties</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN" />:true if the window should be resizable</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_TITLE_STRING" />:the title of the window, in UTF-8 encoding</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN" />:true if the window show transparent in the areas with alpha of 0</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN" />:true if the window is a tooltip</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN" />:true if the window is a utility window, not showing in the task bar andwindow list</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN" />:true if the window will be used with Vulkan rendering</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER" />:the width of the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_X_NUMBER" />: thex position of the window, or<see cref="SDL_WINDOWPOS_CENTERED" />, defaults to<see cref="SDL_WINDOWPOS_UNDEFINED" />. This is relative tothe parent for windows with the "parent" property set.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_Y_NUMBER" />: they position of the window, or<see cref="SDL_WINDOWPOS_CENTERED" />, defaults to<see cref="SDL_WINDOWPOS_UNDEFINED" />. This is relative tothe parent for windows with the "parent" property set.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>These are additional supported properties on macOS:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER" />:the <c>(__unsafe_unretained)</c> NSWindow associated with the window, if youwant to wrap an existing window.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER" />:the <c>(__unsafe_unretained)</c> NSView associated with the window, defaultsto <c>[window contentView]</c></para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>These are additional supported properties on Wayland:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>true if the application wants to use the Wayland surface for a customrole and does not want it attached to an XDG toplevel window. See<see href="README/wayland">README/wayland</see> for more information on using customsurfaces.</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>true if the application wants an associated <c>wl_egl_window</c> object tobe created and attached to the window, even if the window does not havethe OpenGL property or <see cref="SDL_WindowFlags.SDL_WINDOW_OPENGL" /> flag set.</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>the wl_surface associated with the window, if you want to wrap anexisting window. See <see href="README/wayland">README/wayland</see> for moreinformation.</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///   </list>
		///   <para>These are additional supported properties on Windows:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER" />:the HWND associated with the window, if you want to wrap an existingwindow.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER" />:optional, another window to share pixel format with, useful for OpenGLwindows</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>These are additional supported properties with X11:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER" />:the X11 Window associated with the window, if you want to wrap anexisting window.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The window is implicitly shown if the "hidden" property is not set.</para>
		///   <para>Windows with the "tooltip" and "menu" properties are popup windows and havethe behaviors and guidelines outlined in<see cref="SDL_CreatePopupWindow" />().</para>
		///   <para>If this window is being created to be used with an<see cref="SDL_Renderer" />, you should not add a graphics API specificproperty(<see cref="SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN" />,etc), as SDL will handle that internally when it chooses a renderer.However, SDL might need to recreate your window at that point, which maycause the window to appear briefly, and then flicker as it is recreated.The correct approach to this is to create the window with the<see cref="SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN" />property set to true, then create the renderer, then show the window with<see cref="SDL_ShowWindow" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProperties" />
		/// <seealso cref="SDL_CreateWindow" />
		/// <seealso cref="SDL_DestroyWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateWindowWithProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_CreateWindowWithProperties(SDL_PropertiesID props);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateWindowWithProperties(uint props);

		/// <summary>
		///   <para>Get the numeric ID of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_WindowID" />) Returns the ID of the window on success or 0on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The numeric ID is what <see cref="SDL_WindowEvent" /> references, andis necessary to map these events to specific <see cref="SDL_Window" />objects.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFromID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_WindowID SDL_GetWindowID(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetWindowID(IntPtr window);

		/// <summary>
		///   <para>Get a window from a stored ID.</para>
		/// </summary>
		/// <param name="id">
		///   <para> the ID of the window. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window associated with <c>id</c> orNULL if it doesn't exist; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The numeric ID is what <see cref="SDL_WindowEvent" /> references, andis necessary to map these events to specific <see cref="SDL_Window" />objects.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowFromID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetWindowFromID(SDL_WindowID id);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowFromID(uint id);

		/// <summary>
		///   <para>Get parent of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the parent of the window on success orNULL if the window has no parent.</para>
		/// </returns>
		/// <seealso cref="SDL_CreatePopupWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowParent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetWindowParent(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowParent(IntPtr window);

		/// <summary>
		///   <para>Get the properties associated with a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_SHAPE_POINTER" />: thesurface associated with a shaped window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN" />:true if the window has HDR headroom above the SDR white point. Thisproperty can change dynamically when<see cref="SDL_EventType.SDL_EVENT_WINDOW_HDR_STATE_CHANGED" />is sent.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT" />:the value of SDR white in the<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" /> colorspace. OnWindows this corresponds to the SDR white level in scRGB colorspace, andon Apple platforms this is always 1.0 for EDR content. This property canchange dynamically when<see cref="SDL_EventType.SDL_EVENT_WINDOW_HDR_STATE_CHANGED" />is sent.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT" />:the additional high dynamic range that can be displayed, in terms of theSDR white point. When HDR is not enabled, this will be 1.0. This propertycan change dynamically when<see cref="SDL_EventType.SDL_EVENT_WINDOW_HDR_STATE_CHANGED" />is sent.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On Android:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER" />:the ANativeWindow associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER" />:the EGLSurface associated with the window</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On iOS:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER" />:the <c>(__unsafe_unretained)</c> UIWindow associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER" />:the NSInteger tag associated with metal views on the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER" />:the OpenGL view's framebuffer object. It must be bound when rendering tothe screen using OpenGL.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER" />:the OpenGL view's renderbuffer object. It must be bound when<see cref="SDL_GL_SwapWindow" /> is called.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER" />:the OpenGL view's resolve framebuffer, when MSAA is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On KMS/DRM:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER" />:the device index associated with the window (e.g. the X in/dev/dri/cardX)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER" />:the DRM FD associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER" />:the GBM device associated with the window</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On macOS:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_COCOA_WINDOW_POINTER" />:the <c>(__unsafe_unretained)</c> NSWindow associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER" />:the NSInteger tag assocated with metal views on the window</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On Vivante:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER" />:the EGLNativeDisplayType associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER" />:the EGLNativeWindowType associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER" />:the EGLSurface associated with the window</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On Windows:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WIN32_HWND_POINTER" />:the HWND associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WIN32_HDC_POINTER" />:the HDC associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER" />:the HINSTANCE associated with the window</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On Wayland:</para>
		///   <para>Note: The <c>xdg_*</c> window objects do not internally persist across windowshow/hide calls. They will be null if the window is hidden and must bequeried each time it is shown.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER" />:the wl_display associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER" />:the wl_surface associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER" />:the wl_egl_window associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER" />:the xdg_surface associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER" />:the xdg_toplevel role associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>'<see cref="SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING" />':the export handle associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER" />:the xdg_popup role associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER" />:the xdg_positioner associated with the window, in popup mode</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On X11:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_X11_DISPLAY_POINTER" />:the X11 Display associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_X11_SCREEN_NUMBER" />:the screen number associated with the window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_WINDOW_X11_WINDOW_NUMBER" />:the X11 Window associated with the window</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetWindowProperties(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetWindowProperties(IntPtr window);

		/// <summary>
		///   <para>Get the window flags.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_WindowFlags" />) Returns a mask of the<see cref="SDL_WindowFlags" /> associated with <c>window</c>.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateWindow" />
		/// <seealso cref="SDL_HideWindow" />
		/// <seealso cref="SDL_MaximizeWindow" />
		/// <seealso cref="SDL_MinimizeWindow" />
		/// <seealso cref="SDL_SetWindowFullscreen" />
		/// <seealso cref="SDL_SetWindowMouseGrab" />
		/// <seealso cref="SDL_ShowWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_WindowFlags SDL_GetWindowFlags(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_WindowFlags SDL_GetWindowFlags(IntPtr window);

		[DllImport(nativeLibName, EntryPoint = "SDL_SetWindowTitle", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetWindowTitle(IntPtr window, byte* title);
		/// <summary>
		///   <para>Set the title of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                     </para>
		/// </param>
		/// <param name="title">
		///   <para> the desired window title in UTF-8 format. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This string is expected to be in UTF-8 encoding.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowTitle" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowTitle<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowTitle(SDL_Window *window, const char *title);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static SDLBool SDL_SetWindowTitle(IntPtr window, string title)
		{
			var titleUTF8 = EncodeAsUTF8(title);
			var result = INTERNAL_SDL_SetWindowTitle(window, titleUTF8);

			SDL_free((IntPtr) titleUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetWindowTitle", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetWindowTitle(IntPtr window);
		/// <summary>
		///   <para>Get the title of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the title of the window in UTF-8 format or "" ifthere is no title.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowTitle" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowTitle<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetWindowTitle(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static string SDL_GetWindowTitle(IntPtr window)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetWindowTitle(window));
		}

		/// <summary>
		///   <para>Set the icon for a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                                                       </para>
		/// </param>
		/// <param name="icon">
		///   <para> an <see cref="SDL_Surface" /> structure containing the icon for the window. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If this function is passed a surface with alternate representations, thesurface will be interpreted as the content to be used for 100% displayscale, and the alternate representations will be used for high DPIsituations. For example, if the original surface is 32x32, then on a 2xmacOS display or 200% display scale on Windows, a 64x64 version of theimage will be used, if available. If a matching version of the image isn'tavailable, the closest larger size image will be downscaled to theappropriate size and be used instead, if available. Otherwise, the closestsmaller image will be upscaled and be used instead.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowIcon<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowIcon(IntPtr window, IntPtr icon);

		/// <summary>
		///   <para>Request that the window's position be set.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to reposition.                                                                                                                      </para>
		/// </param>
		/// <param name="x">
		///   <para> the x coordinate of the window, or <see cref="SDL_WINDOWPOS_CENTERED" /> or <see cref="SDL_WINDOWPOS_UNDEFINED" />. </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate of the window, or <see cref="SDL_WINDOWPOS_CENTERED" /> or <see cref="SDL_WINDOWPOS_UNDEFINED" />. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If, at the time of this request, the window is in a fixed-size state suchas maximized, this request may be deferred until the window returns to aresizable state.</para>
		///   <para>This can be used to reposition fullscreen-desktop windows onto a differentdisplay, however, exclusive fullscreen windows are locked to a specificdisplay and can only be repositioned programmatically via<see cref="SDL_SetWindowFullscreenMode" />().</para>
		///   <para>On some windowing systems this request is asynchronous and the newcoordinates may not have have been applied immediately upon the return ofthis function. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window position changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_MOVED" /> event will be emitted withthe window's new coordinates. Note that the new coordinates may not matchthe exact coordinates requested, as some windowing systems can restrict theposition of the window in certain scenarios (e.g. constraining the positionso the window is always within desktop bounds). Additionally, as this isjust a request, it can be denied by the windowing system.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowPosition" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowPosition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowPosition(SDL_Window *window, int x, int y);
		/// </code><para>                                                                                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowPosition(IntPtr window, int x, int y);

		/// <summary>
		///   <para>Get the position of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query.                                                </para>
		/// </param>
		/// <param name="x">
		///   <para> a pointer filled in with the x position of the window, may be NULL. </para>
		/// </param>
		/// <param name="y">
		///   <para> a pointer filled in with the y position of the window, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is the current position of the window as last reported by thewindowing system.</para>
		///   <para>If you do not need the value for one of the positions a NULL may be passedin the <c>x</c> or <c>y</c> parameter.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetWindowPosition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowPosition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowPosition(SDL_Window *window, int *x, int *y);
		/// </code><para>                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowPosition(IntPtr window, out int x, out int y);

		/// <summary>
		///   <para>Request that the size of a window's client area be set.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                  </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the window, must be &gt; 0.  </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the window, must be &gt; 0. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If, at the time of this request, the window in a fixed-size state, such asmaximized or fullscreen, the request will be deferred until the windowexits this state and becomes resizable again.</para>
		///   <para>To change the fullscreen mode of a window, use<see cref="SDL_SetWindowFullscreenMode" />()</para>
		///   <para>On some windowing systems, this request is asynchronous and the new windowsize may not have have been applied immediately upon the return of thisfunction. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window size changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_RESIZED" /> event will be emittedwith the new window dimensions. Note that the new dimensions may not matchthe exact size requested, as some windowing systems can restrict the windowsize in certain scenarios (e.g. constraining the size of the content areato remain within the usable desktop bounds). Additionally, as this is justa request, it can be denied by the windowing system.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowSize" />
		/// <seealso cref="SDL_SetWindowFullscreenMode" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowSize(SDL_Window *window, int w, int h);
		/// </code><para>                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowSize(IntPtr window, int w, int h);

		/// <summary>
		///   <para>Get the size of a window's client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query the width and height from.                  </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer filled in with the width of the window, may be NULL.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer filled in with the height of the window, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The window pixel size may differ from its window coordinate size if thewindow is on a high pixel density display. Use<see cref="SDL_GetWindowSizeInPixels" />() or<see cref="SDL_GetRenderOutputSize" />() to get the real clientarea size in pixels.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderOutputSize" />
		/// <seealso cref="SDL_GetWindowSizeInPixels" />
		/// <seealso cref="SDL_SetWindowSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowSize(SDL_Window *window, int *w, int *h);
		/// </code><para>                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowSize(IntPtr window, out int w, out int h);

		/// <summary>
		///   <para>Get the safe area for this window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query.                                                           </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer filled in with the client area that is safe for interactive content. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Some devices have portions of the screen which are partially obscured ornot interactive, possibly due to on-screen controls, curved edges, cameranotches, TV overscan, etc. This function provides the area of the windowwhich is safe to have interactable content. You should continue renderinginto the rest of the window, but it should not contain visually importantor interactible content.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowSafeArea<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowSafeArea(SDL_Window *window, SDL_Rect *rect);
		/// </code><para>                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowSafeArea(IntPtr window, out SDL_Rect rect);

		/// <summary>
		///   <para>Request that the aspect ratio of a window's client area be set.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                                         </para>
		/// </param>
		/// <param name="min_aspect">
		///   <para> the minimum aspect ratio of the window, or 0.0f for no limit. </para>
		/// </param>
		/// <param name="max_aspect">
		///   <para> the maximum aspect ratio of the window, or 0.0f for no limit. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The aspect ratio is the ratio of width divided by height, e.g. 2560x1600would be 1.6. Larger aspect ratios are wider and smaller aspect ratios arenarrower.</para>
		///   <para>If, at the time of this request, the window in a fixed-size state, such asmaximized or fullscreen, the request will be deferred until the windowexits this state and becomes resizable again.</para>
		///   <para>On some windowing systems, this request is asynchronous and the new windowaspect ratio may not have have been applied immediately upon the return ofthis function. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window size changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_RESIZED" /> event will be emittedwith the new window dimensions. Note that the new dimensions may not matchthe exact aspect ratio requested, as some windowing systems can restrictthe window size in certain scenarios (e.g. constraining the size of thecontent area to remain within the usable desktop bounds). Additionally, asthis is just a request, it can be denied by the windowing system.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowAspectRatio" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowAspectRatio<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowAspectRatio(SDL_Window *window, float min_aspect, float max_aspect);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowAspectRatio(IntPtr window, float min_aspect, float max_aspect);

		/// <summary>
		///   <para>Get the size of a window's client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query the width and height from.                                </para>
		/// </param>
		/// <param name="min_aspect">
		///   <para> a pointer filled in with the minimum aspect ratio of the window, may be NULL. </para>
		/// </param>
		/// <param name="max_aspect">
		///   <para> a pointer filled in with the maximum aspect ratio of the window, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowAspectRatio" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowAspectRatio<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowAspectRatio(SDL_Window *window, float *min_aspect, float *max_aspect);
		/// </code><para>                                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowAspectRatio(IntPtr window, out float min_aspect, out float max_aspect);

		/// <summary>
		///   <para>Get the size of a window's borders (decorations) around the client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query the size values of the border (decorations) from.             </para>
		/// </param>
		/// <param name="top">
		///   <para> pointer to variable for storing the size of the top border; NULL is permitted.    </para>
		/// </param>
		/// <param name="left">
		///   <para> pointer to variable for storing the size of the left border; NULL is permitted.   </para>
		/// </param>
		/// <param name="bottom">
		///   <para> pointer to variable for storing the size of the bottom border; NULL is permitted. </para>
		/// </param>
		/// <param name="right">
		///   <para> pointer to variable for storing the size of the right border; NULL is permitted.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note: If this function fails (returns false), the size values will beinitialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if thewindow in question was borderless.</para>
		///   <para>Note: This function may fail on systems where the window has not yet beendecorated by the display server (for example, immediately after calling<see cref="SDL_CreateWindow" />). It is recommended that you wait atleast until the window has been presented and composited, so that thewindow system has a chance to decorate the window and provide the borderdimensions to SDL.</para>
		///   <para>This function also returns false if getting the information is notsupported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowBordersSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowBordersSize(SDL_Window *window, int *top, int *left, int *bottom, int *right);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowBordersSize(IntPtr window, out int top, out int left, out int bottom, out int right);

		/// <summary>
		///   <para>Get the size of a window's client area, in pixels.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window from which the drawable size should be queried.           </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer to variable for storing the width in pixels, may be NULL.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer to variable for storing the height in pixels, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateWindow" />
		/// <seealso cref="SDL_GetWindowSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowSizeInPixels<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowSizeInPixels(SDL_Window *window, int *w, int *h);
		/// </code><para>                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowSizeInPixels(IntPtr window, out int w, out int h);

		/// <summary>
		///   <para>Set the minimum size of a window's client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                                </para>
		/// </param>
		/// <param name="min_w">
		///   <para> the minimum width of the window, or 0 for no limit.  </para>
		/// </param>
		/// <param name="min_h">
		///   <para> the minimum height of the window, or 0 for no limit. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetWindowMinimumSize" />
		/// <seealso cref="SDL_SetWindowMaximumSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowMinimumSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowMinimumSize(SDL_Window *window, int min_w, int min_h);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowMinimumSize(IntPtr window, int min_w, int min_h);

		/// <summary>
		///   <para>Get the minimum size of a window's client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query.                                                    </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer filled in with the minimum width of the window, may be NULL.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer filled in with the minimum height of the window, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetWindowMaximumSize" />
		/// <seealso cref="SDL_SetWindowMinimumSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowMinimumSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowMinimumSize(SDL_Window *window, int *w, int *h);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowMinimumSize(IntPtr window, out int w, out int h);

		/// <summary>
		///   <para>Set the maximum size of a window's client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                                </para>
		/// </param>
		/// <param name="max_w">
		///   <para> the maximum width of the window, or 0 for no limit.  </para>
		/// </param>
		/// <param name="max_h">
		///   <para> the maximum height of the window, or 0 for no limit. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetWindowMaximumSize" />
		/// <seealso cref="SDL_SetWindowMinimumSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowMaximumSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowMaximumSize(SDL_Window *window, int max_w, int max_h);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowMaximumSize(IntPtr window, int max_w, int max_h);

		/// <summary>
		///   <para>Get the maximum size of a window's client area.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query.                                                    </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer filled in with the maximum width of the window, may be NULL.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer filled in with the maximum height of the window, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetWindowMinimumSize" />
		/// <seealso cref="SDL_SetWindowMaximumSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowMaximumSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowMaximumSize(SDL_Window *window, int *w, int *h);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowMaximumSize(IntPtr window, out int w, out int h);

		/// <summary>
		///   <para>Set the border state of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window of which to change the border state. </para>
		/// </param>
		/// <param name="bordered">
		///   <para> false to remove border, true to add border.     </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will add or remove the window's<see cref="SDL_WindowFlags.SDL_WINDOW_BORDERLESS" /> flag and add or remove theborder from the actual window. This is a no-op if the window's borderalready matches the requested state.</para>
		///   <para>You can't change the border state of a fullscreen window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFlags" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowBordered<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowBordered(SDL_Window *window, bool bordered);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowBordered(IntPtr window, SDLBool bordered);

		/// <summary>
		///   <para>Set the user-resizable state of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window of which to change the resizable state. </para>
		/// </param>
		/// <param name="resizable">
		///   <para> true to allow resizing, false to disallow.         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will add or remove the window's<see cref="SDL_WindowFlags.SDL_WINDOW_RESIZABLE" /> flag and allow/disallow userresizing of the window. This is a no-op if the window's resizable statealready matches the requested state.</para>
		///   <para>You can't change the resizable state of a fullscreen window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFlags" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowResizable<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowResizable(SDL_Window *window, bool resizable);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowResizable(IntPtr window, SDLBool resizable);

		/// <summary>
		///   <para>Set the window to always be above the others.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window of which to change the always on top state.  </para>
		/// </param>
		/// <param name="on_top">
		///   <para> true to set the window always on top, false to disable. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will add or remove the window's<see cref="SDL_WindowFlags.SDL_WINDOW_ALWAYS_ON_TOP" /> flag. This willbring the window to the front and keep the window above the rest.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFlags" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowAlwaysOnTop<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowAlwaysOnTop(SDL_Window *window, bool on_top);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowAlwaysOnTop(IntPtr window, SDLBool on_top);

		/// <summary>
		///   <para>Show a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to show. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_HideWindow" />
		/// <seealso cref="SDL_RaiseWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShowWindow(SDL_Window *window);
		/// </code><para>                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ShowWindow(IntPtr window);

		/// <summary>
		///   <para>Hide a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to hide. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_ShowWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HideWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HideWindow(SDL_Window *window);
		/// </code><para>                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HideWindow(IntPtr window);

		/// <summary>
		///   <para>Request that a window be raised above other windows and gain the input focus.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to raise. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The result of this request is subject to desktop window manager policy,particularly if raising the requested window would result in stealing focusfrom another application. If the window is successfully raised and gainsinput focus, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_FOCUS_GAINED" /> event willbe emitted, and the window will have the<see cref="SDL_WindowFlags.SDL_WINDOW_INPUT_FOCUS" /> flag set.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RaiseWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RaiseWindow(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RaiseWindow(IntPtr window);

		/// <summary>
		///   <para>Request that the window be made as large as possible.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to maximize. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Non-resizable windows can't be maximized. The window must have the<see cref="SDL_WindowFlags.SDL_WINDOW_RESIZABLE" /> flag set, or this will have noeffect.</para>
		///   <para>On some windowing systems this request is asynchronous and the new windowstate may not have have been applied immediately upon the return of thisfunction. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window state changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_MAXIMIZED" /> event will beemitted. Note that, as this is just a request, the windowing system candeny the state change.</para>
		///   <para>When maximizing a window, whether the constraints set via<see cref="SDL_SetWindowMaximumSize" />() are honored dependson the policy of the window manager. Win32 and macOS enforce theconstraints when maximizing, while X11 and Wayland window managers mayvary.</para>
		/// </remarks>
		/// <seealso cref="SDL_MinimizeWindow" />
		/// <seealso cref="SDL_RestoreWindow" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MaximizeWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_MaximizeWindow(SDL_Window *window);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_MaximizeWindow(IntPtr window);

		/// <summary>
		///   <para>Request that the window be minimized to an iconic representation.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to minimize. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>On some windowing systems this request is asynchronous and the new windowstate may not have been applied immediately upon the return of thisfunction. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window state changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_MINIMIZED" /> event will beemitted. Note that, as this is just a request, the windowing system candeny the state change.</para>
		/// </remarks>
		/// <seealso cref="SDL_MaximizeWindow" />
		/// <seealso cref="SDL_RestoreWindow" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MinimizeWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_MinimizeWindow(SDL_Window *window);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_MinimizeWindow(IntPtr window);

		/// <summary>
		///   <para>Request that the size and position of a minimized or maximized window be restored.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to restore. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>On some windowing systems this request is asynchronous and the new windowstate may not have have been applied immediately upon the return of thisfunction. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window state changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_RESTORED" /> event will beemitted. Note that, as this is just a request, the windowing system candeny the state change.</para>
		/// </remarks>
		/// <seealso cref="SDL_MaximizeWindow" />
		/// <seealso cref="SDL_MinimizeWindow" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RestoreWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RestoreWindow(SDL_Window *window);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RestoreWindow(IntPtr window);

		/// <summary>
		///   <para>Request that the window's fullscreen state be changed.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                              </para>
		/// </param>
		/// <param name="fullscreen">
		///   <para> true for fullscreen mode, false for windowed mode. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>By default a window in fullscreen state uses borderless fullscreen desktopmode, but a specific exclusive display mode can be set using<see cref="SDL_SetWindowFullscreenMode" />().</para>
		///   <para>On some windowing systems this request is asynchronous and the newfullscreen state may not have have been applied immediately upon the returnof this function. If an immediate change is required, call<see cref="SDL_SyncWindow" />() to block until the changes have takeneffect.</para>
		///   <para>When the window state changes, an<see cref="SDL_EventType.SDL_EVENT_WINDOW_ENTER_FULLSCREEN" /> or<see cref="SDL_EventType.SDL_EVENT_WINDOW_LEAVE_FULLSCREEN" />event will be emitted. Note that, as this is just a request, it can bedenied by the windowing system.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowFullscreenMode" />
		/// <seealso cref="SDL_SetWindowFullscreenMode" />
		/// <seealso cref="SDL_SyncWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowFullscreen<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowFullscreen(SDL_Window *window, bool fullscreen);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowFullscreen(IntPtr window, SDLBool fullscreen);

		/// <summary>
		///   <para>Block until any pending window state is finalized.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which to wait for the pending state to be applied. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false if the operation timed out beforethe window was in the requested state.</para>
		/// </returns>
		/// <remarks>
		///   <para>On asynchronous windowing systems, this acts as a synchronization barrierfor pending window state. It will attempt to wait until any pending windowstate has been applied and is guaranteed to return within finite time. Notethat for how long it can potentially block depends on the underlying windowsystem, as window state changes may involve somewhat lengthy animationsthat must complete before the window is in its final requested state.</para>
		///   <para>On windowing systems where changes are immediate, this does nothing.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetWindowSize" />
		/// <seealso cref="SDL_SetWindowPosition" />
		/// <seealso cref="SDL_SetWindowFullscreen" />
		/// <seealso cref="SDL_MinimizeWindow" />
		/// <seealso cref="SDL_MaximizeWindow" />
		/// <seealso cref="SDL_RestoreWindow" />
		/// <seealso cref="SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SyncWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SyncWindow(SDL_Window *window);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SyncWindow(IntPtr window);

		/// <summary>
		///   <para>Return whether the window has a surface associated with it.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if there is a surface associated with the window, orfalse otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetWindowSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WindowHasSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WindowHasSurface(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WindowHasSurface(IntPtr window);

		/// <summary>
		///   <para>Get the SDL surface associated with the window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns the surface associated with thewindow, or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>A new surface will be created with the optimal format for the window, ifnecessary. This surface will be freed when the window is destroyed. Do notfree this surface.</para>
		///   <para>This surface will be invalidated if the window is resized. After resizing awindow this function must be called again to return a valid surface.</para>
		///   <para>You may not combine this with 3D or the rendering API on this window.</para>
		///   <para>This function is affected by<see cref="SDL_HINT_FRAMEBUFFER_ACCELERATION" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroyWindowSurface" />
		/// <seealso cref="SDL_WindowHasSurface" />
		/// <seealso cref="SDL_UpdateWindowSurface" />
		/// <seealso cref="SDL_UpdateWindowSurfaceRects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_GetWindowSurface(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowSurface(IntPtr window);

		/// <summary>
		///   <para>Toggle VSync for the window surface.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window.                         </para>
		/// </param>
		/// <param name="vsync">
		///   <para> the vertical refresh sync interval. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When a window surface is created, vsync defaults to<see cref="SDL_WINDOW_SURFACE_VSYNC_DISABLED" />.</para>
		///   <para>The <c>vsync</c> parameter can be 1 to synchronize present with every verticalrefresh, 2 to synchronize present with every second vertical refresh, etc.,<see cref="SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE" /> forlate swap tearing (adaptive vsync), or<see cref="SDL_WINDOW_SURFACE_VSYNC_DISABLED" /> todisable. Not every value is supported by every driver, so you should checkthe return value to see whether the requested setting is supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowSurfaceVSync" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowSurfaceVSync<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowSurfaceVSync(SDL_Window *window, int vsync);
		/// 
		/// 
		/// #define SDL_WINDOW_SURFACE_VSYNC_DISABLED 0
		/// #define SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE (-1)
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowSurfaceVSync(IntPtr window, int vsync);

		/// <summary>
		///   <para>Get VSync for the window surface.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query.                                                                                                                                      </para>
		/// </param>
		/// <param name="vsync">
		///   <para> an int filled with the current vertical refresh sync interval. See <see cref="SDL_SetWindowSurfaceVSync" />() for the meaning of the value. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowSurfaceVSync" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowSurfaceVSync<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowSurfaceVSync(SDL_Window *window, int *vsync);
		/// </code><para>                                                                                                                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowSurfaceVSync(IntPtr window, out int vsync);

		/// <summary>
		///   <para>Copy the window surface to the screen.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to update. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is the function you use to reflect any changes to the surface on thescreen.</para>
		///   <para>This function is equivalent to the SDL 1.2 API <see cref="SDL_Flip" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowSurface" />
		/// <seealso cref="SDL_UpdateWindowSurfaceRects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateWindowSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UpdateWindowSurface(SDL_Window *window);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UpdateWindowSurface(IntPtr window);

		/// <summary>
		///   <para>Copy areas of the window surface to the screen.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to update.                                                                             </para>
		/// </param>
		/// <param name="rects">
		///   <para> an array of <see cref="SDL_Rect" /> structures representing areas of the surface to copy, in pixels. </para>
		/// </param>
		/// <param name="numrects">
		///   <para> the number of rectangles.                                                                         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is the function you use to reflect changes to portions of the surfaceon the screen.</para>
		///   <para>This function is equivalent to the SDL 1.2 API<see cref="SDL_UpdateRects" />().</para>
		///   <para>Note that this function will update at least the rectangles specified,but this is only intended as an optimization; in practice, this mightupdate more of the screen (or all of the screen!), depending on what methodSDL uses to send pixels to the system.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowSurface" />
		/// <seealso cref="SDL_UpdateWindowSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateWindowSurfaceRects<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects, int numrects);
		/// </code><para>                                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UpdateWindowSurfaceRects(IntPtr window, SDL_Rect[] rects, int numrects);

		/// <summary>
		///   <para>Destroy the surface associated with the window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to update. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetWindowSurface" />
		/// <seealso cref="SDL_WindowHasSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyWindowSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_DestroyWindowSurface(SDL_Window *window);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_DestroyWindowSurface(IntPtr window);

		/// <summary>
		///   <para>Set a window's keyboard grab mode.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which the keyboard grab mode should be set. </para>
		/// </param>
		/// <param name="grabbed">
		///   <para> this is true to grab keyboard, and false to release.       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab orthe Meta/Super key. Note that not all system keyboard shortcuts can becaptured by applications (one example is Ctrl+Alt+Del on Windows).</para>
		///   <para>This is primarily intended for specialized applications such as VNC clientsor VM frontends. Normal games should not use keyboard grab.</para>
		///   <para>When keyboard grab is enabled, SDL will continue to handle Alt+Tab when thewindow is full-screen to ensure the user is not trapped in yourapplication. If you have a custom keyboard shortcut to exit fullscreenmode, you may suppress this behavior with<see cref="SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED" />.</para>
		///   <para>If the caller enables a grab while another window is currently grabbed, theother window loses its grab in favor of the caller's window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowKeyboardGrab" />
		/// <seealso cref="SDL_SetWindowMouseGrab" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowKeyboardGrab<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowKeyboardGrab(SDL_Window *window, bool grabbed);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowKeyboardGrab(IntPtr window, SDLBool grabbed);

		/// <summary>
		///   <para>Set a window's mouse grab mode.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which the mouse grab mode should be set. </para>
		/// </param>
		/// <param name="grabbed">
		///   <para> this is true to grab mouse, and false to release.       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Mouse grab confines the mouse cursor to the window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowMouseGrab" />
		/// <seealso cref="SDL_SetWindowKeyboardGrab" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowMouseGrab<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowMouseGrab(SDL_Window *window, bool grabbed);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowMouseGrab(IntPtr window, SDLBool grabbed);

		/// <summary>
		///   <para>Get a window's keyboard grab mode.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if keyboard is grabbed, and false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowKeyboardGrab" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowKeyboardGrab<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowKeyboardGrab(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowKeyboardGrab(IntPtr window);

		/// <summary>
		///   <para>Get a window's mouse grab mode.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if mouse is grabbed, and false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowKeyboardGrab" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowMouseGrab<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowMouseGrab(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowMouseGrab(IntPtr window);

		/// <summary>
		///   <para>Get the window that currently has an input grab enabled.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window if input is grabbed or NULLotherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowMouseGrab" />
		/// <seealso cref="SDL_SetWindowKeyboardGrab" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGrabbedWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetGrabbedWindow(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGrabbedWindow();

		/// <summary>
		///   <para>Confines the cursor to the specified area of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window that will be associated with the barrier.                                                             </para>
		/// </param>
		/// <param name="rect">
		///   <para> a rectangle area in window-relative coordinates. If NULL the barrier for the specified window will be destroyed. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that this does NOT grab the cursor, it only defines the area a cursoris restricted to when the window has mouse focus.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowMouseRect" />
		/// <seealso cref="SDL_SetWindowMouseGrab" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowMouseRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowMouseRect(SDL_Window *window, const SDL_Rect *rect);
		/// </code><para>                                                                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowMouseRect(IntPtr window, ref SDL_Rect rect);

		/// <summary>
		///   <para>Get the mouse confinement rectangle of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const <see cref="SDL_Rect" /> *) Returns a pointer to the mouse confinementrectangle of a window, or NULL if there isn't one.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowMouseRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowMouseRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>const SDL_Rect * SDL_GetWindowMouseRect(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowMouseRect(IntPtr window);

		/// <summary>
		///   <para>Set the opacity for a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window which will be made transparent or opaque.   </para>
		/// </param>
		/// <param name="opacity">
		///   <para> the opacity value (0.0f - transparent, 1.0f - opaque). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The parameter <c>opacity</c> will be clamped internally between 0.0f(transparent) and 1.0f (opaque).</para>
		///   <para>This function also returns false if setting the opacity isn't supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowOpacity" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowOpacity<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowOpacity(SDL_Window *window, float opacity);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowOpacity(IntPtr window, float opacity);

		/// <summary>
		///   <para>Get the opacity of a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to get the current opacity value from. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the opacity, (0.0f - transparent, 1.0f - opaque), or -1.0fon failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If transparency isn't supported on this platform, opacity will be returnedas 1.0f without error.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetWindowOpacity" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowOpacity<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetWindowOpacity(SDL_Window *window);
		/// </code><para>                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetWindowOpacity(IntPtr window);

		/// <summary>
		///   <para>Set the window as a child of a parent window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window that should become the child of a parent. </para>
		/// </param>
		/// <param name="parent">
		///   <para> the new parent window for the child window.          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the window is already the child of an existing window, it will bereparented to the new owner. Setting the parent window to NULL unparentsthe window and removes child window status.</para>
		///   <para>If a parent window is hidden or destroyed, the operation will berecursively applied to child windows. Child windows hidden with the parentthat did not have their hidden status explicitly set will be restored whenthe parent is shown.</para>
		///   <para>Attempting to set the parent of a window that is currently in the modalstate will fail. Use <see cref="SDL_SetWindowModal" />() to cancelthe modal status before attempting to change the parent.</para>
		///   <para>Popup windows cannot change parents and attempts to do so will fail.</para>
		///   <para>Setting a parent window that is currently the sibling or descendent of thechild window results in undefined behavior.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetWindowModal" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowParent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowParent(SDL_Window *window, SDL_Window *parent);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowParent(IntPtr window, IntPtr parent);

		/// <summary>
		///   <para>Toggle the state of the window as modal.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window on which to set the modal state.             </para>
		/// </param>
		/// <param name="modal">
		///   <para> true to toggle modal status on, false to toggle it off. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>To enable modal status on a window, the window must currently be the childwindow of a parent, or toggling modal status on will fail.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetWindowParent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowModal<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowModal(SDL_Window *window, bool modal);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowModal(IntPtr window, SDLBool modal);

		/// <summary>
		///   <para>Set whether the window may have input focus.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to set focusable state.                         </para>
		/// </param>
		/// <param name="focusable">
		///   <para> true to allow input focus, false to not allow input focus. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowFocusable<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowFocusable(SDL_Window *window, bool focusable);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowFocusable(IntPtr window, SDLBool focusable);

		/// <summary>
		///   <para>Display the system-level window menu.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which the menu will be displayed.                                    </para>
		/// </param>
		/// <param name="x">
		///   <para> the x coordinate of the menu, relative to the origin (top-left) of the client area. </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate of the menu, relative to the origin (top-left) of the client area. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This default window menu is provided by the system and on some platformsprovides functionality for setting or changing privileged state on thewindow, such as moving it between workspaces or displays, or toggling thealways-on-top property.</para>
		///   <para>On platforms or desktops where this is unsupported, this function doesnothing.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowWindowSystemMenu<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShowWindowSystemMenu(SDL_Window *window, int x, int y);
		/// </code><para>                                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ShowWindowSystemMenu(IntPtr window, int x, int y);

		/// <summary>
		///   <para>Possible return values from the <see cref="SDL_HitTest" /> callback.</para>
		/// </summary>
		/// <seealso cref="SDL_HitTest" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HitTestResult<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_HitTestResult
		/// {
		///     SDL_HITTEST_NORMAL,             /**&lt; Region is normal. No special properties. */
		///     SDL_HITTEST_DRAGGABLE,          /**&lt; Region can drag entire window. */
		///     SDL_HITTEST_RESIZE_TOPLEFT,     /**&lt; Region is the resizable top-left corner border. */
		///     SDL_HITTEST_RESIZE_TOP,         /**&lt; Region is the resizable top border. */
		///     SDL_HITTEST_RESIZE_TOPRIGHT,    /**&lt; Region is the resizable top-right corner border. */
		///     SDL_HITTEST_RESIZE_RIGHT,       /**&lt; Region is the resizable right border. */
		///     SDL_HITTEST_RESIZE_BOTTOMRIGHT, /**&lt; Region is the resizable bottom-right corner border. */
		///     SDL_HITTEST_RESIZE_BOTTOM,      /**&lt; Region is the resizable bottom border. */
		///     SDL_HITTEST_RESIZE_BOTTOMLEFT,  /**&lt; Region is the resizable bottom-left corner border. */
		///     SDL_HITTEST_RESIZE_LEFT         /**&lt; Region is the resizable left border. */
		/// } SDL_HitTestResult;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public enum SDL_HitTestResult
		{
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_NORMAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_NORMAL = 0,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_DRAGGABLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_DRAGGABLE = 1,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_TOPLEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_TOPLEFT = 2,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_TOP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_TOP = 3,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_TOPRIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_TOPRIGHT = 4,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_RIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_RIGHT = 5,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_BOTTOMRIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_BOTTOM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_BOTTOM = 7,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_BOTTOMLEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
			/// <summary><para>Please refer to <see cref="SDL_HitTestResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HITTEST_RESIZE_LEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HITTEST_RESIZE_LEFT = 9,
		}

		/// <summary>
		///   <para>Callback used for hit-testing.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns an <see cref="SDL_HitTestResult" /> value.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowHitTest" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HitTest<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef SDL_HitTestResult (SDLCALL *SDL_HitTest)(SDL_Window *win, const SDL_Point *area, void *data);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate SDL_HitTestResult SDL_HitTest(IntPtr win, SDL_Point* area, IntPtr data);

		/// <summary>
		///   <para>Provide a callback that decides if a window region has special properties.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to set hit-testing on.                   </para>
		/// </param>
		/// <param name="callback">
		///   <para> the function to call when doing a hit-test.         </para>
		/// </param>
		/// <param name="callback_data">
		///   <para> an app-defined void pointer passed to callback. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Normally windows are dragged and resized by decorations provided by thesystem window manager (a title bar, borders, etc), but for some apps, itmakes sense to drag them from somewhere else inside the window itself; forexample, one might have a borderless window that wants to be draggable fromany part, or simulate its own title bar, etc.</para>
		///   <para>This function lets the app provide a callback that designates pieces of agiven window as special. This callback is run during event processing if weneed to tell the OS to treat a region of the window specially; the use ofthis callback is known as "hit testing."</para>
		///   <para>Mouse input may not be delivered to your application if it is within aspecial area; the OS will often apply that input to moving the window orresizing the window and not deliver it to the application.</para>
		///   <para>Specifying NULL for a callback disables hit-testing. Hit-testing isdisabled by default.</para>
		///   <para>Platforms that don't support this functionality will return falseunconditionally, even if you're attempting to disable hit-testing.</para>
		///   <para>Your callback may fire at any time, and its firing does not indicate anyspecific behavior (for example, on Windows, this certainly might fire whenthe OS is deciding whether to drag your window, but it fires for lots ofother reasons, too, some unrelated to anything you probably care about andwhen the mouse isn't actually at the location it is testing). Since thiscan fire at any time, you should try to keep your callback efficient,devoid of allocations, etc.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowHitTest<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowHitTest(SDL_Window *window, SDL_HitTest callback, void *callback_data);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowHitTest(IntPtr window, SDL_HitTest callback, IntPtr callback_data);

		/// <summary>
		///   <para>Set the shape of a transparent window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window.                                                                            </para>
		/// </param>
		/// <param name="shape">
		///   <para> the surface representing the shape of the window, or NULL to remove any current shape. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This sets the alpha channel of a transparent window and any fullytransparent areas are also transparent to mouse clicks. If you are usingsomething besides the SDL render API, then you are responsible for settingthe alpha channel of the window yourself.</para>
		///   <para>The shape is copied inside this function, so you can free it afterwards. Ifyour shape surface changes, you should call<see cref="SDL_SetWindowShape" />() again to update the window.</para>
		///   <para>The window must have been created with the<see cref="SDL_WINDOW_TRANSPARENT" /> flag.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowShape<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowShape(SDL_Window *window, SDL_Surface *shape);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowShape(IntPtr window, IntPtr shape);

		/// <summary>
		///   <para>Request a window to demand attention from the user.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to be flashed. </para>
		/// </param>
		/// <param name="operation">
		///   <para> the operation to perform. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlashWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FlashWindow(SDL_Window *window, SDL_FlashOperation operation);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FlashWindow(IntPtr window, SDL_FlashOperation operation);

		/// <summary>
		///   <para>Destroy a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>Any child windows owned by the window will be recursively destroyed aswell.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreatePopupWindow" />
		/// <seealso cref="SDL_CreateWindow" />
		/// <seealso cref="SDL_CreateWindowWithProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyWindow(SDL_Window *window);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyWindow(IntPtr window);

		/// <summary>
		///   <para>Check whether the screensaver is currently enabled.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the screensaver is enabled, false if it is disabled.</para>
		/// </returns>
		/// <remarks>
		///   <para>The screensaver is disabled by default.</para>
		///   <para>The default can also be changed using<see cref="SDL_HINT_VIDEO_ALLOW_SCREENSAVER" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_DisableScreenSaver" />
		/// <seealso cref="SDL_EnableScreenSaver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ScreenSaverEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ScreenSaverEnabled(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ScreenSaverEnabled();

		/// <summary>
		///   <para>Allow the screen to be blanked by a screen saver.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_DisableScreenSaver" />
		/// <seealso cref="SDL_ScreenSaverEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnableScreenSaver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_EnableScreenSaver(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_EnableScreenSaver();

		/// <summary>
		///   <para>Prevent the screen from being blanked by a screen saver.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If you disable the screensaver, it is automatically re-enabled when SDLquits.</para>
		///   <para>The screensaver is disabled by default, but this may by changed by<see cref="SDL_HINT_VIDEO_ALLOW_SCREENSAVER" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_EnableScreenSaver" />
		/// <seealso cref="SDL_ScreenSaverEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DisableScreenSaver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_DisableScreenSaver(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_DisableScreenSaver();

		[DllImport(nativeLibName, EntryPoint = "SDL_GL_LoadLibrary", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GL_LoadLibrary(byte* path);
		/// <summary>
		///   <para>Dynamically load an OpenGL library.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the platform dependent OpenGL library name, or NULL to open the default OpenGL library. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This should be done after initializing the video driver, but beforecreating any OpenGL windows. If no OpenGL library is loaded, the defaultlibrary will be loaded upon creation of the first OpenGL window.</para>
		///   <para>If you do this, you need to retrieve all of the GL functions used in yourprogram from the dynamic library using<see cref="SDL_GL_GetProcAddress" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GL_GetProcAddress" />
		/// <seealso cref="SDL_GL_UnloadLibrary" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_LoadLibrary<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_LoadLibrary(const char *path);
		/// </code><para>                                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static SDLBool SDL_GL_LoadLibrary(string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_GL_LoadLibrary(pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GL_GetProcAddress", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GL_GetProcAddress(byte* proc);
		/// <summary>
		///   <para>Get an OpenGL function by name.</para>
		/// </summary>
		/// <param name="proc">
		///   <para> the name of an OpenGL function. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_FunctionPointer" />) Returns a pointer to the namedOpenGL function. The returned pointer should be cast to the appropriatefunction signature.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the GL library is loaded at runtime with<see cref="SDL_GL_LoadLibrary" />(), then all GL functions must beretrieved this way. Usually this is used to retrieve function pointers toOpenGL extensions.</para>
		///   <para>There are some quirks to looking up OpenGL functions that require someextra care from the application. If you code carefully, you can handlethese quirks without any platform-specific code, though:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>On Windows, function pointers are specific to the current GL context;this means you need to have created a GL context and made it currentbefore calling <see cref="SDL_GL_GetProcAddress" />(). If yourecreate your context or create a second context, you should assume thatany existing function pointers aren't valid to use with it. This is(currently) a Windows-specific limitation, and in practice lots ofdrivers don't suffer this limitation, but it is still the way the wgl APIis documented to work and you should expect crashes if you don't respectit. Store a copy of the function pointers that comes and goes withcontext lifespan.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>On X11, function pointers returned by this function are valid for anycontext, and can even be looked up before a context is created at all.This means that, for at least some common OpenGL implementations, if youlook up a function that doesn't exist, you'll get a non-NULL result thatis NOT safe to call. You must always make sure the function is actuallyavailable for a given GL context before calling it, by checking for theexistence of the appropriate extension with<see cref="SDL_GL_ExtensionSupported" />(), or verifyingthat the version of OpenGL you're using offers the function as corefunctionality.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Some OpenGL drivers, on all platforms, will return NULL if a functionisn't supported, but you can't count on this behavior. Check forextensions you use, and if you get a NULL anyway, act as if thatextension wasn't available. This is probably a bug in the driver, but youcan code defensively for this scenario anyhow.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Just because you're on Linux/Unix, don't assume you'll be using X11.Next-gen display servers are waiting to replace it, and may or may notmake the same promises about function pointers.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>OpenGL function pointers must be declared <c>APIENTRY</c> as in the examplecode. This will ensure the proper calling convention is followed onplatforms where this matters (Win32) thereby avoiding stack corruption.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_GL_ExtensionSupported" />
		/// <seealso cref="SDL_GL_LoadLibrary" />
		/// <seealso cref="SDL_GL_UnloadLibrary" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_GetProcAddress<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FunctionPointer SDL_GL_GetProcAddress(const char *proc);
		/// </code><para>                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>typedef void (APIENTRY * GL_ActiveTextureARB_Func)(unsigned int);
		/// GL_ActiveTextureARB_Func glActiveTextureARB_ptr = 0;
		/// 
		/// /* Get function pointer */
		/// glActiveTextureARB_ptr=(GL_ActiveTextureARB_Func) SDL_GL_GetProcAddress("glActiveTextureARB");
		/// 
		/// /* It was your responsibility to make sure this was a valid function to call! */
		/// glActiveTextureARB_ptr(GL_TEXTURE0_ARB);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static IntPtr SDL_GL_GetProcAddress(string proc)
		{
			var procUTF8 = EncodeAsUTF8(proc);
			var result = INTERNAL_SDL_GL_GetProcAddress(procUTF8);

			SDL_free((IntPtr) procUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_EGL_GetProcAddress", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_EGL_GetProcAddress(byte* proc);
		/// <summary>
		///   <para>Get an EGL library function by name.</para>
		/// </summary>
		/// <param name="proc">
		///   <para> the name of an EGL function. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_FunctionPointer" />) Returns a pointer to the namedEGL function. The returned pointer should be cast to the appropriatefunction signature.</para>
		/// </returns>
		/// <remarks>
		///   <para>If an EGL library is loaded, this function allows applications to get entrypoints for EGL functions. This is useful to provide to an EGL API andextension loader.</para>
		/// </remarks>
		/// <seealso cref="SDL_EGL_GetCurrentDisplay" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGL_GetProcAddress<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FunctionPointer SDL_EGL_GetProcAddress(const char *proc);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static IntPtr SDL_EGL_GetProcAddress(string proc)
		{
			var procUTF8 = EncodeAsUTF8(proc);
			var result = INTERNAL_SDL_EGL_GetProcAddress(procUTF8);

			SDL_free((IntPtr) procUTF8);
			return result;
		}

		/// <summary>
		///   <para>Unload the OpenGL library previously loaded by <see cref="SDL_GL_LoadLibrary" />().</para>
		/// </summary>
		/// <seealso cref="SDL_GL_LoadLibrary" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_UnloadLibrary<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GL_UnloadLibrary(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GL_UnloadLibrary();

		[DllImport(nativeLibName, EntryPoint = "SDL_GL_ExtensionSupported", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GL_ExtensionSupported(byte* extension);
		/// <summary>
		///   <para>Check if an OpenGL extension is supported for the current context.</para>
		/// </summary>
		/// <param name="extension">
		///   <para> the name of the extension to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the extension is supported, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function operates on the current GL context; you must have created acontext and it must be current before calling this function. Do not assumethat all contexts you create will have the same set of extensionsavailable, or that recreating an existing context will offer the sameextensions again.</para>
		///   <para>While it's probably not a massive overhead, this function is not an O(1)operation. Check the extensions you care about after creating the GLcontext and save that information somewhere instead of calling the functionevery time you need to know.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_ExtensionSupported<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_ExtensionSupported(const char *extension);
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>    extern void draw_to_the_screen_with_framebuffer_blit(void);
		///     extern void draw_to_the_screen_with_a_textured_quad(void);
		/// 
		///     if (SDL_GL_ExtensionSupported("GL_EXT_framebuffer_blit")) {
		///         draw_to_the_screen_with_framebuffer_blit();   // faster!
		///     } else {
		///         draw_to_the_screen_with_a_textured_quad();  // slower!
		///     }
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		public static SDLBool SDL_GL_ExtensionSupported(string extension)
		{
			var extensionUTF8 = EncodeAsUTF8(extension);
			var result = INTERNAL_SDL_GL_ExtensionSupported(extensionUTF8);

			SDL_free((IntPtr) extensionUTF8);
			return result;
		}

		/// <summary>
		///   <para>Reset all previously set OpenGL context attributes to their default values.</para>
		/// </summary>
		/// <seealso cref="SDL_GL_GetAttribute" />
		/// <seealso cref="SDL_GL_SetAttribute" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_ResetAttributes<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GL_ResetAttributes(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GL_ResetAttributes();

		/// <summary>
		///   <para>Set an OpenGL window attribute before window creation.</para>
		/// </summary>
		/// <param name="attr">
		///   <para> an <see cref="SDL_GLattr" /> enum value specifying the OpenGL attribute to set. </para>
		/// </param>
		/// <param name="value">
		///   <para> the desired value for the attribute.                                           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function sets the OpenGL attribute <c>attr</c> to <c>value</c>. The requestedattributes should be set before creating an OpenGL window. You should use<see cref="SDL_GL_GetAttribute" />() to check the values aftercreating the OpenGL context, since the values obtained can differ from therequested ones.</para>
		/// </remarks>
		/// <seealso cref="SDL_GL_GetAttribute" />
		/// <seealso cref="SDL_GL_ResetAttributes" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_SetAttribute<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_SetAttribute(SDL_GLattr attr, int value);
		/// </code><para>                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>SDL_Window *window;
		/// SDL_GLContext context;
		/// 
		/// SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);
		/// SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
		/// SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);
		/// SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
		/// SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
		/// 
		/// window = SDL_CreateWindow("OpenGL Window", 640, 480, SDL_WINDOW_OPENGL);
		/// if (!window) {
		///     fprintf(stderr, "Couldn't create window: %s\n", SDL_GetError());
		///     return 1;
		/// }
		/// 
		/// context = SDL_GL_CreateContext(window);
		/// if (!context) {
		///     fprintf(stderr, "Couldn't create context: %s\n", SDL_GetError());
		///     return 1;
		/// }
		/// 
		/// int r, g, b;
		/// SDL_GL_GetAttribute(SDL_GL_RED_SIZE, &amp;r);
		/// SDL_GL_GetAttribute(SDL_GL_GREEN_SIZE, &amp;g);
		/// SDL_GL_GetAttribute(SDL_GL_BLUE_SIZE, &amp;b);
		/// 
		/// printf("Red size: %d, Green size: %d, Blue size: %d\n", r, g, b);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_SetAttribute(SDL_GLattr attr, int value);

		/// <summary>
		///   <para>Get the actual value for an attribute from the current context.</para>
		/// </summary>
		/// <param name="attr">
		///   <para> an <see cref="SDL_GLattr" /> enum value specifying the OpenGL attribute to get. </para>
		/// </param>
		/// <param name="value">
		///   <para> a pointer filled in with the current value of <c>attr</c>.                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GL_ResetAttributes" />
		/// <seealso cref="SDL_GL_SetAttribute" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_GetAttribute<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_GetAttribute(SDL_GLattr attr, int *value);
		/// </code><para>                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_GetAttribute(SDL_GLattr attr, out int value);

		/// <summary>
		///   <para>Create an OpenGL context for an OpenGL window, and make it current.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to associate with the context. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GLContext" />) Returns the OpenGL context associated with<c>window</c> or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>Windows users new to OpenGL should note that, for historical reasons, GLfunctions added after OpenGL version 1.1 are not available by default.Those functions must be loaded at run-time, either with an OpenGLextension-handling library or with<see cref="SDL_GL_GetProcAddress" />() and its related functions.</para>
		///   <para>
		///     <see cref="SDL_GLContext" /> is opaque to the application.</para>
		/// </remarks>
		/// <seealso cref="SDL_GL_DestroyContext" />
		/// <seealso cref="SDL_GL_MakeCurrent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_CreateContext<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GLContext SDL_GL_CreateContext(SDL_Window *window);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>
		/// // Window mode MUST include SDL_WINDOW_OPENGL for use with OpenGL.
		/// SDL_Window *window = SDL_CreateWindow(
		///     "SDL2/OpenGL Demo", 640, 480, 
		///     SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);
		///   
		/// // Create an OpenGL context associated with the window.
		/// SDL_GLContext glcontext = SDL_GL_CreateContext(window);
		/// 
		/// // now you can make GL calls.
		/// glClearColor(0,0,0,1);
		/// glClear(GL_COLOR_BUFFER_BIT);
		/// SDL_GL_SwapWindow(window);
		/// 
		/// // Once finished with OpenGL functions, the SDL_GLContext can be destroyed.
		/// SDL_GL_DestroyContext(glcontext);  
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GL_CreateContext(IntPtr window);

		/// <summary>
		///   <para>Set up an OpenGL context for rendering into an OpenGL window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to associate with the context.        </para>
		/// </param>
		/// <param name="context">
		///   <para> the OpenGL context to associate with the window. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The context must have been created with a compatible window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GL_CreateContext" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_MakeCurrent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context);
		/// </code><para>                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_MakeCurrent(IntPtr window, IntPtr context);

		/// <summary>
		///   <para>Get the currently active OpenGL window.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the currently active OpenGL window onsuccess or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_GetCurrentWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GL_GetCurrentWindow(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GL_GetCurrentWindow();

		/// <summary>
		///   <para>Get the currently active OpenGL context.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_GLContext" />) Returns the currently active OpenGLcontext or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_GL_MakeCurrent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_GetCurrentContext<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GLContext SDL_GL_GetCurrentContext(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GL_GetCurrentContext();

		/// <summary>
		///   <para>Get the currently active EGL display.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_EGLDisplay" />) Returns the currently active EGL displayor NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGL_GetCurrentDisplay<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_EGLDisplay SDL_EGL_GetCurrentDisplay(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_EGL_GetCurrentDisplay();

		/// <summary>
		///   <para>Get the currently active EGL config.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_EGLConfig" />) Returns the currently active EGL config orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGL_GetCurrentConfig<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_EGLConfig SDL_EGL_GetCurrentConfig(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_EGL_GetCurrentConfig();

		/// <summary>
		///   <para>Get the EGL surface associated with the window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_EGLSurface" />) Returns the EGLSurface pointerassociated with the window, or NULL on failure.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGL_GetWindowSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_EGLSurface SDL_EGL_GetWindowSurface(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_EGL_GetWindowSurface(IntPtr window);

		/// <summary>
		///   <para>Sets the callbacks for defining custom EGLAttrib arrays for EGL initialization.</para>
		/// </summary>
		/// <param name="platformAttribCallback">
		///   <para> callback for attributes to pass to eglGetPlatformDisplay. May be NULL. </para>
		/// </param>
		/// <param name="surfaceAttribCallback">
		///   <para> callback for attributes to pass to eglCreateSurface. May be NULL.      </para>
		/// </param>
		/// <param name="contextAttribCallback">
		///   <para> callback for attributes to pass to eglCreateContext. May be NULL.      </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to the callbacks.                             </para>
		/// </param>
		/// <remarks>
		///   <para>Callbacks that aren't needed can be set to NULL.</para>
		///   <para>NOTE: These callback pointers will be reset after<see cref="SDL_GL_ResetAttributes" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EGL_SetAttributeCallbacks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback,
		///                                    SDL_EGLIntArrayCallback surfaceAttribCallback,
		///                                    SDL_EGLIntArrayCallback contextAttribCallback, void *userdata);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback, SDL_EGLIntArrayCallback surfaceAttribCallback, SDL_EGLIntArrayCallback contextAttribCallback, IntPtr userdata);

		/// <summary>
		///   <para>Set the swap interval for the current OpenGL context.</para>
		/// </summary>
		/// <param name="interval">
		///   <para> 0 for immediate updates, 1 for updates synchronized with the vertical retrace, -1 for adaptive vsync. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Some systems allow specifying -1 for the interval, to enable adaptivevsync. Adaptive vsync works the same as vsync, but if you've already missedthe vertical retrace for a given frame, it swaps buffers immediately, whichmight be less jarring for the user during occasional framerate drops. If anapplication requests adaptive vsync and the system does not support it,this function will fail and return false. In such a case, you shouldprobably retry the call with 1 for the interval.</para>
		///   <para>Adaptive vsync is implemented for some glX drivers withGLX_EXT_swap_control_tear, and for some Windows drivers withWGL_EXT_swap_control_tear.</para>
		///   <para>Read more on the Khronos wiki:https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync</para>
		/// </remarks>
		/// <seealso cref="SDL_GL_GetSwapInterval" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_SetSwapInterval<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_SetSwapInterval(int interval);
		/// </code><para>                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_SetSwapInterval(int interval);

		/// <summary>
		///   <para>Get the swap interval for the current OpenGL context.</para>
		/// </summary>
		/// <param name="interval">
		///   <para> output interval value. 0 if there is no vertical retrace synchronization, 1 if the buffer swap is synchronized with the vertical retrace, and -1 if late swaps happen immediately instead of waiting for the next retrace. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the system can't determine the swap interval, or there isn't a validcurrent context, this function will set *interval to 0 as a safe default.</para>
		/// </remarks>
		/// <seealso cref="SDL_GL_SetSwapInterval" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_GetSwapInterval<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_GetSwapInterval(int *interval);
		/// </code><para>                                                                                                                                                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_GetSwapInterval(out int interval);

		/// <summary>
		///   <para>Update a window with OpenGL rendering.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is used with double-buffered OpenGL contexts, which are the default.</para>
		///   <para>On macOS, make sure you bind 0 to the draw framebuffer before swapping thewindow, otherwise nothing will happen. If you aren't usingglBindFramebuffer(), this is the default and you won't have to do anythingextra.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_SwapWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_SwapWindow(SDL_Window *window);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>
		/// SDL_Window* window = SDL_CreateWindow("SDL3/OpenGL Demo", 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);
		///       
		/// /* Create an OpenGL context associated with the window. */
		/// SDL_GLContext glcontext = SDL_GL_CreateContext(window);
		/// 
		/// /* This makes our buffer swap syncronized with the monitor's vertical refresh */
		/// SDL_GL_SetSwapInterval(1);
		/// 
		/// /* Clear context */
		/// glClearColor(0,0,0,1);
		/// glClear(GL_COLOR_BUFFER_BIT);
		/// 
		/// /* &lt;Extra drawing functions here&gt; */ 
		/// 
		/// /* Swap our buffer to display the current contents of buffer on screen */ 
		/// SDL_GL_SwapWindow(window);
		/// 
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_SwapWindow(IntPtr window);

		/// <summary>
		///   <para>Delete an OpenGL context.</para>
		/// </summary>
		/// <param name="context">
		///   <para> the OpenGL context to be deleted. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GL_CreateContext" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GL_DestroyContext<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_video.h">&lt;SDL3/SDL_video.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GL_DestroyContext(SDL_GLContext context);
		/// </code><para>                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVideo">CategoryVideo</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GL_DestroyContext(IntPtr context);

		// /usr/local/include/SDL3/SDL_dialog.h

		/// <summary>
		///   <para>An entry for filters for file dialogs.</para>
		/// </summary>
		/// <remarks>
		///   <para>
		///     <c>name</c> is a user-readable label for the filter (for example, "Officedocument").</para>
		///   <para>
		///     <c>pattern</c> is a semicolon-separated list of file extensions (for example,"doc;docx"). File extensions may only contain alphanumeric characters,hyphens, underscores and periods. Alternatively, the whole string can be asingle asterisk ("*"), which serves as an "All files" filter.</para>
		/// </remarks>
		/// <seealso cref="SDL_DialogFileCallback" />
		/// <seealso cref="SDL_ShowOpenFileDialog" />
		/// <seealso cref="SDL_ShowSaveFileDialog" />
		/// <seealso cref="SDL_ShowOpenFolderDialog" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DialogFileFilter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_dialog.h">&lt;SDL3/SDL_dialog.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_DialogFileFilter
		/// {
		///     const char *name;
		///     const char *pattern;
		/// } SDL_DialogFileFilter;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><para>This structure is most often used as an array:</para><code>const SDL_DialogFileFilter filters[] = {
		///     { "PNG images",  "png" },
		///     { "JPEG images", "jpg;jpeg" },
		///     { "All images",  "png;jpg;jpeg" },
		///     { "All files",   "*" }
		/// };
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryDialog">CategoryDialog</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_DialogFileFilter
		{
			public byte* name;
			public byte* pattern;
		}

		/// <summary>
		///   <para>Callback used by file dialog functions.</para>
		/// </summary>
		/// <remarks>
		///   <para>The specific usage is described in each function.</para>
		///   <para>If <c>filelist</c> is:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>NULL, an error occurred. Details can be obtained with<see cref="SDL_GetError" />().</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>A pointer to NULL, the user either didn't choose any file or canceled thedialog.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>A pointer to non-<c>NULL</c>, the user chose one or more files. The argumentis a null-terminated list of pointers to C strings, each containing apath.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The filelist argument does not need to be freed; it will automatically befreed when the callback returns.</para>
		///   <para>The filter argument is the index of the filter that was selected, or -1 ifno filter was selected or if the platform or method doesn't supportfetching the selected filter.</para>
		/// </remarks>
		/// <seealso cref="SDL_DialogFileFilter" />
		/// <seealso cref="SDL_ShowOpenFileDialog" />
		/// <seealso cref="SDL_ShowSaveFileDialog" />
		/// <seealso cref="SDL_ShowOpenFolderDialog" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DialogFileCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_dialog.h">&lt;SDL3/SDL_dialog.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_DialogFileCallback)(void *userdata, const char * const *filelist, int filter);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// 
		/// static const SDL_DialogFileFilter filters[] = {
		///     { "PNG images",  "png" },
		///     { "JPEG images", "jpg;jpeg" },
		///     { "All images",  "png;jpg;jpeg" },
		///     { "All files",   "*" }
		/// };
		/// 
		/// static void SDLCALL callback(void* userdata, const char* const* filelist, int filter)
		/// {
		///     if (!filelist) {
		///         SDL_Log("An error occured: %s", SDL_GetError());
		///         return;
		///     } else if (!*filelist) {
		///         SDL_Log("The user did not select any file.");
		///         SDL_Log("Most likely, the dialog was canceled.");
		///         return;
		///     }
		/// 
		///     while (*filelist) {
		///         SDL_Log("Full path to selected file: '%s'", *filelist);
		///         filelist++;
		///     }
		/// 
		///     if (filter &lt; 0) {
		///         SDL_Log("The current platform does not support fetching "
		///                 "the selected filter, or the user did not select"
		///                 " any filter.");
		///     } else if (filter &lt; SDL_arraysize(filters)) {
		///         SDL_Log("The filter selected by the user is '%s' (%s).",
		///                 filters[filter].pattern, filters[filter].name);
		///     }
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryDialog">CategoryDialog</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_DialogFileCallback(IntPtr userdata, IntPtr filelist, int filter);

		[DllImport(nativeLibName, EntryPoint = "SDL_ShowOpenFileDialog", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, IntPtr userdata, IntPtr window, SDL_DialogFileFilter[] filters, int nfilters, byte* default_location, SDLBool allow_many);
		/// <summary>
		///   <para>Displays a dialog that lets the user select a file on their filesystem.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> an <see cref="SDL_DialogFileCallback" /> to be invoked when the user selects a file and accepts, or cancels the dialog, or an error occurs. The first argument is a null-terminated list of C strings, representing the paths chosen by the user. The list will be empty if the user canceled the dialog, and it will be NULL if an error occurred. If an error occurred, it can be fetched with <see cref="SDL_GetError" />(). The second argument is the userdata pointer passed to the function. The third argument is the index of the filter selected by the user, or one past the index of the last filter (therefore the index of the terminating NULL filter) if no filter was chosen, or -1 if the platform does not support detecting the selected filter. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> an optional pointer to pass extra data to the callback when it will be invokedpara>
		/// </param>
		/// <param name="window">
		///   <para> the window that the dialog should be modal for, may be NULL. Not all platforms support this optionpara>
		/// </param>
		/// <param name="filters">
		///   <para> a list of <see cref="SDL_DialogFileFilter" />'s, may be NULL. Not all platforms support this option, and platforms that do support it may allow the user to ignore the filterspara>
		/// </param>
		/// <param name="nfilters">
		///   <para> the number of filters. Ignored if filters ispara>
		/// </param>
		/// <param name="default_location">
		///   <para> the default folder or file to start the dialog at, may be NULL. Not all platforms support this optionpara>
		/// </param>
		/// <param name="allow_many">
		///   <para> if non-zero, the user will be allowed to select multiple entries. Not all platforms support this option.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         </para>
		/// </param>
		/// <remarks>
		///   <para>This function should only be invoked from the main thread.</para>
		///   <para>This is an asynchronous function; it will return immediately, and theresult will be passed to the callback.</para>
		///   <para>The callback will be invoked with a null-terminated list of files the userchose. The list will be empty if the user canceled the dialog, and it willbe NULL if an error occurred.</para>
		///   <para>Note that the callback may be called from a different thread than the onethe function was invoked on.</para>
		///   <para>Depending on the platform, the user may be allowed to input paths thatdon't yet exist.</para>
		///   <para>On Linux, dialogs may require XDG Portals, which requires DBus, whichrequires an event-handling loop. Apps that do not use SDL to handle eventsshould add a call to <see cref="SDL_PumpEvents" /> in their main loop.</para>
		/// </remarks>
		/// <seealso cref="SDL_DialogFileCallback" />
		/// <seealso cref="SDL_DialogFileFilter" />
		/// <seealso cref="SDL_ShowSaveFileDialog" />
		/// <seealso cref="SDL_ShowOpenFolderDialog" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowOpenFileDialog<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_dialog.h">&lt;SDL3/SDL_dialog.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const SDL_DialogFileFilter *filters, int nfilters, const char *default_location, bool allow_many);
		/// </code><parapara><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryDialog">CategoryDialog</see></para></misc>
		public static void SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, IntPtr userdata, IntPtr window, SDL_DialogFileFilter[] filters, int nfilters, string default_location, SDLBool allow_many)
		{
			var default_locationUTF8 = EncodeAsUTF8(default_location);
			INTERNAL_SDL_ShowOpenFileDialog(callback, userdata, window, filters, nfilters, default_locationUTF8, allow_many);

			SDL_free((IntPtr) default_locationUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_ShowSaveFileDialog", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, IntPtr userdata, IntPtr window, SDL_DialogFileFilter[] filters, int nfilters, byte* default_location);
		/// <summary>
		///   <para>Displays a dialog that lets the user choose a new or existing file on their filesystem.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> an <see cref="SDL_DialogFileCallback" /> to be invoked when the user selects a file and accepts, or cancels the dialog, or an error occurs. The first argument is a null-terminated list of C strings, representing the paths chosen by the user. The list will be empty if the user canceled the dialog, and it will be NULL if an error occurred. If an error occurred, it can be fetched with <see cref="SDL_GetError" />(). The second argument is the userdata pointer passed to the function. The third argument is the index of the filter selected by the user, or one past the index of the last filter (therefore the index of the terminating NULL filter) if no filter was chosen, or -1 if the platform does not support detecting the selected filter. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> an optional pointer to pass extra data to the callback when it will be invokedpara>
		/// </param>
		/// <param name="window">
		///   <para> the window that the dialog should be modal for, may be NULL. Not all platforms support this optionpara>
		/// </param>
		/// <param name="filters">
		///   <para> a list of <see cref="SDL_DialogFileFilter" />'s, may be NULL. Not all platforms support this option, and platforms that do support it may allow the user to ignore the filterspara>
		/// </param>
		/// <param name="nfilters">
		///   <para> the number of filters. Ignored if filters ispara>
		/// </param>
		/// <param name="default_location">
		///   <para> the default folder or file to start the dialog at, may be NULL. Not all platforms support this optionpara>
		/// </param>
		/// <remarks>
		///   <para>This function should only be invoked from the main thread.</para>
		///   <para>This is an asynchronous function; it will return immediately, and theresult will be passed to the callback.</para>
		///   <para>The callback will be invoked with a null-terminated list of files the userchose. The list will be empty if the user canceled the dialog, and it willbe NULL if an error occurred.</para>
		///   <para>Note that the callback may be called from a different thread than the onethe function was invoked on.</para>
		///   <para>The chosen file may or may not already exist.</para>
		///   <para>On Linux, dialogs may require XDG Portals, which requires DBus, whichrequires an event-handling loop. Apps that do not use SDL to handle eventsshould add a call to <see cref="SDL_PumpEvents" /> in their main loop.</para>
		/// </remarks>
		/// <seealso cref="SDL_DialogFileCallback" />
		/// <seealso cref="SDL_DialogFileFilter" />
		/// <seealso cref="SDL_ShowOpenFileDialog" />
		/// <seealso cref="SDL_ShowOpenFolderDialog" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowSaveFileDialog<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_dialog.h">&lt;SDL3/SDL_dialog.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const SDL_DialogFileFilter *filters, int nfilters, const char *default_location);
		/// </code><parapara><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryDialog">CategoryDialog</see></para></misc>
		public static void SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, IntPtr userdata, IntPtr window, SDL_DialogFileFilter[] filters, int nfilters, string default_location)
		{
			var default_locationUTF8 = EncodeAsUTF8(default_location);
			INTERNAL_SDL_ShowSaveFileDialog(callback, userdata, window, filters, nfilters, default_locationUTF8);

			SDL_free((IntPtr) default_locationUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_ShowOpenFolderDialog", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, IntPtr userdata, IntPtr window, byte* default_location, SDLBool allow_many);
		/// <summary>
		///   <para>Displays a dialog that lets the user select a folder on their filesystem.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> an <see cref="SDL_DialogFileCallback" /> to be invoked when the user selects a file and accepts, or cancels the dialog, or an error occurs. The first argument is a null-terminated list of C strings, representing the paths chosen by the user. The list will be empty if the user canceled the dialog, and it will be NULL if an error occurred. If an error occurred, it can be fetched with <see cref="SDL_GetError" />(). The second argument is the userdata pointer passed to the function. The third argument is always -1 for <see cref="SDL_ShowOpenFolderDialog" />. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> an optional pointer to pass extra data to the callback when it will be invokedpara>
		/// </param>
		/// <param name="window">
		///   <para> the window that the dialog should be modal for, may be NULL. Not all platforms support this option.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       </para>
		/// </param>
		/// <param name="default_location">
		///   <para> the default folder or file to start the dialog at, may be NULL. Not all platforms support this option.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    </para>
		/// </param>
		/// <param name="allow_many">
		///   <para> if non-zero, the user will be allowed to select multiple entries. Not all platforms support this option.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  </para>
		/// </param>
		/// <remarks>
		///   <para>This function should only be invoked from the main thread.</para>
		///   <para>This is an asynchronous function; it will return immediately, and theresult will be passed to the callback.</para>
		///   <para>The callback will be invoked with a null-terminated list of files the userchose. The list will be empty if the user canceled the dialog, and it willbe NULL if an error occurred.</para>
		///   <para>Note that the callback may be called from a different thread than the onethe function was invoked on.</para>
		///   <para>Depending on the platform, the user may be allowed to input paths thatdon't yet exist.</para>
		///   <para>On Linux, dialogs may require XDG Portals, which requires DBus, whichrequires an event-handling loop. Apps that do not use SDL to handle eventsshould add a call to <see cref="SDL_PumpEvents" /> in their main loop.</para>
		/// </remarks>
		/// <seealso cref="SDL_DialogFileCallback" />
		/// <seealso cref="SDL_ShowOpenFileDialog" />
		/// <seealso cref="SDL_ShowSaveFileDialog" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowOpenFolderDialog<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_dialog.h">&lt;SDL3/SDL_dialog.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const char *default_location, bool allow_many);
		/// </code><parapara><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryDialog">CategoryDialog</see></para></misc>
		public static void SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, IntPtr userdata, IntPtr window, string default_location, SDLBool allow_many)
		{
			var default_locationUTF8 = EncodeAsUTF8(default_location);
			INTERNAL_SDL_ShowOpenFolderDialog(callback, userdata, window, default_locationUTF8, allow_many);

			SDL_free((IntPtr) default_locationUTF8);
		}

		// /usr/local/include/SDL3/SDL_guid.h

		/// <summary>
		///   <para>An <see cref="SDL_GUID" /> is a 128-bit identifier for an input device that identifies that device across runs of SDL programs on the same platform.</para>
		/// </summary>
		/// <remarks>
		///   <para>If the device is detached and then re-attached to a different port, or ifthe base system is rebooted, the device should still report the same GUID.</para>
		///   <para>GUIDs are as precise as possible but are not guaranteed to distinguishphysically distinct but equivalent devices. For example, two gamecontrollers from the same vendor with the same product ID and revision mayhave the same GUID.</para>
		///   <para>GUIDs may be platform-dependent (i.e., the same device may report differentGUIDs on different operating systems).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GUID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_guid.h">&lt;SDL3/SDL_guid.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GUID {
		///     Uint8 data[16];
		/// } SDL_GUID;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGUID">CategoryGUID</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GUID
		{
			public fixed byte data[16];
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GUIDToString", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_GUIDToString(SDL_GUID guid, byte* pszGUID, int cbGUID);
		/// <summary>
		///   <para>Get an ASCII string representation for a given <see cref="SDL_GUID" />.</para>
		/// </summary>
		/// <param name="guid">
		///   <para> the <see cref="SDL_GUID" /> you wish to convert to string. </para>
		/// </param>
		/// <param name="pszGUID">
		///   <para> buffer in which to write the ASCII string.              </para>
		/// </param>
		/// <param name="cbGUID">
		///   <para> the size of pszGUID, should be at least 33 bytes.       </para>
		/// </param>
		/// <seealso cref="SDL_StringToGUID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GUIDToString<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_guid.h">&lt;SDL3/SDL_guid.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GUIDToString(SDL_GUID guid, char *pszGUID, int cbGUID);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGUID">CategoryGUID</see></para></misc>
		public static void SDL_GUIDToString(SDL_GUID guid, string pszGUID, int cbGUID)
		{
			var pszGUIDUTF8 = EncodeAsUTF8(pszGUID);
			INTERNAL_SDL_GUIDToString(guid, pszGUIDUTF8, cbGUID);

			SDL_free((IntPtr) pszGUIDUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_StringToGUID", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_GUID INTERNAL_SDL_StringToGUID(byte* pchGUID);
		/// <summary>
		///   <para>Convert a GUID string into a <see cref="SDL_GUID" /> structure.</para>
		/// </summary>
		/// <param name="pchGUID">
		///   <para> string containing an ASCII representation of a GUID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GUID" />) Returns a <see cref="SDL_GUID" /> structure.</para>
		/// </returns>
		/// <remarks>
		///   <para>Performs no error checking. If this function is given a string containingan invalid GUID, the function will silently succeed, but the GUID generatedwill not be useful.</para>
		/// </remarks>
		/// <seealso cref="SDL_GUIDToString" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StringToGUID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_guid.h">&lt;SDL3/SDL_guid.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GUID SDL_StringToGUID(const char *pchGUID);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGUID">CategoryGUID</see></para></misc>
		public static SDL_GUID SDL_StringToGUID(string pchGUID)
		{
			var pchGUIDUTF8 = EncodeAsUTF8(pchGUID);
			var result = INTERNAL_SDL_StringToGUID(pchGUIDUTF8);

			SDL_free((IntPtr) pchGUIDUTF8);
			return result;
		}

		// /usr/local/include/SDL3/SDL_power.h

		/// <summary>
		///   <para>The basic state for the system's power supply.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are results returned by <see cref="SDL_GetPowerInfo" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PowerState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_power.h">&lt;SDL3/SDL_power.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PowerState
		/// {
		///     SDL_POWERSTATE_ERROR = -1,   /**&lt; error determining power status */
		///     SDL_POWERSTATE_UNKNOWN,      /**&lt; cannot determine power status */
		///     SDL_POWERSTATE_ON_BATTERY,   /**&lt; Not plugged in, running on the battery */
		///     SDL_POWERSTATE_NO_BATTERY,   /**&lt; Plugged in, no battery available */
		///     SDL_POWERSTATE_CHARGING,     /**&lt; Plugged in, charging battery */
		///     SDL_POWERSTATE_CHARGED       /**&lt; Plugged in, battery charged */
		/// } SDL_PowerState;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPower">CategoryPower</see></para></misc>
		public enum SDL_PowerState
		{
			/// <summary><para>Please refer to <see cref="SDL_PowerState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_POWERSTATE_ERROR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_POWERSTATE_ERROR = -1,
			/// <summary><para>Please refer to <see cref="SDL_PowerState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_POWERSTATE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_POWERSTATE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_PowerState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_POWERSTATE_ON_BATTERY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_POWERSTATE_ON_BATTERY = 1,
			/// <summary><para>Please refer to <see cref="SDL_PowerState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_POWERSTATE_NO_BATTERY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_POWERSTATE_NO_BATTERY = 2,
			/// <summary><para>Please refer to <see cref="SDL_PowerState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_POWERSTATE_CHARGING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_POWERSTATE_CHARGING = 3,
			/// <summary><para>Please refer to <see cref="SDL_PowerState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_POWERSTATE_CHARGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_POWERSTATE_CHARGED = 4,
		}

		/// <summary>
		///   <para>Get the current power supply details.</para>
		/// </summary>
		/// <param name="seconds">
		///   <para> a pointer filled in with the seconds of battery life left, or NULL to ignore. This will be filled in with -1 if we can't determine a value or there is no battery.                    </para>
		/// </param>
		/// <param name="percent">
		///   <para> a pointer filled in with the percentage of battery life left, between 0 and 100, or NULL to ignore. This will be filled in with -1 we can't determine a value or there is no battery. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PowerState" />) Returns the current battery state or<see cref="SDL_PowerState.SDL_POWERSTATE_ERROR" /> on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You should never take a battery status as absolute truth. Batteries(especially failing batteries) are delicate hardware, and the valuesreported here are best estimates based on what that hardware reports. It'snot uncommon for older batteries to lose stored power much faster than itreports, or completely drain when reporting it has 20 percent left, etc.</para>
		///   <para>Battery status can change at any time; if you are concerned with powerstate, you should call this function frequently, and perhaps ignore changesuntil they seem to be stable for a few seconds.</para>
		///   <para>It's possible a platform can only report battery percentage or time leftbut not both.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPowerInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_power.h">&lt;SDL3/SDL_power.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PowerState SDL_GetPowerInfo(int *seconds, int *percent);
		/// </code><para>                                                                                                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>int secs, pct;
		/// if (SDL_GetPowerInfo(&amp;secs, &amp;pct) == SDL_POWERSTATE_ON_BATTERY) {
		///     printf("Battery is draining: ");
		///     if (secs == -1) {
		///         printf("(unknown time left)\n");
		///     } else {
		///         printf("(%d seconds left)\n", secs);
		///     }
		/// 
		///     if (pct == -1) {
		///         printf("(unknown percentage left)\n");
		///     } else {
		///         printf("(%d percent left)\n", pct);
		///     }
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPower">CategoryPower</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_PowerState SDL_GetPowerInfo(out int seconds, out int percent);

		// /usr/local/include/SDL3/SDL_sensor.h

		/// <summary>
		///   <para>The different sensors defined by SDL.</para>
		/// </summary>
		/// <remarks>
		///   <para>Additional sensors may be available, using platform dependent semantics.</para>
		///   <para>Here are the additional Android sensors:</para>
		///   <para>https://developer.android.com/reference/android/hardware/SensorEvent.html#values</para>
		///   <para>Accelerometer sensor notes:</para>
		///   <para>The accelerometer returns the current acceleration in SI meters per secondsquared. This measurement includes the force of gravity, so a device atrest will have an value of <see cref="SDL_STANDARD_GRAVITY" />away from the center of the earth, which is a positive Y value.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <c>values[0]</c>: Acceleration on the x axis</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>values[1]</c>: Acceleration on the y axis</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>values[2]</c>: Acceleration on the z axis</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For phones and tablets held in natural orientation and game controllersheld in front of you, the axes are defined as follows:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>-X ... +X : left ... right</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>-Y ... +Y : bottom ... top</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>-Z ... +Z : farther ... closer</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The accelerometer axis data is not changed when the device is rotated.</para>
		///   <para>Gyroscope sensor notes:</para>
		///   <para>The gyroscope returns the current rate of rotation in radians per second.The rotation is positive in the counter-clockwise direction. That is, anobserver looking from a positive location on one of the axes would seepositive rotation on that axis when it appeared to be rotatingcounter-clockwise.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <c>values[0]</c>: Angular speed around the x axis (pitch)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>values[1]</c>: Angular speed around the y axis (yaw)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>values[2]</c>: Angular speed around the z axis (roll)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For phones and tablets held in natural orientation and game controllersheld in front of you, the axes are defined as follows:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>-X ... +X : left ... right</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>-Y ... +Y : bottom ... top</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>-Z ... +Z : farther ... closer</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The gyroscope axis data is not changed when the device is rotated.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCurrentDisplayOrientation" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SensorType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_SensorType
		/// {
		///     SDL_SENSOR_INVALID = -1,    /**&lt; Returned for an invalid sensor */
		///     SDL_SENSOR_UNKNOWN,         /**&lt; Unknown sensor type */
		///     SDL_SENSOR_ACCEL,           /**&lt; Accelerometer */
		///     SDL_SENSOR_GYRO,            /**&lt; Gyroscope */
		///     SDL_SENSOR_ACCEL_L,         /**&lt; Accelerometer for left Joy-Con controller and Wii nunchuk */
		///     SDL_SENSOR_GYRO_L,          /**&lt; Gyroscope for left Joy-Con controller */
		///     SDL_SENSOR_ACCEL_R,         /**&lt; Accelerometer for right Joy-Con controller */
		///     SDL_SENSOR_GYRO_R           /**&lt; Gyroscope for right Joy-Con controller */
		/// } SDL_SensorType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		public enum SDL_SensorType
		{
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_INVALID = -1,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_ACCEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_ACCEL = 1,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_GYRO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_GYRO = 2,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_ACCEL_L<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_ACCEL_L = 3,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_GYRO_L<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_GYRO_L = 4,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_ACCEL_R<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_ACCEL_R = 5,
			/// <summary><para>Please refer to <see cref="SDL_SensorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SENSOR_GYRO_R<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SENSOR_GYRO_R = 6,
		}

		/// <summary>
		///   <para>Get a list of currently connected sensors.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of sensors returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_SensorID" /> *) Returns a 0 terminated array of sensorinstance IDs or NULL on failure; call <see cref="SDL_GetError" />() formore information. This should be freed with <see cref="SDL_free" />() when itis no longer needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensors<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_SensorID * SDL_GetSensors(int *count);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetSensors(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetSensorNameForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetSensorNameForID(uint instance_id);
		/// <summary>
		///   <para>Get the implementation dependent name of a sensor.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the sensor instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the sensor name, or NULL if <c>instance_id</c> is notvalid.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any sensors are opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorNameForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetSensorNameForID(SDL_SensorID instance_id);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		public static string SDL_GetSensorNameForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetSensorNameForID(instance_id));
		}

		/// <summary>
		///   <para>Get the type of a sensor.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the sensor instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_SensorType" />) Returns the<see cref="SDL_SensorType" />, or<see cref="SDL_SensorType.SDL_SENSOR_INVALID" /> if <c>instance_id</c> is not valid.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any sensors are opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorTypeForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_SensorType SDL_GetSensorTypeForID(SDL_SensorID instance_id);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_SensorType SDL_GetSensorTypeForID(uint instance_id);

		/// <summary>
		///   <para>Get the platform dependent type of a sensor.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the sensor instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the sensor platform dependent type, or -1 if <c>instance_id</c> isnot valid.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any sensors are opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorNonPortableTypeForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetSensorNonPortableTypeForID(SDL_SensorID instance_id);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetSensorNonPortableTypeForID(uint instance_id);

		/// <summary>
		///   <para>Open a sensor for use.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the sensor instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Sensor" /> *) Returns an <see cref="SDL_Sensor" /> object orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenSensor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Sensor * SDL_OpenSensor(SDL_SensorID instance_id);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenSensor(uint instance_id);

		/// <summary>
		///   <para>Return the <see cref="SDL_Sensor" /> associated with an instance ID.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the sensor instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Sensor" /> *) Returns an <see cref="SDL_Sensor" /> object orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorFromID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Sensor * SDL_GetSensorFromID(SDL_SensorID instance_id);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetSensorFromID(uint instance_id);

		/// <summary>
		///   <para>Get the properties associated with a sensor.</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetSensorProperties(SDL_Sensor *sensor);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetSensorProperties(IntPtr sensor);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetSensorName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetSensorName(IntPtr sensor);
		/// <summary>
		///   <para>Get the implementation dependent name of a sensor.</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the sensor name or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetSensorName(SDL_Sensor *sensor);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		public static string SDL_GetSensorName(IntPtr sensor)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetSensorName(sensor));
		}

		/// <summary>
		///   <para>Get the type of a sensor.</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object to inspect. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_SensorType" />) Returns the<see cref="SDL_SensorType" /> type, or<see cref="SDL_SensorType.SDL_SENSOR_INVALID" /> if <c>sensor</c> is NULL.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_SensorType SDL_GetSensorType(SDL_Sensor *sensor);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_SensorType SDL_GetSensorType(IntPtr sensor);

		/// <summary>
		///   <para>Get the platform dependent type of a sensor.</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object to inspect. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the sensor platform dependent type, or -1 if <c>sensor</c> isNULL.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorNonPortableType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetSensorNonPortableType(SDL_Sensor *sensor);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetSensorNonPortableType(IntPtr sensor);

		/// <summary>
		///   <para>Get the instance ID of a sensor.</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object to inspect. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_SensorID" />) Returns the sensor instance ID, or 0 onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_SensorID SDL_GetSensorID(SDL_Sensor *sensor);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetSensorID(IntPtr sensor);

		/// <summary>
		///   <para>Get the current state of an opened sensor.</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object to query.   </para>
		/// </param>
		/// <param name="data">
		///   <para> a pointer filled with the current sensor state. </para>
		/// </param>
		/// <param name="num_values">
		///   <para> the number of values to write to data.          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The number of values and interpretation of the data is sensor dependent.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetSensorData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetSensorData(SDL_Sensor *sensor, float *data, int num_values);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetSensorData(IntPtr sensor, float* data, int num_values);

		/// <summary>
		///   <para>Close a sensor previously opened with <see cref="SDL_OpenSensor" />().</para>
		/// </summary>
		/// <param name="sensor">
		///   <para> the <see cref="SDL_Sensor" /> object to close. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseSensor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CloseSensor(SDL_Sensor *sensor);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CloseSensor(IntPtr sensor);

		/// <summary>
		///   <para>Update the current state of the open sensors.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is called automatically by the event loop if sensor events areenabled.</para>
		///   <para>This needs to be called from the thread that initialized the sensorsubsystem.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateSensors<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_sensor.h">&lt;SDL3/SDL_sensor.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UpdateSensors(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySensor">CategorySensor</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UpdateSensors();

		// /usr/local/include/SDL3/SDL_joystick.h

		/// <summary>
		///   <para>An enum of some common joystick types.</para>
		/// </summary>
		/// <remarks>
		///   <para>In some cases, SDL can identify a low-level joystick as being a certaintype of device, and will report it through<see cref="SDL_GetJoystickType" /> (or<see cref="SDL_GetJoystickTypeForID" />).</para>
		///   <para>This is by no means a complete list of everything that can be plugged intoa computer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoystickType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_JoystickType
		/// {
		///     SDL_JOYSTICK_TYPE_UNKNOWN,
		///     SDL_JOYSTICK_TYPE_GAMEPAD,
		///     SDL_JOYSTICK_TYPE_WHEEL,
		///     SDL_JOYSTICK_TYPE_ARCADE_STICK,
		///     SDL_JOYSTICK_TYPE_FLIGHT_STICK,
		///     SDL_JOYSTICK_TYPE_DANCE_PAD,
		///     SDL_JOYSTICK_TYPE_GUITAR,
		///     SDL_JOYSTICK_TYPE_DRUM_KIT,
		///     SDL_JOYSTICK_TYPE_ARCADE_PAD,
		///     SDL_JOYSTICK_TYPE_THROTTLE,
		///     SDL_JOYSTICK_TYPE_COUNT
		/// } SDL_JoystickType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public enum SDL_JoystickType
		{
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_GAMEPAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_GAMEPAD = 1,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_WHEEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_WHEEL = 2,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_ARCADE_STICK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_FLIGHT_STICK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_DANCE_PAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_GUITAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_GUITAR = 6,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_DRUM_KIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_ARCADE_PAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_THROTTLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_THROTTLE = 9,
			/// <summary><para>Please refer to <see cref="SDL_JoystickType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_TYPE_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_TYPE_COUNT = 10,
		}

		/// <summary>
		///   <para>Possible connection states for a joystick device.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is used by<see cref="SDL_GetJoystickConnectionState" /> to reporthow a device is connected to the system.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoystickConnectionState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_JoystickConnectionState
		/// {
		///     SDL_JOYSTICK_CONNECTION_INVALID = -1,
		///     SDL_JOYSTICK_CONNECTION_UNKNOWN,
		///     SDL_JOYSTICK_CONNECTION_WIRED,
		///     SDL_JOYSTICK_CONNECTION_WIRELESS
		/// } SDL_JoystickConnectionState;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public enum SDL_JoystickConnectionState
		{
			/// <summary><para>Please refer to <see cref="SDL_JoystickConnectionState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_CONNECTION_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_CONNECTION_INVALID = -1,
			/// <summary><para>Please refer to <see cref="SDL_JoystickConnectionState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_CONNECTION_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_CONNECTION_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_JoystickConnectionState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_CONNECTION_WIRED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_CONNECTION_WIRED = 1,
			/// <summary><para>Please refer to <see cref="SDL_JoystickConnectionState" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_JOYSTICK_CONNECTION_WIRELESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_JOYSTICK_CONNECTION_WIRELESS = 2,
		}

		/// <summary>
		///   <para>Locking for atomic access to the joystick API.</para>
		/// </summary>
		/// <remarks>
		///   <para>The SDL joystick functions are thread-safe, however you can lock thejoysticks while processing to guarantee that the joystick list won't changeand joystick and gamepad events will not be delivered.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockJoysticks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LockJoysticks(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_LockJoysticks();

		/// <summary>
		///   <para>Unlocking for atomic access to the joystick API.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockJoysticks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockJoysticks(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockJoysticks();

		/// <summary>
		///   <para>Return whether a joystick is currently connected.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if a joystick is connected, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasJoystick(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasJoystick();

		/// <summary>
		///   <para>Get a list of currently connected joysticks.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of joysticks returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickID" /> *) Returns a 0 terminated array ofjoystick instance IDs or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <seealso cref="SDL_HasJoystick" />
		/// <seealso cref="SDL_OpenJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoysticks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickID * SDL_GetJoysticks(int *count);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetJoysticks(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetJoystickNameForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetJoystickNameForID(uint instance_id);
		/// <summary>
		///   <para>Get the implementation dependent name of a joystick.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected joystick. If no name can befound, this function returns NULL; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickName" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickNameForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetJoystickNameForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public static string SDL_GetJoystickNameForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetJoystickNameForID(instance_id));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetJoystickPathForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetJoystickPathForID(uint instance_id);
		/// <summary>
		///   <para>Get the implementation dependent path of a joystick.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the path of the selected joystick. If no path can befound, this function returns NULL; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickPath" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickPathForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetJoystickPathForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public static string SDL_GetJoystickPathForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetJoystickPathForID(instance_id));
		}

		/// <summary>
		///   <para>Get the player index of a joystick.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the player index of a joystick, or -1 if it's not available.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickPlayerIndex" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickPlayerIndexForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetJoystickPlayerIndexForID(uint instance_id);

		/// <summary>
		///   <para>Get the implementation-dependent GUID of a joystick.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GUID" />) Returns the GUID of the selected joystick. If calledwith an invalid instance_id, this function returns a zero GUID.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickGUID" />
		/// <seealso cref="SDL_GUIDToString" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickGUIDForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GUID SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GUID SDL_GetJoystickGUIDForID(uint instance_id);

		/// <summary>
		///   <para>Get the USB vendor ID of a joystick, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB vendor ID of the selected joystick. If called withan invalid instance_id, this function returns 0.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened. If the vendor ID isn'tavailable this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickVendor" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickVendorForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickVendorForID(uint instance_id);

		/// <summary>
		///   <para>Get the USB product ID of a joystick, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB product ID of the selected joystick. If calledwith an invalid instance_id, this function returns 0.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened. If the product ID isn'tavailable this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickProduct" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickProductForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickProductForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickProductForID(uint instance_id);

		/// <summary>
		///   <para>Get the product version of a joystick, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the product version of the selected joystick. If calledwith an invalid instance_id, this function returns 0.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened. If the product versionisn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickProductVersion" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickProductVersionForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickProductVersionForID(uint instance_id);

		/// <summary>
		///   <para>Get the type of a joystick, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickType" />) Returns the<see cref="SDL_JoystickType" /> of the selected joystick. If calledwith an invalid instance_id, this function returns<see cref="SDL_JoystickType.SDL_JOYSTICK_TYPE_UNKNOWN" />.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any joysticks are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickType" />
		/// <seealso cref="SDL_GetJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickTypeForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_JoystickType SDL_GetJoystickTypeForID(uint instance_id);

		/// <summary>
		///   <para>Open a joystick for use.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Joystick" /> *) Returns a joystick identifier or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The joystick subsystem must be initialized before a joystick can be openedfor use.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Joystick * SDL_OpenJoystick(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenJoystick(uint instance_id);

		/// <summary>
		///   <para>Get the <see cref="SDL_Joystick" /> associated with an instance ID, if it has been opened.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the instance ID to get the <see cref="SDL_Joystick" /> for. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Joystick" /> *) Returns an <see cref="SDL_Joystick" /> onsuccess or NULL on failure or if it hasn't been opened yet; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickFromID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Joystick * SDL_GetJoystickFromID(SDL_JoystickID instance_id);
		/// </code><para>                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetJoystickFromID(uint instance_id);

		/// <summary>
		///   <para>Get the <see cref="SDL_Joystick" /> associated with a player index.</para>
		/// </summary>
		/// <param name="player_index">
		///   <para> the player index to get the <see cref="SDL_Joystick" /> for. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Joystick" /> *) Returns an <see cref="SDL_Joystick" /> onsuccess or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickPlayerIndex" />
		/// <seealso cref="SDL_SetJoystickPlayerIndex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickFromPlayerIndex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Joystick * SDL_GetJoystickFromPlayerIndex(int player_index);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetJoystickFromPlayerIndex(int player_index);

		/// <summary>
		///   <para>The structure that describes a virtual joystick touchpad.</para>
		/// </summary>
		/// <seealso cref="SDL_VirtualJoystickDesc" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickTouchpadDesc<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_VirtualJoystickTouchpadDesc
		/// {
		///     Uint16 nfingers;    /**&lt; the number of simultaneous fingers on this touchpad */
		///     Uint16 padding[3];
		/// } SDL_VirtualJoystickTouchpadDesc;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_VirtualJoystickTouchpadDesc
		{
			public ushort nfingers;
			public fixed ushort padding[3];
		}

		/// <summary>
		///   <para>The structure that describes a virtual joystick sensor.</para>
		/// </summary>
		/// <seealso cref="SDL_VirtualJoystickDesc" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickSensorDesc<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_VirtualJoystickSensorDesc
		/// {
		///     SDL_SensorType type;    /**&lt; the type of this sensor */
		///     float rate;             /**&lt; the update frequency of this sensor, may be 0.0f */
		/// } SDL_VirtualJoystickSensorDesc;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_VirtualJoystickSensorDesc
		{
			public SDL_SensorType type;
			public float rate;
		}

		/// <summary>
		///   <para>The structure that describes a virtual joystick.</para>
		/// </summary>
		/// <remarks>
		///   <para>This structure should be initialized using<see cref="SDL_INIT_INTERFACE" />(). All elements of this structureare optional.</para>
		/// </remarks>
		/// <seealso cref="SDL_AttachVirtualJoystick" />
		/// <seealso cref="SDL_INIT_INTERFACE" />
		/// <seealso cref="SDL_VirtualJoystickSensorDesc" />
		/// <seealso cref="SDL_VirtualJoystickTouchpadDesc" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickDesc<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_VirtualJoystickDesc
		/// {
		///     Uint32 version;     /**&lt; the version of this interface */
		///     Uint16 type;        /**&lt; `SDL_JoystickType` */
		///     Uint16 padding;     /**&lt; unused */
		///     Uint16 vendor_id;   /**&lt; the USB vendor ID of this joystick */
		///     Uint16 product_id;  /**&lt; the USB product ID of this joystick */
		///     Uint16 naxes;       /**&lt; the number of axes on this joystick */
		///     Uint16 nbuttons;    /**&lt; the number of buttons on this joystick */
		///     Uint16 nballs;      /**&lt; the number of balls on this joystick */
		///     Uint16 nhats;       /**&lt; the number of hats on this joystick */
		///     Uint16 ntouchpads;  /**&lt; the number of touchpads on this joystick, requires `touchpads` to point at valid descriptions */
		///     Uint16 nsensors;    /**&lt; the number of sensors on this joystick, requires `sensors` to point at valid descriptions */
		///     Uint16 padding2[2]; /**&lt; unused */
		///     Uint32 button_mask; /**&lt; A mask of which buttons are valid for this controller
		///                              e.g. (1 &lt;&lt; SDL_GAMEPAD_BUTTON_SOUTH) */
		///     Uint32 axis_mask;   /**&lt; A mask of which axes are valid for this controller
		///                              e.g. (1 &lt;&lt; SDL_GAMEPAD_AXIS_LEFTX) */
		///     const char *name;   /**&lt; the name of the joystick */
		///     const SDL_VirtualJoystickTouchpadDesc *touchpads;   /**&lt; A pointer to an array of touchpad descriptions, required if `ntouchpads` is &gt; 0 */
		///     const SDL_VirtualJoystickSensorDesc *sensors;       /**&lt; A pointer to an array of sensor descriptions, required if `nsensors` is &gt; 0 */
		/// 
		///     void *userdata;     /**&lt; User data pointer passed to callbacks */
		///     void (SDLCALL *Update)(void *userdata); /**&lt; Called when the joystick state should be updated */
		///     void (SDLCALL *SetPlayerIndex)(void *userdata, int player_index); /**&lt; Called when the player index is set */
		///     bool (SDLCALL *Rumble)(void *userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble); /**&lt; Implements SDL_RumbleJoystick() */
		///     bool (SDLCALL *RumbleTriggers)(void *userdata, Uint16 left_rumble, Uint16 right_rumble); /**&lt; Implements SDL_RumbleJoystickTriggers() */
		///     bool (SDLCALL *SetLED)(void *userdata, Uint8 red, Uint8 green, Uint8 blue); /**&lt; Implements SDL_SetJoystickLED() */
		///     bool (SDLCALL *SendEffect)(void *userdata, const void *data, int size); /**&lt; Implements SDL_SendJoystickEffect() */
		///     bool (SDLCALL *SetSensorsEnabled)(void *userdata, bool enabled); /**&lt; Implements SDL_SetGamepadSensorEnabled() */
		///     void (SDLCALL *Cleanup)(void *userdata); /**&lt; Cleans up the userdata when the joystick is detached */
		/// } SDL_VirtualJoystickDesc;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_VirtualJoystickDesc
		{
			public uint version;
			public ushort type;
			public ushort padding;
			public ushort vendor_id;
			public ushort product_id;
			public ushort naxes;
			public ushort nbuttons;
			public ushort nballs;
			public ushort nhats;
			public ushort ntouchpads;
			public ushort nsensors;
			public fixed ushort padding2[2];
			public uint button_mask;
			public uint axis_mask;
			public byte* name;
			public SDL_VirtualJoystickTouchpadDesc* touchpads;
			public SDL_VirtualJoystickSensorDesc* sensors;
			public IntPtr userdata;
			public IntPtr Update; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr SetPlayerIndex; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr Rumble; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr RumbleTriggers; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr SetLED; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr SendEffect; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr SetSensorsEnabled; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr Cleanup; // WARN_ANONYMOUS_FUNCTION_POINTER
		}

		/// <summary>
		///   <para>Attach a new virtual joystick.</para>
		/// </summary>
		/// <param name="desc">
		///   <para> joystick description, initialized using <see cref="SDL_INIT_INTERFACE" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickID" />) Returns the joystick instance ID, or 0on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_DetachVirtualJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AttachVirtualJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickID SDL_AttachVirtualJoystick(const SDL_VirtualJoystickDesc *desc);
		/// </code><para>                                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_AttachVirtualJoystick(ref SDL_VirtualJoystickDesc desc);

		/// <summary>
		///   <para>Detach a virtual joystick.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID, previously returned from <see cref="SDL_AttachVirtualJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_AttachVirtualJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DetachVirtualJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);
		/// </code><para>                                                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_DetachVirtualJoystick(uint instance_id);

		/// <summary>
		///   <para>Query whether or not a joystick is virtual.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the joystick is virtual, false otherwise.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IsJoystickVirtual<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_IsJoystickVirtual(uint instance_id);

		/// <summary>
		///   <para>Set the state of an axis on an opened virtual joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the virtual joystick on which to set state.              </para>
		/// </param>
		/// <param name="axis">
		///   <para> the index of the axis on the virtual joystick to update. </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value for the specified axis.                    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that values set here will not be applied until the next call to<see cref="SDL_UpdateJoysticks" />, which can either be calleddirectly, or can be called indirectly through various other SDL APIs,including, but not limited to the following:<see cref="SDL_PollEvent" />, <see cref="SDL_PumpEvents" />,<see cref="SDL_WaitEventTimeout" />,<see cref="SDL_WaitEvent" />.</para>
		///   <para>Note that when sending trigger axes, you should scale the value to the fullrange of Sint16. For example, a trigger at rest would have the value of<see cref="SDL_JOYSTICK_AXIS_MIN" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickVirtualAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);
		/// </code><para>                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickVirtualAxis(IntPtr joystick, int axis, short value);

		/// <summary>
		///   <para>Generate ball motion on an opened virtual joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the virtual joystick on which to set state.              </para>
		/// </param>
		/// <param name="ball">
		///   <para> the index of the ball on the virtual joystick to update. </para>
		/// </param>
		/// <param name="xrel">
		///   <para> the relative motion on the X axis.                       </para>
		/// </param>
		/// <param name="yrel">
		///   <para> the relative motion on the Y axis.                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that values set here will not be applied until the next call to<see cref="SDL_UpdateJoysticks" />, which can either be calleddirectly, or can be called indirectly through various other SDL APIs,including, but not limited to the following:<see cref="SDL_PollEvent" />, <see cref="SDL_PumpEvents" />,<see cref="SDL_WaitEventTimeout" />,<see cref="SDL_WaitEvent" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickVirtualBall<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickVirtualBall(SDL_Joystick *joystick, int ball, Sint16 xrel, Sint16 yrel);
		/// </code><para>                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickVirtualBall(IntPtr joystick, int ball, short xrel, short yrel);

		/// <summary>
		///   <para>Set the state of a button on an opened virtual joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the virtual joystick on which to set state.                </para>
		/// </param>
		/// <param name="button">
		///   <para> the index of the button on the virtual joystick to update. </para>
		/// </param>
		/// <param name="down">
		///   <para> true if the button is pressed, false otherwise.            </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that values set here will not be applied until the next call to<see cref="SDL_UpdateJoysticks" />, which can either be calleddirectly, or can be called indirectly through various other SDL APIs,including, but not limited to the following:<see cref="SDL_PollEvent" />, <see cref="SDL_PumpEvents" />,<see cref="SDL_WaitEventTimeout" />,<see cref="SDL_WaitEvent" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickVirtualButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickVirtualButton(SDL_Joystick *joystick, int button, bool down);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickVirtualButton(IntPtr joystick, int button, SDLBool down);

		/// <summary>
		///   <para>Set the state of a hat on an opened virtual joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the virtual joystick on which to set state.             </para>
		/// </param>
		/// <param name="hat">
		///   <para> the index of the hat on the virtual joystick to update. </para>
		/// </param>
		/// <param name="value">
		///   <para> the new value for the specified hat.                    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that values set here will not be applied until the next call to<see cref="SDL_UpdateJoysticks" />, which can either be calleddirectly, or can be called indirectly through various other SDL APIs,including, but not limited to the following:<see cref="SDL_PollEvent" />, <see cref="SDL_PumpEvents" />,<see cref="SDL_WaitEventTimeout" />,<see cref="SDL_WaitEvent" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickVirtualHat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickVirtualHat(IntPtr joystick, int hat, byte value);

		/// <summary>
		///   <para>Set touchpad finger state on an opened virtual joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the virtual joystick on which to set state.                                                           </para>
		/// </param>
		/// <param name="touchpad">
		///   <para> the index of the touchpad on the virtual joystick to update.                                          </para>
		/// </param>
		/// <param name="finger">
		///   <para> the index of the finger on the touchpad to set.                                                       </para>
		/// </param>
		/// <param name="down">
		///   <para> true if the finger is pressed, false if the finger is released.                                       </para>
		/// </param>
		/// <param name="x">
		///   <para> the x coordinate of the finger on the touchpad, normalized 0 to 1, with the origin in the upper left. </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate of the finger on the touchpad, normalized 0 to 1, with the origin in the upper left. </para>
		/// </param>
		/// <param name="pressure">
		///   <para> the pressure of the finger.                                                                           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that values set here will not be applied until the next call to<see cref="SDL_UpdateJoysticks" />, which can either be calleddirectly, or can be called indirectly through various other SDL APIs,including, but not limited to the following:<see cref="SDL_PollEvent" />, <see cref="SDL_PumpEvents" />,<see cref="SDL_WaitEventTimeout" />,<see cref="SDL_WaitEvent" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickVirtualTouchpad<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickVirtualTouchpad(SDL_Joystick *joystick, int touchpad, int finger, bool down, float x, float y, float pressure);
		/// </code><para>                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickVirtualTouchpad(IntPtr joystick, int touchpad, int finger, SDLBool down, float x, float y, float pressure);

		/// <summary>
		///   <para>Send a sensor update for an opened virtual joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the virtual joystick on which to set state.                           </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of the sensor on the virtual joystick to update.             </para>
		/// </param>
		/// <param name="sensor_timestamp">
		///   <para> a 64-bit timestamp in nanoseconds associated with the sensor reading. </para>
		/// </param>
		/// <param name="data">
		///   <para> the data associated with the sensor reading.                          </para>
		/// </param>
		/// <param name="num_values">
		///   <para> the number of values pointed to by <c>data</c>.                            </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Please note that values set here will not be applied until the next call to<see cref="SDL_UpdateJoysticks" />, which can either be calleddirectly, or can be called indirectly through various other SDL APIs,including, but not limited to the following:<see cref="SDL_PollEvent" />, <see cref="SDL_PumpEvents" />,<see cref="SDL_WaitEventTimeout" />,<see cref="SDL_WaitEvent" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SendJoystickVirtualSensorData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SendJoystickVirtualSensorData(SDL_Joystick *joystick, SDL_SensorType type, Uint64 sensor_timestamp, const float *data, int num_values);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SendJoystickVirtualSensorData(IntPtr joystick, SDL_SensorType type, ulong sensor_timestamp, float* data, int num_values);

		/// <summary>
		///   <para>Get the properties associated with a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN" />:true if this joystick has an LED that has adjustable brightness</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN" />:true if this joystick has an LED that has adjustable color</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN" />:true if this joystick has a player LED</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN" />:true if this joystick has left/right rumble</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN" />:true if this joystick has simple trigger rumble</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetJoystickProperties(IntPtr joystick);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetJoystickName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetJoystickName(IntPtr joystick);
		/// <summary>
		///   <para>Get the implementation dependent name of a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected joystick. If no name can befound, this function returns NULL; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickNameForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetJoystickName(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public static string SDL_GetJoystickName(IntPtr joystick)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetJoystickName(joystick));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetJoystickPath", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetJoystickPath(IntPtr joystick);
		/// <summary>
		///   <para>Get the implementation dependent path of a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the path of the selected joystick. If no path can befound, this function returns NULL; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickPathForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickPath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetJoystickPath(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public static string SDL_GetJoystickPath(IntPtr joystick)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetJoystickPath(joystick));
		}

		/// <summary>
		///   <para>Get the player index of an opened joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the player index, or -1 if it's not available.</para>
		/// </returns>
		/// <remarks>
		///   <para>For XInput controllers this returns the XInput user index. Many joystickswill not be able to supply this information.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetJoystickPlayerIndex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickPlayerIndex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetJoystickPlayerIndex(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetJoystickPlayerIndex(IntPtr joystick);

		/// <summary>
		///   <para>Set the player index of an opened joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />().             </para>
		/// </param>
		/// <param name="player_index">
		///   <para> player index to assign to this joystick, or -1 to clear the player index and turn off player LEDs. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickPlayerIndex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickPlayerIndex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickPlayerIndex(SDL_Joystick *joystick, int player_index);
		/// </code><para>                                                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickPlayerIndex(IntPtr joystick, int player_index);

		/// <summary>
		///   <para>Get the implementation-dependent GUID for the joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GUID" />) Returns the GUID of the given joystick. If called onan invalid index, this function returns a zero GUID; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function requires an open joystick.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickGUIDForID" />
		/// <seealso cref="SDL_GUIDToString" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickGUID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GUID SDL_GetJoystickGUID(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GUID SDL_GetJoystickGUID(IntPtr joystick);

		/// <summary>
		///   <para>Get the USB vendor ID of an opened joystick, if available.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB vendor ID of the selected joystick, or 0 ifunavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the vendor ID isn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickVendorForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickVendor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickVendor(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickVendor(IntPtr joystick);

		/// <summary>
		///   <para>Get the USB product ID of an opened joystick, if available.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB product ID of the selected joystick, or 0 ifunavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the product ID isn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickProductForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickProduct<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickProduct(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickProduct(IntPtr joystick);

		/// <summary>
		///   <para>Get the product version of an opened joystick, if available.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the product version of the selected joystick, or 0 ifunavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the product version isn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickProductVersionForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickProductVersion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickProductVersion(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickProductVersion(IntPtr joystick);

		/// <summary>
		///   <para>Get the firmware version of an opened joystick, if available.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the firmware version of the selected joystick, or 0 ifunavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the firmware version isn't available this function returns 0.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickFirmwareVersion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetJoystickFirmwareVersion(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetJoystickFirmwareVersion(IntPtr joystick);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetJoystickSerial", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetJoystickSerial(IntPtr joystick);
		/// <summary>
		///   <para>Get the serial number of an opened joystick, if available.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the serial number of the selected joystick, or NULLif unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>Returns the serial number of the joystick, or NULL if it is not available.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickSerial<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetJoystickSerial(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		public static string SDL_GetJoystickSerial(IntPtr joystick)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetJoystickSerial(joystick));
		}

		/// <summary>
		///   <para>Get the type of an opened joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickType" />) Returns the<see cref="SDL_JoystickType" /> of the selected joystick.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickTypeForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickType SDL_GetJoystickType(SDL_Joystick *joystick);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_JoystickType SDL_GetJoystickType(IntPtr joystick);

		/// <summary>
		///   <para>Get the device information encoded in a <see cref="SDL_GUID" /> structure.</para>
		/// </summary>
		/// <param name="guid">
		///   <para> the <see cref="SDL_GUID" /> you wish to get info about.                                                                </para>
		/// </param>
		/// <param name="vendor">
		///   <para> a pointer filled in with the device VID, or 0 if not available.                                                     </para>
		/// </param>
		/// <param name="product">
		///   <para> a pointer filled in with the device PID, or 0 if not available.                                                     </para>
		/// </param>
		/// <param name="version">
		///   <para> a pointer filled in with the device version, or 0 if not available.                                                 </para>
		/// </param>
		/// <param name="crc16">
		///   <para> a pointer filled in with a CRC used to distinguish different products with the same VID/PID, or 0 if not available. </para>
		/// </param>
		/// <seealso cref="SDL_GetJoystickGUIDForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickGUIDInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GetJoystickGUIDInfo(SDL_GUID guid, Uint16 *vendor, Uint16 *product, Uint16 *version, Uint16 *crc16);
		/// </code><para>                                                                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GetJoystickGUIDInfo(SDL_GUID guid, out ushort vendor, out ushort product, out ushort version, out ushort crc16);

		/// <summary>
		///   <para>Get the status of a specified joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the joystick has been opened, false if it has not;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoystickConnected<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_JoystickConnected(SDL_Joystick *joystick);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_JoystickConnected(IntPtr joystick);

		/// <summary>
		///   <para>Get the instance ID of an opened joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickID" />) Returns the instance ID of the specifiedjoystick on success or 0 on failure; call <see cref="SDL_GetError" />()for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickID SDL_GetJoystickID(SDL_Joystick *joystick);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetJoystickID(IntPtr joystick);

		/// <summary>
		///   <para>Get the number of general axis controls on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of axis controls/number of axes on success or -1on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Often, the directional pad on a game controller will either look like 4separate buttons or a POV hat, and not axes, but all of this is up to thedevice and platform.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickAxis" />
		/// <seealso cref="SDL_GetNumJoystickBalls" />
		/// <seealso cref="SDL_GetNumJoystickButtons" />
		/// <seealso cref="SDL_GetNumJoystickHats" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumJoystickAxes<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumJoystickAxes(SDL_Joystick *joystick);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumJoystickAxes(IntPtr joystick);

		/// <summary>
		///   <para>Get the number of trackballs on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of trackballs on success or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Joystick trackballs have only relative motion events associated with themand their state cannot be polled.</para>
		///   <para>Most joysticks do not have trackballs.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetJoystickBall" />
		/// <seealso cref="SDL_GetNumJoystickAxes" />
		/// <seealso cref="SDL_GetNumJoystickButtons" />
		/// <seealso cref="SDL_GetNumJoystickHats" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumJoystickBalls<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumJoystickBalls(SDL_Joystick *joystick);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumJoystickBalls(IntPtr joystick);

		/// <summary>
		///   <para>Get the number of POV hats on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of POV hats on success or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickHat" />
		/// <seealso cref="SDL_GetNumJoystickAxes" />
		/// <seealso cref="SDL_GetNumJoystickBalls" />
		/// <seealso cref="SDL_GetNumJoystickButtons" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumJoystickHats<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumJoystickHats(SDL_Joystick *joystick);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumJoystickHats(IntPtr joystick);

		/// <summary>
		///   <para>Get the number of buttons on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of buttons on success or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickButton" />
		/// <seealso cref="SDL_GetNumJoystickAxes" />
		/// <seealso cref="SDL_GetNumJoystickBalls" />
		/// <seealso cref="SDL_GetNumJoystickHats" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumJoystickButtons<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumJoystickButtons(SDL_Joystick *joystick);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumJoystickButtons(IntPtr joystick);

		/// <summary>
		///   <para>Set the state of joystick event processing.</para>
		/// </summary>
		/// <param name="enabled">
		///   <para> whether to process joystick events or not. </para>
		/// </param>
		/// <remarks>
		///   <para>If joystick events are disabled, you must call<see cref="SDL_UpdateJoysticks" />() yourself and check the stateof the joystick when you want joystick information.</para>
		/// </remarks>
		/// <seealso cref="SDL_JoystickEventsEnabled" />
		/// <seealso cref="SDL_UpdateJoysticks" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickEventsEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetJoystickEventsEnabled(bool enabled);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetJoystickEventsEnabled(SDLBool enabled);

		/// <summary>
		///   <para>Query the state of joystick event processing.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if joystick events are being processed, falseotherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If joystick events are disabled, you must call<see cref="SDL_UpdateJoysticks" />() yourself and check the stateof the joystick when you want joystick information.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetJoystickEventsEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoystickEventsEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_JoystickEventsEnabled(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_JoystickEventsEnabled();

		/// <summary>
		///   <para>Update the current state of the open joysticks.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is called automatically by the event loop if any joystick events areenabled.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateJoysticks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UpdateJoysticks(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UpdateJoysticks();

		/// <summary>
		///   <para>Get the current state of an axis control on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <param name="axis">
		///   <para> the axis to query; the axis indices start at index 0.                      </para>
		/// </param>
		/// <returns>
		///   <para>(Sint16) Returns a 16-bit signed integer representing the current positionof the axis or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL makes no promises about what part of the joystick any given axis refersto. Your game should have some sort of configuration UI to let usersspecify what each axis should be bound to. Alternately, SDL's higher-levelGame Controller API makes a great effort to apply order to this lower-levelinterface, so you know that a specific axis is the "left thumb stick," etc.</para>
		///   <para>The value returned by <see cref="SDL_GetJoystickAxis" />() is asigned integer (-32768 to 32767) representing the current position of theaxis. It may be necessary to impose certain tolerances on these values toaccount for jitter.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumJoystickAxes" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Sint16 SDL_GetJoystickAxis(SDL_Joystick *joystick, int axis);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern short SDL_GetJoystickAxis(IntPtr joystick, int axis);

		/// <summary>
		///   <para>Get the initial state of an axis control on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <param name="axis">
		///   <para> the axis to query; the axis indices start at index 0.                      </para>
		/// </param>
		/// <param name="state">
		///   <para> upon return, the initial value is supplied here.                           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if this axis has any initial value, or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>The state is a value ranging from -32768 to 32767.</para>
		///   <para>The axis indices start at index 0.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickAxisInitialState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetJoystickAxisInitialState(SDL_Joystick *joystick, int axis, Sint16 *state);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetJoystickAxisInitialState(IntPtr joystick, int axis, out short state);

		/// <summary>
		///   <para>Get the ball axis change since the last poll.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> to query.                        </para>
		/// </param>
		/// <param name="ball">
		///   <para> the ball index to query; ball indices start at index 0.           </para>
		/// </param>
		/// <param name="dx">
		///   <para> stores the difference in the x axis position since the last poll. </para>
		/// </param>
		/// <param name="dy">
		///   <para> stores the difference in the y axis position since the last poll. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Trackballs can only return relative motion since the last call to<see cref="SDL_GetJoystickBall" />(), these motion deltas areplaced into <c>dx</c> and <c>dy</c>.</para>
		///   <para>Most joysticks do not have trackballs.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumJoystickBalls" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickBall<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetJoystickBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetJoystickBall(IntPtr joystick, int ball, out int dx, out int dy);

		/// <summary>
		///   <para>Get the current state of a POV hat on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <param name="hat">
		///   <para> the hat index to get the state from; indices start at index 0.             </para>
		/// </param>
		/// <returns>
		///   <para>(Uint8) Returns the current hat position.</para>
		/// </returns>
		/// <remarks>
		///   <para>The returned value will be one of the <c>SDL_HAT_*</c> values.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumJoystickHats" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickHat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint8 SDL_GetJoystickHat(SDL_Joystick *joystick, int hat);
		/// 
		/// 
		/// #define SDL_HAT_CENTERED    0x00u
		/// #define SDL_HAT_UP          0x01u
		/// #define SDL_HAT_RIGHT       0x02u
		/// #define SDL_HAT_DOWN        0x04u
		/// #define SDL_HAT_LEFT        0x08u
		/// #define SDL_HAT_RIGHTUP     (SDL_HAT_RIGHT|SDL_HAT_UP)
		/// #define SDL_HAT_RIGHTDOWN   (SDL_HAT_RIGHT|SDL_HAT_DOWN)
		/// #define SDL_HAT_LEFTUP      (SDL_HAT_LEFT|SDL_HAT_UP)
		/// #define SDL_HAT_LEFTDOWN    (SDL_HAT_LEFT|SDL_HAT_DOWN)
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern byte SDL_GetJoystickHat(IntPtr joystick, int hat);

		/// <summary>
		///   <para>Get the current state of a button on a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> an <see cref="SDL_Joystick" /> structure containing joystick information. </para>
		/// </param>
		/// <param name="button">
		///   <para> the button index to get the state from; indices start at index 0.          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the button is pressed, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetNumJoystickButtons" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetJoystickButton(SDL_Joystick *joystick, int button);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetJoystickButton(IntPtr joystick, int button);

		/// <summary>
		///   <para>Start a rumble effect.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to vibrate.                                                    </para>
		/// </param>
		/// <param name="low_frequency_rumble">
		///   <para> the intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF.   </para>
		/// </param>
		/// <param name="high_frequency_rumble">
		///   <para> the intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF. </para>
		/// </param>
		/// <param name="duration_ms">
		///   <para> the duration of the rumble effect, in milliseconds.                         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true, or false if rumble isn't supported on this joystick.</para>
		/// </returns>
		/// <remarks>
		///   <para>Each call to this function cancels any previous rumble effect, and callingit with 0 intensity stops any rumbling.</para>
		///   <para>This function requires you to process SDL events or call<see cref="SDL_UpdateJoysticks" />() to update rumble state.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RumbleJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RumbleJoystick(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RumbleJoystick(IntPtr joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

		/// <summary>
		///   <para>Start a rumble effect in the joystick's triggers.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to vibrate.                                           </para>
		/// </param>
		/// <param name="left_rumble">
		///   <para> the intensity of the left trigger rumble motor, from 0 to 0xFFFF.  </para>
		/// </param>
		/// <param name="right_rumble">
		///   <para> the intensity of the right trigger rumble motor, from 0 to 0xFFFF. </para>
		/// </param>
		/// <param name="duration_ms">
		///   <para> the duration of the rumble effect, in milliseconds.                </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Each call to this function cancels any previous trigger rumble effect, andcalling it with 0 intensity stops any rumbling.</para>
		///   <para>Note that this is rumbling of the triggers and not the game controller asa whole. This is currently only supported on Xbox One controllers. If youwant the (more common) whole-controller rumble, use<see cref="SDL_RumbleJoystick" />() instead.</para>
		///   <para>This function requires you to process SDL events or call<see cref="SDL_UpdateJoysticks" />() to update rumble state.</para>
		/// </remarks>
		/// <seealso cref="SDL_RumbleJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RumbleJoystickTriggers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RumbleJoystickTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
		/// </code><para>                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RumbleJoystickTriggers(IntPtr joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

		/// <summary>
		///   <para>Update a joystick's LED color.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to update.         </para>
		/// </param>
		/// <param name="red">
		///   <para> the intensity of the red LED.   </para>
		/// </param>
		/// <param name="green">
		///   <para> the intensity of the green LED. </para>
		/// </param>
		/// <param name="blue">
		///   <para> the intensity of the blue LED.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>An example of a joystick LED is the light on the back of a PlayStation 4'sDualShock 4 controller.</para>
		///   <para>For joysticks with a single color LED, the maximum of the RGB values willbe used as the LED brightness.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetJoystickLED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetJoystickLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);
		/// </code><para>                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetJoystickLED(IntPtr joystick, byte red, byte green, byte blue);

		/// <summary>
		///   <para>Send a joystick specific effect packet.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to affect.                       </para>
		/// </param>
		/// <param name="data">
		///   <para> the data to send to the joystick.             </para>
		/// </param>
		/// <param name="size">
		///   <para> the size of the data to send to the joystick. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SendJoystickEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SendJoystickEffect(SDL_Joystick *joystick, const void *data, int size);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SendJoystickEffect(IntPtr joystick, IntPtr data, int size);

		/// <summary>
		///   <para>Close a joystick previously opened with <see cref="SDL_OpenJoystick" />().</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick device to close. </para>
		/// </param>
		/// <seealso cref="SDL_OpenJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CloseJoystick(SDL_Joystick *joystick);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CloseJoystick(IntPtr joystick);

		/// <summary>
		///   <para>Get the connection state of a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickConnectionState" />) Returns theconnection state on success or<see cref="SDL_JoystickConnectionState.SDL_JOYSTICK_CONNECTION_INVALID" /> onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickConnectionState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick *joystick);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_JoystickConnectionState SDL_GetJoystickConnectionState(IntPtr joystick);

		/// <summary>
		///   <para>Get the battery state of a joystick.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the joystick to query.                                                                                                                                                                </para>
		/// </param>
		/// <param name="percent">
		///   <para> a pointer filled in with the percentage of battery life left, between 0 and 100, or NULL to ignore. This will be filled in with -1 we can't determine a value or there is no battery. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PowerState" />) Returns the current battery state or<see cref="SDL_PowerState.SDL_POWERSTATE_ERROR" /> on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You should never take a battery status as absolute truth. Batteries(especially failing batteries) are delicate hardware, and the valuesreported here are best estimates based on what that hardware reports. It'snot uncommon for older batteries to lose stored power much faster than itreports, or completely drain when reporting it has 20 percent left, etc.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetJoystickPowerInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_joystick.h">&lt;SDL3/SDL_joystick.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PowerState SDL_GetJoystickPowerInfo(SDL_Joystick *joystick, int *percent);
		/// </code><para>                                                                                                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryJoystick">CategoryJoystick</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_PowerState SDL_GetJoystickPowerInfo(IntPtr joystick, out int percent);

		// /usr/local/include/SDL3/SDL_gamepad.h

		/// <summary>
		///   <para>Standard gamepad types.</para>
		/// </summary>
		/// <remarks>
		///   <para>This type does not necessarily map to first-party controllers fromMicrosoft/Sony/Nintendo; in many cases, third-party controllers can reportas these, either because they were designed for a specific console, or theysimply most closely match that console's controllers (does it have A/B/X/Ybuttons or X/O/Square/Triangle? Does it have a touchpad? etc).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GamepadType
		/// {
		///     SDL_GAMEPAD_TYPE_UNKNOWN = 0,
		///     SDL_GAMEPAD_TYPE_STANDARD,
		///     SDL_GAMEPAD_TYPE_XBOX360,
		///     SDL_GAMEPAD_TYPE_XBOXONE,
		///     SDL_GAMEPAD_TYPE_PS3,
		///     SDL_GAMEPAD_TYPE_PS4,
		///     SDL_GAMEPAD_TYPE_PS5,
		///     SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO,
		///     SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,
		///     SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,
		///     SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,
		///     SDL_GAMEPAD_TYPE_COUNT
		/// } SDL_GamepadType;
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public enum SDL_GamepadType
		{
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_STANDARD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_STANDARD = 1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_XBOX360<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_XBOX360 = 2,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_XBOXONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_XBOXONE = 3,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_PS3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_PS3 = 4,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_PS4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_PS4 = 5,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_PS5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_PS5 = 6,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
			/// <summary><para>Please refer to <see cref="SDL_GamepadType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_TYPE_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_TYPE_COUNT = 11,
		}

		/// <summary>
		///   <para>The list of buttons available on a gamepad</para>
		/// </summary>
		/// <remarks>
		///   <para>For controllers that use a diamond pattern for the face buttons, thesouth/east/west/north buttons below correspond to the locations in thediamond pattern. For Xbox controllers, this would be A/B/X/Y, for NintendoSwitch controllers, this would be B/A/Y/X, for PlayStation controllers thiswould be Cross/Circle/Square/Triangle.</para>
		///   <para>For controllers that don't use a diamond pattern for the face buttons, thesouth/east/west/north buttons indicate the buttons labeled A, B, C, D, or1, 2, 3, 4, or for controllers that aren't labeled, they are the primary,secondary, etc. buttons.</para>
		///   <para>The activate action is often the south button and the cancel action isoften the east button, but in some regions this is reversed, so your gameshould allow remapping actions based on user preferences.</para>
		///   <para>You can query the labels for the face buttons using<see cref="SDL_GetGamepadButtonLabel" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GamepadButton
		/// {
		///     SDL_GAMEPAD_BUTTON_INVALID = -1,
		///     SDL_GAMEPAD_BUTTON_SOUTH,           /* Bottom face button (e.g. Xbox A button) */
		///     SDL_GAMEPAD_BUTTON_EAST,            /* Right face button (e.g. Xbox B button) */
		///     SDL_GAMEPAD_BUTTON_WEST,            /* Left face button (e.g. Xbox X button) */
		///     SDL_GAMEPAD_BUTTON_NORTH,           /* Top face button (e.g. Xbox Y button) */
		///     SDL_GAMEPAD_BUTTON_BACK,
		///     SDL_GAMEPAD_BUTTON_GUIDE,
		///     SDL_GAMEPAD_BUTTON_START,
		///     SDL_GAMEPAD_BUTTON_LEFT_STICK,
		///     SDL_GAMEPAD_BUTTON_RIGHT_STICK,
		///     SDL_GAMEPAD_BUTTON_LEFT_SHOULDER,
		///     SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER,
		///     SDL_GAMEPAD_BUTTON_DPAD_UP,
		///     SDL_GAMEPAD_BUTTON_DPAD_DOWN,
		///     SDL_GAMEPAD_BUTTON_DPAD_LEFT,
		///     SDL_GAMEPAD_BUTTON_DPAD_RIGHT,
		///     SDL_GAMEPAD_BUTTON_MISC1,           /* Additional button (e.g. Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button, Google Stadia capture button) */
		///     SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,   /* Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1) */
		///     SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,    /* Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3) */
		///     SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,   /* Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2) */
		///     SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,    /* Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4) */
		///     SDL_GAMEPAD_BUTTON_TOUCHPAD,        /* PS4/PS5 touchpad button */
		///     SDL_GAMEPAD_BUTTON_MISC2,           /* Additional button */
		///     SDL_GAMEPAD_BUTTON_MISC3,           /* Additional button */
		///     SDL_GAMEPAD_BUTTON_MISC4,           /* Additional button */
		///     SDL_GAMEPAD_BUTTON_MISC5,           /* Additional button */
		///     SDL_GAMEPAD_BUTTON_MISC6,           /* Additional button */
		///     SDL_GAMEPAD_BUTTON_COUNT
		/// } SDL_GamepadButton;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public enum SDL_GamepadButton
		{
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_INVALID = -1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_SOUTH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_SOUTH = 0,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_EAST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_EAST = 1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_WEST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_WEST = 2,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_NORTH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_NORTH = 3,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_BACK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_BACK = 4,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_GUIDE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_GUIDE = 5,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_START<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_START = 6,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LEFT_STICK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LEFT_STICK = 7,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_RIGHT_STICK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LEFT_SHOULDER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_DPAD_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_DPAD_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_DPAD_LEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_DPAD_RIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_MISC1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_MISC1 = 15,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LEFT_PADDLE1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LEFT_PADDLE2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_TOUCHPAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_TOUCHPAD = 20,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_MISC2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_MISC2 = 21,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_MISC3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_MISC3 = 22,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_MISC4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_MISC4 = 23,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_MISC5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_MISC5 = 24,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_MISC6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_MISC6 = 25,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButton" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_COUNT = 26,
		}

		/// <summary>
		///   <para>The set of gamepad button labels</para>
		/// </summary>
		/// <remarks>
		///   <para>This isn't a complete set, just the face buttons to make it easy to showbutton prompts.</para>
		///   <para>For a complete set, you should look at the button and gamepad type and havea set of symbols that work well with your art style.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadButtonLabel<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GamepadButtonLabel
		/// {
		///     SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN,
		///     SDL_GAMEPAD_BUTTON_LABEL_A,
		///     SDL_GAMEPAD_BUTTON_LABEL_B,
		///     SDL_GAMEPAD_BUTTON_LABEL_X,
		///     SDL_GAMEPAD_BUTTON_LABEL_Y,
		///     SDL_GAMEPAD_BUTTON_LABEL_CROSS,
		///     SDL_GAMEPAD_BUTTON_LABEL_CIRCLE,
		///     SDL_GAMEPAD_BUTTON_LABEL_SQUARE,
		///     SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE
		/// } SDL_GamepadButtonLabel;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public enum SDL_GamepadButtonLabel
		{
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_A<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_A = 1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_B<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_B = 2,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_X<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_X = 3,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_Y<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_Y = 4,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_CROSS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_CIRCLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_SQUARE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7,
			/// <summary><para>Please refer to <see cref="SDL_GamepadButtonLabel" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8,
		}

		/// <summary>
		///   <para>The list of axes available on a gamepad</para>
		/// </summary>
		/// <remarks>
		///   <para>Thumbstick axis values range from<see cref="SDL_JOYSTICK_AXIS_MIN" /> to<see cref="SDL_JOYSTICK_AXIS_MAX" />, and are centered within~8000 of zero, though advanced UI will allow users to set or autodetect thedead zone, which varies between gamepads.</para>
		///   <para>Trigger axis values range from 0 (released) to<see cref="SDL_JOYSTICK_AXIS_MAX" /> (fully pressed) whenreported by <see cref="SDL_GetGamepadAxis" />(). Note that this isnot the same range that will be reported by the lower-level<see cref="SDL_GetJoystickAxis" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GamepadAxis
		/// {
		///     SDL_GAMEPAD_AXIS_INVALID = -1,
		///     SDL_GAMEPAD_AXIS_LEFTX,
		///     SDL_GAMEPAD_AXIS_LEFTY,
		///     SDL_GAMEPAD_AXIS_RIGHTX,
		///     SDL_GAMEPAD_AXIS_RIGHTY,
		///     SDL_GAMEPAD_AXIS_LEFT_TRIGGER,
		///     SDL_GAMEPAD_AXIS_RIGHT_TRIGGER,
		///     SDL_GAMEPAD_AXIS_COUNT
		/// } SDL_GamepadAxis;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public enum SDL_GamepadAxis
		{
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_INVALID = -1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_LEFTX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_LEFTX = 0,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_LEFTY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_LEFTY = 1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_RIGHTX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_RIGHTX = 2,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_RIGHTY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_RIGHTY = 3,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_LEFT_TRIGGER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_RIGHT_TRIGGER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
			/// <summary><para>Please refer to <see cref="SDL_GamepadAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_AXIS_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_AXIS_COUNT = 6,
		}

		/// <summary>
		///   <para>Types of gamepad control bindings.</para>
		/// </summary>
		/// <remarks>
		///   <para>A gamepad is a collection of bindings that map arbitrary joystick buttons,axes and hat switches to specific positions on a generic console-stylegamepad. This enum is used as part of<see cref="SDL_GamepadBinding" /> to specify those mappings.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadBindingType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GamepadBindingType
		/// {
		///     SDL_GAMEPAD_BINDTYPE_NONE = 0,
		///     SDL_GAMEPAD_BINDTYPE_BUTTON,
		///     SDL_GAMEPAD_BINDTYPE_AXIS,
		///     SDL_GAMEPAD_BINDTYPE_HAT
		/// } SDL_GamepadBindingType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public enum SDL_GamepadBindingType
		{
			/// <summary><para>Please refer to <see cref="SDL_GamepadBindingType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BINDTYPE_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BINDTYPE_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_GamepadBindingType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BINDTYPE_BUTTON<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BINDTYPE_BUTTON = 1,
			/// <summary><para>Please refer to <see cref="SDL_GamepadBindingType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BINDTYPE_AXIS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BINDTYPE_AXIS = 2,
			/// <summary><para>Please refer to <see cref="SDL_GamepadBindingType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GAMEPAD_BINDTYPE_HAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GAMEPAD_BINDTYPE_HAT = 3,
		}

		/// <summary>
		///   <para>A mapping between one joystick input to a gamepad control.</para>
		/// </summary>
		/// <remarks>
		///   <para>A gamepad has a collection of several bindings, to say, for example, whenjoystick button number 5 is pressed, that should be treated like thegamepad's "start" button.</para>
		///   <para>SDL has these bindings built-in for many popular controllers, and can addmore with a simple text string. Those strings are parsed into a collectionof these structs to make it easier to operate on the data.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadBindings" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadBinding<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GamepadBinding
		/// {
		///     SDL_GamepadBindingType input_type;
		///     union
		///     {
		///         int button;
		/// 
		///         struct
		///         {
		///             int axis;
		///             int axis_min;
		///             int axis_max;
		///         } axis;
		/// 
		///         struct
		///         {
		///             int hat;
		///             int hat_mask;
		///         } hat;
		/// 
		///     } input;
		/// 
		///     SDL_GamepadBindingType output_type;
		///     union
		///     {
		///         SDL_GamepadButton button;
		/// 
		///         struct
		///         {
		///             SDL_GamepadAxis axis;
		///             int axis_min;
		///             int axis_max;
		///         } axis;
		/// 
		///     } output;
		/// } SDL_GamepadBinding;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[StructLayout(LayoutKind.Explicit)]
		public struct SDL_GamepadBinding
		{
			[FieldOffset(0)]
			public SDL_GamepadBindingType input_type;
			[FieldOffset(4)]
			public int input_button;
			[FieldOffset(4)]
			public INTERNAL_SDL_GamepadBinding_input_axis input_axis;
			[FieldOffset(4)]
			public INTERNAL_SDL_GamepadBinding_input_hat input_hat;
			[FieldOffset(16)]
			public SDL_GamepadBindingType output_type;
			[FieldOffset(20)]
			public SDL_GamepadButton output_button;
			[FieldOffset(20)]
			public INTERNAL_SDL_GamepadBinding_output_axis output_axis;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct INTERNAL_SDL_GamepadBinding_input_axis
		{
			public int axis;
			public int axis_min;
			public int axis_max;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct INTERNAL_SDL_GamepadBinding_input_hat
		{
			public int hat;
			public int hat_mask;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct INTERNAL_SDL_GamepadBinding_output_axis
		{
			public SDL_GamepadAxis axis;
			public int axis_min;
			public int axis_max;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_AddGamepadMapping", CallingConvention = CallingConvention.Cdecl)]
		private static extern int INTERNAL_SDL_AddGamepadMapping(byte* mapping);
		/// <summary>
		///   <para>Add support for gamepads that SDL is unaware of or change the binding of an existing gamepad.</para>
		/// </summary>
		/// <param name="mapping">
		///   <para> the mapping string. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 1 if a new mapping is added, 0 if an existing mapping isupdated, -1 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The mapping string has the format "GUID,name,mapping", where GUID is thestring value from <see cref="SDL_GUIDToString" />(), name is the humanreadable string for the device and mappings are gamepad mappings tojoystick ones. Under Windows there is a reserved GUID of "xinput" thatcovers all XInput devices. The mapping format for joystick is:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <c>bX</c>: a joystick button, index X</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>hX.Y</c>: hat X with value Y</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>aX</c>: axis X of the joystick</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Buttons can be used as a gamepad axes and vice versa.</para>
		///   <para>This string shows an example of a valid mapping for a gamepad:</para>
		///   <code>"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadMapping" />
		/// <seealso cref="SDL_GetGamepadMappingForGUID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddGamepadMapping<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_AddGamepadMapping(const char *mapping);
		/// </code><para>                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static int SDL_AddGamepadMapping(string mapping)
		{
			var mappingUTF8 = EncodeAsUTF8(mapping);
			var result = INTERNAL_SDL_AddGamepadMapping(mappingUTF8);

			SDL_free((IntPtr) mappingUTF8);
			return result;
		}

		/// <summary>
		///   <para>Load a set of gamepad mappings from an <see cref="SDL_IOStream" />.</para>
		/// </summary>
		/// <param name="src">
		///   <para> the data stream for the mappings to be added.                                                        </para>
		/// </param>
		/// <param name="closeio">
		///   <para> if true, calls <see cref="SDL_CloseIO" />() on <c>src</c> before returning, even in the case of an error. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of mappings added or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can call this function several times, if needed, to load differentdatabase files.</para>
		///   <para>If a new mapping is loaded for an already known gamepad GUID, the laterversion will overwrite the one currently loaded.</para>
		///   <para>Mappings not belonging to the current platform or with no platform fieldspecified will be ignored (i.e. mappings for Linux will be ignored inWindows, etc).</para>
		///   <para>This function will load the text database entirely in memory beforeprocessing it, so take this into consideration if you are in a memoryconstrained environment.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddGamepadMapping" />
		/// <seealso cref="SDL_AddGamepadMappingsFromFile" />
		/// <seealso cref="SDL_GetGamepadMapping" />
		/// <seealso cref="SDL_GetGamepadMappingForGUID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddGamepadMappingsFromIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_AddGamepadMappingsFromIO(SDL_IOStream *src, bool closeio);
		/// </code><para>                                                                                                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_AddGamepadMappingsFromIO(IntPtr src, SDLBool closeio);

		[DllImport(nativeLibName, EntryPoint = "SDL_AddGamepadMappingsFromFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern int INTERNAL_SDL_AddGamepadMappingsFromFile(byte* file);
		/// <summary>
		///   <para>Load a set of gamepad mappings from a file.</para>
		/// </summary>
		/// <param name="file">
		///   <para> the mappings file to load. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of mappings added or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can call this function several times, if needed, to load differentdatabase files.</para>
		///   <para>If a new mapping is loaded for an already known gamepad GUID, the laterversion will overwrite the one currently loaded.</para>
		///   <para>Mappings not belonging to the current platform or with no platform fieldspecified will be ignored (i.e. mappings for Linux will be ignored inWindows, etc).</para>
		/// </remarks>
		/// <seealso cref="SDL_AddGamepadMapping" />
		/// <seealso cref="SDL_AddGamepadMappingsFromIO" />
		/// <seealso cref="SDL_GetGamepadMapping" />
		/// <seealso cref="SDL_GetGamepadMappingForGUID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddGamepadMappingsFromFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_AddGamepadMappingsFromFile(const char *file);
		/// </code><para>                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static int SDL_AddGamepadMappingsFromFile(string file)
		{
			var fileUTF8 = EncodeAsUTF8(file);
			var result = INTERNAL_SDL_AddGamepadMappingsFromFile(fileUTF8);

			SDL_free((IntPtr) fileUTF8);
			return result;
		}

		/// <summary>
		///   <para>Reinitialize the SDL mapping database to its initial state.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will generate gamepad events as needed if device mappings change.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReloadGamepadMappings<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReloadGamepadMappings(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ReloadGamepadMappings();

		/// <summary>
		///   <para>Get the current gamepad mappings.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of mappings returned, can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(char **) Returns an array of the mapping strings, NULL-terminated, or NULLon failure; call <see cref="SDL_GetError" />() for more information. Thisis a single allocation that should be freed with <see cref="SDL_free" />()when it is no longer needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadMappings<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>char ** SDL_GetGamepadMappings(int *count);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGamepadMappings(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadMappingForGUID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadMappingForGUID(SDL_GUID guid);
		/// <summary>
		///   <para>Get the gamepad mapping string for a given GUID.</para>
		/// </summary>
		/// <param name="guid">
		///   <para> a structure containing the GUID for which a mapping is desired. </para>
		/// </param>
		/// <returns>
		///   <para>(char *) Returns a mapping string or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoystickGUIDForID" />
		/// <seealso cref="SDL_GetJoystickGUID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadMappingForGUID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>char * SDL_GetGamepadMappingForGUID(SDL_GUID guid);
		/// </code><para>                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadMappingForGUID(SDL_GUID guid)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadMappingForGUID(guid), shouldFree: true);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadMapping", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadMapping(IntPtr gamepad);
		/// <summary>
		///   <para>Get the current mapping of a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad you want to get the current mapping for. </para>
		/// </param>
		/// <returns>
		///   <para>(char *) Returns a string that has the gamepad's mapping or NULL if nomapping is available; call <see cref="SDL_GetError" />() for moreinformation. This should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Details about mappings are discussed with<see cref="SDL_AddGamepadMapping" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_AddGamepadMapping" />
		/// <seealso cref="SDL_GetGamepadMappingForID" />
		/// <seealso cref="SDL_GetGamepadMappingForGUID" />
		/// <seealso cref="SDL_SetGamepadMapping" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadMapping<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>char * SDL_GetGamepadMapping(SDL_Gamepad *gamepad);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadMapping(IntPtr gamepad)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadMapping(gamepad), shouldFree: true);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetGamepadMapping", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetGamepadMapping(uint instance_id, byte* mapping);
		/// <summary>
		///   <para>Set the current mapping of a joystick or gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID.                                         </para>
		/// </param>
		/// <param name="mapping">
		///   <para> the mapping to use for this device, or NULL to clear the mapping. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Details about mappings are discussed with<see cref="SDL_AddGamepadMapping" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_AddGamepadMapping" />
		/// <seealso cref="SDL_GetGamepadMapping" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGamepadMapping<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetGamepadMapping(SDL_JoystickID instance_id, const char *mapping);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static SDLBool SDL_SetGamepadMapping(uint instance_id, string mapping)
		{
			var mappingUTF8 = EncodeAsUTF8(mapping);
			var result = INTERNAL_SDL_SetGamepadMapping(instance_id, mappingUTF8);

			SDL_free((IntPtr) mappingUTF8);
			return result;
		}

		/// <summary>
		///   <para>Return whether a gamepad is currently connected.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if a gamepad is connected, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasGamepad<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasGamepad(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasGamepad();

		/// <summary>
		///   <para>Get a list of currently connected gamepads.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of gamepads returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickID" /> *) Returns a 0 terminated array ofjoystick instance IDs or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <seealso cref="SDL_HasGamepad" />
		/// <seealso cref="SDL_OpenGamepad" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepads<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickID * SDL_GetGamepads(int *count);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGamepads(out int count);

		/// <summary>
		///   <para>Check if the given joystick is supported by the gamepad interface.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the given joystick is supported by the gamepadinterface, false if it isn't or it's an invalid index.</para>
		/// </returns>
		/// <seealso cref="SDL_GetJoysticks" />
		/// <seealso cref="SDL_OpenGamepad" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IsGamepad<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_IsGamepad(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_IsGamepad(uint instance_id);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadNameForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadNameForID(uint instance_id);
		/// <summary>
		///   <para>Get the implementation dependent name of a gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected gamepad. If no name can befound, this function returns NULL; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadName" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadNameForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadNameForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadNameForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadNameForID(instance_id));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadPathForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadPathForID(uint instance_id);
		/// <summary>
		///   <para>Get the implementation dependent path of a gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the path of the selected gamepad. If no path can befound, this function returns NULL; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadPath" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadPathForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadPathForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadPathForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadPathForID(instance_id));
		}

		/// <summary>
		///   <para>Get the player index of a gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the player index of a gamepad, or -1 if it's not available.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadPlayerIndex" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadPlayerIndexForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetGamepadPlayerIndexForID(uint instance_id);

		/// <summary>
		///   <para>Get the implementation-dependent GUID of a gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GUID" />) Returns the GUID of the selected gamepad. If calledon an invalid index, this function returns a zero GUID.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GUIDToString" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadGUIDForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GUID SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GUID SDL_GetGamepadGUIDForID(uint instance_id);

		/// <summary>
		///   <para>Get the USB vendor ID of a gamepad, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB vendor ID of the selected gamepad. If called on aninvalid index, this function returns zero.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened. If the vendor ID isn'tavailable this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadVendor" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadVendorForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadVendorForID(uint instance_id);

		/// <summary>
		///   <para>Get the USB product ID of a gamepad, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB product ID of the selected gamepad. If called onan invalid index, this function returns zero.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened. If the product ID isn'tavailable this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadProduct" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadProductForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadProductForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadProductForID(uint instance_id);

		/// <summary>
		///   <para>Get the product version of a gamepad, if available.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the product version of the selected gamepad. If called onan invalid index, this function returns zero.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened. If the product versionisn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadProductVersion" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadProductVersionForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadProductVersionForID(uint instance_id);

		/// <summary>
		///   <para>Get the type of a gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadType" />) Returns the gamepad type.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadType" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <seealso cref="SDL_GetRealGamepadTypeForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadTypeForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GamepadType SDL_GetGamepadTypeForID(uint instance_id);

		/// <summary>
		///   <para>Get the type of a gamepad, ignoring any mapping override.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadType" />) Returns the gamepad type.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadTypeForID" />
		/// <seealso cref="SDL_GetGamepads" />
		/// <seealso cref="SDL_GetRealGamepadType" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRealGamepadTypeForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GamepadType SDL_GetRealGamepadTypeForID(uint instance_id);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadMappingForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadMappingForID(uint instance_id);
		/// <summary>
		///   <para>Get the mapping of a gamepad.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(char *) Returns the mapping string. Returns NULL if no mapping isavailable. This should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any gamepads are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepads" />
		/// <seealso cref="SDL_GetGamepadMapping" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadMappingForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>char * SDL_GetGamepadMappingForID(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadMappingForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadMappingForID(instance_id), shouldFree: true);
		}

		/// <summary>
		///   <para>Open a gamepad for use.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Gamepad" /> *) Returns a gamepad identifier or NULL if anerror occurred; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CloseGamepad" />
		/// <seealso cref="SDL_IsGamepad" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenGamepad<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Gamepad * SDL_OpenGamepad(SDL_JoystickID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenGamepad(uint instance_id);

		/// <summary>
		///   <para>Get the <see cref="SDL_Gamepad" /> associated with a joystick instance ID, if it has been opened.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the joystick instance ID of the gamepad. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Gamepad" /> *) Returns an <see cref="SDL_Gamepad" /> onsuccess or NULL on failure or if it hasn't been opened yet; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadFromID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Gamepad * SDL_GetGamepadFromID(SDL_JoystickID instance_id);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGamepadFromID(uint instance_id);

		/// <summary>
		///   <para>Get the <see cref="SDL_Gamepad" /> associated with a player index.</para>
		/// </summary>
		/// <param name="player_index">
		///   <para> the player index, which different from the instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Gamepad" /> *) Returns the <see cref="SDL_Gamepad" />associated with a player index.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadPlayerIndex" />
		/// <seealso cref="SDL_SetGamepadPlayerIndex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadFromPlayerIndex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Gamepad * SDL_GetGamepadFromPlayerIndex(int player_index);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGamepadFromPlayerIndex(int player_index);

		/// <summary>
		///   <para>Get the properties associated with an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad identifier previously returned by <see cref="SDL_OpenGamepad" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>These properties are shared with the underlying joystick object.</para>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN" />:true if this gamepad has an LED that has adjustable brightness</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN" />:true if this gamepad has an LED that has adjustable color</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN" />:true if this gamepad has a player LED</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN" />:true if this gamepad has left/right rumble</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN" />:true if this gamepad has simple trigger rumble</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad *gamepad);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetGamepadProperties(IntPtr gamepad);

		/// <summary>
		///   <para>Get the instance ID of an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad identifier previously returned by <see cref="SDL_OpenGamepad" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickID" />) Returns the instance ID of the specifiedgamepad on success or 0 on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickID SDL_GetGamepadID(SDL_Gamepad *gamepad);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetGamepadID(IntPtr gamepad);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadName(IntPtr gamepad);
		/// <summary>
		///   <para>Get the implementation-dependent name for an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad identifier previously returned by <see cref="SDL_OpenGamepad" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the implementation dependent name for the gamepad,or NULL if there is no name or the identifier passed is invalid.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadNameForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadName(SDL_Gamepad *gamepad);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadName(IntPtr gamepad)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadName(gamepad));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadPath", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadPath(IntPtr gamepad);
		/// <summary>
		///   <para>Get the implementation-dependent path for an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad identifier previously returned by <see cref="SDL_OpenGamepad" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the implementation dependent path for the gamepad,or NULL if there is no path or the identifier passed is invalid.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadPathForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadPath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadPath(SDL_Gamepad *gamepad);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadPath(IntPtr gamepad)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadPath(gamepad));
		}

		/// <summary>
		///   <para>Get the type of an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadType" />) Returns the gamepad type, or<see cref="SDL_GamepadType.SDL_GAMEPAD_TYPE_UNKNOWN" /> if it's not available.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadTypeForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GamepadType SDL_GetGamepadType(IntPtr gamepad);

		/// <summary>
		///   <para>Get the type of an opened gamepad, ignoring any mapping override.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadType" />) Returns the gamepad type, or<see cref="SDL_GamepadType.SDL_GAMEPAD_TYPE_UNKNOWN" /> if it's not available.</para>
		/// </returns>
		/// <seealso cref="SDL_GetRealGamepadTypeForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRealGamepadType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GamepadType SDL_GetRealGamepadType(IntPtr gamepad);

		/// <summary>
		///   <para>Get the player index of an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the player index for gamepad, or -1 if it's not available.</para>
		/// </returns>
		/// <remarks>
		///   <para>For XInput gamepads this returns the XInput user index.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetGamepadPlayerIndex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadPlayerIndex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetGamepadPlayerIndex(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetGamepadPlayerIndex(IntPtr gamepad);

		/// <summary>
		///   <para>Set the player index of an opened gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to adjust.                                                                     </para>
		/// </param>
		/// <param name="player_index">
		///   <para> player index to assign to this gamepad, or -1 to clear the player index and turn off player LEDs. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadPlayerIndex" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGamepadPlayerIndex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetGamepadPlayerIndex(SDL_Gamepad *gamepad, int player_index);
		/// </code><para>                                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetGamepadPlayerIndex(IntPtr gamepad, int player_index);

		/// <summary>
		///   <para>Get the USB vendor ID of an opened gamepad, if available.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB vendor ID, or zero if unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the vendor ID isn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadVendorForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadVendor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadVendor(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadVendor(IntPtr gamepad);

		/// <summary>
		///   <para>Get the USB product ID of an opened gamepad, if available.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB product ID, or zero if unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the product ID isn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadProductForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadProduct<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadProduct(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadProduct(IntPtr gamepad);

		/// <summary>
		///   <para>Get the product version of an opened gamepad, if available.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the USB product version, or zero if unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the product version isn't available this function returns 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadProductVersionForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadProductVersion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadProductVersion(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadProductVersion(IntPtr gamepad);

		/// <summary>
		///   <para>Get the firmware version of an opened gamepad, if available.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint16) Returns the gamepad firmware version, or zero if unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the firmware version isn't available this function returns 0.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadFirmwareVersion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint16 SDL_GetGamepadFirmwareVersion(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ushort SDL_GetGamepadFirmwareVersion(IntPtr gamepad);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadSerial", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadSerial(IntPtr gamepad);
		/// <summary>
		///   <para>Get the serial number of an opened gamepad, if available.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the serial number, or NULL if unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>Returns the serial number of the gamepad, or NULL if it is not available.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadSerial<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadSerial(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadSerial(IntPtr gamepad)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadSerial(gamepad));
		}

		/// <summary>
		///   <para>Get the Steam Input handle of an opened gamepad, if available.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint64) Returns the gamepad handle, or 0 if unavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>Returns an InputHandle_t for the gamepad that can be used with Steam InputAPI: https://partner.steamgames.com/doc/api/ISteamInput</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadSteamHandle<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint64 SDL_GetGamepadSteamHandle(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetGamepadSteamHandle(IntPtr gamepad);

		/// <summary>
		///   <para>Get the connection state of a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_JoystickConnectionState" />) Returns theconnection state on success or<see cref="SDL_JoystickConnectionState.SDL_JOYSTICK_CONNECTION_INVALID" /> onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadConnectionState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_JoystickConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad *gamepad);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_JoystickConnectionState SDL_GetGamepadConnectionState(IntPtr gamepad);

		/// <summary>
		///   <para>Get the battery state of a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object to query.                                                                                                                                                          </para>
		/// </param>
		/// <param name="percent">
		///   <para> a pointer filled in with the percentage of battery life left, between 0 and 100, or NULL to ignore. This will be filled in with -1 we can't determine a value or there is no battery. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PowerState" />) Returns the current battery state.</para>
		/// </returns>
		/// <remarks>
		///   <para>You should never take a battery status as absolute truth. Batteries(especially failing batteries) are delicate hardware, and the valuesreported here are best estimates based on what that hardware reports. It'snot uncommon for older batteries to lose stored power much faster than itreports, or completely drain when reporting it has 20 percent left, etc.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadPowerInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PowerState SDL_GetGamepadPowerInfo(SDL_Gamepad *gamepad, int *percent);
		/// </code><para>                                                                                                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_PowerState SDL_GetGamepadPowerInfo(IntPtr gamepad, out int percent);

		/// <summary>
		///   <para>Check if a gamepad has been opened and is currently connected.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad identifier previously returned by <see cref="SDL_OpenGamepad" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the gamepad has been opened and is currentlyconnected, or false if not.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadConnected<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GamepadConnected(SDL_Gamepad *gamepad);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GamepadConnected(IntPtr gamepad);

		/// <summary>
		///   <para>Get the underlying joystick from a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad object that you want to get a joystick from. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Joystick" /> *) Returns an <see cref="SDL_Joystick" />object, or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function will give you a <see cref="SDL_Joystick" /> object, whichallows you to use the <see cref="SDL_Joystick" /> functions with a<see cref="SDL_Gamepad" /> object. This would be useful for getting ajoystick's position at any given time, even if it hasn't moved (moving itwould produce an event, which would have the axis' value).</para>
		///   <para>The pointer returned is owned by the <see cref="SDL_Gamepad" />. You shouldnot call <see cref="SDL_CloseJoystick" />() on it, for example, sincedoing so will likely cause SDL to crash.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Joystick * SDL_GetGamepadJoystick(SDL_Gamepad *gamepad);
		/// </code><para>                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGamepadJoystick(IntPtr gamepad);

		/// <summary>
		///   <para>Set the state of gamepad event processing.</para>
		/// </summary>
		/// <param name="enabled">
		///   <para> whether to process gamepad events or not. </para>
		/// </param>
		/// <remarks>
		///   <para>If gamepad events are disabled, you must call<see cref="SDL_UpdateGamepads" />() yourself and check the state ofthe gamepad when you want gamepad information.</para>
		/// </remarks>
		/// <seealso cref="SDL_GamepadEventsEnabled" />
		/// <seealso cref="SDL_UpdateGamepads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGamepadEventsEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGamepadEventsEnabled(bool enabled);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetGamepadEventsEnabled(SDLBool enabled);

		/// <summary>
		///   <para>Query the state of gamepad event processing.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if gamepad events are being processed, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If gamepad events are disabled, you must call<see cref="SDL_UpdateGamepads" />() yourself and check the state ofthe gamepad when you want gamepad information.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetGamepadEventsEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadEventsEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GamepadEventsEnabled(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GamepadEventsEnabled();

		/// <summary>
		///   <para>Get the SDL joystick layer bindings for a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                </para>
		/// </param>
		/// <param name="count">
		///   <para> a pointer filled in with the number of bindings returned. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadBinding" /> **) Returns a NULL terminatedarray of pointers to bindings or NULL on failure; call<see cref="SDL_GetError" />() for more information. This is a singleallocation that should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadBindings<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadBinding ** SDL_GetGamepadBindings(SDL_Gamepad *gamepad, int *count);
		/// </code><para>                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetGamepadBindings(IntPtr gamepad, out int count);

		/// <summary>
		///   <para>Manually pump gamepad updates if not using the loop.</para>
		/// </summary>
		/// <remarks>
		///   <para>This function is called automatically by the event loop if events areenabled. Under such circumstances, it will not be necessary to call thisfunction.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateGamepads<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UpdateGamepads(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UpdateGamepads();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadTypeFromString", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_GamepadType INTERNAL_SDL_GetGamepadTypeFromString(byte* str);
		/// <summary>
		///   <para>Convert a string into <see cref="SDL_GamepadType" /> enum.</para>
		/// </summary>
		/// <param name="str">
		///   <para> string representing a <see cref="SDL_GamepadType" /> type. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadType" />) Returns the<see cref="SDL_GamepadType" /> enum corresponding to the input string,or <see cref="SDL_GamepadType.SDL_GAMEPAD_TYPE_UNKNOWN" /> if no match wasfound.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is called internally to translate <see cref="SDL_Gamepad" />mapping strings for the underlying joystick device into the consistent<see cref="SDL_Gamepad" /> mapping. You do not normally need to call thisfunction unless you are parsing <see cref="SDL_Gamepad" /> mappings in yourown code.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadStringForType" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadTypeFromString<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadType SDL_GetGamepadTypeFromString(const char *str);
		/// </code><para>                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static SDL_GamepadType SDL_GetGamepadTypeFromString(string str)
		{
			var strUTF8 = EncodeAsUTF8(str);
			var result = INTERNAL_SDL_GetGamepadTypeFromString(strUTF8);

			SDL_free((IntPtr) strUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadStringForType", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadStringForType(SDL_GamepadType type);
		/// <summary>
		///   <para>Convert from an <see cref="SDL_GamepadType" /> enum to a string.</para>
		/// </summary>
		/// <param name="type">
		///   <para> an enum value for a given <see cref="SDL_GamepadType" />. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a string for the given type, or NULL if an invalidtype is specified. The string returned is of the format used by<see cref="SDL_Gamepad" /> mapping strings.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadTypeFromString" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadStringForType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadStringForType(SDL_GamepadType type);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadStringForType(SDL_GamepadType type)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadStringForType(type));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadAxisFromString", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_GamepadAxis INTERNAL_SDL_GetGamepadAxisFromString(byte* str);
		/// <summary>
		///   <para>Convert a string into <see cref="SDL_GamepadAxis" /> enum.</para>
		/// </summary>
		/// <param name="str">
		///   <para> string representing a <see cref="SDL_Gamepad" /> axis. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadAxis" />) Returns the<see cref="SDL_GamepadAxis" /> enum corresponding to the input string,or <see cref="SDL_GamepadAxis.SDL_GAMEPAD_AXIS_INVALID" /> if no match wasfound.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is called internally to translate <see cref="SDL_Gamepad" />mapping strings for the underlying joystick device into the consistent<see cref="SDL_Gamepad" /> mapping. You do not normally need to call thisfunction unless you are parsing <see cref="SDL_Gamepad" /> mappings in yourown code.</para>
		///   <para>Note specially that "righttrigger" and "lefttrigger" map to<see cref="SDL_GamepadAxis.SDL_GAMEPAD_AXIS_RIGHT_TRIGGER" /> and<see cref="SDL_GamepadAxis.SDL_GAMEPAD_AXIS_LEFT_TRIGGER" />,respectively.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadStringForAxis" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadAxisFromString<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadAxis SDL_GetGamepadAxisFromString(const char *str);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static SDL_GamepadAxis SDL_GetGamepadAxisFromString(string str)
		{
			var strUTF8 = EncodeAsUTF8(str);
			var result = INTERNAL_SDL_GetGamepadAxisFromString(strUTF8);

			SDL_free((IntPtr) strUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadStringForAxis", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);
		/// <summary>
		///   <para>Convert from an <see cref="SDL_GamepadAxis" /> enum to a string.</para>
		/// </summary>
		/// <param name="axis">
		///   <para> an enum value for a given <see cref="SDL_GamepadAxis" />. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a string for the given axis, or NULL if an invalidaxis is specified. The string returned is of the format used by<see cref="SDL_Gamepad" /> mapping strings.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadAxisFromString" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadStringForAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadStringForAxis(axis));
		}

		/// <summary>
		///   <para>Query whether a gamepad has a given axis.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                        </para>
		/// </param>
		/// <param name="axis">
		///   <para> an axis enum value (an <see cref="SDL_GamepadAxis" /> value). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the gamepad has this axis, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This merely reports whether the gamepad's mapping defined this axis, asthat is all the information SDL has about the physical device.</para>
		/// </remarks>
		/// <seealso cref="SDL_GamepadHasButton" />
		/// <seealso cref="SDL_GetGamepadAxis" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadHasAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GamepadHasAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GamepadHasAxis(IntPtr gamepad, SDL_GamepadAxis axis);

		/// <summary>
		///   <para>Get the current state of an axis control on a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                            </para>
		/// </param>
		/// <param name="axis">
		///   <para> an axis index (one of the <see cref="SDL_GamepadAxis" /> values). </para>
		/// </param>
		/// <returns>
		///   <para>(Sint16) Returns axis state (including 0) on success or 0 (also) onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The axis indices start at index 0.</para>
		///   <para>For thumbsticks, the state is a value ranging from -32768 (up/left) to32767 (down/right).</para>
		///   <para>Triggers range from 0 when released to 32767 when fully pressed, and neverreturn a negative value. Note that this differs from the value reported bythe lower-level <see cref="SDL_GetJoystickAxis" />(), whichnormally uses the full range.</para>
		/// </remarks>
		/// <seealso cref="SDL_GamepadHasAxis" />
		/// <seealso cref="SDL_GetGamepadButton" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>Sint16 SDL_GetGamepadAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern short SDL_GetGamepadAxis(IntPtr gamepad, SDL_GamepadAxis axis);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadButtonFromString", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_GamepadButton INTERNAL_SDL_GetGamepadButtonFromString(byte* str);
		/// <summary>
		///   <para>Convert a string into an <see cref="SDL_GamepadButton" /> enum.</para>
		/// </summary>
		/// <param name="str">
		///   <para> string representing a <see cref="SDL_Gamepad" /> axis. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadButton" />) Returns the<see cref="SDL_GamepadButton" /> enum corresponding to the inputstring, or <see cref="SDL_GamepadButton.SDL_GAMEPAD_BUTTON_INVALID" /> if nomatch was found.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is called internally to translate <see cref="SDL_Gamepad" />mapping strings for the underlying joystick device into the consistent<see cref="SDL_Gamepad" /> mapping. You do not normally need to call thisfunction unless you are parsing <see cref="SDL_Gamepad" /> mappings in yourown code.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGamepadStringForButton" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadButtonFromString<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadButton SDL_GetGamepadButtonFromString(const char *str);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static SDL_GamepadButton SDL_GetGamepadButtonFromString(string str)
		{
			var strUTF8 = EncodeAsUTF8(str);
			var result = INTERNAL_SDL_GetGamepadButtonFromString(strUTF8);

			SDL_free((IntPtr) strUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadStringForButton", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadStringForButton(SDL_GamepadButton button);
		/// <summary>
		///   <para>Convert from an <see cref="SDL_GamepadButton" /> enum to a string.</para>
		/// </summary>
		/// <param name="button">
		///   <para> an enum value for a given <see cref="SDL_GamepadButton" />. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a string for the given button, or NULL if an invalidbutton is specified. The string returned is of the format used by<see cref="SDL_Gamepad" /> mapping strings.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadButtonFromString" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadStringForButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadStringForButton(SDL_GamepadButton button);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadStringForButton(SDL_GamepadButton button)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadStringForButton(button));
		}

		/// <summary>
		///   <para>Query whether a gamepad has a given button.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                             </para>
		/// </param>
		/// <param name="button">
		///   <para> a button enum value (an <see cref="SDL_GamepadButton" /> value). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the gamepad has this button, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This merely reports whether the gamepad's mapping defined this button, asthat is all the information SDL has about the physical device.</para>
		/// </remarks>
		/// <seealso cref="SDL_GamepadHasAxis" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadHasButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GamepadHasButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GamepadHasButton(IntPtr gamepad, SDL_GamepadButton button);

		/// <summary>
		///   <para>Get the current state of a button on a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                                 </para>
		/// </param>
		/// <param name="button">
		///   <para> a button index (one of the <see cref="SDL_GamepadButton" /> values). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the button is pressed, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GamepadHasButton" />
		/// <seealso cref="SDL_GetGamepadAxis" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetGamepadButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetGamepadButton(IntPtr gamepad, SDL_GamepadButton button);

		/// <summary>
		///   <para>Get the label of a button on a gamepad.</para>
		/// </summary>
		/// <param name="type">
		///   <para> the type of gamepad to check.                                              </para>
		/// </param>
		/// <param name="button">
		///   <para> a button index (one of the <see cref="SDL_GamepadButton" /> values). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadButtonLabel" />) Returns the<see cref="SDL_GamepadButtonLabel" /> enum corresponding to thebutton label.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadButtonLabel" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadButtonLabelForType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);

		/// <summary>
		///   <para>Get the label of a button on a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                                 </para>
		/// </param>
		/// <param name="button">
		///   <para> a button index (one of the <see cref="SDL_GamepadButton" /> values). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GamepadButtonLabel" />) Returns the<see cref="SDL_GamepadButtonLabel" /> enum corresponding to thebutton label.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadButtonLabelForType" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadButtonLabel<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad *gamepad, SDL_GamepadButton button);
		/// </code><para>                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(IntPtr gamepad, SDL_GamepadButton button);

		/// <summary>
		///   <para>Get the number of touchpads on a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns number of touchpads.</para>
		/// </returns>
		/// <seealso cref="SDL_GetNumGamepadTouchpadFingers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumGamepadTouchpads<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumGamepadTouchpads(SDL_Gamepad *gamepad);
		/// </code><para>            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumGamepadTouchpads(IntPtr gamepad);

		/// <summary>
		///   <para>Get the number of supported simultaneous fingers on a touchpad on a game gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.  </para>
		/// </param>
		/// <param name="touchpad">
		///   <para> a touchpad. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns number of supported simultaneous fingers.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadTouchpadFinger" />
		/// <seealso cref="SDL_GetNumGamepadTouchpads" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumGamepadTouchpadFingers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad *gamepad, int touchpad);
		/// </code><para>             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumGamepadTouchpadFingers(IntPtr gamepad, int touchpad);

		/// <summary>
		///   <para>Get the current state of a finger on a touchpad on a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad.                                                                                               </para>
		/// </param>
		/// <param name="touchpad">
		///   <para> a touchpad.                                                                                              </para>
		/// </param>
		/// <param name="finger">
		///   <para> a finger.                                                                                                </para>
		/// </param>
		/// <param name="down">
		///   <para> a pointer filled with true if the finger is down, false otherwise, may be NULL.                          </para>
		/// </param>
		/// <param name="x">
		///   <para> a pointer filled with the x position, normalized 0 to 1, with the origin in the upper left, may be NULL. </para>
		/// </param>
		/// <param name="y">
		///   <para> a pointer filled with the y position, normalized 0 to 1, with the origin in the upper left, may be NULL. </para>
		/// </param>
		/// <param name="pressure">
		///   <para> a pointer filled with pressure value, may be NULL.                                                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetNumGamepadTouchpadFingers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadTouchpadFinger<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetGamepadTouchpadFinger(SDL_Gamepad *gamepad, int touchpad, int finger, bool *down, float *x, float *y, float *pressure);
		/// </code><para>                                                                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetGamepadTouchpadFinger(IntPtr gamepad, int touchpad, int finger, out SDLBool down, out float x, out float y, out float pressure);

		/// <summary>
		///   <para>Return whether a gamepad has a particular sensor.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to query.        </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of sensor to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the sensor exists, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadSensorData" />
		/// <seealso cref="SDL_GetGamepadSensorDataRate" />
		/// <seealso cref="SDL_SetGamepadSensorEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadHasSensor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GamepadHasSensor(SDL_Gamepad *gamepad, SDL_SensorType type);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GamepadHasSensor(IntPtr gamepad, SDL_SensorType type);

		/// <summary>
		///   <para>Set whether data reporting for a gamepad sensor is enabled.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to update.                    </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of sensor to enable/disable.     </para>
		/// </param>
		/// <param name="enabled">
		///   <para> whether data reporting should be enabled. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GamepadHasSensor" />
		/// <seealso cref="SDL_GamepadSensorEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGamepadSensorEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetGamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type, bool enabled);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetGamepadSensorEnabled(IntPtr gamepad, SDL_SensorType type, SDLBool enabled);

		/// <summary>
		///   <para>Query whether sensor data reporting is enabled for a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to query.        </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of sensor to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the sensor is enabled, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_SetGamepadSensorEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadSensorEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GamepadSensorEnabled(IntPtr gamepad, SDL_SensorType type);

		/// <summary>
		///   <para>Get the data rate (number of events per second) of a gamepad sensor.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to query.        </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of sensor to query. </para>
		/// </param>
		/// <returns>
		///   <para>(float) Returns the data rate, or 0.0f if the data rate is not available.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadSensorDataRate<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>float SDL_GetGamepadSensorDataRate(SDL_Gamepad *gamepad, SDL_SensorType type);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern float SDL_GetGamepadSensorDataRate(IntPtr gamepad, SDL_SensorType type);

		/// <summary>
		///   <para>Get the current state of a gamepad sensor.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to query.                           </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of sensor to query.                    </para>
		/// </param>
		/// <param name="data">
		///   <para> a pointer filled with the current sensor state. </para>
		/// </param>
		/// <param name="num_values">
		///   <para> the number of values to write to data.          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The number of values and interpretation of the data is sensor dependent.See <see cref="SDL_sensor" />.h for the details for each type of sensor.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadSensorData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetGamepadSensorData(SDL_Gamepad *gamepad, SDL_SensorType type, float *data, int num_values);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetGamepadSensorData(IntPtr gamepad, SDL_SensorType type, float* data, int num_values);

		/// <summary>
		///   <para>Start a rumble effect on a gamepad.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to vibrate.                                                     </para>
		/// </param>
		/// <param name="low_frequency_rumble">
		///   <para> the intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF.   </para>
		/// </param>
		/// <param name="high_frequency_rumble">
		///   <para> the intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF. </para>
		/// </param>
		/// <param name="duration_ms">
		///   <para> the duration of the rumble effect, in milliseconds.                         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Each call to this function cancels any previous rumble effect, and callingit with 0 intensity stops any rumbling.</para>
		///   <para>This function requires you to process SDL events or call<see cref="SDL_UpdateJoysticks" />() to update rumble state.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RumbleGamepad<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RumbleGamepad(SDL_Gamepad *gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RumbleGamepad(IntPtr gamepad, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

		/// <summary>
		///   <para>Start a rumble effect in the gamepad's triggers.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to vibrate.                                            </para>
		/// </param>
		/// <param name="left_rumble">
		///   <para> the intensity of the left trigger rumble motor, from 0 to 0xFFFF.  </para>
		/// </param>
		/// <param name="right_rumble">
		///   <para> the intensity of the right trigger rumble motor, from 0 to 0xFFFF. </para>
		/// </param>
		/// <param name="duration_ms">
		///   <para> the duration of the rumble effect, in milliseconds.                </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Each call to this function cancels any previous trigger rumble effect, andcalling it with 0 intensity stops any rumbling.</para>
		///   <para>Note that this is rumbling of the triggers and not the gamepad as awhole. This is currently only supported on Xbox One gamepads. If you wantthe (more common) whole-gamepad rumble, use<see cref="SDL_RumbleGamepad" />() instead.</para>
		///   <para>This function requires you to process SDL events or call<see cref="SDL_UpdateJoysticks" />() to update rumble state.</para>
		/// </remarks>
		/// <seealso cref="SDL_RumbleGamepad" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RumbleGamepadTriggers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RumbleGamepadTriggers(SDL_Gamepad *gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
		/// </code><para>                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RumbleGamepadTriggers(IntPtr gamepad, ushort left_rumble, ushort right_rumble, uint duration_ms);

		/// <summary>
		///   <para>Update a gamepad's LED color.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to update.          </para>
		/// </param>
		/// <param name="red">
		///   <para> the intensity of the red LED.   </para>
		/// </param>
		/// <param name="green">
		///   <para> the intensity of the green LED. </para>
		/// </param>
		/// <param name="blue">
		///   <para> the intensity of the blue LED.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>An example of a joystick LED is the light on the back of a PlayStation 4'sDualShock 4 controller.</para>
		///   <para>For gamepads with a single color LED, the maximum of the RGB values will beused as the LED brightness.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGamepadLED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetGamepadLED(SDL_Gamepad *gamepad, Uint8 red, Uint8 green, Uint8 blue);
		/// </code><para>                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetGamepadLED(IntPtr gamepad, byte red, byte green, byte blue);

		/// <summary>
		///   <para>Send a gamepad specific effect packet.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to affect.                       </para>
		/// </param>
		/// <param name="data">
		///   <para> the data to send to the gamepad.             </para>
		/// </param>
		/// <param name="size">
		///   <para> the size of the data to send to the gamepad. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SendGamepadEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SendGamepadEffect(SDL_Gamepad *gamepad, const void *data, int size);
		/// </code><para>                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SendGamepadEffect(IntPtr gamepad, IntPtr data, int size);

		/// <summary>
		///   <para>Close a gamepad previously opened with <see cref="SDL_OpenGamepad" />().</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> a gamepad identifier previously returned by <see cref="SDL_OpenGamepad" />(). </para>
		/// </param>
		/// <seealso cref="SDL_OpenGamepad" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseGamepad<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CloseGamepad(SDL_Gamepad *gamepad);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CloseGamepad(IntPtr gamepad);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadAppleSFSymbolsNameForButton(IntPtr gamepad, SDL_GamepadButton button);
		/// <summary>
		///   <para>Return the sfSymbolsName for a given button on a gamepad on Apple platforms.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to query.    </para>
		/// </param>
		/// <param name="button">
		///   <para> a button on the gamepad. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the sfSymbolsName or NULL if the name can't befound.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadAppleSFSymbolsNameForAxis" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadAppleSFSymbolsNameForButton<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
		/// </code><para>                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadAppleSFSymbolsNameForButton(IntPtr gamepad, SDL_GamepadButton button)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadAppleSFSymbolsNameForButton(gamepad, button));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGamepadAppleSFSymbolsNameForAxis(IntPtr gamepad, SDL_GamepadAxis axis);
		/// <summary>
		///   <para>Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.</para>
		/// </summary>
		/// <param name="gamepad">
		///   <para> the gamepad to query.   </para>
		/// </param>
		/// <param name="axis">
		///   <para> an axis on the gamepad. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the sfSymbolsName or NULL if the name can't befound.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGamepadAppleSFSymbolsNameForButton" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGamepadAppleSFSymbolsNameForAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gamepad.h">&lt;SDL3/SDL_gamepad.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGamepad">CategoryGamepad</see></para></misc>
		public static string SDL_GetGamepadAppleSFSymbolsNameForAxis(IntPtr gamepad, SDL_GamepadAxis axis)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGamepadAppleSFSymbolsNameForAxis(gamepad, axis));
		}

		// /usr/local/include/SDL3/SDL_scancode.h

		/// <summary>
		///   <para>The SDL keyboard scancode representation.</para>
		/// </summary>
		/// <remarks>
		///   <para>An SDL scancode is the physical representation of a key on the keyboard,independent of language and keyboard mapping.</para>
		///   <para>Values of this type are used to represent keyboard keys, among other placesin the <c>scancode</c> field of the <see cref="SDL_KeyboardEvent" />structure.</para>
		///   <para>The values in this enumeration are based on the USB usage page standard:https://usb.org/sites/default/files/hut1_5.pdf</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Scancode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_scancode.h">&lt;SDL3/SDL_scancode.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_Scancode
		/// {
		///     SDL_SCANCODE_UNKNOWN = 0,
		/// 
		///     /**
		///      *  \name Usage page 0x07
		///      *
		///      *  These values are from usage page 0x07 (USB keyboard page).
		///      */
		///     /* @{ */
		/// 
		///     SDL_SCANCODE_A = 4,
		///     SDL_SCANCODE_B = 5,
		///     SDL_SCANCODE_C = 6,
		///     SDL_SCANCODE_D = 7,
		///     SDL_SCANCODE_E = 8,
		///     SDL_SCANCODE_F = 9,
		///     SDL_SCANCODE_G = 10,
		///     SDL_SCANCODE_H = 11,
		///     SDL_SCANCODE_I = 12,
		///     SDL_SCANCODE_J = 13,
		///     SDL_SCANCODE_K = 14,
		///     SDL_SCANCODE_L = 15,
		///     SDL_SCANCODE_M = 16,
		///     SDL_SCANCODE_N = 17,
		///     SDL_SCANCODE_O = 18,
		///     SDL_SCANCODE_P = 19,
		///     SDL_SCANCODE_Q = 20,
		///     SDL_SCANCODE_R = 21,
		///     SDL_SCANCODE_S = 22,
		///     SDL_SCANCODE_T = 23,
		///     SDL_SCANCODE_U = 24,
		///     SDL_SCANCODE_V = 25,
		///     SDL_SCANCODE_W = 26,
		///     SDL_SCANCODE_X = 27,
		///     SDL_SCANCODE_Y = 28,
		///     SDL_SCANCODE_Z = 29,
		/// 
		///     SDL_SCANCODE_1 = 30,
		///     SDL_SCANCODE_2 = 31,
		///     SDL_SCANCODE_3 = 32,
		///     SDL_SCANCODE_4 = 33,
		///     SDL_SCANCODE_5 = 34,
		///     SDL_SCANCODE_6 = 35,
		///     SDL_SCANCODE_7 = 36,
		///     SDL_SCANCODE_8 = 37,
		///     SDL_SCANCODE_9 = 38,
		///     SDL_SCANCODE_0 = 39,
		/// 
		///     SDL_SCANCODE_RETURN = 40,
		///     SDL_SCANCODE_ESCAPE = 41,
		///     SDL_SCANCODE_BACKSPACE = 42,
		///     SDL_SCANCODE_TAB = 43,
		///     SDL_SCANCODE_SPACE = 44,
		/// 
		///     SDL_SCANCODE_MINUS = 45,
		///     SDL_SCANCODE_EQUALS = 46,
		///     SDL_SCANCODE_LEFTBRACKET = 47,
		///     SDL_SCANCODE_RIGHTBRACKET = 48,
		///     SDL_SCANCODE_BACKSLASH = 49, /**&lt; Located at the lower left of the return
		///                                   *   key on ISO keyboards and at the right end
		///                                   *   of the QWERTY row on ANSI keyboards.
		///                                   *   Produces REVERSE SOLIDUS (backslash) and
		///                                   *   VERTICAL LINE in a US layout, REVERSE
		///                                   *   SOLIDUS and VERTICAL LINE in a UK Mac
		///                                   *   layout, NUMBER SIGN and TILDE in a UK
		///                                   *   Windows layout, DOLLAR SIGN and POUND SIGN
		///                                   *   in a Swiss German layout, NUMBER SIGN and
		///                                   *   APOSTROPHE in a German layout, GRAVE
		///                                   *   ACCENT and POUND SIGN in a French Mac
		///                                   *   layout, and ASTERISK and MICRO SIGN in a
		///                                   *   French Windows layout.
		///                                   */
		///     SDL_SCANCODE_NONUSHASH = 50, /**&lt; ISO USB keyboards actually use this code
		///                                   *   instead of 49 for the same key, but all
		///                                   *   OSes I've seen treat the two codes
		///                                   *   identically. So, as an implementor, unless
		///                                   *   your keyboard generates both of those
		///                                   *   codes and your OS treats them differently,
		///                                   *   you should generate SDL_SCANCODE_BACKSLASH
		///                                   *   instead of this code. As a user, you
		///                                   *   should not rely on this code because SDL
		///                                   *   will never generate it with most (all?)
		///                                   *   keyboards.
		///                                   */
		///     SDL_SCANCODE_SEMICOLON = 51,
		///     SDL_SCANCODE_APOSTROPHE = 52,
		///     SDL_SCANCODE_GRAVE = 53, /**&lt; Located in the top left corner (on both ANSI
		///                               *   and ISO keyboards). Produces GRAVE ACCENT and
		///                               *   TILDE in a US Windows layout and in US and UK
		///                               *   Mac layouts on ANSI keyboards, GRAVE ACCENT
		///                               *   and NOT SIGN in a UK Windows layout, SECTION
		///                               *   SIGN and PLUS-MINUS SIGN in US and UK Mac
		///                               *   layouts on ISO keyboards, SECTION SIGN and
		///                               *   DEGREE SIGN in a Swiss German layout (Mac:
		///                               *   only on ISO keyboards), CIRCUMFLEX ACCENT and
		///                               *   DEGREE SIGN in a German layout (Mac: only on
		///                               *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a
		///                               *   French Windows layout, COMMERCIAL AT and
		///                               *   NUMBER SIGN in a French Mac layout on ISO
		///                               *   keyboards, and LESS-THAN SIGN and GREATER-THAN
		///                               *   SIGN in a Swiss German, German, or French Mac
		///                               *   layout on ANSI keyboards.
		///                               */
		///     SDL_SCANCODE_COMMA = 54,
		///     SDL_SCANCODE_PERIOD = 55,
		///     SDL_SCANCODE_SLASH = 56,
		/// 
		///     SDL_SCANCODE_CAPSLOCK = 57,
		/// 
		///     SDL_SCANCODE_F1 = 58,
		///     SDL_SCANCODE_F2 = 59,
		///     SDL_SCANCODE_F3 = 60,
		///     SDL_SCANCODE_F4 = 61,
		///     SDL_SCANCODE_F5 = 62,
		///     SDL_SCANCODE_F6 = 63,
		///     SDL_SCANCODE_F7 = 64,
		///     SDL_SCANCODE_F8 = 65,
		///     SDL_SCANCODE_F9 = 66,
		///     SDL_SCANCODE_F10 = 67,
		///     SDL_SCANCODE_F11 = 68,
		///     SDL_SCANCODE_F12 = 69,
		/// 
		///     SDL_SCANCODE_PRINTSCREEN = 70,
		///     SDL_SCANCODE_SCROLLLOCK = 71,
		///     SDL_SCANCODE_PAUSE = 72,
		///     SDL_SCANCODE_INSERT = 73, /**&lt; insert on PC, help on some Mac keyboards (but
		///                                    does send code 73, not 117) */
		///     SDL_SCANCODE_HOME = 74,
		///     SDL_SCANCODE_PAGEUP = 75,
		///     SDL_SCANCODE_DELETE = 76,
		///     SDL_SCANCODE_END = 77,
		///     SDL_SCANCODE_PAGEDOWN = 78,
		///     SDL_SCANCODE_RIGHT = 79,
		///     SDL_SCANCODE_LEFT = 80,
		///     SDL_SCANCODE_DOWN = 81,
		///     SDL_SCANCODE_UP = 82,
		/// 
		///     SDL_SCANCODE_NUMLOCKCLEAR = 83, /**&lt; num lock on PC, clear on Mac keyboards
		///                                      */
		///     SDL_SCANCODE_KP_DIVIDE = 84,
		///     SDL_SCANCODE_KP_MULTIPLY = 85,
		///     SDL_SCANCODE_KP_MINUS = 86,
		///     SDL_SCANCODE_KP_PLUS = 87,
		///     SDL_SCANCODE_KP_ENTER = 88,
		///     SDL_SCANCODE_KP_1 = 89,
		///     SDL_SCANCODE_KP_2 = 90,
		///     SDL_SCANCODE_KP_3 = 91,
		///     SDL_SCANCODE_KP_4 = 92,
		///     SDL_SCANCODE_KP_5 = 93,
		///     SDL_SCANCODE_KP_6 = 94,
		///     SDL_SCANCODE_KP_7 = 95,
		///     SDL_SCANCODE_KP_8 = 96,
		///     SDL_SCANCODE_KP_9 = 97,
		///     SDL_SCANCODE_KP_0 = 98,
		///     SDL_SCANCODE_KP_PERIOD = 99,
		/// 
		///     SDL_SCANCODE_NONUSBACKSLASH = 100, /**&lt; This is the additional key that ISO
		///                                         *   keyboards have over ANSI ones,
		///                                         *   located between left shift and Y.
		///                                         *   Produces GRAVE ACCENT and TILDE in a
		///                                         *   US or UK Mac layout, REVERSE SOLIDUS
		///                                         *   (backslash) and VERTICAL LINE in a
		///                                         *   US or UK Windows layout, and
		///                                         *   LESS-THAN SIGN and GREATER-THAN SIGN
		///                                         *   in a Swiss German, German, or French
		///                                         *   layout. */
		///     SDL_SCANCODE_APPLICATION = 101, /**&lt; windows contextual menu, compose */
		///     SDL_SCANCODE_POWER = 102, /**&lt; The USB document says this is a status flag,
		///                                *   not a physical key - but some Mac keyboards
		///                                *   do have a power key. */
		///     SDL_SCANCODE_KP_EQUALS = 103,
		///     SDL_SCANCODE_F13 = 104,
		///     SDL_SCANCODE_F14 = 105,
		///     SDL_SCANCODE_F15 = 106,
		///     SDL_SCANCODE_F16 = 107,
		///     SDL_SCANCODE_F17 = 108,
		///     SDL_SCANCODE_F18 = 109,
		///     SDL_SCANCODE_F19 = 110,
		///     SDL_SCANCODE_F20 = 111,
		///     SDL_SCANCODE_F21 = 112,
		///     SDL_SCANCODE_F22 = 113,
		///     SDL_SCANCODE_F23 = 114,
		///     SDL_SCANCODE_F24 = 115,
		///     SDL_SCANCODE_EXECUTE = 116,
		///     SDL_SCANCODE_HELP = 117,    /**&lt; AL Integrated Help Center */
		///     SDL_SCANCODE_MENU = 118,    /**&lt; Menu (show menu) */
		///     SDL_SCANCODE_SELECT = 119,
		///     SDL_SCANCODE_STOP = 120,    /**&lt; AC Stop */
		///     SDL_SCANCODE_AGAIN = 121,   /**&lt; AC Redo/Repeat */
		///     SDL_SCANCODE_UNDO = 122,    /**&lt; AC Undo */
		///     SDL_SCANCODE_CUT = 123,     /**&lt; AC Cut */
		///     SDL_SCANCODE_COPY = 124,    /**&lt; AC Copy */
		///     SDL_SCANCODE_PASTE = 125,   /**&lt; AC Paste */
		///     SDL_SCANCODE_FIND = 126,    /**&lt; AC Find */
		///     SDL_SCANCODE_MUTE = 127,
		///     SDL_SCANCODE_VOLUMEUP = 128,
		///     SDL_SCANCODE_VOLUMEDOWN = 129,
		/// /* not sure whether there's a reason to enable these */
		/// /*     SDL_SCANCODE_LOCKINGCAPSLOCK = 130,  */
		/// /*     SDL_SCANCODE_LOCKINGNUMLOCK = 131, */
		/// /*     SDL_SCANCODE_LOCKINGSCROLLLOCK = 132, */
		///     SDL_SCANCODE_KP_COMMA = 133,
		///     SDL_SCANCODE_KP_EQUALSAS400 = 134,
		/// 
		///     SDL_SCANCODE_INTERNATIONAL1 = 135, /**&lt; used on Asian keyboards, see
		///                                             footnotes in USB doc */
		///     SDL_SCANCODE_INTERNATIONAL2 = 136,
		///     SDL_SCANCODE_INTERNATIONAL3 = 137, /**&lt; Yen */
		///     SDL_SCANCODE_INTERNATIONAL4 = 138,
		///     SDL_SCANCODE_INTERNATIONAL5 = 139,
		///     SDL_SCANCODE_INTERNATIONAL6 = 140,
		///     SDL_SCANCODE_INTERNATIONAL7 = 141,
		///     SDL_SCANCODE_INTERNATIONAL8 = 142,
		///     SDL_SCANCODE_INTERNATIONAL9 = 143,
		///     SDL_SCANCODE_LANG1 = 144, /**&lt; Hangul/English toggle */
		///     SDL_SCANCODE_LANG2 = 145, /**&lt; Hanja conversion */
		///     SDL_SCANCODE_LANG3 = 146, /**&lt; Katakana */
		///     SDL_SCANCODE_LANG4 = 147, /**&lt; Hiragana */
		///     SDL_SCANCODE_LANG5 = 148, /**&lt; Zenkaku/Hankaku */
		///     SDL_SCANCODE_LANG6 = 149, /**&lt; reserved */
		///     SDL_SCANCODE_LANG7 = 150, /**&lt; reserved */
		///     SDL_SCANCODE_LANG8 = 151, /**&lt; reserved */
		///     SDL_SCANCODE_LANG9 = 152, /**&lt; reserved */
		/// 
		///     SDL_SCANCODE_ALTERASE = 153,    /**&lt; Erase-Eaze */
		///     SDL_SCANCODE_SYSREQ = 154,
		///     SDL_SCANCODE_CANCEL = 155,      /**&lt; AC Cancel */
		///     SDL_SCANCODE_CLEAR = 156,
		///     SDL_SCANCODE_PRIOR = 157,
		///     SDL_SCANCODE_RETURN2 = 158,
		///     SDL_SCANCODE_SEPARATOR = 159,
		///     SDL_SCANCODE_OUT = 160,
		///     SDL_SCANCODE_OPER = 161,
		///     SDL_SCANCODE_CLEARAGAIN = 162,
		///     SDL_SCANCODE_CRSEL = 163,
		///     SDL_SCANCODE_EXSEL = 164,
		/// 
		///     SDL_SCANCODE_KP_00 = 176,
		///     SDL_SCANCODE_KP_000 = 177,
		///     SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
		///     SDL_SCANCODE_DECIMALSEPARATOR = 179,
		///     SDL_SCANCODE_CURRENCYUNIT = 180,
		///     SDL_SCANCODE_CURRENCYSUBUNIT = 181,
		///     SDL_SCANCODE_KP_LEFTPAREN = 182,
		///     SDL_SCANCODE_KP_RIGHTPAREN = 183,
		///     SDL_SCANCODE_KP_LEFTBRACE = 184,
		///     SDL_SCANCODE_KP_RIGHTBRACE = 185,
		///     SDL_SCANCODE_KP_TAB = 186,
		///     SDL_SCANCODE_KP_BACKSPACE = 187,
		///     SDL_SCANCODE_KP_A = 188,
		///     SDL_SCANCODE_KP_B = 189,
		///     SDL_SCANCODE_KP_C = 190,
		///     SDL_SCANCODE_KP_D = 191,
		///     SDL_SCANCODE_KP_E = 192,
		///     SDL_SCANCODE_KP_F = 193,
		///     SDL_SCANCODE_KP_XOR = 194,
		///     SDL_SCANCODE_KP_POWER = 195,
		///     SDL_SCANCODE_KP_PERCENT = 196,
		///     SDL_SCANCODE_KP_LESS = 197,
		///     SDL_SCANCODE_KP_GREATER = 198,
		///     SDL_SCANCODE_KP_AMPERSAND = 199,
		///     SDL_SCANCODE_KP_DBLAMPERSAND = 200,
		///     SDL_SCANCODE_KP_VERTICALBAR = 201,
		///     SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
		///     SDL_SCANCODE_KP_COLON = 203,
		///     SDL_SCANCODE_KP_HASH = 204,
		///     SDL_SCANCODE_KP_SPACE = 205,
		///     SDL_SCANCODE_KP_AT = 206,
		///     SDL_SCANCODE_KP_EXCLAM = 207,
		///     SDL_SCANCODE_KP_MEMSTORE = 208,
		///     SDL_SCANCODE_KP_MEMRECALL = 209,
		///     SDL_SCANCODE_KP_MEMCLEAR = 210,
		///     SDL_SCANCODE_KP_MEMADD = 211,
		///     SDL_SCANCODE_KP_MEMSUBTRACT = 212,
		///     SDL_SCANCODE_KP_MEMMULTIPLY = 213,
		///     SDL_SCANCODE_KP_MEMDIVIDE = 214,
		///     SDL_SCANCODE_KP_PLUSMINUS = 215,
		///     SDL_SCANCODE_KP_CLEAR = 216,
		///     SDL_SCANCODE_KP_CLEARENTRY = 217,
		///     SDL_SCANCODE_KP_BINARY = 218,
		///     SDL_SCANCODE_KP_OCTAL = 219,
		///     SDL_SCANCODE_KP_DECIMAL = 220,
		///     SDL_SCANCODE_KP_HEXADECIMAL = 221,
		/// 
		///     SDL_SCANCODE_LCTRL = 224,
		///     SDL_SCANCODE_LSHIFT = 225,
		///     SDL_SCANCODE_LALT = 226, /**&lt; alt, option */
		///     SDL_SCANCODE_LGUI = 227, /**&lt; windows, command (apple), meta */
		///     SDL_SCANCODE_RCTRL = 228,
		///     SDL_SCANCODE_RSHIFT = 229,
		///     SDL_SCANCODE_RALT = 230, /**&lt; alt gr, option */
		///     SDL_SCANCODE_RGUI = 231, /**&lt; windows, command (apple), meta */
		/// 
		///     SDL_SCANCODE_MODE = 257,    /**&lt; I'm not sure if this is really not covered
		///                                  *   by any of the above, but since there's a
		///                                  *   special SDL_KMOD_MODE for it I'm adding it here
		///                                  */
		/// 
		///     /* @} *//* Usage page 0x07 */
		/// 
		///     /**
		///      *  \name Usage page 0x0C
		///      *
		///      *  These values are mapped from usage page 0x0C (USB consumer page).
		///      *
		///      *  There are way more keys in the spec than we can represent in the
		///      *  current scancode range, so pick the ones that commonly come up in
		///      *  real world usage.
		///      */
		///     /* @{ */
		/// 
		///     SDL_SCANCODE_SLEEP = 258,                   /**&lt; Sleep */
		///     SDL_SCANCODE_WAKE = 259,                    /**&lt; Wake */
		/// 
		///     SDL_SCANCODE_CHANNEL_INCREMENT = 260,       /**&lt; Channel Increment */
		///     SDL_SCANCODE_CHANNEL_DECREMENT = 261,       /**&lt; Channel Decrement */
		/// 
		///     SDL_SCANCODE_MEDIA_PLAY = 262,          /**&lt; Play */
		///     SDL_SCANCODE_MEDIA_PAUSE = 263,         /**&lt; Pause */
		///     SDL_SCANCODE_MEDIA_RECORD = 264,        /**&lt; Record */
		///     SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,  /**&lt; Fast Forward */
		///     SDL_SCANCODE_MEDIA_REWIND = 266,        /**&lt; Rewind */
		///     SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,    /**&lt; Next Track */
		///     SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268, /**&lt; Previous Track */
		///     SDL_SCANCODE_MEDIA_STOP = 269,          /**&lt; Stop */
		///     SDL_SCANCODE_MEDIA_EJECT = 270,         /**&lt; Eject */
		///     SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,    /**&lt; Play / Pause */
		///     SDL_SCANCODE_MEDIA_SELECT = 272,        /* Media Select */
		/// 
		///     SDL_SCANCODE_AC_NEW = 273,              /**&lt; AC New */
		///     SDL_SCANCODE_AC_OPEN = 274,             /**&lt; AC Open */
		///     SDL_SCANCODE_AC_CLOSE = 275,            /**&lt; AC Close */
		///     SDL_SCANCODE_AC_EXIT = 276,             /**&lt; AC Exit */
		///     SDL_SCANCODE_AC_SAVE = 277,             /**&lt; AC Save */
		///     SDL_SCANCODE_AC_PRINT = 278,            /**&lt; AC Print */
		///     SDL_SCANCODE_AC_PROPERTIES = 279,       /**&lt; AC Properties */
		/// 
		///     SDL_SCANCODE_AC_SEARCH = 280,           /**&lt; AC Search */
		///     SDL_SCANCODE_AC_HOME = 281,             /**&lt; AC Home */
		///     SDL_SCANCODE_AC_BACK = 282,             /**&lt; AC Back */
		///     SDL_SCANCODE_AC_FORWARD = 283,          /**&lt; AC Forward */
		///     SDL_SCANCODE_AC_STOP = 284,             /**&lt; AC Stop */
		///     SDL_SCANCODE_AC_REFRESH = 285,          /**&lt; AC Refresh */
		///     SDL_SCANCODE_AC_BOOKMARKS = 286,        /**&lt; AC Bookmarks */
		/// 
		///     /* @} *//* Usage page 0x0C */
		/// 
		/// 
		///     /**
		///      *  \name Mobile keys
		///      *
		///      *  These are values that are often used on mobile phones.
		///      */
		///     /* @{ */
		/// 
		///     SDL_SCANCODE_SOFTLEFT = 287, /**&lt; Usually situated below the display on phones and
		///                                       used as a multi-function feature key for selecting
		///                                       a software defined function shown on the bottom left
		///                                       of the display. */
		///     SDL_SCANCODE_SOFTRIGHT = 288, /**&lt; Usually situated below the display on phones and
		///                                        used as a multi-function feature key for selecting
		///                                        a software defined function shown on the bottom right
		///                                        of the display. */
		///     SDL_SCANCODE_CALL = 289, /**&lt; Used for accepting phone calls. */
		///     SDL_SCANCODE_ENDCALL = 290, /**&lt; Used for rejecting phone calls. */
		/// 
		///     /* @} *//* Mobile keys */
		/// 
		///     /* Add any other keys here. */
		/// 
		///     SDL_SCANCODE_RESERVED = 400,    /**&lt; 400-500 reserved for dynamic keycodes */
		/// 
		///     SDL_SCANCODE_COUNT = 512 /**&lt; not a key, just marks the number of scancodes for array bounds */
		/// 
		/// } SDL_Scancode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryScancode">CategoryScancode</see></para></misc>
		public enum SDL_Scancode
		{
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_A<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_A = 4,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_B<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_B = 5,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_C<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_C = 6,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_D<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_D = 7,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_E<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_E = 8,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F = 9,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_G<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_G = 10,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_H<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_H = 11,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_I<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_I = 12,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_J<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_J = 13,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_K<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_K = 14,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_L<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_L = 15,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_M<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_M = 16,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_N<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_N = 17,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_O<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_O = 18,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_P<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_P = 19,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_Q<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_Q = 20,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_R<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_R = 21,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_S<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_S = 22,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_T<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_T = 23,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_U<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_U = 24,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_V<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_V = 25,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_W<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_W = 26,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_X<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_X = 27,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_Y<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_Y = 28,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_Z<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_Z = 29,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_1 = 30,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_2 = 31,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_3 = 32,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_4 = 33,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_5 = 34,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_6 = 35,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_7<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_7 = 36,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_8 = 37,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_9<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_9 = 38,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_0<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_0 = 39,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RETURN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RETURN = 40,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_ESCAPE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_ESCAPE = 41,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_BACKSPACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_BACKSPACE = 42,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_TAB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_TAB = 43,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SPACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SPACE = 44,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MINUS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MINUS = 45,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_EQUALS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_EQUALS = 46,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LEFTBRACKET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LEFTBRACKET = 47,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RIGHTBRACKET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RIGHTBRACKET = 48,
			SDL_SCANCODE_BACKSLASH = 49,
			SDL_SCANCODE_NONUSHASH = 50,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SEMICOLON<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SEMICOLON = 51,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_APOSTROPHE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_APOSTROPHE = 52,
			SDL_SCANCODE_GRAVE = 53,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_COMMA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_COMMA = 54,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PERIOD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PERIOD = 55,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SLASH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SLASH = 56,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CAPSLOCK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CAPSLOCK = 57,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F1 = 58,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F2 = 59,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F3 = 60,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F4 = 61,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F5 = 62,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F6 = 63,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F7<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F7 = 64,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F8 = 65,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F9<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F9 = 66,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F10<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F10 = 67,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F11<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F11 = 68,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F12<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F12 = 69,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PRINTSCREEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PRINTSCREEN = 70,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SCROLLLOCK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SCROLLLOCK = 71,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PAUSE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PAUSE = 72,
			SDL_SCANCODE_INSERT = 73,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_HOME<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_HOME = 74,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PAGEUP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PAGEUP = 75,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_DELETE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_DELETE = 76,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_END<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_END = 77,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PAGEDOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PAGEDOWN = 78,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RIGHT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RIGHT = 79,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LEFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LEFT = 80,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_DOWN = 81,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_UP = 82,
			SDL_SCANCODE_NUMLOCKCLEAR = 83,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_DIVIDE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_DIVIDE = 84,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MULTIPLY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MULTIPLY = 85,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MINUS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MINUS = 86,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_PLUS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_PLUS = 87,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_ENTER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_ENTER = 88,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_1 = 89,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_2 = 90,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_3 = 91,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_4 = 92,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_5 = 93,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_6 = 94,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_7<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_7 = 95,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_8 = 96,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_9<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_9 = 97,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_0<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_0 = 98,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_PERIOD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_PERIOD = 99,
			SDL_SCANCODE_NONUSBACKSLASH = 100,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_APPLICATION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_APPLICATION = 101,
			SDL_SCANCODE_POWER = 102,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_EQUALS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_EQUALS = 103,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F13<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F13 = 104,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F14<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F14 = 105,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F15<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F15 = 106,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F16<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F16 = 107,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F17<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F17 = 108,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F18<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F18 = 109,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F19<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F19 = 110,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F20<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F20 = 111,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F21<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F21 = 112,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F22<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F22 = 113,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F23<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F23 = 114,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_F24<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_F24 = 115,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_EXECUTE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_EXECUTE = 116,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_HELP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_HELP = 117,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MENU<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MENU = 118,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SELECT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SELECT = 119,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_STOP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_STOP = 120,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AGAIN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AGAIN = 121,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_UNDO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_UNDO = 122,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CUT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CUT = 123,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_COPY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_COPY = 124,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PASTE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PASTE = 125,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_FIND<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_FIND = 126,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MUTE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MUTE = 127,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_VOLUMEUP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_VOLUMEUP = 128,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_VOLUMEDOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_VOLUMEDOWN = 129,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_COMMA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_COMMA = 133,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_EQUALSAS400<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_EQUALSAS400 = 134,
			SDL_SCANCODE_INTERNATIONAL1 = 135,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL2 = 136,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL3 = 137,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL4 = 138,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL5 = 139,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL6 = 140,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL7<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL7 = 141,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL8 = 142,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_INTERNATIONAL9<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_INTERNATIONAL9 = 143,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG1 = 144,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG2 = 145,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG3 = 146,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG4 = 147,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG5 = 148,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG6 = 149,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG7<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG7 = 150,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG8 = 151,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LANG9<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LANG9 = 152,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_ALTERASE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_ALTERASE = 153,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SYSREQ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SYSREQ = 154,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CANCEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CANCEL = 155,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CLEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CLEAR = 156,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_PRIOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_PRIOR = 157,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RETURN2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RETURN2 = 158,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SEPARATOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SEPARATOR = 159,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_OUT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_OUT = 160,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_OPER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_OPER = 161,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CLEARAGAIN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CLEARAGAIN = 162,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CRSEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CRSEL = 163,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_EXSEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_EXSEL = 164,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_00<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_00 = 176,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_000<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_000 = 177,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_THOUSANDSSEPARATOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_DECIMALSEPARATOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_DECIMALSEPARATOR = 179,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CURRENCYUNIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CURRENCYUNIT = 180,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CURRENCYSUBUNIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CURRENCYSUBUNIT = 181,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_LEFTPAREN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_LEFTPAREN = 182,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_RIGHTPAREN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_RIGHTPAREN = 183,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_LEFTBRACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_LEFTBRACE = 184,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_RIGHTBRACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_RIGHTBRACE = 185,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_TAB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_TAB = 186,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_BACKSPACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_BACKSPACE = 187,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_A<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_A = 188,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_B<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_B = 189,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_C<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_C = 190,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_D<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_D = 191,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_E<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_E = 192,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_F<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_F = 193,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_XOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_XOR = 194,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_POWER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_POWER = 195,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_PERCENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_PERCENT = 196,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_LESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_LESS = 197,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_GREATER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_GREATER = 198,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_AMPERSAND<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_AMPERSAND = 199,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_DBLAMPERSAND<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_DBLAMPERSAND = 200,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_VERTICALBAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_VERTICALBAR = 201,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_DBLVERTICALBAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_COLON<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_COLON = 203,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_HASH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_HASH = 204,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_SPACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_SPACE = 205,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_AT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_AT = 206,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_EXCLAM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_EXCLAM = 207,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMSTORE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMSTORE = 208,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMRECALL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMRECALL = 209,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMCLEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMCLEAR = 210,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMADD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMADD = 211,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMSUBTRACT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMSUBTRACT = 212,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMMULTIPLY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMMULTIPLY = 213,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_MEMDIVIDE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_MEMDIVIDE = 214,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_PLUSMINUS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_PLUSMINUS = 215,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_CLEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_CLEAR = 216,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_CLEARENTRY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_CLEARENTRY = 217,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_BINARY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_BINARY = 218,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_OCTAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_OCTAL = 219,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_DECIMAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_DECIMAL = 220,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_KP_HEXADECIMAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_KP_HEXADECIMAL = 221,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LCTRL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LCTRL = 224,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LSHIFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LSHIFT = 225,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LALT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LALT = 226,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_LGUI<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_LGUI = 227,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RCTRL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RCTRL = 228,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RSHIFT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RSHIFT = 229,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RALT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RALT = 230,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RGUI<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RGUI = 231,
			SDL_SCANCODE_MODE = 257,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_SLEEP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_SLEEP = 258,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_WAKE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_WAKE = 259,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CHANNEL_INCREMENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CHANNEL_INCREMENT = 260,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CHANNEL_DECREMENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CHANNEL_DECREMENT = 261,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_PLAY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_PLAY = 262,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_PAUSE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_PAUSE = 263,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_RECORD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_RECORD = 264,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_FAST_FORWARD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_REWIND<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_REWIND = 266,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_NEXT_TRACK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_PREVIOUS_TRACK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_STOP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_STOP = 269,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_EJECT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_EJECT = 270,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_PLAY_PAUSE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_MEDIA_SELECT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_MEDIA_SELECT = 272,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_NEW<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_NEW = 273,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_OPEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_OPEN = 274,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_CLOSE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_CLOSE = 275,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_EXIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_EXIT = 276,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_SAVE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_SAVE = 277,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_PRINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_PRINT = 278,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_PROPERTIES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_PROPERTIES = 279,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_SEARCH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_SEARCH = 280,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_HOME<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_HOME = 281,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_BACK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_BACK = 282,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_FORWARD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_FORWARD = 283,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_STOP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_STOP = 284,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_REFRESH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_REFRESH = 285,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_AC_BOOKMARKS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_AC_BOOKMARKS = 286,
			SDL_SCANCODE_SOFTLEFT = 287,
			SDL_SCANCODE_SOFTRIGHT = 288,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_CALL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_CALL = 289,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_ENDCALL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_ENDCALL = 290,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_RESERVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_RESERVED = 400,
			/// <summary><para>Please refer to <see cref="SDL_Scancode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SCANCODE_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SCANCODE_COUNT = 512,
		}

		// /usr/local/include/SDL3/SDL_keycode.h

		/// <summary>
		///   <para>The SDL virtual key representation.</para>
		/// </summary>
		/// <remarks>
		///   <para>Values of this type are used to represent keyboard keys using the currentlayout of the keyboard. These values include Unicode values representingthe unmodified character that would be generated by pressing the key, or an<c>SDLK_*</c> constant for those keys that do not generate characters.</para>
		///   <para>A special exception is the number keys at the top of the keyboard which mapto <see href="https://wiki.libsdl.org/SDL3/SDLK_0">SDLK_0</see>...<see href="https://wiki.libsdl.org/SDL3/SDLK_9">SDLK_9</see> on AZERTY layouts.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Keycode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keycode.h">&lt;SDL3/SDL_keycode.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_Keycode;
		/// 
		/// #define SDLK_SCANCODE_MASK          (1u&lt;&lt;30)
		/// #define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)
		/// #define SDLK_UNKNOWN                0x00000000u /* 0 */
		/// #define SDLK_RETURN                 0x0000000du /* '\r' */
		/// #define SDLK_ESCAPE                 0x0000001bu /* '\x1B' */
		/// #define SDLK_BACKSPACE              0x00000008u /* '\b' */
		/// #define SDLK_TAB                    0x00000009u /* '\t' */
		/// #define SDLK_SPACE                  0x00000020u /* ' ' */
		/// #define SDLK_EXCLAIM                0x00000021u /* '!' */
		/// #define SDLK_DBLAPOSTROPHE          0x00000022u /* '"' */
		/// #define SDLK_HASH                   0x00000023u /* '#' */
		/// #define SDLK_DOLLAR                 0x00000024u /* '$' */
		/// #define SDLK_PERCENT                0x00000025u /* '%' */
		/// #define SDLK_AMPERSAND              0x00000026u /* '&amp;' */
		/// #define SDLK_APOSTROPHE             0x00000027u /* '\'' */
		/// #define SDLK_LEFTPAREN              0x00000028u /* '(' */
		/// #define SDLK_RIGHTPAREN             0x00000029u /* ')' */
		/// #define SDLK_ASTERISK               0x0000002au /* '*' */
		/// #define SDLK_PLUS                   0x0000002bu /* '+' */
		/// #define SDLK_COMMA                  0x0000002cu /* ',' */
		/// #define SDLK_MINUS                  0x0000002du /* '-' */
		/// #define SDLK_PERIOD                 0x0000002eu /* '.' */
		/// #define SDLK_SLASH                  0x0000002fu /* '/' */
		/// #define SDLK_0                      0x00000030u /* '0' */
		/// #define SDLK_1                      0x00000031u /* '1' */
		/// #define SDLK_2                      0x00000032u /* '2' */
		/// #define SDLK_3                      0x00000033u /* '3' */
		/// #define SDLK_4                      0x00000034u /* '4' */
		/// #define SDLK_5                      0x00000035u /* '5' */
		/// #define SDLK_6                      0x00000036u /* '6' */
		/// #define SDLK_7                      0x00000037u /* '7' */
		/// #define SDLK_8                      0x00000038u /* '8' */
		/// #define SDLK_9                      0x00000039u /* '9' */
		/// #define SDLK_COLON                  0x0000003au /* ':' */
		/// #define SDLK_SEMICOLON              0x0000003bu /* ';' */
		/// #define SDLK_LESS                   0x0000003cu /* '&lt;' */
		/// #define SDLK_EQUALS                 0x0000003du /* '=' */
		/// #define SDLK_GREATER                0x0000003eu /* '&gt;' */
		/// #define SDLK_QUESTION               0x0000003fu /* '?' */
		/// #define SDLK_AT                     0x00000040u /* '@' */
		/// #define SDLK_LEFTBRACKET            0x0000005bu /* '[' */
		/// #define SDLK_BACKSLASH              0x0000005cu /* '\\' */
		/// #define SDLK_RIGHTBRACKET           0x0000005du /* ']' */
		/// #define SDLK_CARET                  0x0000005eu /* '^' */
		/// #define SDLK_UNDERSCORE             0x0000005fu /* '_' */
		/// #define SDLK_GRAVE                  0x00000060u /* '`' */
		/// #define SDLK_A                      0x00000061u /* 'a' */
		/// #define SDLK_B                      0x00000062u /* 'b' */
		/// #define SDLK_C                      0x00000063u /* 'c' */
		/// #define SDLK_D                      0x00000064u /* 'd' */
		/// #define SDLK_E                      0x00000065u /* 'e' */
		/// #define SDLK_F                      0x00000066u /* 'f' */
		/// #define SDLK_G                      0x00000067u /* 'g' */
		/// #define SDLK_H                      0x00000068u /* 'h' */
		/// #define SDLK_I                      0x00000069u /* 'i' */
		/// #define SDLK_J                      0x0000006au /* 'j' */
		/// #define SDLK_K                      0x0000006bu /* 'k' */
		/// #define SDLK_L                      0x0000006cu /* 'l' */
		/// #define SDLK_M                      0x0000006du /* 'm' */
		/// #define SDLK_N                      0x0000006eu /* 'n' */
		/// #define SDLK_O                      0x0000006fu /* 'o' */
		/// #define SDLK_P                      0x00000070u /* 'p' */
		/// #define SDLK_Q                      0x00000071u /* 'q' */
		/// #define SDLK_R                      0x00000072u /* 'r' */
		/// #define SDLK_S                      0x00000073u /* 's' */
		/// #define SDLK_T                      0x00000074u /* 't' */
		/// #define SDLK_U                      0x00000075u /* 'u' */
		/// #define SDLK_V                      0x00000076u /* 'v' */
		/// #define SDLK_W                      0x00000077u /* 'w' */
		/// #define SDLK_X                      0x00000078u /* 'x' */
		/// #define SDLK_Y                      0x00000079u /* 'y' */
		/// #define SDLK_Z                      0x0000007au /* 'z' */
		/// #define SDLK_LEFTBRACE              0x0000007bu /* '{' */
		/// #define SDLK_PIPE                   0x0000007cu /* '|' */
		/// #define SDLK_RIGHTBRACE             0x0000007du /* '}' */
		/// #define SDLK_TILDE                  0x0000007eu /* '~' */
		/// #define SDLK_DELETE                 0x0000007fu /* '\x7F' */
		/// #define SDLK_PLUSMINUS              0x000000b1u /* '\xB1' */
		/// #define SDLK_CAPSLOCK               0x40000039u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK) */
		/// #define SDLK_F1                     0x4000003au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1) */
		/// #define SDLK_F2                     0x4000003bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2) */
		/// #define SDLK_F3                     0x4000003cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3) */
		/// #define SDLK_F4                     0x4000003du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4) */
		/// #define SDLK_F5                     0x4000003eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5) */
		/// #define SDLK_F6                     0x4000003fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6) */
		/// #define SDLK_F7                     0x40000040u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7) */
		/// #define SDLK_F8                     0x40000041u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8) */
		/// #define SDLK_F9                     0x40000042u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9) */
		/// #define SDLK_F10                    0x40000043u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10) */
		/// #define SDLK_F11                    0x40000044u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11) */
		/// #define SDLK_F12                    0x40000045u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12) */
		/// #define SDLK_PRINTSCREEN            0x40000046u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN) */
		/// #define SDLK_SCROLLLOCK             0x40000047u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK) */
		/// #define SDLK_PAUSE                  0x40000048u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE) */
		/// #define SDLK_INSERT                 0x40000049u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT) */
		/// #define SDLK_HOME                   0x4000004au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME) */
		/// #define SDLK_PAGEUP                 0x4000004bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP) */
		/// #define SDLK_END                    0x4000004du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END) */
		/// #define SDLK_PAGEDOWN               0x4000004eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN) */
		/// #define SDLK_RIGHT                  0x4000004fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT) */
		/// #define SDLK_LEFT                   0x40000050u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT) */
		/// #define SDLK_DOWN                   0x40000051u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN) */
		/// #define SDLK_UP                     0x40000052u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP) */
		/// #define SDLK_NUMLOCKCLEAR           0x40000053u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR) */
		/// #define SDLK_KP_DIVIDE              0x40000054u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE) */
		/// #define SDLK_KP_MULTIPLY            0x40000055u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY) */
		/// #define SDLK_KP_MINUS               0x40000056u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS) */
		/// #define SDLK_KP_PLUS                0x40000057u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS) */
		/// #define SDLK_KP_ENTER               0x40000058u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER) */
		/// #define SDLK_KP_1                   0x40000059u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1) */
		/// #define SDLK_KP_2                   0x4000005au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2) */
		/// #define SDLK_KP_3                   0x4000005bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3) */
		/// #define SDLK_KP_4                   0x4000005cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4) */
		/// #define SDLK_KP_5                   0x4000005du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5) */
		/// #define SDLK_KP_6                   0x4000005eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6) */
		/// #define SDLK_KP_7                   0x4000005fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7) */
		/// #define SDLK_KP_8                   0x40000060u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8) */
		/// #define SDLK_KP_9                   0x40000061u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9) */
		/// #define SDLK_KP_0                   0x40000062u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0) */
		/// #define SDLK_KP_PERIOD              0x40000063u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD) */
		/// #define SDLK_APPLICATION            0x40000065u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION) */
		/// #define SDLK_POWER                  0x40000066u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER) */
		/// #define SDLK_KP_EQUALS              0x40000067u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS) */
		/// #define SDLK_F13                    0x40000068u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13) */
		/// #define SDLK_F14                    0x40000069u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14) */
		/// #define SDLK_F15                    0x4000006au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15) */
		/// #define SDLK_F16                    0x4000006bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16) */
		/// #define SDLK_F17                    0x4000006cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17) */
		/// #define SDLK_F18                    0x4000006du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18) */
		/// #define SDLK_F19                    0x4000006eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19) */
		/// #define SDLK_F20                    0x4000006fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20) */
		/// #define SDLK_F21                    0x40000070u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21) */
		/// #define SDLK_F22                    0x40000071u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22) */
		/// #define SDLK_F23                    0x40000072u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23) */
		/// #define SDLK_F24                    0x40000073u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24) */
		/// #define SDLK_EXECUTE                0x40000074u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE) */
		/// #define SDLK_HELP                   0x40000075u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP) */
		/// #define SDLK_MENU                   0x40000076u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU) */
		/// #define SDLK_SELECT                 0x40000077u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT) */
		/// #define SDLK_STOP                   0x40000078u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP) */
		/// #define SDLK_AGAIN                  0x40000079u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN) */
		/// #define SDLK_UNDO                   0x4000007au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO) */
		/// #define SDLK_CUT                    0x4000007bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT) */
		/// #define SDLK_COPY                   0x4000007cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY) */
		/// #define SDLK_PASTE                  0x4000007du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE) */
		/// #define SDLK_FIND                   0x4000007eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND) */
		/// #define SDLK_MUTE                   0x4000007fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE) */
		/// #define SDLK_VOLUMEUP               0x40000080u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP) */
		/// #define SDLK_VOLUMEDOWN             0x40000081u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN) */
		/// #define SDLK_KP_COMMA               0x40000085u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA) */
		/// #define SDLK_KP_EQUALSAS400         0x40000086u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400) */
		/// #define SDLK_ALTERASE               0x40000099u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE) */
		/// #define SDLK_SYSREQ                 0x4000009au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ) */
		/// #define SDLK_CANCEL                 0x4000009bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL) */
		/// #define SDLK_CLEAR                  0x4000009cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR) */
		/// #define SDLK_PRIOR                  0x4000009du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR) */
		/// #define SDLK_RETURN2                0x4000009eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2) */
		/// #define SDLK_SEPARATOR              0x4000009fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR) */
		/// #define SDLK_OUT                    0x400000a0u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT) */
		/// #define SDLK_OPER                   0x400000a1u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER) */
		/// #define SDLK_CLEARAGAIN             0x400000a2u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN) */
		/// #define SDLK_CRSEL                  0x400000a3u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL) */
		/// #define SDLK_EXSEL                  0x400000a4u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL) */
		/// #define SDLK_KP_00                  0x400000b0u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00) */
		/// #define SDLK_KP_000                 0x400000b1u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000) */
		/// #define SDLK_THOUSANDSSEPARATOR     0x400000b2u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR) */
		/// #define SDLK_DECIMALSEPARATOR       0x400000b3u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR) */
		/// #define SDLK_CURRENCYUNIT           0x400000b4u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT) */
		/// #define SDLK_CURRENCYSUBUNIT        0x400000b5u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT) */
		/// #define SDLK_KP_LEFTPAREN           0x400000b6u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN) */
		/// #define SDLK_KP_RIGHTPAREN          0x400000b7u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN) */
		/// #define SDLK_KP_LEFTBRACE           0x400000b8u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE) */
		/// #define SDLK_KP_RIGHTBRACE          0x400000b9u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE) */
		/// #define SDLK_KP_TAB                 0x400000bau /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB) */
		/// #define SDLK_KP_BACKSPACE           0x400000bbu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE) */
		/// #define SDLK_KP_A                   0x400000bcu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A) */
		/// #define SDLK_KP_B                   0x400000bdu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B) */
		/// #define SDLK_KP_C                   0x400000beu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C) */
		/// #define SDLK_KP_D                   0x400000bfu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D) */
		/// #define SDLK_KP_E                   0x400000c0u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E) */
		/// #define SDLK_KP_F                   0x400000c1u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F) */
		/// #define SDLK_KP_XOR                 0x400000c2u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR) */
		/// #define SDLK_KP_POWER               0x400000c3u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER) */
		/// #define SDLK_KP_PERCENT             0x400000c4u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT) */
		/// #define SDLK_KP_LESS                0x400000c5u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS) */
		/// #define SDLK_KP_GREATER             0x400000c6u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER) */
		/// #define SDLK_KP_AMPERSAND           0x400000c7u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND) */
		/// #define SDLK_KP_DBLAMPERSAND        0x400000c8u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND) */
		/// #define SDLK_KP_VERTICALBAR         0x400000c9u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR) */
		/// #define SDLK_KP_DBLVERTICALBAR      0x400000cau /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR) */
		/// #define SDLK_KP_COLON               0x400000cbu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON) */
		/// #define SDLK_KP_HASH                0x400000ccu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH) */
		/// #define SDLK_KP_SPACE               0x400000cdu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE) */
		/// #define SDLK_KP_AT                  0x400000ceu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT) */
		/// #define SDLK_KP_EXCLAM              0x400000cfu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM) */
		/// #define SDLK_KP_MEMSTORE            0x400000d0u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE) */
		/// #define SDLK_KP_MEMRECALL           0x400000d1u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL) */
		/// #define SDLK_KP_MEMCLEAR            0x400000d2u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR) */
		/// #define SDLK_KP_MEMADD              0x400000d3u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD) */
		/// #define SDLK_KP_MEMSUBTRACT         0x400000d4u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT) */
		/// #define SDLK_KP_MEMMULTIPLY         0x400000d5u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY) */
		/// #define SDLK_KP_MEMDIVIDE           0x400000d6u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE) */
		/// #define SDLK_KP_PLUSMINUS           0x400000d7u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS) */
		/// #define SDLK_KP_CLEAR               0x400000d8u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR) */
		/// #define SDLK_KP_CLEARENTRY          0x400000d9u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY) */
		/// #define SDLK_KP_BINARY              0x400000dau /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY) */
		/// #define SDLK_KP_OCTAL               0x400000dbu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL) */
		/// #define SDLK_KP_DECIMAL             0x400000dcu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL) */
		/// #define SDLK_KP_HEXADECIMAL         0x400000ddu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL) */
		/// #define SDLK_LCTRL                  0x400000e0u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL) */
		/// #define SDLK_LSHIFT                 0x400000e1u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT) */
		/// #define SDLK_LALT                   0x400000e2u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT) */
		/// #define SDLK_LGUI                   0x400000e3u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI) */
		/// #define SDLK_RCTRL                  0x400000e4u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL) */
		/// #define SDLK_RSHIFT                 0x400000e5u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT) */
		/// #define SDLK_RALT                   0x400000e6u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT) */
		/// #define SDLK_RGUI                   0x400000e7u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI) */
		/// #define SDLK_MODE                   0x40000101u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE) */
		/// #define SDLK_SLEEP                  0x40000102u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP) */
		/// #define SDLK_WAKE                   0x40000103u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WAKE) */
		/// #define SDLK_CHANNEL_INCREMENT      0x40000104u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_INCREMENT) */
		/// #define SDLK_CHANNEL_DECREMENT      0x40000105u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_DECREMENT) */
		/// #define SDLK_MEDIA_PLAY             0x40000106u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY) */
		/// #define SDLK_MEDIA_PAUSE            0x40000107u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PAUSE) */
		/// #define SDLK_MEDIA_RECORD           0x40000108u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_RECORD) */
		/// #define SDLK_MEDIA_FAST_FORWARD     0x40000109u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_FAST_FORWARD) */
		/// #define SDLK_MEDIA_REWIND           0x4000010au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_REWIND) */
		/// #define SDLK_MEDIA_NEXT_TRACK       0x4000010bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_NEXT_TRACK) */
		/// #define SDLK_MEDIA_PREVIOUS_TRACK   0x4000010cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PREVIOUS_TRACK) */
		/// #define SDLK_MEDIA_STOP             0x4000010du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_STOP) */
		/// #define SDLK_MEDIA_EJECT            0x4000010eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_EJECT) */
		/// #define SDLK_MEDIA_PLAY_PAUSE       0x4000010fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY_PAUSE) */
		/// #define SDLK_MEDIA_SELECT           0x40000110u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_SELECT) */
		/// #define SDLK_AC_NEW                 0x40000111u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_NEW) */
		/// #define SDLK_AC_OPEN                0x40000112u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_OPEN) */
		/// #define SDLK_AC_CLOSE               0x40000113u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_CLOSE) */
		/// #define SDLK_AC_EXIT                0x40000114u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_EXIT) */
		/// #define SDLK_AC_SAVE                0x40000115u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SAVE) */
		/// #define SDLK_AC_PRINT               0x40000116u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PRINT) */
		/// #define SDLK_AC_PROPERTIES          0x40000117u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PROPERTIES) */
		/// #define SDLK_AC_SEARCH              0x40000118u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH) */
		/// #define SDLK_AC_HOME                0x40000119u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME) */
		/// #define SDLK_AC_BACK                0x4000011au /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK) */
		/// #define SDLK_AC_FORWARD             0x4000011bu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD) */
		/// #define SDLK_AC_STOP                0x4000011cu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP) */
		/// #define SDLK_AC_REFRESH             0x4000011du /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH) */
		/// #define SDLK_AC_BOOKMARKS           0x4000011eu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS) */
		/// #define SDLK_SOFTLEFT               0x4000011fu /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTLEFT) */
		/// #define SDLK_SOFTRIGHT              0x40000120u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTRIGHT) */
		/// #define SDLK_CALL                   0x40000121u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALL) */
		/// #define SDLK_ENDCALL                0x40000122u /* SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ENDCALL) */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeycode">CategoryKeycode</see></para></misc>
		public enum SDL_Keycode : uint
		{
			SDLK_SCANCODE_MASK = 0x40000000,
			SDLK_UNKNOWN = 0x00000000u,
			SDLK_RETURN = 0x0000000du,
			SDLK_ESCAPE = 0x0000001bu,
			SDLK_BACKSPACE = 0x00000008u,
			SDLK_TAB = 0x00000009u,
			SDLK_SPACE = 0x00000020u,
			SDLK_EXCLAIM = 0x00000021u,
			SDLK_DBLAPOSTROPHE = 0x00000022u,
			SDLK_HASH = 0x00000023u,
			SDLK_DOLLAR = 0x00000024u,
			SDLK_PERCENT = 0x00000025u,
			SDLK_AMPERSAND = 0x00000026u,
			SDLK_APOSTROPHE = 0x00000027u,
			SDLK_LEFTPAREN = 0x00000028u,
			SDLK_RIGHTPAREN = 0x00000029u,
			SDLK_ASTERISK = 0x0000002au,
			SDLK_PLUS = 0x0000002bu,
			SDLK_COMMA = 0x0000002cu,
			SDLK_MINUS = 0x0000002du,
			SDLK_PERIOD = 0x0000002eu,
			SDLK_SLASH = 0x0000002fu,
			SDLK_0 = 0x00000030u,
			SDLK_1 = 0x00000031u,
			SDLK_2 = 0x00000032u,
			SDLK_3 = 0x00000033u,
			SDLK_4 = 0x00000034u,
			SDLK_5 = 0x00000035u,
			SDLK_6 = 0x00000036u,
			SDLK_7 = 0x00000037u,
			SDLK_8 = 0x00000038u,
			SDLK_9 = 0x00000039u,
			SDLK_COLON = 0x0000003au,
			SDLK_SEMICOLON = 0x0000003bu,
			SDLK_LESS = 0x0000003cu,
			SDLK_EQUALS = 0x0000003du,
			SDLK_GREATER = 0x0000003eu,
			SDLK_QUESTION = 0x0000003fu,
			SDLK_AT = 0x00000040u,
			SDLK_LEFTBRACKET = 0x0000005bu,
			SDLK_BACKSLASH = 0x0000005cu,
			SDLK_RIGHTBRACKET = 0x0000005du,
			SDLK_CARET = 0x0000005eu,
			SDLK_UNDERSCORE = 0x0000005fu,
			SDLK_GRAVE = 0x00000060u,
			SDLK_A = 0x00000061u,
			SDLK_B = 0x00000062u,
			SDLK_C = 0x00000063u,
			SDLK_D = 0x00000064u,
			SDLK_E = 0x00000065u,
			SDLK_F = 0x00000066u,
			SDLK_G = 0x00000067u,
			SDLK_H = 0x00000068u,
			SDLK_I = 0x00000069u,
			SDLK_J = 0x0000006au,
			SDLK_K = 0x0000006bu,
			SDLK_L = 0x0000006cu,
			SDLK_M = 0x0000006du,
			SDLK_N = 0x0000006eu,
			SDLK_O = 0x0000006fu,
			SDLK_P = 0x00000070u,
			SDLK_Q = 0x00000071u,
			SDLK_R = 0x00000072u,
			SDLK_S = 0x00000073u,
			SDLK_T = 0x00000074u,
			SDLK_U = 0x00000075u,
			SDLK_V = 0x00000076u,
			SDLK_W = 0x00000077u,
			SDLK_X = 0x00000078u,
			SDLK_Y = 0x00000079u,
			SDLK_Z = 0x0000007au,
			SDLK_LEFTBRACE = 0x0000007bu,
			SDLK_PIPE = 0x0000007cu,
			SDLK_RIGHTBRACE = 0x0000007du,
			SDLK_TILDE = 0x0000007eu,
			SDLK_DELETE = 0x0000007fu,
			SDLK_PLUSMINUS = 0x000000b1u,
			SDLK_CAPSLOCK = 0x40000039u,
			SDLK_F1 = 0x4000003au,
			SDLK_F2 = 0x4000003bu,
			SDLK_F3 = 0x4000003cu,
			SDLK_F4 = 0x4000003du,
			SDLK_F5 = 0x4000003eu,
			SDLK_F6 = 0x4000003fu,
			SDLK_F7 = 0x40000040u,
			SDLK_F8 = 0x40000041u,
			SDLK_F9 = 0x40000042u,
			SDLK_F10 = 0x40000043u,
			SDLK_F11 = 0x40000044u,
			SDLK_F12 = 0x40000045u,
			SDLK_PRINTSCREEN = 0x40000046u,
			SDLK_SCROLLLOCK = 0x40000047u,
			SDLK_PAUSE = 0x40000048u,
			SDLK_INSERT = 0x40000049u,
			SDLK_HOME = 0x4000004au,
			SDLK_PAGEUP = 0x4000004bu,
			SDLK_END = 0x4000004du,
			SDLK_PAGEDOWN = 0x4000004eu,
			SDLK_RIGHT = 0x4000004fu,
			SDLK_LEFT = 0x40000050u,
			SDLK_DOWN = 0x40000051u,
			SDLK_UP = 0x40000052u,
			SDLK_NUMLOCKCLEAR = 0x40000053u,
			SDLK_KP_DIVIDE = 0x40000054u,
			SDLK_KP_MULTIPLY = 0x40000055u,
			SDLK_KP_MINUS = 0x40000056u,
			SDLK_KP_PLUS = 0x40000057u,
			SDLK_KP_ENTER = 0x40000058u,
			SDLK_KP_1 = 0x40000059u,
			SDLK_KP_2 = 0x4000005au,
			SDLK_KP_3 = 0x4000005bu,
			SDLK_KP_4 = 0x4000005cu,
			SDLK_KP_5 = 0x4000005du,
			SDLK_KP_6 = 0x4000005eu,
			SDLK_KP_7 = 0x4000005fu,
			SDLK_KP_8 = 0x40000060u,
			SDLK_KP_9 = 0x40000061u,
			SDLK_KP_0 = 0x40000062u,
			SDLK_KP_PERIOD = 0x40000063u,
			SDLK_APPLICATION = 0x40000065u,
			SDLK_POWER = 0x40000066u,
			SDLK_KP_EQUALS = 0x40000067u,
			SDLK_F13 = 0x40000068u,
			SDLK_F14 = 0x40000069u,
			SDLK_F15 = 0x4000006au,
			SDLK_F16 = 0x4000006bu,
			SDLK_F17 = 0x4000006cu,
			SDLK_F18 = 0x4000006du,
			SDLK_F19 = 0x4000006eu,
			SDLK_F20 = 0x4000006fu,
			SDLK_F21 = 0x40000070u,
			SDLK_F22 = 0x40000071u,
			SDLK_F23 = 0x40000072u,
			SDLK_F24 = 0x40000073u,
			SDLK_EXECUTE = 0x40000074u,
			SDLK_HELP = 0x40000075u,
			SDLK_MENU = 0x40000076u,
			SDLK_SELECT = 0x40000077u,
			SDLK_STOP = 0x40000078u,
			SDLK_AGAIN = 0x40000079u,
			SDLK_UNDO = 0x4000007au,
			SDLK_CUT = 0x4000007bu,
			SDLK_COPY = 0x4000007cu,
			SDLK_PASTE = 0x4000007du,
			SDLK_FIND = 0x4000007eu,
			SDLK_MUTE = 0x4000007fu,
			SDLK_VOLUMEUP = 0x40000080u,
			SDLK_VOLUMEDOWN = 0x40000081u,
			SDLK_KP_COMMA = 0x40000085u,
			SDLK_KP_EQUALSAS400 = 0x40000086u,
			SDLK_ALTERASE = 0x40000099u,
			SDLK_SYSREQ = 0x4000009au,
			SDLK_CANCEL = 0x4000009bu,
			SDLK_CLEAR = 0x4000009cu,
			SDLK_PRIOR = 0x4000009du,
			SDLK_RETURN2 = 0x4000009eu,
			SDLK_SEPARATOR = 0x4000009fu,
			SDLK_OUT = 0x400000a0u,
			SDLK_OPER = 0x400000a1u,
			SDLK_CLEARAGAIN = 0x400000a2u,
			SDLK_CRSEL = 0x400000a3u,
			SDLK_EXSEL = 0x400000a4u,
			SDLK_KP_00 = 0x400000b0u,
			SDLK_KP_000 = 0x400000b1u,
			SDLK_THOUSANDSSEPARATOR = 0x400000b2u,
			SDLK_DECIMALSEPARATOR = 0x400000b3u,
			SDLK_CURRENCYUNIT = 0x400000b4u,
			SDLK_CURRENCYSUBUNIT = 0x400000b5u,
			SDLK_KP_LEFTPAREN = 0x400000b6u,
			SDLK_KP_RIGHTPAREN = 0x400000b7u,
			SDLK_KP_LEFTBRACE = 0x400000b8u,
			SDLK_KP_RIGHTBRACE = 0x400000b9u,
			SDLK_KP_TAB = 0x400000bau,
			SDLK_KP_BACKSPACE = 0x400000bbu,
			SDLK_KP_A = 0x400000bcu,
			SDLK_KP_B = 0x400000bdu,
			SDLK_KP_C = 0x400000beu,
			SDLK_KP_D = 0x400000bfu,
			SDLK_KP_E = 0x400000c0u,
			SDLK_KP_F = 0x400000c1u,
			SDLK_KP_XOR = 0x400000c2u,
			SDLK_KP_POWER = 0x400000c3u,
			SDLK_KP_PERCENT = 0x400000c4u,
			SDLK_KP_LESS = 0x400000c5u,
			SDLK_KP_GREATER = 0x400000c6u,
			SDLK_KP_AMPERSAND = 0x400000c7u,
			SDLK_KP_DBLAMPERSAND = 0x400000c8u,
			SDLK_KP_VERTICALBAR = 0x400000c9u,
			SDLK_KP_DBLVERTICALBAR = 0x400000cau,
			SDLK_KP_COLON = 0x400000cbu,
			SDLK_KP_HASH = 0x400000ccu,
			SDLK_KP_SPACE = 0x400000cdu,
			SDLK_KP_AT = 0x400000ceu,
			SDLK_KP_EXCLAM = 0x400000cfu,
			SDLK_KP_MEMSTORE = 0x400000d0u,
			SDLK_KP_MEMRECALL = 0x400000d1u,
			SDLK_KP_MEMCLEAR = 0x400000d2u,
			SDLK_KP_MEMADD = 0x400000d3u,
			SDLK_KP_MEMSUBTRACT = 0x400000d4u,
			SDLK_KP_MEMMULTIPLY = 0x400000d5u,
			SDLK_KP_MEMDIVIDE = 0x400000d6u,
			SDLK_KP_PLUSMINUS = 0x400000d7u,
			SDLK_KP_CLEAR = 0x400000d8u,
			SDLK_KP_CLEARENTRY = 0x400000d9u,
			SDLK_KP_BINARY = 0x400000dau,
			SDLK_KP_OCTAL = 0x400000dbu,
			SDLK_KP_DECIMAL = 0x400000dcu,
			SDLK_KP_HEXADECIMAL = 0x400000ddu,
			SDLK_LCTRL = 0x400000e0u,
			SDLK_LSHIFT = 0x400000e1u,
			SDLK_LALT = 0x400000e2u,
			SDLK_LGUI = 0x400000e3u,
			SDLK_RCTRL = 0x400000e4u,
			SDLK_RSHIFT = 0x400000e5u,
			SDLK_RALT = 0x400000e6u,
			SDLK_RGUI = 0x400000e7u,
			SDLK_MODE = 0x40000101u,
			SDLK_SLEEP = 0x40000102u,
			SDLK_WAKE = 0x40000103u,
			SDLK_CHANNEL_INCREMENT = 0x40000104u,
			SDLK_CHANNEL_DECREMENT = 0x40000105u,
			SDLK_MEDIA_PLAY = 0x40000106u,
			SDLK_MEDIA_PAUSE = 0x40000107u,
			SDLK_MEDIA_RECORD = 0x40000108u,
			SDLK_MEDIA_FAST_FORWARD = 0x40000109u,
			SDLK_MEDIA_REWIND = 0x4000010au,
			SDLK_MEDIA_NEXT_TRACK = 0x4000010bu,
			SDLK_MEDIA_PREVIOUS_TRACK = 0x4000010cu,
			SDLK_MEDIA_STOP = 0x4000010du,
			SDLK_MEDIA_EJECT = 0x4000010eu,
			SDLK_MEDIA_PLAY_PAUSE = 0x4000010fu,
			SDLK_MEDIA_SELECT = 0x40000110u,
			SDLK_AC_NEW = 0x40000111u,
			SDLK_AC_OPEN = 0x40000112u,
			SDLK_AC_CLOSE = 0x40000113u,
			SDLK_AC_EXIT = 0x40000114u,
			SDLK_AC_SAVE = 0x40000115u,
			SDLK_AC_PRINT = 0x40000116u,
			SDLK_AC_PROPERTIES = 0x40000117u,
			SDLK_AC_SEARCH = 0x40000118u,
			SDLK_AC_HOME = 0x40000119u,
			SDLK_AC_BACK = 0x4000011au,
			SDLK_AC_FORWARD = 0x4000011bu,
			SDLK_AC_STOP = 0x4000011cu,
			SDLK_AC_REFRESH = 0x4000011du,
			SDLK_AC_BOOKMARKS = 0x4000011eu,
			SDLK_SOFTLEFT = 0x4000011fu,
			SDLK_SOFTRIGHT = 0x40000120u,
			SDLK_CALL = 0x40000121u,
			SDLK_ENDCALL = 0x40000122u,
		}

		/// <summary>
		///   <para>Valid key modifiers (possibly OR'd together).</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Keymod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keycode.h">&lt;SDL3/SDL_keycode.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint16 SDL_Keymod;
		/// 
		/// #define SDL_KMOD_NONE   0x0000u /**&lt; no modifier is applicable. */
		/// #define SDL_KMOD_LSHIFT 0x0001u /**&lt; the left Shift key is down. */
		/// #define SDL_KMOD_RSHIFT 0x0002u /**&lt; the right Shift key is down. */
		/// #define SDL_KMOD_LCTRL  0x0040u /**&lt; the left Ctrl (Control) key is down. */
		/// #define SDL_KMOD_RCTRL  0x0080u /**&lt; the right Ctrl (Control) key is down. */
		/// #define SDL_KMOD_LALT   0x0100u /**&lt; the left Alt key is down. */
		/// #define SDL_KMOD_RALT   0x0200u /**&lt; the right Alt key is down. */
		/// #define SDL_KMOD_LGUI   0x0400u /**&lt; the left GUI key (often the Windows key) is down. */
		/// #define SDL_KMOD_RGUI   0x0800u /**&lt; the right GUI key (often the Windows key) is down. */
		/// #define SDL_KMOD_NUM    0x1000u /**&lt; the Num Lock key (may be located on an extended keypad) is down. */
		/// #define SDL_KMOD_CAPS   0x2000u /**&lt; the Caps Lock key is down. */
		/// #define SDL_KMOD_MODE   0x4000u /**&lt; the !AltGr key is down. */
		/// #define SDL_KMOD_SCROLL 0x8000u /**&lt; the Scroll Lock key is down. */
		/// #define SDL_KMOD_CTRL   (SDL_KMOD_LCTRL | SDL_KMOD_RCTRL)   /**&lt; Any Ctrl key is down. */
		/// #define SDL_KMOD_SHIFT  (SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT) /**&lt; Any Shift key is down. */
		/// #define SDL_KMOD_ALT    (SDL_KMOD_LALT | SDL_KMOD_RALT)     /**&lt; Any Alt key is down. */
		/// #define SDL_KMOD_GUI    (SDL_KMOD_LGUI | SDL_KMOD_RGUI)     /**&lt; Any GUI key is down. */
		/// 
		/// #endif /* SDL_keycode_h_ */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeycode">CategoryKeycode</see></para></misc>
		[Flags]
		public enum SDL_Keymod : ushort
		{
			SDL_KMOD_NONE = 0x0000,
			SDL_KMOD_LSHIFT = 0x0001,
			SDL_KMOD_RSHIFT = 0x0002,
			SDL_KMOD_LCTRL = 0x0040,
			SDL_KMOD_RCTRL = 0x0080,
			SDL_KMOD_LALT = 0x0100,
			SDL_KMOD_RALT = 0x0200,
			SDL_KMOD_LGUI = 0x0400,
			SDL_KMOD_RGUI = 0x0800,
			SDL_KMOD_NUM = 0x1000,
			SDL_KMOD_CAPS = 0x2000,
			SDL_KMOD_MODE = 0x4000,
			SDL_KMOD_SCROLL = 0x8000,
			SDL_KMOD_CTRL = SDL_KMOD_LCTRL | SDL_KMOD_RCTRL,
			SDL_KMOD_SHIFT = SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT,
			SDL_KMOD_ALT = SDL_KMOD_RALT | SDL_KMOD_LALT,
			SDL_KMOD_GUI = SDL_KMOD_RGUI | SDL_KMOD_LGUI,
		}

		// /usr/local/include/SDL3/SDL_keyboard.h

		/// <summary>
		///   <para>Return whether a keyboard is currently connected.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if a keyboard is connected, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetKeyboards" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasKeyboard<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasKeyboard(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasKeyboard();

		/// <summary>
		///   <para>Get a list of currently connected keyboards.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of keyboards returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_KeyboardID" /> *) Returns a 0 terminated array ofkeyboards instance IDs or NULL on failure; call<see cref="SDL_GetError" />() for more information. This should be freedwith <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that this will include any device or virtual driver that includeskeyboard functionality, including some mice, KVM switches, motherboardpower buttons, etc. You should wait for input from a device before youconsider it actively in use.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyboardNameForID" />
		/// <seealso cref="SDL_HasKeyboard" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyboards<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_KeyboardID * SDL_GetKeyboards(int *count);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetKeyboards(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetKeyboardNameForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetKeyboardNameForID(uint instance_id);
		/// <summary>
		///   <para>Get the name of a keyboard.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the keyboard instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected keyboard or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns "" if the keyboard doesn't have a name.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyboards" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyboardNameForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public static string SDL_GetKeyboardNameForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetKeyboardNameForID(instance_id));
		}

		/// <summary>
		///   <para>Query the window which currently has keyboard focus.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window with keyboard focus.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyboardFocus<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetKeyboardFocus(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetKeyboardFocus();

		/// <summary>
		///   <para>Get a snapshot of the current state of the keyboard.</para>
		/// </summary>
		/// <param name="numkeys">
		///   <para> if non-NULL, receives the length of the returned array. </para>
		/// </param>
		/// <returns>
		///   <para>(const bool *) Returns a pointer to an array of key states.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pointer returned is a pointer to an internal SDL array. It will bevalid for the whole lifetime of the application and should not be freed bythe caller.</para>
		///   <para>A array element with a value of true means that the key is pressed and avalue of false means that it is not. Indexes into this array are obtainedby using <see cref="SDL_Scancode" /> values.</para>
		///   <para>Use <see cref="SDL_PumpEvents" />() to update the state array.</para>
		///   <para>This function gives you the current state after all events have beenprocessed, so if a key or button has been pressed and released before youprocess events, then the pressed state will never show up in the<see cref="SDL_GetKeyboardState" />() calls.</para>
		///   <para>Note: This function doesn't take into account whether shift has beenpressed or not.</para>
		/// </remarks>
		/// <seealso cref="SDL_PumpEvents" />
		/// <seealso cref="SDL_ResetKeyboard" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyboardState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>const bool * SDL_GetKeyboardState(int *numkeys);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetKeyboardState(out int numkeys);

		/// <summary>
		///   <para>Clear the state of the keyboard.</para>
		/// </summary>
		/// <remarks>
		///   <para>This function will generate key up events for all pressed keys.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyboardState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResetKeyboard<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ResetKeyboard(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ResetKeyboard();

		/// <summary>
		///   <para>Get the current key modifier state for the keyboard.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Keymod" />) Returns an OR'd combination of the modifier keysfor the keyboard. See <see cref="SDL_Keymod" /> for details.</para>
		/// </returns>
		/// <seealso cref="SDL_GetKeyboardState" />
		/// <seealso cref="SDL_SetModState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetModState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Keymod SDL_GetModState(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_Keymod SDL_GetModState();

		/// <summary>
		///   <para>Set the current key modifier state for the keyboard.</para>
		/// </summary>
		/// <param name="modstate">
		///   <para> the desired <see cref="SDL_Keymod" /> for the keyboard. </para>
		/// </param>
		/// <remarks>
		///   <para>The inverse of <see cref="SDL_GetModState" />(),<see cref="SDL_SetModState" />() allows you to impose modifier keystates on your application. Simply pass your desired modifier states into<c>modstate</c>. This value may be a bitwise, OR'd combination of<see cref="SDL_Keymod" /> values.</para>
		///   <para>This does not change the keyboard state, only the key modifier flags thatSDL reports.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetModState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetModState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetModState(SDL_Keymod modstate);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetModState(SDL_Keymod modstate);

		/// <summary>
		///   <para>Get the key code corresponding to the given scancode according to the current keyboard layout.</para>
		/// </summary>
		/// <param name="scancode">
		///   <para> the desired <see cref="SDL_Scancode" /> to query.                    </para>
		/// </param>
		/// <param name="modstate">
		///   <para> the modifier state to use when translating the scancode to a keycode. </para>
		/// </param>
		/// <param name="key_event">
		///   <para> true if the keycode will be used in key events.                       </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Keycode" />) Returns the <see cref="SDL_Keycode" /> thatcorresponds to the given <see cref="SDL_Scancode" />.</para>
		/// </returns>
		/// <remarks>
		///   <para>If you want to get the keycode as it would be delivered in key events,including options specified in<see cref="SDL_HINT_KEYCODE_OPTIONS" />, then you should pass<c>key_event</c> as true. Otherwise this function simply translates the scancodebased on the given modifier state.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyName" />
		/// <seealso cref="SDL_GetScancodeFromKey" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyFromScancode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, bool key_event);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, SDLBool key_event);

		/// <summary>
		///   <para>Get the scancode corresponding to the given key code according to the current keyboard layout.</para>
		/// </summary>
		/// <param name="key">
		///   <para> the desired <see cref="SDL_Keycode" /> to query.                                                      </para>
		/// </param>
		/// <param name="modstate">
		///   <para> a pointer to the modifier state that would be used when the scancode generates this key, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Scancode" />) Returns the <see cref="SDL_Scancode" />that corresponds to the given <see cref="SDL_Keycode" />.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that there may be multiple scancode+modifier states that can generatethis keycode, this will just return the first one found.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyFromScancode" />
		/// <seealso cref="SDL_GetScancodeName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetScancodeFromKey<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod *modstate);
		/// </code><para>                                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_Scancode SDL_GetScancodeFromKey(uint key, IntPtr modstate);

		[DllImport(nativeLibName, EntryPoint = "SDL_SetScancodeName", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetScancodeName(SDL_Scancode scancode, byte* name);
		/// <summary>
		///   <para>Set a human-readable name for a scancode.</para>
		/// </summary>
		/// <param name="scancode">
		///   <para> the desired <see cref="SDL_Scancode" />.                                                                                                                    </para>
		/// </param>
		/// <param name="name">
		///   <para> the name to use for the scancode, encoded as UTF-8. The string is not copied, so the pointer given to this function must stay valid while SDL is being used. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetScancodeName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetScancodeName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetScancodeName(SDL_Scancode scancode, const char *name);
		/// </code><para>                                                                                                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public static SDLBool SDL_SetScancodeName(SDL_Scancode scancode, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_SetScancodeName(scancode, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetScancodeName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetScancodeName(SDL_Scancode scancode);
		/// <summary>
		///   <para>Get a human-readable name for a scancode.</para>
		/// </summary>
		/// <param name="scancode">
		///   <para> the desired <see cref="SDL_Scancode" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a pointer to the name for the scancode. If thescancode doesn't have a name this function returns an empty string ("").</para>
		/// </returns>
		/// <remarks>
		///   <para>Warning: The returned name is by design not stable across platforms,e.g. the name for <see cref="SDL_Scancode.SDL_SCANCODE_LGUI" /> is "Left GUI"under Linux but "Left Windows" under Microsoft Windows, and some scancodeslike <see cref="SDL_Scancode.SDL_SCANCODE_NONUSBACKSLASH" /> don'thave any name at all. There are even scancodes that share names, e.g.<see cref="SDL_Scancode.SDL_SCANCODE_RETURN" /> and<see cref="SDL_Scancode.SDL_SCANCODE_RETURN2" /> (both called "Return"). Thisfunction is therefore unsuitable for creating a stable cross-platformtwo-way mapping between strings and scancodes.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetScancodeFromKey" />
		/// <seealso cref="SDL_GetScancodeFromName" />
		/// <seealso cref="SDL_SetScancodeName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetScancodeName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetScancodeName(SDL_Scancode scancode);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public static string SDL_GetScancodeName(SDL_Scancode scancode)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetScancodeName(scancode));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetScancodeFromName", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDL_Scancode INTERNAL_SDL_GetScancodeFromName(byte* name);
		/// <summary>
		///   <para>Get a scancode from a human-readable name.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the human-readable scancode name. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Scancode" />) Returns the <see cref="SDL_Scancode" />, or<see cref="SDL_Scancode.SDL_SCANCODE_UNKNOWN" /> if the name wasn'trecognized; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetKeyFromName" />
		/// <seealso cref="SDL_GetScancodeFromKey" />
		/// <seealso cref="SDL_GetScancodeName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetScancodeFromName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Scancode SDL_GetScancodeFromName(const char *name);
		/// </code><para>                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public static SDL_Scancode SDL_GetScancodeFromName(string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetScancodeFromName(nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetKeyName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetKeyName(uint key);
		/// <summary>
		///   <para>Get a human-readable name for a key.</para>
		/// </summary>
		/// <param name="key">
		///   <para> the desired <see cref="SDL_Keycode" /> to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns a UTF-8 encoded string of the key name.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the key doesn't have a name, this function returns an empty string ("").</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyFromName" />
		/// <seealso cref="SDL_GetKeyFromScancode" />
		/// <seealso cref="SDL_GetScancodeFromKey" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetKeyName(SDL_Keycode key);
		/// </code><para>                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public static string SDL_GetKeyName(uint key)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetKeyName(key));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetKeyFromName", CallingConvention = CallingConvention.Cdecl)]
		private static extern uint INTERNAL_SDL_GetKeyFromName(byte* name);
		/// <summary>
		///   <para>Get a key code from a human-readable name.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the human-readable key name. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Keycode" />) Returns key code, or<see href="https://wiki.libsdl.org/SDL3/SDLK_UNKNOWN"><c>SDLK_UNKNOWN</c></see> if the name wasn't recognized; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetKeyFromScancode" />
		/// <seealso cref="SDL_GetKeyName" />
		/// <seealso cref="SDL_GetScancodeFromName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetKeyFromName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Keycode SDL_GetKeyFromName(const char *name);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public static uint SDL_GetKeyFromName(string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetKeyFromName(nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>Start accepting Unicode text input events in a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to enable text input. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function will enable text input(<see cref="SDL_EventType.SDL_EVENT_TEXT_INPUT" /> and<see cref="SDL_EventType.SDL_EVENT_TEXT_EDITING" /> events) in the specifiedwindow. Please use this function paired with<see cref="SDL_StopTextInput" />().</para>
		///   <para>Text input events are not received by default.</para>
		///   <para>On some platforms using this function shows the screen keyboard and/oractivates an IME, which can prevent some key press events from being passedthrough.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetTextInputArea" />
		/// <seealso cref="SDL_StartTextInputWithProperties" />
		/// <seealso cref="SDL_StopTextInput" />
		/// <seealso cref="SDL_TextInputActive" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StartTextInput<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StartTextInput(SDL_Window *window);
		/// </code><para>                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StartTextInput(IntPtr window);

		/// <summary>
		///   <para>Text input type.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are the valid values for<see cref="SDL_PROP_TEXTINPUT_TYPE_NUMBER" />. Not everyvalue is valid on every platform, but where a value isn't supported, areasonable fallback will be used.</para>
		/// </remarks>
		/// <seealso cref="SDL_StartTextInputWithProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TextInputType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_TextInputType
		/// {
		///     SDL_TEXTINPUT_TYPE_TEXT,                        /**&lt; The input is text */
		///     SDL_TEXTINPUT_TYPE_TEXT_NAME,                   /**&lt; The input is a person's name */
		///     SDL_TEXTINPUT_TYPE_TEXT_EMAIL,                  /**&lt; The input is an e-mail address */
		///     SDL_TEXTINPUT_TYPE_TEXT_USERNAME,               /**&lt; The input is a username */
		///     SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN,        /**&lt; The input is a secure password that is hidden */
		///     SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE,       /**&lt; The input is a secure password that is visible */
		///     SDL_TEXTINPUT_TYPE_NUMBER,                      /**&lt; The input is a number */
		///     SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN,      /**&lt; The input is a secure PIN that is hidden */
		///     SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE      /**&lt; The input is a secure PIN that is visible */
		/// } SDL_TextInputType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public enum SDL_TextInputType
		{
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_TEXT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_TEXT = 0,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_TEXT_NAME<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_TEXT_NAME = 1,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_TEXT_EMAIL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_TEXT_EMAIL = 2,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_TEXT_USERNAME<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_TEXT_USERNAME = 3,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_NUMBER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_NUMBER = 6,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7,
			/// <summary><para>Please refer to <see cref="SDL_TextInputType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8,
		}

		/// <summary>
		///   <para>Auto capitalization type.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are the valid values for<see cref="SDL_PROP_TEXTINPUT_AUTOCAPITALIZATION_NUMBER" />.Not every value is valid on every platform, but where a value isn'tsupported, a reasonable fallback will be used.</para>
		/// </remarks>
		/// <seealso cref="SDL_StartTextInputWithProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Capitalization<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_Capitalization
		/// {
		///     SDL_CAPITALIZE_NONE,        /**&lt; No auto-capitalization will be done */
		///     SDL_CAPITALIZE_SENTENCES,   /**&lt; The first letter of sentences will be capitalized */
		///     SDL_CAPITALIZE_WORDS,       /**&lt; The first letter of words will be capitalized */
		///     SDL_CAPITALIZE_LETTERS      /**&lt; All letters will be capitalized */
		/// } SDL_Capitalization;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		public enum SDL_Capitalization
		{
			/// <summary><para>Please refer to <see cref="SDL_Capitalization" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAPITALIZE_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAPITALIZE_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_Capitalization" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAPITALIZE_SENTENCES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAPITALIZE_SENTENCES = 1,
			/// <summary><para>Please refer to <see cref="SDL_Capitalization" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAPITALIZE_WORDS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAPITALIZE_WORDS = 2,
			/// <summary><para>Please refer to <see cref="SDL_Capitalization" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_CAPITALIZE_LETTERS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_CAPITALIZE_LETTERS = 3,
		}

		/// <summary>
		///   <para>Start accepting Unicode text input events in a window, with properties describing the input.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to enable text input. </para>
		/// </param>
		/// <param name="props">
		///   <para> the properties to use.           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function will enable text input(<see cref="SDL_EventType.SDL_EVENT_TEXT_INPUT" /> and<see cref="SDL_EventType.SDL_EVENT_TEXT_EDITING" /> events) in the specifiedwindow. Please use this function paired with<see cref="SDL_StopTextInput" />().</para>
		///   <para>Text input events are not received by default.</para>
		///   <para>On some platforms using this function shows the screen keyboard and/oractivates an IME, which can prevent some key press events from being passedthrough.</para>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTINPUT_TYPE_NUMBER" /> - an<see cref="SDL_TextInputType" /> value that describes text beinginput, defaults to <see cref="SDL_TextInputType.SDL_TEXTINPUT_TYPE_TEXT" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>an <see cref="SDL_Capitalization" /> value that describes howtext should be capitalized, defaults to<see cref="SDL_Capitalization.SDL_CAPITALIZE_SENTENCES" /> for normal textentry, <see cref="SDL_Capitalization.SDL_CAPITALIZE_WORDS" /> for<see cref="SDL_TextInputType.SDL_TEXTINPUT_TYPE_TEXT_NAME" />, and<see cref="SDL_Capitalization.SDL_CAPITALIZE_NONE" /> for e-mail addresses,usernames, and passwords.</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>true to enable auto completion and auto correction, defaults to true.</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>true if multiple lines of text are allowed. This defaults to true if<see cref="SDL_HINT_RETURN_KEY_HIDES_IME" /> is "0" oris not set, and defaults to false if<see cref="SDL_HINT_RETURN_KEY_HIDES_IME" /> is "1".</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On Android you can directly specify the input type:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER" />
		///         </para>
		///         <list type="bullet">
		///           <item>
		///             <description>
		///               <para>the text input type to use, overriding other properties. This isdocumented athttps://developer.android.com/reference/android/text/InputType</para>
		///             </description>
		///           </item>
		///         </list>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_SetTextInputArea" />
		/// <seealso cref="SDL_StartTextInput" />
		/// <seealso cref="SDL_StopTextInput" />
		/// <seealso cref="SDL_TextInputActive" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StartTextInputWithProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StartTextInputWithProperties(SDL_Window *window, SDL_PropertiesID props);
		/// </code><para>                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StartTextInputWithProperties(IntPtr window, uint props);

		/// <summary>
		///   <para>Check whether or not Unicode text input events are enabled for a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if text input events are enabled else false.</para>
		/// </returns>
		/// <seealso cref="SDL_StartTextInput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TextInputActive<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TextInputActive(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TextInputActive(IntPtr window);

		/// <summary>
		///   <para>Stop receiving any text input events in a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to disable text input. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <see cref="SDL_StartTextInput" />() showed the screen keyboard,this function will hide it.</para>
		/// </remarks>
		/// <seealso cref="SDL_StartTextInput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StopTextInput<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StopTextInput(SDL_Window *window);
		/// </code><para>                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StopTextInput(IntPtr window);

		/// <summary>
		///   <para>Dismiss the composition window/IME without disabling the subsystem.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to affect. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_StartTextInput" />
		/// <seealso cref="SDL_StopTextInput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClearComposition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClearComposition(SDL_Window *window);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ClearComposition(IntPtr window);

		/// <summary>
		///   <para>Set the area used to type Unicode text input.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which to set the text input area.                                                       </para>
		/// </param>
		/// <param name="rect">
		///   <para> the <see cref="SDL_Rect" /> representing the text input area, in window coordinates, or NULL to clear it. </para>
		/// </param>
		/// <param name="cursor">
		///   <para> the offset of the current cursor location relative to <c>rect-&gt;x</c>, in window coordinates.                </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Native input methods may place a window with word suggestions near thecursor, without covering the text being entered.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextInputArea" />
		/// <seealso cref="SDL_StartTextInput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextInputArea<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextInputArea(SDL_Window *window, const SDL_Rect *rect, int cursor);
		/// </code><para>                                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextInputArea(IntPtr window, ref SDL_Rect rect, int cursor);

		/// <summary>
		///   <para>Get the area used to type Unicode text input.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which to query the text input area.                                         </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer to an <see cref="SDL_Rect" /> filled in with the text input area, may be NULL.      </para>
		/// </param>
		/// <param name="cursor">
		///   <para> a pointer to the offset of the current cursor location relative to <c>rect-&gt;x</c>, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns the values previously set by<see cref="SDL_SetTextInputArea" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_SetTextInputArea" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextInputArea<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextInputArea(SDL_Window *window, SDL_Rect *rect, int *cursor);
		/// </code><para>                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextInputArea(IntPtr window, out SDL_Rect rect, out int cursor);

		/// <summary>
		///   <para>Check whether the platform has screen keyboard support.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the platform has some screen keyboard support orfalse if not.</para>
		/// </returns>
		/// <seealso cref="SDL_StartTextInput" />
		/// <seealso cref="SDL_ScreenKeyboardShown" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasScreenKeyboardSupport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasScreenKeyboardSupport(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasScreenKeyboardSupport();

		/// <summary>
		///   <para>Check whether the screen keyboard is shown for given window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window for which screen keyboard should be queried. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if screen keyboard is shown or false if not.</para>
		/// </returns>
		/// <seealso cref="SDL_HasScreenKeyboardSupport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ScreenKeyboardShown<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_keyboard.h">&lt;SDL3/SDL_keyboard.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ScreenKeyboardShown(SDL_Window *window);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryKeyboard">CategoryKeyboard</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ScreenKeyboardShown(IntPtr window);

		// /usr/local/include/SDL3/SDL_mouse.h

		/// <summary>
		///   <para>Cursor types for <see cref="SDL_CreateSystemCursor" />().</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SystemCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_SystemCursor
		/// {
		///     SDL_SYSTEM_CURSOR_DEFAULT,      /**&lt; Default cursor. Usually an arrow. */
		///     SDL_SYSTEM_CURSOR_TEXT,         /**&lt; Text selection. Usually an I-beam. */
		///     SDL_SYSTEM_CURSOR_WAIT,         /**&lt; Wait. Usually an hourglass or watch or spinning ball. */
		///     SDL_SYSTEM_CURSOR_CROSSHAIR,    /**&lt; Crosshair. */
		///     SDL_SYSTEM_CURSOR_PROGRESS,     /**&lt; Program is busy but still interactive. Usually it's WAIT with an arrow. */
		///     SDL_SYSTEM_CURSOR_NWSE_RESIZE,  /**&lt; Double arrow pointing northwest and southeast. */
		///     SDL_SYSTEM_CURSOR_NESW_RESIZE,  /**&lt; Double arrow pointing northeast and southwest. */
		///     SDL_SYSTEM_CURSOR_EW_RESIZE,    /**&lt; Double arrow pointing west and east. */
		///     SDL_SYSTEM_CURSOR_NS_RESIZE,    /**&lt; Double arrow pointing north and south. */
		///     SDL_SYSTEM_CURSOR_MOVE,         /**&lt; Four pointed arrow pointing north, south, east, and west. */
		///     SDL_SYSTEM_CURSOR_NOT_ALLOWED,  /**&lt; Not permitted. Usually a slashed circle or crossbones. */
		///     SDL_SYSTEM_CURSOR_POINTER,      /**&lt; Pointer that indicates a link. Usually a pointing hand. */
		///     SDL_SYSTEM_CURSOR_NW_RESIZE,    /**&lt; Window resize top-left. This may be a single arrow or a double arrow like NWSE_RESIZE. */
		///     SDL_SYSTEM_CURSOR_N_RESIZE,     /**&lt; Window resize top. May be NS_RESIZE. */
		///     SDL_SYSTEM_CURSOR_NE_RESIZE,    /**&lt; Window resize top-right. May be NESW_RESIZE. */
		///     SDL_SYSTEM_CURSOR_E_RESIZE,     /**&lt; Window resize right. May be EW_RESIZE. */
		///     SDL_SYSTEM_CURSOR_SE_RESIZE,    /**&lt; Window resize bottom-right. May be NWSE_RESIZE. */
		///     SDL_SYSTEM_CURSOR_S_RESIZE,     /**&lt; Window resize bottom. May be NS_RESIZE. */
		///     SDL_SYSTEM_CURSOR_SW_RESIZE,    /**&lt; Window resize bottom-left. May be NESW_RESIZE. */
		///     SDL_SYSTEM_CURSOR_W_RESIZE,     /**&lt; Window resize left. May be EW_RESIZE. */
		///     SDL_SYSTEM_CURSOR_COUNT
		/// } SDL_SystemCursor;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		public enum SDL_SystemCursor
		{
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_DEFAULT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_DEFAULT = 0,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_TEXT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_TEXT = 1,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_WAIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_WAIT = 2,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_CROSSHAIR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_PROGRESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_PROGRESS = 4,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_NWSE_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_NESW_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_NESW_RESIZE = 6,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_EW_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_EW_RESIZE = 7,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_NS_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_NS_RESIZE = 8,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_MOVE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_MOVE = 9,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_NOT_ALLOWED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_POINTER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_POINTER = 11,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_NW_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_NW_RESIZE = 12,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_N_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_N_RESIZE = 13,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_NE_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_NE_RESIZE = 14,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_E_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_E_RESIZE = 15,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_SE_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_SE_RESIZE = 16,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_S_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_S_RESIZE = 17,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_SW_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_SW_RESIZE = 18,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_W_RESIZE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_W_RESIZE = 19,
			/// <summary><para>Please refer to <see cref="SDL_SystemCursor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_SYSTEM_CURSOR_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_SYSTEM_CURSOR_COUNT = 20,
		}

		/// <summary>
		///   <para>Scroll direction types for the Scroll event</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MouseWheelDirection<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_MouseWheelDirection
		/// {
		///     SDL_MOUSEWHEEL_NORMAL,    /**&lt; The scroll direction is normal */
		///     SDL_MOUSEWHEEL_FLIPPED    /**&lt; The scroll direction is flipped / natural */
		/// } SDL_MouseWheelDirection;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		public enum SDL_MouseWheelDirection
		{
			/// <summary><para>Please refer to <see cref="SDL_MouseWheelDirection" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MOUSEWHEEL_NORMAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MOUSEWHEEL_NORMAL = 0,
			/// <summary><para>Please refer to <see cref="SDL_MouseWheelDirection" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MOUSEWHEEL_FLIPPED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MOUSEWHEEL_FLIPPED = 1,
		}

		/// <summary>
		///   <para>A bitmask of pressed mouse buttons, as reported by <see cref="SDL_GetMouseState" />, etc.</para>
		/// </summary>
		/// <remarks>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>Button 1: Left mouse button</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Button 2: Middle mouse button</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Button 3: Right mouse button</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Button 4: Side mouse button 1</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Button 5: Side mouse button 2</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_GetMouseState" />
		/// <seealso cref="SDL_GetGlobalMouseState" />
		/// <seealso cref="SDL_GetRelativeMouseState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MouseButtonFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_MouseButtonFlags;
		/// 
		/// #define SDL_BUTTON_LEFT     1
		/// #define SDL_BUTTON_MIDDLE   2
		/// #define SDL_BUTTON_RIGHT    3
		/// #define SDL_BUTTON_X1       4
		/// #define SDL_BUTTON_X2       5
		/// 
		/// #define SDL_BUTTON_MASK(X)  (1u &lt;&lt; ((X)-1))
		/// #define SDL_BUTTON_LMASK    SDL_BUTTON_MASK(SDL_BUTTON_LEFT)
		/// #define SDL_BUTTON_MMASK    SDL_BUTTON_MASK(SDL_BUTTON_MIDDLE)
		/// #define SDL_BUTTON_RMASK    SDL_BUTTON_MASK(SDL_BUTTON_RIGHT)
		/// #define SDL_BUTTON_X1MASK   SDL_BUTTON_MASK(SDL_BUTTON_X1)
		/// #define SDL_BUTTON_X2MASK   SDL_BUTTON_MASK(SDL_BUTTON_X2)
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[Flags]
		public enum SDL_MouseButtonFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_MouseButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BUTTON_LMASK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_BUTTON_LMASK = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_MouseButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BUTTON_MMASK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_BUTTON_MMASK = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_MouseButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BUTTON_RMASK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_BUTTON_RMASK = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_MouseButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BUTTON_X1MASK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_BUTTON_X1MASK = 0x08,
			/// <summary><para>Please refer to <see cref="SDL_MouseButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_BUTTON_X2MASK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_BUTTON_X2MASK = 0x10,
		}

		/// <summary>
		///   <para>Return whether a mouse is currently connected.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if a mouse is connected, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_GetMice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasMouse<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasMouse(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasMouse();

		/// <summary>
		///   <para>Get a list of currently connected mice.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of mice returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_MouseID" /> *) Returns a 0 terminated array of mouseinstance IDs or NULL on failure; call <see cref="SDL_GetError" />() formore information. This should be freed with <see cref="SDL_free" />() when itis no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that this will include any device or virtual driver that includesmouse functionality, including some game controllers, KVM switches, etc.You should wait for input from a device before you consider it actively inuse.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetMouseNameForID" />
		/// <seealso cref="SDL_HasMouse" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_MouseID * SDL_GetMice(int *count);
		/// </code><para>                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetMice(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetMouseNameForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetMouseNameForID(uint instance_id);
		/// <summary>
		///   <para>Get the name of a mouse.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the mouse instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected mouse, or NULL on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns "" if the mouse doesn't have a name.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetMice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMouseNameForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetMouseNameForID(SDL_MouseID instance_id);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		public static string SDL_GetMouseNameForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetMouseNameForID(instance_id));
		}

		/// <summary>
		///   <para>Get the window which currently has mouse focus.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window with mouse focus.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMouseFocus<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetMouseFocus(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetMouseFocus();

		/// <summary>
		///   <para>Retrieve the current state of the mouse.</para>
		/// </summary>
		/// <param name="x">
		///   <para> the x coordinate of the mouse cursor position relative to the focus window. </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate of the mouse cursor position relative to the focus window. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_MouseButtonFlags" />) Returns a 32-bit buttonbitmask of the current button state.</para>
		/// </returns>
		/// <remarks>
		///   <para>The current button state is returned as a button bitmask, which can betested using the <see cref="SDL_BUTTON_MASK" />(X) macro (where <c>X</c> isgenerally 1 for the left, 2 for middle, 3 for the right button), and <c>x</c>and <c>y</c> are set to the mouse cursor position relative to the focus window.You can pass NULL for either <c>x</c> or <c>y</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGlobalMouseState" />
		/// <seealso cref="SDL_GetRelativeMouseState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMouseState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_MouseButtonFlags SDL_GetMouseState(float *x, float *y);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_MouseButtonFlags SDL_GetMouseState(out float x, out float y);

		/// <summary>
		///   <para>Get the current state of the mouse in relation to the desktop.</para>
		/// </summary>
		/// <param name="x">
		///   <para> filled in with the current X coord relative to the desktop; can be NULL. </para>
		/// </param>
		/// <param name="y">
		///   <para> filled in with the current Y coord relative to the desktop; can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_MouseButtonFlags" />) Returns the current buttonstate as a bitmask which can be tested using the<see cref="SDL_BUTTON_MASK" />(X) macros.</para>
		/// </returns>
		/// <remarks>
		///   <para>This works similarly to <see cref="SDL_GetMouseState" />(), but thecoordinates will be reported relative to the top-left of the desktop. Thiscan be useful if you need to track the mouse outside of a specific windowand <see cref="SDL_CaptureMouse" />() doesn't fit your needs. Forexample, it could be useful if you need to track the mouse while dragging awindow, where coordinates relative to a window might not be in sync at alltimes.</para>
		///   <para>Note: <see cref="SDL_GetMouseState" />() returns the mouse positionas SDL understands it from the last pump of the event queue. This function,however, queries the OS for the current mouse position, and as such, mightbe a slightly less efficient function. Unless you know what you're doingand have a good reason to use this function, you probably want<see cref="SDL_GetMouseState" />() instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_CaptureMouse" />
		/// <seealso cref="SDL_GetMouseState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGlobalMouseState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_MouseButtonFlags SDL_GetGlobalMouseState(float *x, float *y);
		/// </code><para>                                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_MouseButtonFlags SDL_GetGlobalMouseState(out float x, out float y);

		/// <summary>
		///   <para>Retrieve the relative state of the mouse.</para>
		/// </summary>
		/// <param name="x">
		///   <para> a pointer filled with the last recorded x coordinate of the mouse. </para>
		/// </param>
		/// <param name="y">
		///   <para> a pointer filled with the last recorded y coordinate of the mouse. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_MouseButtonFlags" />) Returns a 32-bit buttonbitmask of the relative button state.</para>
		/// </returns>
		/// <remarks>
		///   <para>The current button state is returned as a button bitmask, which can betested using the <c>SDL_BUTTON_MASK(X)</c> macros (where <c>X</c> is generally 1 forthe left, 2 for middle, 3 for the right button), and <c>x</c> and <c>y</c> are set tothe mouse deltas since the last call to<see cref="SDL_GetRelativeMouseState" />() or since eventinitialization. You can pass NULL for either <c>x</c> or <c>y</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetMouseState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRelativeMouseState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_MouseButtonFlags SDL_GetRelativeMouseState(float *x, float *y);
		/// </code><para>                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_MouseButtonFlags SDL_GetRelativeMouseState(out float x, out float y);

		/// <summary>
		///   <para>Move the mouse cursor to the given position within the window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to move the mouse into, or NULL for the current mouse focus. </para>
		/// </param>
		/// <param name="x">
		///   <para> the x coordinate within the window.                                     </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate within the window.                                     </para>
		/// </param>
		/// <remarks>
		///   <para>This function generates a mouse motion event if relative mode is notenabled. If relative mode is enabled, you can force mouse events for thewarp by setting the<see cref="SDL_HINT_MOUSE_RELATIVE_WARP_MOTION" />hint.</para>
		///   <para>Note that this function will appear to succeed, but not actually move themouse when used over Microsoft Remote Desktop.</para>
		/// </remarks>
		/// <seealso cref="SDL_WarpMouseGlobal" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WarpMouseInWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_WarpMouseInWindow(SDL_Window * window,
		///                        float x, float y);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_WarpMouseInWindow(IntPtr window, float x, float y);

		/// <summary>
		///   <para>Move the mouse to the given position in global screen space.</para>
		/// </summary>
		/// <param name="x">
		///   <para> the x coordinate. </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function generates a mouse motion event.</para>
		///   <para>A failure of this function usually means that it is unsupported by aplatform.</para>
		///   <para>Note that this function will appear to succeed, but not actually move themouse when used over Microsoft Remote Desktop.</para>
		/// </remarks>
		/// <seealso cref="SDL_WarpMouseInWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WarpMouseGlobal<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WarpMouseGlobal(float x, float y);
		/// </code><para>                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WarpMouseGlobal(float x, float y);

		/// <summary>
		///   <para>Set relative mouse mode for a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to change.                           </para>
		/// </param>
		/// <param name="enabled">
		///   <para> true to enable relative mode, false to disable. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>While the window has focus and relative mouse mode is enabled, the cursoris hidden, the mouse position is constrained to the window, and SDL willreport continuous relative mouse motion even if the mouse is at the edge ofthe window.</para>
		///   <para>This function will flush any pending mouse motion for this window.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetWindowRelativeMouseMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetWindowRelativeMouseMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetWindowRelativeMouseMode(SDL_Window *window, bool enabled);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetWindowRelativeMouseMode(IntPtr window, SDLBool enabled);

		/// <summary>
		///   <para>Query whether relative mouse mode is enabled for a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if relative mode is enabled for a window or falseotherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_SetWindowRelativeMouseMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowRelativeMouseMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetWindowRelativeMouseMode(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetWindowRelativeMouseMode(IntPtr window);

		/// <summary>
		///   <para>Capture the mouse and to track input outside an SDL window.</para>
		/// </summary>
		/// <param name="enabled">
		///   <para> true to enable capturing, false to disable. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Capturing enables your app to obtain mouse events globally, instead of justwithin your window. Not all video targets support this function. Whencapturing is enabled, the current window will get all mouse events, butunlike relative mode, no change is made to the cursor and it is notrestrained to your window.</para>
		///   <para>This function may also deny mouse input to other windows--both those inyour application and others on the system--so you should use this functionsparingly, and in small bursts. For example, you might want to track themouse while the user is dragging something, until the user releases a mousebutton. It is not recommended that you capture the mouse for long periodsof time, such as the entire time your app is running. For that, you shouldprobably use<see cref="SDL_SetWindowRelativeMouseMode" />() or<see cref="SDL_SetWindowMouseGrab" />(), depending on yourgoals.</para>
		///   <para>While captured, mouse events still report coordinates relative to thecurrent (foreground) window, but those coordinates may be outside thebounds of the window (including negative values). Capturing is only allowedfor the foreground window. If the window loses focus while capturing, thecapture will be disabled automatically.</para>
		///   <para>While capturing is enabled, the current window will have the<see cref="SDL_WindowFlags.SDL_WINDOW_MOUSE_CAPTURE" /> flag set.</para>
		///   <para>Please note that SDL will attempt to "auto capture" the mouse while theuser is pressing a button; this is to try and make mouse behavior moreconsistent between platforms, and deal with the common case of a userdragging the mouse outside of the window. This means that if you arecalling <see cref="SDL_CaptureMouse" />() only to deal with thissituation, you do not have to (although it is safe to do so). If thiscauses problems for your app, you can disable auto capture by setting the<see cref="SDL_HINT_MOUSE_AUTO_CAPTURE" /> hint to zero.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetGlobalMouseState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CaptureMouse<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CaptureMouse(bool enabled);
		/// </code><para>                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CaptureMouse(SDLBool enabled);

		/// <summary>
		///   <para>Create a cursor using the specified bitmap data and mask (in MSB format).</para>
		/// </summary>
		/// <param name="data">
		///   <para> the color value for each pixel of the cursor.                                                              </para>
		/// </param>
		/// <param name="mask">
		///   <para> the mask value for each pixel of the cursor.                                                               </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the cursor.                                                                                   </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the cursor.                                                                                  </para>
		/// </param>
		/// <param name="hot_x">
		///   <para> the x-axis offset from the left of the cursor image to the mouse x position, in the range of 0 to <c>w</c> - 1. </para>
		/// </param>
		/// <param name="hot_y">
		///   <para> the y-axis offset from the top of the cursor image to the mouse y position, in the range of 0 to <c>h</c> - 1.  </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Cursor" /> *) Returns a new cursor with the specifiedparameters on success or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <c>mask</c> has to be in MSB (Most Significant Bit) format.</para>
		///   <para>The cursor width (<c>w</c>) must be a multiple of 8 bits.</para>
		///   <para>The cursor is created in black and white according to the following:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>data=0, mask=1: white</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>data=1, mask=1: black</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>data=0, mask=0: transparent</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>data=1, mask=0: inverted color if possible, black if not.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Cursors created with this function must be freed with<see cref="SDL_DestroyCursor" />().</para>
		///   <para>If you want to have a color cursor, or create your cursor from an<see cref="SDL_Surface" />, you should use<see cref="SDL_CreateColorCursor" />(). Alternately, you can hidethe cursor and draw your own as part of your game's rendering, but it willbe bound to the framerate.</para>
		///   <para>Also, <see cref="SDL_CreateSystemCursor" />() is available,which provides several readily-available system cursors to pick from.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateColorCursor" />
		/// <seealso cref="SDL_CreateSystemCursor" />
		/// <seealso cref="SDL_DestroyCursor" />
		/// <seealso cref="SDL_SetCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Cursor * SDL_CreateCursor(const Uint8 * data,
		///                          const Uint8 * mask,
		///                          int w, int h, int hot_x,
		///                          int hot_y);
		/// </code><para>                                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>/* Stolen from the mailing list */
		/// /* Creates a new mouse cursor from an XPM */
		/// 
		/// 
		/// /* XPM */
		/// static const char *arrow[] = {
		///   /* width height num_colors chars_per_pixel */
		///   "    32    32        3            1",
		///   /* colors */
		///   "X c #000000",
		///   ". c #ffffff",
		///   "  c None",
		///   /* pixels */
		///   "X                               ",
		///   "XX                              ",
		///   "X.X                             ",
		///   "X..X                            ",
		///   "X...X                           ",
		///   "X....X                          ",
		///   "X.....X                         ",
		///   "X......X                        ",
		///   "X.......X                       ",
		///   "X........X                      ",
		///   "X.....XXXXX                     ",
		///   "X..X..X                         ",
		///   "X.X X..X                        ",
		///   "XX  X..X                        ",
		///   "X    X..X                       ",
		///   "     X..X                       ",
		///   "      X..X                      ",
		///   "      X..X                      ",
		///   "       XX                       ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "                                ",
		///   "0,0"
		/// };
		/// 
		/// SDL_Cursor *init_system_cursor(const char *image[])
		/// {
		///   int i, row, col;
		///   Uint8 data[4*32];
		///   Uint8 mask[4*32];
		///   int hot_x, hot_y;
		/// 
		///   i = -1;
		///   for (row=0; row&lt;32; ++row) {
		///     for (col=0; col&lt;32; ++col) {
		///       if (col % 8) {
		///         data[i] &lt;&lt;= 1;
		///         mask[i] &lt;&lt;= 1;
		///       } else {
		///         ++i;
		///         data[i] = mask[i] = 0;
		///       }
		///       switch (image[4+row][col]) {
		///         case 'X':
		///           data[i] |= 0x01;
		///           mask[i] |= 0x01;
		///           break;
		///         case '.':
		///           mask[i] |= 0x01;
		///           break;
		///         case ' ':
		///           break;
		///       }
		///     }
		///   }
		///   sscanf(image[4+row], "%d,%d", &amp;hot_x, &amp;hot_y);
		///   return SDL_CreateCursor(data, mask, 32, 32, hot_x, hot_y);
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateCursor(IntPtr data, IntPtr mask, int w, int h, int hot_x, int hot_y);

		/// <summary>
		///   <para>Create a color cursor.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> an <see cref="SDL_Surface" /> structure representing the cursor image. </para>
		/// </param>
		/// <param name="hot_x">
		///   <para> the x position of the cursor hot spot.                                 </para>
		/// </param>
		/// <param name="hot_y">
		///   <para> the y position of the cursor hot spot.                                 </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Cursor" /> *) Returns the new cursor on success or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If this function is passed a surface with alternate representations, thesurface will be interpreted as the content to be used for 100% displayscale, and the alternate representations will be used for high DPIsituations. For example, if the original surface is 32x32, then on a 2xmacOS display or 200% display scale on Windows, a 64x64 version of theimage will be used, if available. If a matching version of the image isn'tavailable, the closest larger size image will be downscaled to theappropriate size and be used instead, if available. Otherwise, the closestsmaller image will be upscaled and be used instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateCursor" />
		/// <seealso cref="SDL_CreateSystemCursor" />
		/// <seealso cref="SDL_DestroyCursor" />
		/// <seealso cref="SDL_SetCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateColorCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Cursor * SDL_CreateColorCursor(SDL_Surface *surface,
		///                               int hot_x,
		///                               int hot_y);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// 
		/// int
		/// main(int argc, char *argv[])
		/// {
		///     SDL_Window *window = NULL;
		///     SDL_Renderer *renderer = NULL;
		///     SDL_Surface *surface = NULL;
		///     SDL_Cursor *cursor = NULL;
		///     bool error = true;
		/// 
		///     if (!SDL_Init(SDL_INIT_VIDEO)) {
		///         goto exit;
		///     }
		///     if (!SDL_CreateWindowAndRenderer("Hello SDL", 640, 480, 0, &amp;window, &amp;renderer)) {
		///         goto exit;
		///     }
		///     surface = SDL_LoadBMP((1 &lt; argc) ? argv[1] : "cursor.bmp");
		///     if (!surface) {
		///         goto exit;
		///     }
		///     cursor = SDL_CreateColorCursor(surface, 0, 0);
		///     if (!cursor) {
		///         goto exit;
		///     }
		/// 
		///     SDL_SetCursor(cursor);
		///     SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
		///     while (true) {
		///         SDL_Event event;
		///         while (SDL_PollEvent(&amp;event)) {
		///             switch (event.type) {
		///             case SDL_EVENT_MOUSE_BUTTON_UP:
		///             case SDL_EVENT_QUIT:
		///                 error = false;
		///                 goto exit;
		///             }
		///         }
		///         SDL_RenderClear(renderer);
		///         SDL_RenderPresent(renderer);
		///     }
		/// 
		/// exit:
		///     if (error) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "%s", SDL_GetError());
		///     }
		///     if (cursor) {
		///         SDL_DestroyCursor(cursor);
		///     }
		///     if (surface) {
		///         SDL_DestroySurface(surface);
		///     }
		///     if (renderer) {
		///         SDL_DestroyRenderer(renderer);
		///     }
		///     if (window) {
		///         SDL_DestroyWindow(window);
		///     }
		///     SDL_Quit();
		///     return error;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateColorCursor(IntPtr surface, int hot_x, int hot_y);

		/// <summary>
		///   <para>Create a system cursor.</para>
		/// </summary>
		/// <param name="id">
		///   <para> an <see cref="SDL_SystemCursor" /> enum value. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Cursor" /> *) Returns a cursor on success or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_DestroyCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateSystemCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Cursor * SDL_CreateSystemCursor(SDL_SystemCursor id);
		/// </code><para>                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>SDL_Cursor* cursor;
		/// cursor = SDL_CreateSystemCursor(SDL_SYSTEM_CURSOR_POINTER);
		/// SDL_SetCursor(cursor);
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateSystemCursor(SDL_SystemCursor id);

		/// <summary>
		///   <para>Set the active cursor.</para>
		/// </summary>
		/// <param name="cursor">
		///   <para> a cursor to make active. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function sets the currently active cursor to the specified one. If thecursor is currently visible, the change will be immediately represented onthe display. <see cref="SDL_SetCursor" />(NULL) can be used to forcecursor redraw, if this is desired for any reason.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetCursor(SDL_Cursor *cursor);
		/// </code><para>                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetCursor(IntPtr cursor);

		/// <summary>
		///   <para>Get the active cursor.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Cursor" /> *) Returns the active cursor or NULL if there isno mouse.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns a pointer to the current cursor which is owned by thelibrary. It is not necessary to free the cursor with<see cref="SDL_DestroyCursor" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_SetCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Cursor * SDL_GetCursor(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetCursor();

		/// <summary>
		///   <para>Get the default cursor.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Cursor" /> *) Returns the default cursor on success or NULLon failuree; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You do not have to call <see cref="SDL_DestroyCursor" />() on thereturn value, but it is safe to do so.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDefaultCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Cursor * SDL_GetDefaultCursor(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetDefaultCursor();

		/// <summary>
		///   <para>Free a previously-created cursor.</para>
		/// </summary>
		/// <param name="cursor">
		///   <para> the cursor to free. </para>
		/// </param>
		/// <remarks>
		///   <para>Use this function to free cursor resources created with<see cref="SDL_CreateCursor" />(),<see cref="SDL_CreateColorCursor" />() or<see cref="SDL_CreateSystemCursor" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateColorCursor" />
		/// <seealso cref="SDL_CreateCursor" />
		/// <seealso cref="SDL_CreateSystemCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyCursor(SDL_Cursor *cursor);
		/// </code><para>                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyCursor(IntPtr cursor);

		/// <summary>
		///   <para>Show the cursor.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CursorVisible" />
		/// <seealso cref="SDL_HideCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShowCursor(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ShowCursor();

		/// <summary>
		///   <para>Hide the cursor.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CursorVisible" />
		/// <seealso cref="SDL_ShowCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HideCursor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HideCursor(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HideCursor();

		/// <summary>
		///   <para>Return whether the cursor is currently being shown.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns <c>true</c> if the cursor is being shown, or <c>false</c> if thecursor is hidden.</para>
		/// </returns>
		/// <seealso cref="SDL_HideCursor" />
		/// <seealso cref="SDL_ShowCursor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CursorVisible<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_mouse.h">&lt;SDL3/SDL_mouse.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CursorVisible(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMouse">CategoryMouse</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CursorVisible();

		// /usr/local/include/SDL3/SDL_pen.h

		/// <summary>
		///   <para>Pen input flags, as reported by various pen events' <c>pen_state</c> field.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenInputFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pen.h">&lt;SDL3/SDL_pen.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_PenInputFlags;
		/// 
		/// #define SDL_PEN_INPUT_DOWN       (1u &lt;&lt; 0)  /**&lt; pen is pressed down */
		/// #define SDL_PEN_INPUT_BUTTON_1   (1u &lt;&lt; 1)  /**&lt; button 1 is pressed */
		/// #define SDL_PEN_INPUT_BUTTON_2   (1u &lt;&lt; 2)  /**&lt; button 2 is pressed */
		/// #define SDL_PEN_INPUT_BUTTON_3   (1u &lt;&lt; 3)  /**&lt; button 3 is pressed */
		/// #define SDL_PEN_INPUT_BUTTON_4   (1u &lt;&lt; 4)  /**&lt; button 4 is pressed */
		/// #define SDL_PEN_INPUT_BUTTON_5   (1u &lt;&lt; 5)  /**&lt; button 5 is pressed */
		/// #define SDL_PEN_INPUT_ERASER_TIP (1u &lt;&lt; 30) /**&lt; eraser tip is used */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPen">CategoryPen</see></para></misc>
		[Flags]
		public enum SDL_PenInputFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_PenInputFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_INPUT_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_PEN_INPUT_DOWN = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_PenInputFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_INPUT_BUTTON_1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_PEN_INPUT_BUTTON_1 = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_PenInputFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_INPUT_BUTTON_2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_PEN_INPUT_BUTTON_2 = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_PenInputFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_INPUT_BUTTON_3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_PEN_INPUT_BUTTON_3 = 0x08,
			/// <summary><para>Please refer to <see cref="SDL_PenInputFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_INPUT_BUTTON_4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_PEN_INPUT_BUTTON_4 = 0x10,
			/// <summary><para>Please refer to <see cref="SDL_PenInputFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_INPUT_BUTTON_5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_PEN_INPUT_BUTTON_5 = 0x20,
			SDL_PEN_INPUT_ERASER_TIP = 0x40000000,
		}

		/// <summary>
		///   <para>Pen axis indices.</para>
		/// </summary>
		/// <remarks>
		///   <para>These are the valid values for the <c>axis</c> field in<see cref="SDL_PenAxisEvent" />. All axes are either normalised to0..1 or report a (positive or negative) angle in degrees, with 0.0representing the centre. Not all pens/backends support all axes:unsupported axes are always zero.</para>
		///   <para>To convert angles for tilt and rotation into vector representation, use<see cref="SDL_sinf" /> on the XTILT, YTILT, or ROTATION component, forexample:</para>
		///   <para>
		///     <c>SDL_sinf(xtilt * SDL_PI_F / 180.0)</c>.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenAxis<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_pen.h">&lt;SDL3/SDL_pen.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_PenAxis
		/// {
		///     SDL_PEN_AXIS_PRESSURE,  /**&lt; Pen pressure.  Unidirectional: 0 to 1.0 */
		///     SDL_PEN_AXIS_XTILT,     /**&lt; Pen horizontal tilt angle.  Bidirectional: -90.0 to 90.0 (left-to-right). */
		///     SDL_PEN_AXIS_YTILT,     /**&lt; Pen vertical tilt angle.  Bidirectional: -90.0 to 90.0 (top-to-down). */
		///     SDL_PEN_AXIS_DISTANCE,  /**&lt; Pen distance to drawing surface.  Unidirectional: 0.0 to 1.0 */
		///     SDL_PEN_AXIS_ROTATION,  /**&lt; Pen barrel rotation.  Bidirectional: -180 to 179.9 (clockwise, 0 is facing up, -180.0 is facing down). */
		///     SDL_PEN_AXIS_SLIDER,    /**&lt; Pen finger wheel or slider (e.g., Airbrush Pen).  Unidirectional: 0 to 1.0 */
		///     SDL_PEN_AXIS_TANGENTIAL_PRESSURE,    /**&lt; Pressure from squeezing the pen ("barrel pressure"). */
		///     SDL_PEN_AXIS_COUNT       /**&lt; Total known pen axis types in this version of SDL. This number may grow in future releases! */
		/// } SDL_PenAxis;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPen">CategoryPen</see></para></misc>
		public enum SDL_PenAxis
		{
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_PRESSURE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_PRESSURE = 0,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_XTILT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_XTILT = 1,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_YTILT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_YTILT = 2,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_DISTANCE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_DISTANCE = 3,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_ROTATION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_ROTATION = 4,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_SLIDER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_SLIDER = 5,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_TANGENTIAL_PRESSURE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6,
			/// <summary><para>Please refer to <see cref="SDL_PenAxis" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEN_AXIS_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEN_AXIS_COUNT = 7,
		}

		// /usr/local/include/SDL3/SDL_touch.h

		public enum SDL_TouchDeviceType
		{
			SDL_TOUCH_DEVICE_INVALID = -1,
			SDL_TOUCH_DEVICE_DIRECT = 0,
			SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
			SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2,
		}

		/// <summary>
		///   <para>Data about a single finger in a multitouch event.</para>
		/// </summary>
		/// <remarks>
		///   <para>Each touch even is a collection of fingers that are simultaneously incontact with the touch device (so a "touch" can be a "multitouch," inreality), and this struct reports details of the specific fingers.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTouchFingers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Finger<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_touch.h">&lt;SDL3/SDL_touch.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Finger
		/// {
		///     SDL_FingerID id;  /**&lt; the finger ID */
		///     float x;  /**&lt; the x-axis location of the touch event, normalized (0...1) */
		///     float y;  /**&lt; the y-axis location of the touch event, normalized (0...1) */
		///     float pressure; /**&lt; the quantity of pressure applied, normalized (0...1) */
		/// } SDL_Finger;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTouch">CategoryTouch</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Finger
		{
			public ulong id;
			public float x;
			public float y;
			public float pressure;
		}

		/// <summary>
		///   <para>Get a list of registered touch devices.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of devices returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_TouchID" /> *) Returns a 0 terminated array of touch deviceIDs or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation. This should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>On some platforms SDL first sees the touch device if it was actually used.Therefore the returned list might be empty, although devices are available.After using all devices at least once the number will be correct.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTouchDevices<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_touch.h">&lt;SDL3/SDL_touch.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_TouchID * SDL_GetTouchDevices(int *count);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTouch">CategoryTouch</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetTouchDevices(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetTouchDeviceName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetTouchDeviceName(ulong touchID);
		/// <summary>
		///   <para>Get the touch device name as reported from the driver.</para>
		/// </summary>
		/// <param name="touchID">
		///   <para> the touch device instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns touch device name, or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTouchDeviceName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_touch.h">&lt;SDL3/SDL_touch.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetTouchDeviceName(SDL_TouchID touchID);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTouch">CategoryTouch</see></para></misc>
		public static string SDL_GetTouchDeviceName(ulong touchID)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetTouchDeviceName(touchID));
		}

		/// <summary>
		///   <para>Get the type of the given touch device.</para>
		/// </summary>
		/// <param name="touchID">
		///   <para> the ID of a touch device. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_TouchDeviceType" />) Returns touch device type.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTouchDeviceType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_touch.h">&lt;SDL3/SDL_touch.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTouch">CategoryTouch</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_TouchDeviceType SDL_GetTouchDeviceType(ulong touchID);

		/// <summary>
		///   <para>Get a list of active fingers for a given touch device.</para>
		/// </summary>
		/// <param name="touchID">
		///   <para> the ID of a touch device.                                             </para>
		/// </param>
		/// <param name="count">
		///   <para> a pointer filled in with the number of fingers returned, can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Finger" /> **) Returns a NULL terminated array of<see cref="SDL_Finger" /> pointers or NULL on failure; call<see cref="SDL_GetError" />() for more information. This is a singleallocation that should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTouchFingers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_touch.h">&lt;SDL3/SDL_touch.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Finger ** SDL_GetTouchFingers(SDL_TouchID touchID, int *count);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTouch">CategoryTouch</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetTouchFingers(ulong touchID, out int count);

		// /usr/local/include/SDL3/SDL_events.h

		/// <summary>
		///   <para>The types of events that can be delivered.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EventType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_EventType
		/// {
		///     SDL_EVENT_FIRST     = 0,     /**&lt; Unused (do not remove) */
		/// 
		///     /* Application events */
		///     SDL_EVENT_QUIT           = 0x100, /**&lt; User-requested quit */
		/// 
		///     /* These application events have special meaning on iOS and Android, see README-ios.md and README-android.md for details */
		///     SDL_EVENT_TERMINATING,      /**&lt; The application is being terminated by the OS. This event must be handled in a callback set with SDL_AddEventWatch().
		///                                      Called on iOS in applicationWillTerminate()
		///                                      Called on Android in onDestroy()
		///                                 */
		///     SDL_EVENT_LOW_MEMORY,       /**&lt; The application is low on memory, free memory if possible. This event must be handled in a callback set with SDL_AddEventWatch().
		///                                      Called on iOS in applicationDidReceiveMemoryWarning()
		///                                      Called on Android in onTrimMemory()
		///                                 */
		///     SDL_EVENT_WILL_ENTER_BACKGROUND, /**&lt; The application is about to enter the background. This event must be handled in a callback set with SDL_AddEventWatch().
		///                                      Called on iOS in applicationWillResignActive()
		///                                      Called on Android in onPause()
		///                                 */
		///     SDL_EVENT_DID_ENTER_BACKGROUND, /**&lt; The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with SDL_AddEventWatch().
		///                                      Called on iOS in applicationDidEnterBackground()
		///                                      Called on Android in onPause()
		///                                 */
		///     SDL_EVENT_WILL_ENTER_FOREGROUND, /**&lt; The application is about to enter the foreground. This event must be handled in a callback set with SDL_AddEventWatch().
		///                                      Called on iOS in applicationWillEnterForeground()
		///                                      Called on Android in onResume()
		///                                 */
		///     SDL_EVENT_DID_ENTER_FOREGROUND, /**&lt; The application is now interactive. This event must be handled in a callback set with SDL_AddEventWatch().
		///                                      Called on iOS in applicationDidBecomeActive()
		///                                      Called on Android in onResume()
		///                                 */
		/// 
		///     SDL_EVENT_LOCALE_CHANGED,  /**&lt; The user's locale preferences have changed. */
		/// 
		///     SDL_EVENT_SYSTEM_THEME_CHANGED, /**&lt; The system theme changed */
		/// 
		///     /* Display events */
		///     /* 0x150 was SDL_DISPLAYEVENT, reserve the number for sdl2-compat */
		///     SDL_EVENT_DISPLAY_ORIENTATION = 0x151,   /**&lt; Display orientation has changed to data1 */
		///     SDL_EVENT_DISPLAY_ADDED,                 /**&lt; Display has been added to the system */
		///     SDL_EVENT_DISPLAY_REMOVED,               /**&lt; Display has been removed from the system */
		///     SDL_EVENT_DISPLAY_MOVED,                 /**&lt; Display has changed position */
		///     SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED,  /**&lt; Display has changed desktop mode */
		///     SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED,  /**&lt; Display has changed current mode */
		///     SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED, /**&lt; Display has changed content scale */
		///     SDL_EVENT_DISPLAY_FIRST = SDL_EVENT_DISPLAY_ORIENTATION,
		///     SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED,
		/// 
		///     /* Window events */
		///     /* 0x200 was SDL_WINDOWEVENT, reserve the number for sdl2-compat */
		///     /* 0x201 was SDL_EVENT_SYSWM, reserve the number for sdl2-compat */
		///     SDL_EVENT_WINDOW_SHOWN = 0x202,     /**&lt; Window has been shown */
		///     SDL_EVENT_WINDOW_HIDDEN,            /**&lt; Window has been hidden */
		///     SDL_EVENT_WINDOW_EXPOSED,           /**&lt; Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event */
		///     SDL_EVENT_WINDOW_MOVED,             /**&lt; Window has been moved to data1, data2 */
		///     SDL_EVENT_WINDOW_RESIZED,           /**&lt; Window has been resized to data1xdata2 */
		///     SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED,/**&lt; The pixel size of the window has changed to data1xdata2 */
		///     SDL_EVENT_WINDOW_METAL_VIEW_RESIZED,/**&lt; The pixel size of a Metal view associated with the window has changed */
		///     SDL_EVENT_WINDOW_MINIMIZED,         /**&lt; Window has been minimized */
		///     SDL_EVENT_WINDOW_MAXIMIZED,         /**&lt; Window has been maximized */
		///     SDL_EVENT_WINDOW_RESTORED,          /**&lt; Window has been restored to normal size and position */
		///     SDL_EVENT_WINDOW_MOUSE_ENTER,       /**&lt; Window has gained mouse focus */
		///     SDL_EVENT_WINDOW_MOUSE_LEAVE,       /**&lt; Window has lost mouse focus */
		///     SDL_EVENT_WINDOW_FOCUS_GAINED,      /**&lt; Window has gained keyboard focus */
		///     SDL_EVENT_WINDOW_FOCUS_LOST,        /**&lt; Window has lost keyboard focus */
		///     SDL_EVENT_WINDOW_CLOSE_REQUESTED,   /**&lt; The window manager requests that the window be closed */
		///     SDL_EVENT_WINDOW_HIT_TEST,          /**&lt; Window had a hit test that wasn't SDL_HITTEST_NORMAL */
		///     SDL_EVENT_WINDOW_ICCPROF_CHANGED,   /**&lt; The ICC profile of the window's display has changed */
		///     SDL_EVENT_WINDOW_DISPLAY_CHANGED,   /**&lt; Window has been moved to display data1 */
		///     SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED, /**&lt; Window display scale has been changed */
		///     SDL_EVENT_WINDOW_SAFE_AREA_CHANGED, /**&lt; The window safe area has been changed */
		///     SDL_EVENT_WINDOW_OCCLUDED,          /**&lt; The window has been occluded */
		///     SDL_EVENT_WINDOW_ENTER_FULLSCREEN,  /**&lt; The window has entered fullscreen mode */
		///     SDL_EVENT_WINDOW_LEAVE_FULLSCREEN,  /**&lt; The window has left fullscreen mode */
		///     SDL_EVENT_WINDOW_DESTROYED,         /**&lt; The window with the associated ID is being or has been destroyed. If this message is being handled
		///                                              in an event watcher, the window handle is still valid and can still be used to retrieve any properties
		///                                              associated with the window. Otherwise, the handle has already been destroyed and all resources
		///                                              associated with it are invalid */
		///     SDL_EVENT_WINDOW_HDR_STATE_CHANGED, /**&lt; Window HDR properties have changed */
		///     SDL_EVENT_WINDOW_FIRST = SDL_EVENT_WINDOW_SHOWN,
		///     SDL_EVENT_WINDOW_LAST = SDL_EVENT_WINDOW_HDR_STATE_CHANGED,
		/// 
		///     /* Keyboard events */
		///     SDL_EVENT_KEY_DOWN        = 0x300, /**&lt; Key pressed */
		///     SDL_EVENT_KEY_UP,                  /**&lt; Key released */
		///     SDL_EVENT_TEXT_EDITING,            /**&lt; Keyboard text editing (composition) */
		///     SDL_EVENT_TEXT_INPUT,              /**&lt; Keyboard text input */
		///     SDL_EVENT_KEYMAP_CHANGED,          /**&lt; Keymap changed due to a system event such as an
		///                                             input language or keyboard layout change. */
		///     SDL_EVENT_KEYBOARD_ADDED,          /**&lt; A new keyboard has been inserted into the system */
		///     SDL_EVENT_KEYBOARD_REMOVED,        /**&lt; A keyboard has been removed */
		///     SDL_EVENT_TEXT_EDITING_CANDIDATES, /**&lt; Keyboard text editing candidates */
		/// 
		///     /* Mouse events */
		///     SDL_EVENT_MOUSE_MOTION    = 0x400, /**&lt; Mouse moved */
		///     SDL_EVENT_MOUSE_BUTTON_DOWN,       /**&lt; Mouse button pressed */
		///     SDL_EVENT_MOUSE_BUTTON_UP,         /**&lt; Mouse button released */
		///     SDL_EVENT_MOUSE_WHEEL,             /**&lt; Mouse wheel motion */
		///     SDL_EVENT_MOUSE_ADDED,             /**&lt; A new mouse has been inserted into the system */
		///     SDL_EVENT_MOUSE_REMOVED,           /**&lt; A mouse has been removed */
		/// 
		///     /* Joystick events */
		///     SDL_EVENT_JOYSTICK_AXIS_MOTION  = 0x600, /**&lt; Joystick axis motion */
		///     SDL_EVENT_JOYSTICK_BALL_MOTION,          /**&lt; Joystick trackball motion */
		///     SDL_EVENT_JOYSTICK_HAT_MOTION,           /**&lt; Joystick hat position change */
		///     SDL_EVENT_JOYSTICK_BUTTON_DOWN,          /**&lt; Joystick button pressed */
		///     SDL_EVENT_JOYSTICK_BUTTON_UP,            /**&lt; Joystick button released */
		///     SDL_EVENT_JOYSTICK_ADDED,                /**&lt; A new joystick has been inserted into the system */
		///     SDL_EVENT_JOYSTICK_REMOVED,              /**&lt; An opened joystick has been removed */
		///     SDL_EVENT_JOYSTICK_BATTERY_UPDATED,      /**&lt; Joystick battery level change */
		///     SDL_EVENT_JOYSTICK_UPDATE_COMPLETE,      /**&lt; Joystick update is complete */
		/// 
		///     /* Gamepad events */
		///     SDL_EVENT_GAMEPAD_AXIS_MOTION  = 0x650, /**&lt; Gamepad axis motion */
		///     SDL_EVENT_GAMEPAD_BUTTON_DOWN,          /**&lt; Gamepad button pressed */
		///     SDL_EVENT_GAMEPAD_BUTTON_UP,            /**&lt; Gamepad button released */
		///     SDL_EVENT_GAMEPAD_ADDED,                /**&lt; A new gamepad has been inserted into the system */
		///     SDL_EVENT_GAMEPAD_REMOVED,              /**&lt; A gamepad has been removed */
		///     SDL_EVENT_GAMEPAD_REMAPPED,             /**&lt; The gamepad mapping was updated */
		///     SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN,        /**&lt; Gamepad touchpad was touched */
		///     SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION,      /**&lt; Gamepad touchpad finger was moved */
		///     SDL_EVENT_GAMEPAD_TOUCHPAD_UP,          /**&lt; Gamepad touchpad finger was lifted */
		///     SDL_EVENT_GAMEPAD_SENSOR_UPDATE,        /**&lt; Gamepad sensor was updated */
		///     SDL_EVENT_GAMEPAD_UPDATE_COMPLETE,      /**&lt; Gamepad update is complete */
		///     SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED,  /**&lt; Gamepad Steam handle has changed */
		/// 
		///     /* Touch events */
		///     SDL_EVENT_FINGER_DOWN      = 0x700,
		///     SDL_EVENT_FINGER_UP,
		///     SDL_EVENT_FINGER_MOTION,
		/// 
		///     /* 0x800, 0x801, and 0x802 were the Gesture events from SDL2. Do not reuse these values! sdl2-compat needs them! */
		/// 
		///     /* Clipboard events */
		///     SDL_EVENT_CLIPBOARD_UPDATE = 0x900, /**&lt; The clipboard or primary selection changed */
		/// 
		///     /* Drag and drop events */
		///     SDL_EVENT_DROP_FILE        = 0x1000, /**&lt; The system requests a file open */
		///     SDL_EVENT_DROP_TEXT,                 /**&lt; text/plain drag-and-drop event */
		///     SDL_EVENT_DROP_BEGIN,                /**&lt; A new set of drops is beginning (NULL filename) */
		///     SDL_EVENT_DROP_COMPLETE,             /**&lt; Current set of drops is now complete (NULL filename) */
		///     SDL_EVENT_DROP_POSITION,             /**&lt; Position while moving over the window */
		/// 
		///     /* Audio hotplug events */
		///     SDL_EVENT_AUDIO_DEVICE_ADDED = 0x1100,  /**&lt; A new audio device is available */
		///     SDL_EVENT_AUDIO_DEVICE_REMOVED,         /**&lt; An audio device has been removed. */
		///     SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED,  /**&lt; An audio device's format has been changed by the system. */
		/// 
		///     /* Sensor events */
		///     SDL_EVENT_SENSOR_UPDATE = 0x1200,     /**&lt; A sensor was updated */
		/// 
		///     /* Pressure-sensitive pen events */
		///     SDL_EVENT_PEN_PROXIMITY_IN = 0x1300,  /**&lt; Pressure-sensitive pen has become available */
		///     SDL_EVENT_PEN_PROXIMITY_OUT,          /**&lt; Pressure-sensitive pen has become unavailable */
		///     SDL_EVENT_PEN_DOWN,                   /**&lt; Pressure-sensitive pen touched drawing surface */
		///     SDL_EVENT_PEN_UP,                     /**&lt; Pressure-sensitive pen stopped touching drawing surface */
		///     SDL_EVENT_PEN_BUTTON_DOWN,            /**&lt; Pressure-sensitive pen button pressed */
		///     SDL_EVENT_PEN_BUTTON_UP,              /**&lt; Pressure-sensitive pen button released */
		///     SDL_EVENT_PEN_MOTION,                 /**&lt; Pressure-sensitive pen is moving on the tablet */
		///     SDL_EVENT_PEN_AXIS,                   /**&lt; Pressure-sensitive pen angle/pressure/etc changed */
		/// 
		///     /* Camera hotplug events */
		///     SDL_EVENT_CAMERA_DEVICE_ADDED = 0x1400,  /**&lt; A new camera device is available */
		///     SDL_EVENT_CAMERA_DEVICE_REMOVED,         /**&lt; A camera device has been removed. */
		///     SDL_EVENT_CAMERA_DEVICE_APPROVED,        /**&lt; A camera device has been approved for use by the user. */
		///     SDL_EVENT_CAMERA_DEVICE_DENIED,          /**&lt; A camera device has been denied for use by the user. */
		/// 
		///     /* Render events */
		///     SDL_EVENT_RENDER_TARGETS_RESET = 0x2000, /**&lt; The render targets have been reset and their contents need to be updated */
		///     SDL_EVENT_RENDER_DEVICE_RESET, /**&lt; The device has been reset and all textures need to be recreated */
		/// 
		///     /* Internal events */
		///     SDL_EVENT_POLL_SENTINEL = 0x7F00, /**&lt; Signals the end of an event poll cycle */
		/// 
		///     /** Events SDL_EVENT_USER through SDL_EVENT_LAST are for your use,
		///      *  and should be allocated with SDL_RegisterEvents()
		///      */
		///     SDL_EVENT_USER    = 0x8000,
		/// 
		///     /**
		///      *  This last event is only for bounding internal arrays
		///      */
		///     SDL_EVENT_LAST    = 0xFFFF,
		/// 
		///     /* This just makes sure the enum is the size of Uint32 */
		///     SDL_EVENT_ENUM_PADDING = 0x7FFFFFFF
		/// 
		/// } SDL_EventType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		public enum SDL_EventType
		{
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_FIRST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_FIRST = 0,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_QUIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_QUIT = 256,
			SDL_EVENT_TERMINATING = 257,
			SDL_EVENT_LOW_MEMORY = 258,
			SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
			SDL_EVENT_DID_ENTER_BACKGROUND = 260,
			SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
			SDL_EVENT_DID_ENTER_FOREGROUND = 262,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_LOCALE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_LOCALE_CHANGED = 263,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_SYSTEM_THEME_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_SYSTEM_THEME_CHANGED = 264,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_ORIENTATION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_ORIENTATION = 337,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_ADDED = 338,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_REMOVED = 339,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_MOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_MOVED = 340,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_FIRST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_FIRST = 337,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DISPLAY_LAST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DISPLAY_LAST = 343,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_SHOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_SHOWN = 514,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_HIDDEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_HIDDEN = 515,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_EXPOSED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_EXPOSED = 516,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_MOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_MOVED = 517,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_RESIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_RESIZED = 518,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_METAL_VIEW_RESIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_MINIMIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_MINIMIZED = 521,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_MAXIMIZED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_MAXIMIZED = 522,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_RESTORED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_RESTORED = 523,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_MOUSE_ENTER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_MOUSE_ENTER = 524,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_MOUSE_LEAVE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_MOUSE_LEAVE = 525,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_FOCUS_GAINED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_FOCUS_GAINED = 526,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_FOCUS_LOST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_FOCUS_LOST = 527,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_CLOSE_REQUESTED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_HIT_TEST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_HIT_TEST = 529,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_ICCPROF_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_DISPLAY_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_SAFE_AREA_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_OCCLUDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_OCCLUDED = 534,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_ENTER_FULLSCREEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_LEAVE_FULLSCREEN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536,
			SDL_EVENT_WINDOW_DESTROYED = 537,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_HDR_STATE_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 538,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_FIRST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_FIRST = 514,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_WINDOW_LAST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_WINDOW_LAST = 538,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_KEY_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_KEY_DOWN = 768,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_KEY_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_KEY_UP = 769,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_TEXT_EDITING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_TEXT_EDITING = 770,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_TEXT_INPUT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_TEXT_INPUT = 771,
			SDL_EVENT_KEYMAP_CHANGED = 772,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_KEYBOARD_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_KEYBOARD_ADDED = 773,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_KEYBOARD_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_KEYBOARD_REMOVED = 774,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_TEXT_EDITING_CANDIDATES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_TEXT_EDITING_CANDIDATES = 775,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_MOUSE_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_MOUSE_MOTION = 1024,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_MOUSE_BUTTON_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_MOUSE_BUTTON_DOWN = 1025,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_MOUSE_BUTTON_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_MOUSE_BUTTON_UP = 1026,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_MOUSE_WHEEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_MOUSE_WHEEL = 1027,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_MOUSE_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_MOUSE_ADDED = 1028,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_MOUSE_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_MOUSE_REMOVED = 1029,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_AXIS_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_BALL_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_BALL_MOTION = 1537,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_HAT_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_BUTTON_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_BUTTON_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_ADDED = 1541,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_REMOVED = 1542,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_BATTERY_UPDATED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_JOYSTICK_UPDATE_COMPLETE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_AXIS_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_BUTTON_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_BUTTON_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_BUTTON_UP = 1618,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_ADDED = 1619,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_REMOVED = 1620,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_REMAPPED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_REMAPPED = 1621,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_TOUCHPAD_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_SENSOR_UPDATE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_UPDATE_COMPLETE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_FINGER_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_FINGER_DOWN = 1792,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_FINGER_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_FINGER_UP = 1793,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_FINGER_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_FINGER_MOTION = 1794,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_CLIPBOARD_UPDATE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_CLIPBOARD_UPDATE = 2304,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DROP_FILE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DROP_FILE = 4096,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DROP_TEXT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DROP_TEXT = 4097,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DROP_BEGIN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DROP_BEGIN = 4098,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DROP_COMPLETE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DROP_COMPLETE = 4099,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_DROP_POSITION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_DROP_POSITION = 4100,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_AUDIO_DEVICE_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_AUDIO_DEVICE_ADDED = 4352,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_AUDIO_DEVICE_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_SENSOR_UPDATE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_SENSOR_UPDATE = 4608,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_PROXIMITY_IN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_PROXIMITY_IN = 4864,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_PROXIMITY_OUT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_PROXIMITY_OUT = 4865,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_DOWN = 4866,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_UP = 4867,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_BUTTON_DOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_BUTTON_DOWN = 4868,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_BUTTON_UP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_BUTTON_UP = 4869,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_MOTION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_MOTION = 4870,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_PEN_AXIS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_PEN_AXIS = 4871,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_CAMERA_DEVICE_ADDED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_CAMERA_DEVICE_ADDED = 5120,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_CAMERA_DEVICE_REMOVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_CAMERA_DEVICE_APPROVED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_CAMERA_DEVICE_DENIED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_CAMERA_DEVICE_DENIED = 5123,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_RENDER_TARGETS_RESET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_RENDER_TARGETS_RESET = 8192,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_RENDER_DEVICE_RESET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_RENDER_DEVICE_RESET = 8193,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_POLL_SENTINEL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_POLL_SENTINEL = 32512,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_USER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_USER = 32768,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_LAST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_LAST = 65535,
			/// <summary><para>Please refer to <see cref="SDL_EventType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_EVENT_ENUM_PADDING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_EVENT_ENUM_PADDING = 2147483647,
		}

		/// <summary>
		///   <para>Fields shared by every event</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CommonEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_CommonEvent
		/// {
		///     Uint32 type;        /**&lt; Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		/// } SDL_CommonEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_CommonEvent
		{
			public uint type;
			public uint reserved;
			public ulong timestamp;
		}

		/// <summary>
		///   <para>Display state change event data (event.display.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DisplayEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_DisplayEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_DISPLAYEVENT_* */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_DisplayID displayID;/**&lt; The associated display */
		///     Sint32 data1;       /**&lt; event dependent data */
		///     Sint32 data2;       /**&lt; event dependent data */
		/// } SDL_DisplayEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_DisplayEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint displayID;
			public int data1;
			public int data2;
		}

		/// <summary>
		///   <para>Window state change event data (event.window.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WindowEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_WindowEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_WINDOW_* */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The associated window */
		///     Sint32 data1;       /**&lt; event dependent data */
		///     Sint32 data2;       /**&lt; event dependent data */
		/// } SDL_WindowEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_WindowEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public int data1;
			public int data2;
		}

		/// <summary>
		///   <para>Keyboard device event structure (event.kdevice.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_KeyboardDeviceEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_KeyboardDeviceEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_KEYBOARD_ADDED or SDL_EVENT_KEYBOARD_REMOVED */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_KeyboardID which;   /**&lt; The keyboard instance id */
		/// } SDL_KeyboardDeviceEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_KeyboardDeviceEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
		}

		/// <summary>
		///   <para>Keyboard button event structure (event.key.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>The <c>key</c> is the base <see cref="SDL_Keycode" /> generated by pressing the<c>scancode</c> using the current keyboard layout, applying any optionsspecified in <see cref="SDL_HINT_KEYCODE_OPTIONS" />. You canget the <see cref="SDL_Keycode" /> corresponding to the event scancode andmodifiers directly from the keyboard layout, bypassing<see cref="SDL_HINT_KEYCODE_OPTIONS" />, by calling<see cref="SDL_GetKeyFromScancode" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetKeyFromScancode" />
		/// <seealso cref="SDL_HINT_KEYCODE_OPTIONS" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_KeyboardEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_KeyboardEvent
		/// {
		///     SDL_EventType type;     /**&lt; SDL_EVENT_KEY_DOWN or SDL_EVENT_KEY_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;       /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID;  /**&lt; The window with keyboard focus, if any */
		///     SDL_KeyboardID which;   /**&lt; The keyboard instance id, or 0 if unknown or virtual */
		///     SDL_Scancode scancode;  /**&lt; SDL physical key code */
		///     SDL_Keycode key;        /**&lt; SDL virtual key code */
		///     SDL_Keymod mod;         /**&lt; current key modifiers */
		///     Uint16 raw;             /**&lt; The platform dependent scancode for this event */
		///     bool down;          /**&lt; true if the key is pressed */
		///     bool repeat;        /**&lt; true if this is a key repeat */
		/// } SDL_KeyboardEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_KeyboardEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public SDL_Scancode scancode;
			public uint key;
			public SDL_Keymod mod;
			public ushort raw;
			public SDLBool down;
			public SDLBool repeat;
		}

		/// <summary>
		///   <para>Keyboard text editing event structure (event.edit.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>The start cursor is the position, in UTF-8 characters, where new typingwill be inserted into the editing text. The length is the number of UTF-8characters that will be replaced by new typing.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TextEditingEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_TextEditingEvent
		/// {
		///     SDL_EventType type;         /**&lt; SDL_EVENT_TEXT_EDITING */
		///     Uint32 reserved;
		///     Uint64 timestamp;           /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID;      /**&lt; The window with keyboard focus, if any */
		///     const char *text;           /**&lt; The editing text */
		///     Sint32 start;               /**&lt; The start cursor of selected editing text, or -1 if not set */
		///     Sint32 length;              /**&lt; The length of selected editing text, or -1 if not set */
		/// } SDL_TextEditingEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_TextEditingEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public byte* text;
			public int start;
			public int length;
		}

		/// <summary>
		///   <para>Keyboard IME candidates event structure (event.edit_candidates.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TextEditingCandidatesEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_TextEditingCandidatesEvent
		/// {
		///     SDL_EventType type;         /**&lt; SDL_EVENT_TEXT_EDITING_CANDIDATES */
		///     Uint32 reserved;
		///     Uint64 timestamp;           /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID;      /**&lt; The window with keyboard focus, if any */
		///     const char * const *candidates;    /**&lt; The list of candidates, or NULL if there are no candidates available */
		///     Sint32 num_candidates;      /**&lt; The number of strings in `candidates` */
		///     Sint32 selected_candidate;  /**&lt; The index of the selected candidate, or -1 if no candidate is selected */
		///     bool horizontal;          /**&lt; true if the list is horizontal, false if it's vertical */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_TextEditingCandidatesEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_TextEditingCandidatesEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public byte** candidates;
			public int num_candidates;
			public int selected_candidate;
			public SDLBool horizontal;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>Keyboard text input event structure (event.text.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>This event will never be delivered unless text input is enabled by calling<see cref="SDL_StartTextInput" />(). Text input is disabled bydefault!</para>
		/// </remarks>
		/// <seealso cref="SDL_StartTextInput" />
		/// <seealso cref="SDL_StopTextInput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TextInputEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_TextInputEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_TEXT_INPUT */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with keyboard focus, if any */
		///     const char *text;   /**&lt; The input text, UTF-8 encoded */
		/// } SDL_TextInputEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_TextInputEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public byte* text;
		}

		/// <summary>
		///   <para>Mouse device event structure (event.mdevice.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MouseDeviceEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MouseDeviceEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_MOUSE_ADDED or SDL_EVENT_MOUSE_REMOVED */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_MouseID which;  /**&lt; The mouse instance id */
		/// } SDL_MouseDeviceEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MouseDeviceEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
		}

		/// <summary>
		///   <para>Mouse motion event structure (event.motion.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MouseMotionEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MouseMotionEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_MOUSE_MOTION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with mouse focus, if any */
		///     SDL_MouseID which;  /**&lt; The mouse instance id or SDL_TOUCH_MOUSEID */
		///     SDL_MouseButtonFlags state;       /**&lt; The current button state */
		///     float x;            /**&lt; X coordinate, relative to window */
		///     float y;            /**&lt; Y coordinate, relative to window */
		///     float xrel;         /**&lt; The relative motion in the X direction */
		///     float yrel;         /**&lt; The relative motion in the Y direction */
		/// } SDL_MouseMotionEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MouseMotionEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public SDL_MouseButtonFlags state;
			public float x;
			public float y;
			public float xrel;
			public float yrel;
		}

		/// <summary>
		///   <para>Mouse button event structure (event.button.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MouseButtonEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MouseButtonEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_MOUSE_BUTTON_DOWN or SDL_EVENT_MOUSE_BUTTON_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with mouse focus, if any */
		///     SDL_MouseID which;  /**&lt; The mouse instance id, SDL_TOUCH_MOUSEID */
		///     Uint8 button;       /**&lt; The mouse button index */
		///     bool down;      /**&lt; true if the button is pressed */
		///     Uint8 clicks;       /**&lt; 1 for single-click, 2 for double-click, etc. */
		///     Uint8 padding;
		///     float x;            /**&lt; X coordinate, relative to window */
		///     float y;            /**&lt; Y coordinate, relative to window */
		/// } SDL_MouseButtonEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MouseButtonEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public byte button;
			public SDLBool down;
			public byte clicks;
			public byte padding;
			public float x;
			public float y;
		}

		/// <summary>
		///   <para>Mouse wheel event structure (event.wheel.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MouseWheelEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MouseWheelEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_MOUSE_WHEEL */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with mouse focus, if any */
		///     SDL_MouseID which;  /**&lt; The mouse instance id, SDL_TOUCH_MOUSEID */
		///     float x;            /**&lt; The amount scrolled horizontally, positive to the right and negative to the left */
		///     float y;            /**&lt; The amount scrolled vertically, positive away from the user and negative toward the user */
		///     SDL_MouseWheelDirection direction; /**&lt; Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back */
		///     float mouse_x;      /**&lt; X coordinate, relative to window */
		///     float mouse_y;      /**&lt; Y coordinate, relative to window */
		/// } SDL_MouseWheelEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MouseWheelEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public float x;
			public float y;
			public SDL_MouseWheelDirection direction;
			public float mouse_x;
			public float mouse_y;
		}

		/// <summary>
		///   <para>Joystick axis motion event structure (event.jaxis.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoyAxisEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_JoyAxisEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_JOYSTICK_AXIS_MOTION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Uint8 axis;         /**&lt; The joystick axis index */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		///     Sint16 value;       /**&lt; The axis value (range: -32768 to 32767) */
		///     Uint16 padding4;
		/// } SDL_JoyAxisEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_JoyAxisEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public byte axis;
			public byte padding1;
			public byte padding2;
			public byte padding3;
			public short value;
			public ushort padding4;
		}

		/// <summary>
		///   <para>Joystick trackball motion event structure (event.jball.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoyBallEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_JoyBallEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_JOYSTICK_BALL_MOTION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Uint8 ball;         /**&lt; The joystick trackball index */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		///     Sint16 xrel;        /**&lt; The relative motion in the X direction */
		///     Sint16 yrel;        /**&lt; The relative motion in the Y direction */
		/// } SDL_JoyBallEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_JoyBallEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public byte ball;
			public byte padding1;
			public byte padding2;
			public byte padding3;
			public short xrel;
			public short yrel;
		}

		/// <summary>
		///   <para>Joystick hat position change event structure (event.jhat.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoyHatEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_JoyHatEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_JOYSTICK_HAT_MOTION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Uint8 hat;          /**&lt; The joystick hat index */
		///     Uint8 value;        /**&lt; The hat position value.
		///                          *   \sa SDL_HAT_LEFTUP SDL_HAT_UP SDL_HAT_RIGHTUP
		///                          *   \sa SDL_HAT_LEFT SDL_HAT_CENTERED SDL_HAT_RIGHT
		///                          *   \sa SDL_HAT_LEFTDOWN SDL_HAT_DOWN SDL_HAT_RIGHTDOWN
		///                          *
		///                          *   Note that zero means the POV is centered.
		///                          */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_JoyHatEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_JoyHatEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public byte hat;
			public byte value;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>Joystick button event structure (event.jbutton.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoyButtonEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_JoyButtonEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_JOYSTICK_BUTTON_DOWN or SDL_EVENT_JOYSTICK_BUTTON_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Uint8 button;       /**&lt; The joystick button index */
		///     bool down;      /**&lt; true if the button is pressed */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_JoyButtonEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_JoyButtonEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public byte button;
			public SDLBool down;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>Joystick device event structure (event.jdevice.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoyDeviceEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_JoyDeviceEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_JOYSTICK_ADDED or SDL_EVENT_JOYSTICK_REMOVED or SDL_EVENT_JOYSTICK_UPDATE_COMPLETE */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which;       /**&lt; The joystick instance id */
		/// } SDL_JoyDeviceEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_JoyDeviceEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
		}

		/// <summary>
		///   <para>Joystick battery level change event structure (event.jbattery.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_JoyBatteryEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_JoyBatteryEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_JOYSTICK_BATTERY_UPDATED */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     SDL_PowerState state; /**&lt; The joystick battery state */
		///     int percent;          /**&lt; The joystick battery percent charge remaining */
		/// } SDL_JoyBatteryEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_JoyBatteryEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public SDL_PowerState state;
			public int percent;
		}

		/// <summary>
		///   <para>Gamepad axis motion event structure (event.gaxis.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadAxisEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GamepadAxisEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_GAMEPAD_AXIS_MOTION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Uint8 axis;         /**&lt; The gamepad axis (SDL_GamepadAxis) */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		///     Sint16 value;       /**&lt; The axis value (range: -32768 to 32767) */
		///     Uint16 padding4;
		/// } SDL_GamepadAxisEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GamepadAxisEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public byte axis;
			public byte padding1;
			public byte padding2;
			public byte padding3;
			public short value;
			public ushort padding4;
		}

		/// <summary>
		///   <para>Gamepad button event structure (event.gbutton.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadButtonEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GamepadButtonEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_GAMEPAD_BUTTON_DOWN or SDL_EVENT_GAMEPAD_BUTTON_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Uint8 button;       /**&lt; The gamepad button (SDL_GamepadButton) */
		///     bool down;      /**&lt; true if the button is pressed */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_GamepadButtonEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GamepadButtonEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public byte button;
			public SDLBool down;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>Gamepad device event structure (event.gdevice.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadDeviceEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GamepadDeviceEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_GAMEPAD_ADDED, SDL_EVENT_GAMEPAD_REMOVED, or SDL_EVENT_GAMEPAD_REMAPPED, SDL_EVENT_GAMEPAD_UPDATE_COMPLETE or SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which;       /**&lt; The joystick instance id */
		/// } SDL_GamepadDeviceEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GamepadDeviceEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
		}

		/// <summary>
		///   <para>Gamepad touchpad event structure (event.gtouchpad.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadTouchpadEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GamepadTouchpadEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN or SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION or SDL_EVENT_GAMEPAD_TOUCHPAD_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Sint32 touchpad;    /**&lt; The index of the touchpad */
		///     Sint32 finger;      /**&lt; The index of the finger on the touchpad */
		///     float x;            /**&lt; Normalized in the range 0...1 with 0 being on the left */
		///     float y;            /**&lt; Normalized in the range 0...1 with 0 being at the top */
		///     float pressure;     /**&lt; Normalized in the range 0...1 */
		/// } SDL_GamepadTouchpadEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GamepadTouchpadEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public int touchpad;
			public int finger;
			public float x;
			public float y;
			public float pressure;
		}

		/// <summary>
		///   <para>Gamepad sensor event structure (event.gsensor.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GamepadSensorEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GamepadSensorEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_GAMEPAD_SENSOR_UPDATE */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_JoystickID which; /**&lt; The joystick instance id */
		///     Sint32 sensor;      /**&lt; The type of the sensor, one of the values of SDL_SensorType */
		///     float data[3];      /**&lt; Up to 3 values from the sensor, as defined in SDL_sensor.h */
		///     Uint64 sensor_timestamp; /**&lt; The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock */
		/// } SDL_GamepadSensorEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GamepadSensorEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public int sensor;
			public fixed float data[3];
			public ulong sensor_timestamp;
		}

		/// <summary>
		///   <para>Audio device event structure (event.adevice.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AudioDeviceEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_AudioDeviceEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_AUDIO_DEVICE_ADDED, or SDL_EVENT_AUDIO_DEVICE_REMOVED, or SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_AudioDeviceID which;       /**&lt; SDL_AudioDeviceID for the device being added or removed or changing */
		///     bool recording; /**&lt; false if a playback device, true if a recording device. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_AudioDeviceEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_AudioDeviceEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public SDLBool recording;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>Camera device event structure (event.cdevice.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CameraDeviceEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_CameraDeviceEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_CAMERA_DEVICE_ADDED, SDL_EVENT_CAMERA_DEVICE_REMOVED, SDL_EVENT_CAMERA_DEVICE_APPROVED, SDL_EVENT_CAMERA_DEVICE_DENIED */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_CameraID which;       /**&lt; SDL_CameraID for the device being added or removed or changing */
		/// } SDL_CameraDeviceEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_CameraDeviceEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
		}

		/// <summary>
		///   <para>Touch finger event structure (event.tfinger.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TouchFingerEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_TouchFingerEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_FINGER_MOTION or SDL_EVENT_FINGER_DOWN or SDL_EVENT_FINGER_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_TouchID touchID; /**&lt; The touch device id */
		///     SDL_FingerID fingerID;
		///     float x;            /**&lt; Normalized in the range 0...1 */
		///     float y;            /**&lt; Normalized in the range 0...1 */
		///     float dx;           /**&lt; Normalized in the range -1...1 */
		///     float dy;           /**&lt; Normalized in the range -1...1 */
		///     float pressure;     /**&lt; Normalized in the range 0...1 */
		///     SDL_WindowID windowID; /**&lt; The window underneath the finger, if any */
		/// } SDL_TouchFingerEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_TouchFingerEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public ulong touchID;
			public ulong fingerID;
			public float x;
			public float y;
			public float dx;
			public float dy;
			public float pressure;
			public uint windowID;
		}

		/// <summary>
		///   <para>Pressure-sensitive pen proximity event structure (event.pmotion.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>When a pen becomes visible to the system (it is close enough to a tablet,etc), SDL will send an<see cref="SDL_EventType.SDL_EVENT_PEN_PROXIMITY_IN" /> event with the newpen's ID. This ID is valid until the pen leaves proximity again (has beenremoved from the tablet's area, the tablet has been unplugged, etc). If thesame pen reenters proximity again, it will be given a new ID.</para>
		///   <para>Note that "proximity" means "close enough for the tablet to know the toolis there." The pen touching and lifting off from the tablet while notleaving the area are handled by <see cref="SDL_EventType.SDL_EVENT_PEN_DOWN" />and <see cref="SDL_EventType.SDL_EVENT_PEN_UP" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenProximityEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_PenProximityEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_PEN_PROXIMITY_IN or SDL_EVENT_PEN_PROXIMITY_OUT */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with mouse focus, if any */
		///     SDL_PenID which;        /**&lt; The pen instance id */
		/// } SDL_PenProximityEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PenProximityEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
		}

		/// <summary>
		///   <para>Pressure-sensitive pen motion event structure (event.pmotion.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>Depending on the hardware, you may get motion events when the pen is nottouching a tablet, for tracking a pen even when it isn't drawing. Youshould listen for <see cref="SDL_EventType.SDL_EVENT_PEN_DOWN" /> and<see cref="SDL_EventType.SDL_EVENT_PEN_UP" /> events, or check <c>pen_state &amp; SDL_PEN_INPUT_DOWN</c> to decide if a pen is "drawing" when dealing with penmotion.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenMotionEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_PenMotionEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_PEN_MOTION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with mouse focus, if any */
		///     SDL_PenID which;        /**&lt; The pen instance id */
		///     SDL_PenInputFlags pen_state;   /**&lt; Complete pen input state at time of event */
		///     float x;                /**&lt; X coordinate, relative to window */
		///     float y;                /**&lt; Y coordinate, relative to window */
		/// } SDL_PenMotionEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PenMotionEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public SDL_PenInputFlags pen_state;
			public float x;
			public float y;
		}

		/// <summary>
		///   <para>Pressure-sensitive pen touched event structure (event.ptouch.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>These events come when a pen touches a surface (a tablet, etc), or liftsoff from one.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenTouchEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_PenTouchEvent
		/// {
		///     SDL_EventType type;     /**&lt; SDL_EVENT_PEN_DOWN or SDL_EVENT_PEN_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;       /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID;  /**&lt; The window with pen focus, if any */
		///     SDL_PenID which;        /**&lt; The pen instance id */
		///     SDL_PenInputFlags pen_state;   /**&lt; Complete pen input state at time of event */
		///     float x;                /**&lt; X coordinate, relative to window */
		///     float y;                /**&lt; Y coordinate, relative to window */
		///     bool eraser;        /**&lt; true if eraser end is used (not all pens support this). */
		///     bool down;          /**&lt; true if the pen is touching or false if the pen is lifted off */
		/// } SDL_PenTouchEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PenTouchEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public SDL_PenInputFlags pen_state;
			public float x;
			public float y;
			public SDLBool eraser;
			public SDLBool down;
		}

		/// <summary>
		///   <para>Pressure-sensitive pen button event structure (event.pbutton.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>This is for buttons on the pen itself that the user might click. The penitself pressing down to draw triggers a<see cref="SDL_EventType.SDL_EVENT_PEN_DOWN" /> event instead.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenButtonEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_PenButtonEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_PEN_BUTTON_DOWN or SDL_EVENT_PEN_BUTTON_UP */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The window with mouse focus, if any */
		///     SDL_PenID which;        /**&lt; The pen instance id */
		///     SDL_PenInputFlags pen_state;   /**&lt; Complete pen input state at time of event */
		///     float x;                /**&lt; X coordinate, relative to window */
		///     float y;                /**&lt; Y coordinate, relative to window */
		///     Uint8 button;       /**&lt; The pen button index (first button is 1). */
		///     bool down;      /**&lt; true if the button is pressed */
		/// } SDL_PenButtonEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PenButtonEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public SDL_PenInputFlags pen_state;
			public float x;
			public float y;
			public byte button;
			public SDLBool down;
		}

		/// <summary>
		///   <para>Pressure-sensitive pen pressure / angle event structure (event.paxis.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>You might get some of these events even if the pen isn't touching thetablet.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PenAxisEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_PenAxisEvent
		/// {
		///     SDL_EventType type;     /**&lt; SDL_EVENT_PEN_AXIS */
		///     Uint32 reserved;
		///     Uint64 timestamp;       /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID;  /**&lt; The window with pen focus, if any */
		///     SDL_PenID which;        /**&lt; The pen instance id */
		///     SDL_PenInputFlags pen_state;   /**&lt; Complete pen input state at time of event */
		///     float x;                /**&lt; X coordinate, relative to window */
		///     float y;                /**&lt; Y coordinate, relative to window */
		///     SDL_PenAxis axis;       /**&lt; Axis that has changed */
		///     float value;            /**&lt; New value of axis */
		/// } SDL_PenAxisEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PenAxisEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public uint which;
			public SDL_PenInputFlags pen_state;
			public float x;
			public float y;
			public SDL_PenAxis axis;
			public float value;
		}

		/// <summary>
		///   <para>An event used to drop text or request a file open by the system (event.drop.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DropEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_DropEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_DROP_BEGIN or SDL_EVENT_DROP_FILE or SDL_EVENT_DROP_TEXT or SDL_EVENT_DROP_COMPLETE or SDL_EVENT_DROP_POSITION */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID;    /**&lt; The window that was dropped on, if any */
		///     float x;            /**&lt; X coordinate, relative to window (not on begin) */
		///     float y;            /**&lt; Y coordinate, relative to window (not on begin) */
		///     const char *source; /**&lt; The source app that sent this drop event, or NULL if that isn't available */
		///     const char *data;   /**&lt; The text for SDL_EVENT_DROP_TEXT and the file name for SDL_EVENT_DROP_FILE, NULL for other events */
		/// } SDL_DropEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_DropEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public float x;
			public float y;
			public byte* source;
			public byte* data;
		}

		/// <summary>
		///   <para>An event triggered when the clipboard contents have changed (event.clipboard.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClipboardEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_ClipboardEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_CLIPBOARD_UPDATE */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     bool owner;       /**&lt; are we owning the clipboard (internal update) */
		///     Sint32 n_mime_types;     /**&lt; number of mime types */
		///     const char **mime_types; /**&lt; current mime types */
		/// } SDL_ClipboardEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_ClipboardEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
		}

		/// <summary>
		///   <para>Sensor event structure (event.sensor.*)</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SensorEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_SensorEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_SENSOR_UPDATE */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_SensorID which; /**&lt; The instance ID of the sensor */
		///     float data[6];      /**&lt; Up to 6 values from the sensor - additional values can be queried using SDL_GetSensorData() */
		///     Uint64 sensor_timestamp; /**&lt; The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock */
		/// } SDL_SensorEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_SensorEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
			public uint which;
			public fixed float data[6];
			public ulong sensor_timestamp;
		}

		/// <summary>
		///   <para>The "quit requested" event</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_QuitEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_QuitEvent
		/// {
		///     SDL_EventType type; /**&lt; SDL_EVENT_QUIT */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		/// } SDL_QuitEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_QuitEvent
		{
			public SDL_EventType type;
			public uint reserved;
			public ulong timestamp;
		}

		/// <summary>
		///   <para>A user-defined event type (event.user.*)</para>
		/// </summary>
		/// <remarks>
		///   <para>This event is unique; it is never created by SDL, but only by theapplication. The event can be pushed onto the event queue using<see cref="SDL_PushEvent" />(). The contents of the structure members arecompletely up to the programmer; the only requirement is that '''type''' isa value obtained from <see cref="SDL_RegisterEvents" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UserEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_UserEvent
		/// {
		///     Uint32 type;        /**&lt; SDL_EVENT_USER through SDL_EVENT_LAST-1, Uint32 because these are not in the SDL_EventType enumeration */
		///     Uint32 reserved;
		///     Uint64 timestamp;   /**&lt; In nanoseconds, populated using SDL_GetTicksNS() */
		///     SDL_WindowID windowID; /**&lt; The associated window if any */
		///     Sint32 code;        /**&lt; User defined event code */
		///     void *data1;        /**&lt; User defined data pointer */
		///     void *data2;        /**&lt; User defined data pointer */
		/// } SDL_UserEvent;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>extern Sint32 my_event_code;
		/// extern void *significant_data;
		/// extern void *some_other_data;
		/// 
		/// const Uint32 myEventType = SDL_RegisterEvents(1);
		/// if (myEventType != ((Uint32)-1)) {
		///     SDL_Event event;
		///     SDL_zero(event);
		///     event.type = myEventType;
		///     event.user.code = my_event_code;
		///     event.user.data1 = significant_data;
		///     event.user.data2 = some_other_data;
		///     SDL_PushEvent(&amp;event);
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_UserEvent
		{
			public uint type;
			public uint reserved;
			public ulong timestamp;
			public uint windowID;
			public int code;
			public IntPtr data1;
			public IntPtr data2;
		}

		/// <summary>
		///   <para>The structure for all events in SDL.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Event<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef union SDL_Event
		/// {
		///     Uint32 type;                            /**&lt; Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */
		///     SDL_CommonEvent common;                 /**&lt; Common event data */
		///     SDL_DisplayEvent display;               /**&lt; Display event data */
		///     SDL_WindowEvent window;                 /**&lt; Window event data */
		///     SDL_KeyboardDeviceEvent kdevice;        /**&lt; Keyboard device change event data */
		///     SDL_KeyboardEvent key;                  /**&lt; Keyboard event data */
		///     SDL_TextEditingEvent edit;              /**&lt; Text editing event data */
		///     SDL_TextEditingCandidatesEvent edit_candidates; /**&lt; Text editing candidates event data */
		///     SDL_TextInputEvent text;                /**&lt; Text input event data */
		///     SDL_MouseDeviceEvent mdevice;           /**&lt; Mouse device change event data */
		///     SDL_MouseMotionEvent motion;            /**&lt; Mouse motion event data */
		///     SDL_MouseButtonEvent button;            /**&lt; Mouse button event data */
		///     SDL_MouseWheelEvent wheel;              /**&lt; Mouse wheel event data */
		///     SDL_JoyDeviceEvent jdevice;             /**&lt; Joystick device change event data */
		///     SDL_JoyAxisEvent jaxis;                 /**&lt; Joystick axis event data */
		///     SDL_JoyBallEvent jball;                 /**&lt; Joystick ball event data */
		///     SDL_JoyHatEvent jhat;                   /**&lt; Joystick hat event data */
		///     SDL_JoyButtonEvent jbutton;             /**&lt; Joystick button event data */
		///     SDL_JoyBatteryEvent jbattery;           /**&lt; Joystick battery event data */
		///     SDL_GamepadDeviceEvent gdevice;         /**&lt; Gamepad device event data */
		///     SDL_GamepadAxisEvent gaxis;             /**&lt; Gamepad axis event data */
		///     SDL_GamepadButtonEvent gbutton;         /**&lt; Gamepad button event data */
		///     SDL_GamepadTouchpadEvent gtouchpad;     /**&lt; Gamepad touchpad event data */
		///     SDL_GamepadSensorEvent gsensor;         /**&lt; Gamepad sensor event data */
		///     SDL_AudioDeviceEvent adevice;           /**&lt; Audio device event data */
		///     SDL_CameraDeviceEvent cdevice;          /**&lt; Camera device event data */
		///     SDL_SensorEvent sensor;                 /**&lt; Sensor event data */
		///     SDL_QuitEvent quit;                     /**&lt; Quit request event data */
		///     SDL_UserEvent user;                     /**&lt; Custom event data */
		///     SDL_TouchFingerEvent tfinger;           /**&lt; Touch finger event data */
		///     SDL_PenProximityEvent pproximity;       /**&lt; Pen proximity event data */
		///     SDL_PenTouchEvent ptouch;               /**&lt; Pen tip touching event data */
		///     SDL_PenMotionEvent pmotion;             /**&lt; Pen motion event data */
		///     SDL_PenButtonEvent pbutton;             /**&lt; Pen button event data */
		///     SDL_PenAxisEvent paxis;                 /**&lt; Pen axis event data */
		///     SDL_DropEvent drop;                     /**&lt; Drag and drop event data */
		///     SDL_ClipboardEvent clipboard;           /**&lt; Clipboard event data */
		/// 
		///     /* This is necessary for ABI compatibility between Visual C++ and GCC.
		///        Visual C++ will respect the push pack pragma and use 52 bytes (size of
		///        SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit
		///        architectures) for this union, and GCC will use the alignment of the
		///        largest datatype within the union, which is 8 bytes on 64-bit
		///        architectures.
		/// 
		///        So... we'll add padding to force the size to be the same for both.
		/// 
		///        On architectures where pointers are 16 bytes, this needs rounding up to
		///        the next multiple of 16, 64, and on architectures where pointers are
		///        even larger the size of SDL_UserEvent will dominate as being 3 pointers.
		///     */
		///     Uint8 padding[128];
		/// } SDL_Event;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[StructLayout(LayoutKind.Explicit)]
		public struct SDL_Event
		{
			[FieldOffset(0)]
			public uint type;
			[FieldOffset(0)]
			public SDL_CommonEvent common;
			[FieldOffset(0)]
			public SDL_DisplayEvent display;
			[FieldOffset(0)]
			public SDL_WindowEvent window;
			[FieldOffset(0)]
			public SDL_KeyboardDeviceEvent kdevice;
			[FieldOffset(0)]
			public SDL_KeyboardEvent key;
			[FieldOffset(0)]
			public SDL_TextEditingEvent edit;
			[FieldOffset(0)]
			public SDL_TextEditingCandidatesEvent edit_candidates;
			[FieldOffset(0)]
			public SDL_TextInputEvent text;
			[FieldOffset(0)]
			public SDL_MouseDeviceEvent mdevice;
			[FieldOffset(0)]
			public SDL_MouseMotionEvent motion;
			[FieldOffset(0)]
			public SDL_MouseButtonEvent button;
			[FieldOffset(0)]
			public SDL_MouseWheelEvent wheel;
			[FieldOffset(0)]
			public SDL_JoyDeviceEvent jdevice;
			[FieldOffset(0)]
			public SDL_JoyAxisEvent jaxis;
			[FieldOffset(0)]
			public SDL_JoyBallEvent jball;
			[FieldOffset(0)]
			public SDL_JoyHatEvent jhat;
			[FieldOffset(0)]
			public SDL_JoyButtonEvent jbutton;
			[FieldOffset(0)]
			public SDL_JoyBatteryEvent jbattery;
			[FieldOffset(0)]
			public SDL_GamepadDeviceEvent gdevice;
			[FieldOffset(0)]
			public SDL_GamepadAxisEvent gaxis;
			[FieldOffset(0)]
			public SDL_GamepadButtonEvent gbutton;
			[FieldOffset(0)]
			public SDL_GamepadTouchpadEvent gtouchpad;
			[FieldOffset(0)]
			public SDL_GamepadSensorEvent gsensor;
			[FieldOffset(0)]
			public SDL_AudioDeviceEvent adevice;
			[FieldOffset(0)]
			public SDL_CameraDeviceEvent cdevice;
			[FieldOffset(0)]
			public SDL_SensorEvent sensor;
			[FieldOffset(0)]
			public SDL_QuitEvent quit;
			[FieldOffset(0)]
			public SDL_UserEvent user;
			[FieldOffset(0)]
			public SDL_TouchFingerEvent tfinger;
			[FieldOffset(0)]
			public SDL_PenProximityEvent pproximity;
			[FieldOffset(0)]
			public SDL_PenTouchEvent ptouch;
			[FieldOffset(0)]
			public SDL_PenMotionEvent pmotion;
			[FieldOffset(0)]
			public SDL_PenButtonEvent pbutton;
			[FieldOffset(0)]
			public SDL_PenAxisEvent paxis;
			[FieldOffset(0)]
			public SDL_DropEvent drop;
			[FieldOffset(0)]
			public SDL_ClipboardEvent clipboard;
			[FieldOffset(0)]
			public fixed byte padding[128];
		}

		/// <summary>
		///   <para>Pump the event loop, gathering events from the input devices.</para>
		/// </summary>
		/// <remarks>
		///   <para>This function updates the event queue and internal input device state.</para>
		///   <para>WARNING: This should only be run in the thread that initialized thevideo subsystem, and for extra safety, you should consider only doing thosethings on the main thread in any case.</para>
		///   <para>
		///     <see cref="SDL_PumpEvents" />() gathers all the pending inputinformation from devices and places it in the event queue. Without calls to<see cref="SDL_PumpEvents" />() no events would ever be placed on thequeue. Often the need for calls to <see cref="SDL_PumpEvents" />() ishidden from the user since <see cref="SDL_PollEvent" />() and<see cref="SDL_WaitEvent" />() implicitly call<see cref="SDL_PumpEvents" />(). However, if you are not polling orwaiting for events (e.g. you are filtering them), then you must call<see cref="SDL_PumpEvents" />() to force an event queue update.</para>
		/// </remarks>
		/// <seealso cref="SDL_PollEvent" />
		/// <seealso cref="SDL_WaitEvent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PumpEvents<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_PumpEvents(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_PumpEvents();

		/// <summary>
		///   <para>The type of action to request from <see cref="SDL_PeepEvents" />().</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EventAction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_EventAction
		/// {
		///     SDL_ADDEVENT,  /**&lt; Add events to the back of the queue. */
		///     SDL_PEEKEVENT, /**&lt; Check but don't remove events from the queue front. */
		///     SDL_GETEVENT   /**&lt; Retrieve/remove events from the front of the queue. */
		/// } SDL_EventAction;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		public enum SDL_EventAction
		{
			/// <summary><para>Please refer to <see cref="SDL_EventAction" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ADDEVENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ADDEVENT = 0,
			/// <summary><para>Please refer to <see cref="SDL_EventAction" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PEEKEVENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PEEKEVENT = 1,
			/// <summary><para>Please refer to <see cref="SDL_EventAction" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GETEVENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GETEVENT = 2,
		}

		/// <summary>
		///   <para>Check the event queue for messages and optionally return them.</para>
		/// </summary>
		/// <param name="events">
		///   <para> destination buffer for the retrieved events, may be NULL to leave the events in the queue and return the number of events that would have been stored.                                                                 </para>
		/// </param>
		/// <param name="events" />
		/// <param name="numevents">
		///   <para> if action is <see cref="SDL_EventAction.SDL_ADDEVENT" />, the number of events to add back to the event queue; if action is <see cref="SDL_EventAction.SDL_PEEKEVENT" /> or <see cref="SDL_EventAction.SDL_GETEVENT" />, the maximum number of events to retrieve. </para>
		/// </param>
		/// <param name="numevents" />
		/// <param name="action">
		///   <para> action to take; see [[#action</para>
		/// </param>
		/// <param name="action">
		///   <para>Remarks]] for details.                                                                                                                                                                   </para>
		/// </param>
		/// <param name="minType">
		///   <para> minimum value of the event type to be considered; <see cref="SDL_EventType.SDL_EVENT_FIRST" /> is a safe choice.                                                                                                                 </para>
		/// </param>
		/// <param name="minType" />
		/// <param name="maxType">
		///   <para> maximum value of the event type to be considered; <see cref="SDL_EventType.SDL_EVENT_LAST" /> is a safe choice.                                                                                                                   </para>
		/// </param>
		/// <param name="maxType" />
		/// <returns>
		///   <para>(int) Returns the number of events actually stored or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <c>action</c> may be any of the following:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_EventAction.SDL_ADDEVENT" />: up to <c>numevents</c> events will be added tothe back of the event queue.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_EventAction.SDL_PEEKEVENT" />: <c>numevents</c> events at the front of theevent queue, within the specified minimum and maximum type, will bereturned to the caller and will not be removed from the queue. If youpass NULL for <c>events</c>, then <c>numevents</c> is ignored and the total numberof matching events will be returned.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_EventAction.SDL_GETEVENT" />: up to <c>numevents</c> events at the front ofthe event queue, within the specified minimum and maximum type, will bereturned to the caller and will be removed from the queue.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>You may have to call <see cref="SDL_PumpEvents" />() before calling thisfunction. Otherwise, the events may not be ready to be filtered when youcall <see cref="SDL_PeepEvents" />().</para>
		///   <para>This function is thread-safe.</para>
		/// </remarks>
		/// <seealso cref="SDL_PollEvent" />
		/// <seealso cref="SDL_PumpEvents" />
		/// <seealso cref="SDL_PushEvent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PeepEvents<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_PeepEvents(SDL_Event *events, int numevents, SDL_EventAction action, Uint32 minType, Uint32 maxType);
		/// </code><para>                                                                                                                                                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_PeepEvents(SDL_Event[] events, int numevents, SDL_EventAction action, uint minType, uint maxType);

		/// <summary>
		///   <para>Check for the existence of a certain event type in the event queue.</para>
		/// </summary>
		/// <param name="type">
		///   <para> the type of event to be queried; see <see cref="SDL_EventType" /> for details. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if events matching <c>type</c> are present, or false ifevents matching <c>type</c> are not present.</para>
		/// </returns>
		/// <remarks>
		///   <para>If you need to check for a range of event types, use<see cref="SDL_HasEvents" />() instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasEvents" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasEvent(Uint32 type);
		/// </code><para>                                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasEvent(uint type);

		/// <summary>
		///   <para>Check for the existence of certain event types in the event queue.</para>
		/// </summary>
		/// <param name="minType">
		///   <para> the low end of event type to be queried, inclusive; see <see cref="SDL_EventType" /> for details.  </para>
		/// </param>
		/// <param name="maxType">
		///   <para> the high end of event type to be queried, inclusive; see <see cref="SDL_EventType" /> for details. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if events with type &gt;= <c>minType</c> and &lt;= <c>maxType</c> arepresent, or false if not.</para>
		/// </returns>
		/// <remarks>
		///   <para>If you need to check for a single event type, use<see cref="SDL_HasEvent" />() instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_HasEvents" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HasEvents<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HasEvents(Uint32 minType, Uint32 maxType);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HasEvents(uint minType, uint maxType);

		/// <summary>
		///   <para>Clear events of a specific type from the event queue.</para>
		/// </summary>
		/// <param name="type">
		///   <para> the type of event to be cleared; see <see cref="SDL_EventType" /> for details. </para>
		/// </param>
		/// <remarks>
		///   <para>This will unconditionally remove any events from the queue that match<c>type</c>. If you need to remove a range of event types, use<see cref="SDL_FlushEvents" />() instead.</para>
		///   <para>It's also normal to just ignore events you don't care about in your eventloop without calling this function.</para>
		///   <para>This function only affects currently queued events. If you want to makesure that all pending OS events are flushed, you can call<see cref="SDL_PumpEvents" />() on the main thread immediately beforethe flush call.</para>
		///   <para>If you have user events with custom data that needs to be freed, you shoulduse <see cref="SDL_PeepEvents" />() to remove and clean up those eventsbefore calling this function.</para>
		/// </remarks>
		/// <seealso cref="SDL_FlushEvents" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlushEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_FlushEvent(Uint32 type);
		/// </code><para>                                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_FlushEvent(uint type);

		/// <summary>
		///   <para>Clear events of a range of types from the event queue.</para>
		/// </summary>
		/// <param name="minType">
		///   <para> the low end of event type to be cleared, inclusive; see <see cref="SDL_EventType" /> for details.  </para>
		/// </param>
		/// <param name="maxType">
		///   <para> the high end of event type to be cleared, inclusive; see <see cref="SDL_EventType" /> for details. </para>
		/// </param>
		/// <remarks>
		///   <para>This will unconditionally remove any events from the queue that are in therange of <c>minType</c> to <c>maxType</c>, inclusive. If you need to remove a singleevent type, use <see cref="SDL_FlushEvent" />() instead.</para>
		///   <para>It's also normal to just ignore events you don't care about in your eventloop without calling this function.</para>
		///   <para>This function only affects currently queued events. If you want to makesure that all pending OS events are flushed, you can call<see cref="SDL_PumpEvents" />() on the main thread immediately beforethe flush call.</para>
		/// </remarks>
		/// <seealso cref="SDL_FlushEvent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlushEvents<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_FlushEvents(Uint32 minType, Uint32 maxType);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_FlushEvents(uint minType, uint maxType);

		/// <summary>
		///   <para>Poll for currently pending events.</para>
		/// </summary>
		/// <param name="event">
		///   <para> the <see cref="SDL_Event" /> structure to be filled with the next event from the queue, or NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if this got an event or false if there are noneavailable.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>event</c> is not NULL, the next event is removed from the queue and storedin the <see cref="SDL_Event" /> structure pointed to by <c>event</c>. The 1returned refers to this event, immediately stored in the SDL Eventstructure -- not an event to follow.</para>
		///   <para>If <c>event</c> is NULL, it simply returns 1 if there is an event in the queue,but will not remove it from the queue.</para>
		///   <para>As this function may implicitly call <see cref="SDL_PumpEvents" />(),you can only call this function in the thread that set the video mode.</para>
		///   <para>
		///     <see cref="SDL_PollEvent" />() is the favored way of receiving systemevents since it can be done from the main loop and does not suspend themain loop while waiting on an event to be posted.</para>
		///   <para>The common practice is to fully process the event queue once every frame,usually as a first step before updating the game's state:</para>
		///   <code>while (game_is_still_running) {
		///     SDL_Event event;
		///     while (SDL_PollEvent(&amp;event)) {  // poll until all events are handled!
		///         // decide what to do with this event.
		///     }
		/// 
		///     // update game state, draw the current frame
		/// }
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_PushEvent" />
		/// <seealso cref="SDL_WaitEvent" />
		/// <seealso cref="SDL_WaitEventTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PollEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PollEvent(SDL_Event *event);
		/// </code><para>                                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PollEvent(out SDL_Event @event);

		/// <summary>
		///   <para>Wait indefinitely for the next available event.</para>
		/// </summary>
		/// <param name="event">
		///   <para> the <see cref="SDL_Event" /> structure to be filled in with the next event from the queue, or NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false if there was an error while waitingfor events; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>event</c> is not NULL, the next event is removed from the queue and storedin the <see cref="SDL_Event" /> structure pointed to by <c>event</c>.</para>
		///   <para>As this function may implicitly call <see cref="SDL_PumpEvents" />(),you can only call this function in the thread that initialized the videosubsystem.</para>
		/// </remarks>
		/// <seealso cref="SDL_PollEvent" />
		/// <seealso cref="SDL_PushEvent" />
		/// <seealso cref="SDL_WaitEventTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitEvent(SDL_Event *event);
		/// </code><para>                                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitEvent(out SDL_Event @event);

		/// <summary>
		///   <para>Wait until the specified timeout (in milliseconds) for the next available event.</para>
		/// </summary>
		/// <param name="event">
		///   <para> the <see cref="SDL_Event" /> structure to be filled in with the next event from the queue, or NULL. </para>
		/// </param>
		/// <param name="timeoutMS">
		///   <para> the maximum number of milliseconds to wait for the next available event.                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if this got an event or false if the timeout elapsedwithout any events available.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>event</c> is not NULL, the next event is removed from the queue and storedin the <see cref="SDL_Event" /> structure pointed to by <c>event</c>.</para>
		///   <para>As this function may implicitly call <see cref="SDL_PumpEvents" />(),you can only call this function in the thread that initialized the videosubsystem.</para>
		///   <para>The timeout is not guaranteed, the actual wait time could be longer due tosystem scheduling.</para>
		/// </remarks>
		/// <seealso cref="SDL_PollEvent" />
		/// <seealso cref="SDL_PushEvent" />
		/// <seealso cref="SDL_WaitEvent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitEventTimeout<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitEventTimeout(SDL_Event *event, Sint32 timeoutMS);
		/// </code><para>                                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitEventTimeout(out SDL_Event @event, int timeoutMS);

		/// <summary>
		///   <para>Add an event to the event queue.</para>
		/// </summary>
		/// <param name="event">
		///   <para> the <see cref="SDL_Event" /> to be added to the queue. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false if the event was filtered or onfailure; call <see cref="SDL_GetError" />() for more information. A commonreason for error is the event queue being full.</para>
		/// </returns>
		/// <remarks>
		///   <para>The event queue can actually be used as a two way communication channel.Not only can events be read from the queue, but the user can also pushtheir own events onto it. <c>event</c> is a pointer to the event structure youwish to push onto the queue. The event is copied into the queue, and thecaller may dispose of the memory pointed to after<see cref="SDL_PushEvent" />() returns.</para>
		///   <para>Note: Pushing device input events onto the queue doesn't modify the stateof the device within SDL.</para>
		///   <para>This function is thread-safe, and can be called from other threads safely.</para>
		///   <para>Note: Events pushed onto the queue with <see cref="SDL_PushEvent" />()get passed through the event filter but events added with<see cref="SDL_PeepEvents" />() do not.</para>
		///   <para>For pushing application-specific events, please use<see cref="SDL_RegisterEvents" />() to get an event type that doesnot conflict with other code that also wants its own custom event types.</para>
		/// </remarks>
		/// <seealso cref="SDL_PeepEvents" />
		/// <seealso cref="SDL_PollEvent" />
		/// <seealso cref="SDL_RegisterEvents" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PushEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PushEvent(SDL_Event *event);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PushEvent(ref SDL_Event @event);

		/// <summary>
		///   <para>A function pointer used for callbacks that watch the event queue.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns true to permit event to be added to the queue, and false todisallow it. When used with <see cref="SDL_AddEventWatch" />, thereturn value is ignored.</para>
		/// </returns>
		/// <seealso cref="SDL_SetEventFilter" />
		/// <seealso cref="SDL_AddEventWatch" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EventFilter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef bool (SDLCALL *SDL_EventFilter)(void *userdata, SDL_Event *event);
		/// </code><br /><b>## Thread Safety ##</b><para>SDL may call this callback at any time from any thread; the application isresponsible for locking resources the callback touches that need to beprotected.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate bool SDL_EventFilter(IntPtr userdata, SDL_Event* evt);

		/// <summary>
		///   <para>Set up a filter to process all events before they change internal state and are posted to the internal event queue.</para>
		/// </summary>
		/// <param name="filter">
		///   <para> an <see cref="SDL_EventFilter" /> function to call when an event happens. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>filter</c>.                                         </para>
		/// </param>
		/// <remarks>
		///   <para>If the filter function returns true when called, then the event will beadded to the internal queue. If it returns false, then the event will bedropped from the queue, but the internal state will still be updated. Thisallows selective filtering of dynamically arriving events.</para>
		///   <para>WARNING: Be very careful of what you do in the event filter function,as it may run in a different thread!</para>
		///   <para>On platforms that support it, if the quit event is generated by aninterrupt signal (e.g. pressing Ctrl-C), it will be delivered to theapplication at the next event poll.</para>
		///   <para>There is one caveat when dealing with the <see cref="SDL_QuitEvent" />event type. The event filter is only called when the window manager desiresto close the application window. If the event filter returns 1, then thewindow will be closed, otherwise the window will remain open if possible.</para>
		///   <para>Note: Disabled events never make it to the event filter function; see<see cref="SDL_SetEventEnabled" />().</para>
		///   <para>Note: If you just want to inspect events without filtering, you should use<see cref="SDL_AddEventWatch" />() instead.</para>
		///   <para>Note: Events pushed onto the queue with <see cref="SDL_PushEvent" />()get passed through the event filter, but events pushed onto the queue with<see cref="SDL_PeepEvents" />() do not.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddEventWatch" />
		/// <seealso cref="SDL_SetEventEnabled" />
		/// <seealso cref="SDL_GetEventFilter" />
		/// <seealso cref="SDL_PeepEvents" />
		/// <seealso cref="SDL_PushEvent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetEventFilter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetEventFilter(SDL_EventFilter filter, void *userdata);
		/// </code><para>                                                                               </para><br /><b>## Thread Safety ##</b><para>SDL may call the filter callback at any time from any thread; theapplication is responsible for locking resources the callback touches thatneed to be protected.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// 
		/// 
		/// // Just a quick warning: this is a silly way to do things, but it
		/// //  illustrates how event filters work. In real life, you'd just
		/// //  handle the event when you get it from SDL_PollEvent in the main
		/// //  loop. Generally if you find yourself using an event filter, you
		/// //  should stop and think carefully about whether you have a good
		/// //  reason to be doing so in the first place.
		/// 
		/// 
		/// // This is the function we'll pass to SDL_SetEventFilter. If it sees
		/// // that the user has pressed the keyboard's space bar, it toggles
		/// // the value pointed to by `userdata`, to represent the color blue,
		/// // between 255 and 0. The main program uses this value to clear the
		/// // window to a specific color as the space bar is pressed.
		/// static bool SDLCALL my_event_filter(void *userdata, SDL_Event * event)
		/// {
		///     if ((event-&gt;type == SDL_EVENT_KEY_DOWN) &amp;&amp; (event-&gt;key.key == SDLK_SPACE)) {
		///         Uint8 *blue = (Uint8 *) userdata;
		///         if (*blue == 0) {
		///             *blue = 255;
		///         } else {
		///             *blue = 0;
		///         }
		///     }
		///     return true;  // let all events be added to the queue since we always return 1.
		/// }
		/// 
		/// int main(int argc, char **argv)
		/// {
		///     Uint8 blue = 0;
		///     int quit = 0;
		/// 
		///     // Just get a window on the screen and clear it to black.
		///     // In real life, you should check these for errors!
		///     SDL_Init(SDL_INIT_VIDEO);
		///     SDL_Window *window = SDL_CreateWindow("Hello SDL", 640, 480, 0);
		///     SDL_Renderer *renderer = SDL_CreateRenderer(window, NULL);
		///     SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
		///     SDL_RenderClear(renderer);
		///     SDL_RenderPresent(renderer);
		/// 
		///     // Set up an event filter...
		///     SDL_SetEventFilter(my_event_filter, &amp;blue);
		/// 
		///     // Now run the event loop mostly forever. Each event goes through the
		///     //  my_event_filter function before it lands here. Each frame, we fill
		///     //  in the window with whatever color `blue` is set to, which might be
		///     //  changed by the filter function, as its address is our userdata.
		///     while (!quit) {
		///         SDL_Event e;
		///         while (SDL_PollEvent(&amp;e)) {
		///             if (e.type == SDL_EVENT_QUIT) {
		///                 quit = 1;
		///             }
		///         }
		/// 
		///         SDL_SetRenderDrawColor(renderer, 0, 0, blue, 255);
		///         SDL_RenderClear(renderer);
		///         SDL_RenderPresent(renderer);
		///     }
		/// 
		///     SDL_Quit();
		///     return 0;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetEventFilter(SDL_EventFilter filter, IntPtr userdata);

		/// <summary>
		///   <para>Query the current event filter.</para>
		/// </summary>
		/// <param name="filter">
		///   <para> the current callback function will be stored here.                          </para>
		/// </param>
		/// <param name="userdata">
		///   <para> the pointer that is passed to the current event filter will be stored here. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false if there is no event filter set.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function can be used to "chain" filters, by saving the existing filterbefore replacing it with a function that will call that saved filter.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetEventFilter" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetEventFilter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetEventFilter(SDL_EventFilter *filter, void **userdata);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetEventFilter(out SDL_EventFilter filter, out IntPtr userdata);

		/// <summary>
		///   <para>Add a callback to be triggered when an event is added to the event queue.</para>
		/// </summary>
		/// <param name="filter">
		///   <para> an <see cref="SDL_EventFilter" /> function to call when an event happens. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>filter</c>.                                         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <c>filter</c> will be called when an event happens, and its return value isignored.</para>
		///   <para>WARNING: Be very careful of what you do in the event filter function,as it may run in a different thread!</para>
		///   <para>If the quit event is generated by a signal (e.g. SIGINT), it will bypassthe internal queue and be delivered to the watch callback immediately, andarrive at the next event poll.</para>
		///   <para>Note: the callback is called for events posted by the user through<see cref="SDL_PushEvent" />(), but not for disabled events, nor forevents by a filter callback set with<see cref="SDL_SetEventFilter" />(), nor for events posted by theuser through <see cref="SDL_PeepEvents" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_RemoveEventWatch" />
		/// <seealso cref="SDL_SetEventFilter" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddEventWatch<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_AddEventWatch(SDL_EventFilter filter, void *userdata);
		/// </code><para>                                                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_AddEventWatch(SDL_EventFilter filter, IntPtr userdata);

		/// <summary>
		///   <para>Remove an event watch callback added with <see cref="SDL_AddEventWatch" />().</para>
		/// </summary>
		/// <param name="filter">
		///   <para> the function originally passed to <see cref="SDL_AddEventWatch" />(). </para>
		/// </param>
		/// <param name="userdata">
		///   <para> the pointer originally passed to <see cref="SDL_AddEventWatch" />().  </para>
		/// </param>
		/// <remarks>
		///   <para>This function takes the same input as<see cref="SDL_AddEventWatch" />() to identify and delete thecorresponding callback.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddEventWatch" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RemoveEventWatch<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_RemoveEventWatch(SDL_EventFilter filter, void *userdata);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_RemoveEventWatch(SDL_EventFilter filter, IntPtr userdata);

		/// <summary>
		///   <para>Run a specific filter function on the current event queue, removing any events for which the filter returns false.</para>
		/// </summary>
		/// <param name="filter">
		///   <para> the <see cref="SDL_EventFilter" /> function to call when an event happens. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>filter</c>.                                          </para>
		/// </param>
		/// <remarks>
		///   <para>See <see cref="SDL_SetEventFilter" />() for more information. Unlike<see cref="SDL_SetEventFilter" />(), this function does not changethe filter permanently, it only uses the supplied filter until thisfunction returns.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetEventFilter" />
		/// <seealso cref="SDL_SetEventFilter" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FilterEvents<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_FilterEvents(SDL_EventFilter filter, void *userdata);
		/// </code><para>                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_FilterEvents(SDL_EventFilter filter, IntPtr userdata);

		/// <summary>
		///   <para>Set the state of processing events by type.</para>
		/// </summary>
		/// <param name="type">
		///   <para> the type of event; see <see cref="SDL_EventType" /> for details. </para>
		/// </param>
		/// <param name="enabled">
		///   <para> whether to process the event or not.                               </para>
		/// </param>
		/// <seealso cref="SDL_EventEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetEventEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetEventEnabled(Uint32 type, bool enabled);
		/// </code><para>                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetEventEnabled(uint type, SDLBool enabled);

		/// <summary>
		///   <para>Query the state of processing events by type.</para>
		/// </summary>
		/// <param name="type">
		///   <para> the type of event; see <see cref="SDL_EventType" /> for details. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the event is being processed, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_SetEventEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EventEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_EventEnabled(Uint32 type);
		/// </code><para>                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_EventEnabled(uint type);

		/// <summary>
		///   <para>Allocate a set of user-defined events, and return the beginning event number for that set of events.</para>
		/// </summary>
		/// <param name="numevents">
		///   <para> the number of events to be allocated. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns the beginning event number, or 0 if numevents is invalidor if there are not enough user-defined events left.</para>
		/// </returns>
		/// <seealso cref="SDL_PushEvent" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RegisterEvents<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_RegisterEvents(int numevents);
		/// </code><para>                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_RegisterEvents(int numevents);

		/// <summary>
		///   <para>Get window associated with an event.</para>
		/// </summary>
		/// <param name="event">
		///   <para> an event containing a <c>windowID</c>. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the associated window on success orNULL if there is none.</para>
		/// </returns>
		/// <seealso cref="SDL_PollEvent" />
		/// <seealso cref="SDL_WaitEvent" />
		/// <seealso cref="SDL_WaitEventTimeout" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetWindowFromEvent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_events.h">&lt;SDL3/SDL_events.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetWindowFromEvent(const SDL_Event *event);
		/// </code><para>                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryEvents">CategoryEvents</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetWindowFromEvent(ref SDL_Event @event);

		// /usr/local/include/SDL3/SDL_filesystem.h

		[DllImport(nativeLibName, EntryPoint = "SDL_GetBasePath", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetBasePath();
		/// <summary>
		///   <para>Get the directory where the application was run from.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns an absolute path in UTF-8 encoding to theapplication data directory. NULL will be returned on error or when theplatform doesn't implement this functionality, call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL caches the result of this call internally, but the first call to thisfunction is not necessarily fast, so plan accordingly.</para>
		///   <para>macOS and iOS Specific Functionality: If the application is in a ".app"bundle, this function returns the Resource directory (e.g.MyApp.app/Contents/Resources/). This behaviour can be overridden by addinga property to the Info.plist file. Adding a string key with the name<see cref="SDL_FILESYSTEM_BASE_DIR_TYPE" /> with asupported value will change the behaviour.</para>
		///   <para>Supported values for the<see cref="SDL_FILESYSTEM_BASE_DIR_TYPE" /> property(Given an application in /Applications/SDLApp/MyApp.app):</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <c>resource</c>: bundle resource directory (the default). For example:<c>/Applications/SDLApp/MyApp.app/Contents/Resources</c></para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>bundle</c>: the Bundle directory. For example:<c>/Applications/SDLApp/MyApp.app/</c></para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <c>parent</c>: the containing directory of the bundle. For example:<c>/Applications/SDLApp/</c></para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Nintendo 3DS Specific Functionality: This function returns "romfs"directory of the application as it is uncommon to store resources outsidethe executable. As such it is not a writable directory.</para>
		///   <para>The returned path is guaranteed to end with a path separator ('\\' onWindows, '/' on most other platforms).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPrefPath" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetBasePath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetBasePath(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static string SDL_GetBasePath()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetBasePath());
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPrefPath", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetPrefPath(byte* org, byte* app);
		/// <summary>
		///   <para>Get the user-and-app-specific path where files can be written.</para>
		/// </summary>
		/// <param name="org">
		///   <para> the name of your organization. </para>
		/// </param>
		/// <param name="app">
		///   <para> the name of your application.  </para>
		/// </param>
		/// <returns>
		///   <para>(char *) Returns a UTF-8 string of the user directory in platform-dependentnotation. NULL if there's a problem (creating directory failed, etc.). Thisshould be freed with <see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Get the "pref dir". This is meant to be where users can write personalfiles (preferences and save games, etc) that are specific to yourapplication. This directory is unique per user, per application.</para>
		///   <para>This function will decide the appropriate location in the nativefilesystem, create the directory if necessary, and return a string of theabsolute path to the directory in UTF-8 encoding.</para>
		///   <para>On Windows, the string might look like:</para>
		///   <para>
		///     <c>C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\</c>
		///   </para>
		///   <para>On Linux, the string might look like:</para>
		///   <para>
		///     <c>/home/bob/.local/share/My Program Name/</c>
		///   </para>
		///   <para>On macOS, the string might look like:</para>
		///   <para>
		///     <c>/Users/bob/Library/Application Support/My Program Name/</c>
		///   </para>
		///   <para>You should assume the path returned by this function is the only safe placeto write files (and that <see cref="SDL_GetBasePath" />(), while itmight be writable, or even the parent of the returned path, isn't where youshould be writing things).</para>
		///   <para>Both the org and app strings may become part of a directory name, so pleasefollow these rules:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>Try to use the same org string (including case-sensitivity) for allyour applications that use this function.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Always use a unique app string for each one, and make sure it neverchanges for an app once you've decided on it.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Unicode characters are legal, as long as they are UTF-8 encoded, but...</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>...only use letters, numbers, and spaces. Avoid punctuation like "GameName 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The returned path is guaranteed to end with a path separator ('\\' onWindows, '/' on most other platforms).</para>
		/// </remarks>
		/// <seealso cref="SDL_GetBasePath" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPrefPath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>char * SDL_GetPrefPath(const char *org, const char *app);
		/// </code><para>                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static string SDL_GetPrefPath(string org, string app)
		{
			var orgUTF8 = EncodeAsUTF8(org);
			var appUTF8 = EncodeAsUTF8(app);
			var result = DecodeFromUTF8(INTERNAL_SDL_GetPrefPath(orgUTF8, appUTF8), shouldFree: true);

			SDL_free((IntPtr) orgUTF8);
			SDL_free((IntPtr) appUTF8);
			return result;
		}

		/// <summary>
		///   <para>The type of the OS-provided default folder for a specific purpose.</para>
		/// </summary>
		/// <remarks>
		///   <para>Note that the Trash folder isn't included here, because trashing filesusually involves extra OS-specific functionality to remember the file'soriginal location.</para>
		///   <para>The folders supported per platform are:</para>
		///   <list type="table">
		///     <listheader>
		///       <term>
		///         <para>             </para>
		///       </term>
		///       <term>
		///         <para> Windows </para>
		///       </term>
		///       <term>
		///         <para> macOS/iOS </para>
		///       </term>
		///       <term>
		///         <para> tvOS </para>
		///       </term>
		///       <term>
		///         <para> Unix (XDG) </para>
		///       </term>
		///       <term>
		///         <para> Haiku </para>
		///       </term>
		///       <term>
		///         <para> Emscripten </para>
		///       </term>
		///     </listheader>
		///     <item>
		///       <description>
		///         <para> HOME        </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para> X     </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> DESKTOP     </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para> X     </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> DOCUMENTS   </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> DOWNLOADS   </para>
		///       </description>
		///       <description>
		///         <para> Vista+  </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> MUSIC       </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> PICTURES    </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> PUBLICSHARE </para>
		///       </description>
		///       <description>
		///         <para>         </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> SAVEDGAMES  </para>
		///       </description>
		///       <description>
		///         <para> Vista+  </para>
		///       </description>
		///       <description>
		///         <para>           </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> SCREENSHOTS </para>
		///       </description>
		///       <description>
		///         <para> Vista+  </para>
		///       </description>
		///       <description>
		///         <para>           </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> TEMPLATES   </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X         </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para> VIDEOS      </para>
		///       </description>
		///       <description>
		///         <para> X       </para>
		///       </description>
		///       <description>
		///         <para> X*        </para>
		///       </description>
		///       <description>
		///         <para>      </para>
		///       </description>
		///       <description>
		///         <para> X          </para>
		///       </description>
		///       <description>
		///         <para>       </para>
		///       </description>
		///       <description>
		///         <para>            </para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Note that on macOS/iOS, the Videos folder is called "Movies".</para>
		/// </remarks>
		/// <seealso cref="SDL_GetUserFolder" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Folder<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_Folder
		/// {
		///     SDL_FOLDER_HOME,        /**&lt; The folder which contains all of the current user's data, preferences, and documents. It usually contains most of the other folders. If a requested folder does not exist, the home folder can be considered a safe fallback to store a user's documents. */
		/// 
		///     SDL_FOLDER_DESKTOP,     /**&lt; The folder of files that are displayed on the desktop. Note that the existence of a desktop folder does not guarantee that the system does show icons on its desktop; certain GNU/Linux distros with a graphical environment may not have desktop icons. */
		/// 
		///     SDL_FOLDER_DOCUMENTS,   /**&lt; User document files, possibly application-specific. This is a good place to save a user's projects. */
		/// 
		///     SDL_FOLDER_DOWNLOADS,   /**&lt; Standard folder for user files downloaded from the internet. */
		/// 
		///     SDL_FOLDER_MUSIC,       /**&lt; Music files that can be played using a standard music player (mp3, ogg...). */
		/// 
		///     SDL_FOLDER_PICTURES,    /**&lt; Image files that can be displayed using a standard viewer (png, jpg...). */
		/// 
		///     SDL_FOLDER_PUBLICSHARE, /**&lt; Files that are meant to be shared with other users on the same computer. */
		/// 
		///     SDL_FOLDER_SAVEDGAMES,  /**&lt; Save files for games. */
		/// 
		///     SDL_FOLDER_SCREENSHOTS, /**&lt; Application screenshots. */
		/// 
		///     SDL_FOLDER_TEMPLATES,   /**&lt; Template files to be used when the user requests the desktop environment to create a new file in a certain folder, such as "New Text File.txt".  Any file in the Templates folder can be used as a starting point for a new file. */
		/// 
		///     SDL_FOLDER_VIDEOS,      /**&lt; Video files that can be played using a standard video player (mp4, webm...). */
		/// 
		///     SDL_FOLDER_COUNT        /**&lt; Total number of types in this enum, not a folder type by itself. */
		/// 
		/// } SDL_Folder;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public enum SDL_Folder
		{
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_HOME<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_HOME = 0,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_DESKTOP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_DESKTOP = 1,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_DOCUMENTS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_DOCUMENTS = 2,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_DOWNLOADS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_DOWNLOADS = 3,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_MUSIC<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_MUSIC = 4,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_PICTURES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_PICTURES = 5,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_PUBLICSHARE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_PUBLICSHARE = 6,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_SAVEDGAMES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_SAVEDGAMES = 7,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_SCREENSHOTS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_SCREENSHOTS = 8,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_TEMPLATES<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_TEMPLATES = 9,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_VIDEOS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_VIDEOS = 10,
			/// <summary><para>Please refer to <see cref="SDL_Folder" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_FOLDER_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_FOLDER_COUNT = 11,
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetUserFolder", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetUserFolder(SDL_Folder folder);
		/// <summary>
		///   <para>Finds the most suitable user folder for a specific purpose.</para>
		/// </summary>
		/// <param name="folder">
		///   <para> the type of folder to find. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns either a null-terminated C string containing thefull path to the folder, or NULL if an error happened.</para>
		/// </returns>
		/// <remarks>
		///   <para>Many OSes provide certain standard folders for certain purposes, such asstoring pictures, music or videos for a certain user. This function givesthe path for many of those special locations.</para>
		///   <para>This function is specifically for user folders, which are meant for theuser to access and manage. For application-specific folders, meant to holddata for the application to manage, see<see cref="SDL_GetBasePath" />() and<see cref="SDL_GetPrefPath" />().</para>
		///   <para>The returned path is guaranteed to end with a path separator ('\\' onWindows, '/' on most other platforms).</para>
		///   <para>If NULL is returned, the error may be obtained with<see cref="SDL_GetError" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetUserFolder<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetUserFolder(SDL_Folder folder);
		/// </code><para>                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static string SDL_GetUserFolder(SDL_Folder folder)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetUserFolder(folder));
		}

		public enum SDL_PathType
		{
			SDL_PATHTYPE_NONE = 0,
			SDL_PATHTYPE_FILE = 1,
			SDL_PATHTYPE_DIRECTORY = 2,
			SDL_PATHTYPE_OTHER = 3,
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_PathInfo
		{
			public SDL_PathType type;
			public ulong size;
			public long create_time;
			public long modify_time;
			public long access_time;
		}

		/// <summary>
		///   <para>Flags for path matching</para>
		/// </summary>
		/// <seealso cref="SDL_GlobDirectory" />
		/// <seealso cref="SDL_GlobStorageDirectory" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GlobFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_GlobFlags;
		/// 
		/// #define SDL_GLOB_CASEINSENSITIVE (1u &lt;&lt; 0)
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		[Flags]
		public enum SDL_GlobFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_GlobFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GLOB_CASEINSENSITIVE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GLOB_CASEINSENSITIVE = 0x1,
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateDirectory", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_CreateDirectory(byte* path);
		/// <summary>
		///   <para>Create a directory, and any missing parent directories.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the path of the directory to create. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This reports success if <c>path</c> already exists as a directory.</para>
		///   <para>If parent directories are missing, it will also create them. Note that ifthis fails, it will not remove any parent directories it already made.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateDirectory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CreateDirectory(const char *path);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static SDLBool SDL_CreateDirectory(string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_CreateDirectory(pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		/// <summary>
		///   <para>Possible results from an enumeration callback.</para>
		/// </summary>
		/// <seealso cref="SDL_EnumerateDirectoryCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnumerationResult<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_EnumerationResult
		/// {
		///     SDL_ENUM_CONTINUE,   /**&lt; Value that requests that enumeration continue. */
		///     SDL_ENUM_SUCCESS,    /**&lt; Value that requests that enumeration stop, successfully. */
		///     SDL_ENUM_FAILURE     /**&lt; Value that requests that enumeration stop, as a failure. */
		/// } SDL_EnumerationResult;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public enum SDL_EnumerationResult
		{
			/// <summary><para>Please refer to <see cref="SDL_EnumerationResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ENUM_CONTINUE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ENUM_CONTINUE = 0,
			/// <summary><para>Please refer to <see cref="SDL_EnumerationResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ENUM_SUCCESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ENUM_SUCCESS = 1,
			/// <summary><para>Please refer to <see cref="SDL_EnumerationResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_ENUM_FAILURE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_ENUM_FAILURE = 2,
		}

		/// <summary>
		///   <para>Callback for directory enumeration.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns how the enumeration should proceed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Enumeration of directory entries will continue until either all entrieshave been provided to the callback, or the callback has requested a stopthrough its return value.</para>
		///   <para>Returning <see cref="SDL_EnumerationResult.SDL_ENUM_CONTINUE" /> will let enumerationproceed, calling the callback with further entries.<see cref="SDL_EnumerationResult.SDL_ENUM_SUCCESS" /> and<see cref="SDL_EnumerationResult.SDL_ENUM_FAILURE" /> will terminate the enumeration early,and dictate the return value of the enumeration function itself.</para>
		/// </remarks>
		/// <seealso cref="SDL_EnumerateDirectory" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnumerateDirectoryCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef SDL_EnumerationResult (SDLCALL *SDL_EnumerateDirectoryCallback)(void *userdata, const char *dirname, const char *fname);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate SDL_EnumerationResult SDL_EnumerateDirectoryCallback(IntPtr userdata, byte* dirname, byte* fname);

		[DllImport(nativeLibName, EntryPoint = "SDL_EnumerateDirectory", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_EnumerateDirectory(byte* path, SDL_EnumerateDirectoryCallback callback, IntPtr userdata);
		/// <summary>
		///   <para>Enumerate a directory through a callback function.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the path of the directory to enumerate.                    </para>
		/// </param>
		/// <param name="callback">
		///   <para> a function that is called for each entry in the directory. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>callback</c>.                    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function provides every directory entry through an app-providedcallback, called once for each directory entry, until all results have beenprovided or the callback returns &lt;= 0.</para>
		///   <para>This will return false if there was a system problem in general, or if acallback returns -1. A successful return means a callback returned 1 tohalt enumeration, or all directory entries were enumerated.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnumerateDirectory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_EnumerateDirectory(const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static SDLBool SDL_EnumerateDirectory(string path, SDL_EnumerateDirectoryCallback callback, IntPtr userdata)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_EnumerateDirectory(pathUTF8, callback, userdata);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_RemovePath", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_RemovePath(byte* path);
		/// <summary>
		///   <para>Remove a file or an empty directory.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the path to remove from the filesystem. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Directories that are not empty will fail; this function will not recurselydelete directory trees.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RemovePath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RemovePath(const char *path);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static SDLBool SDL_RemovePath(string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_RemovePath(pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_RenamePath", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_RenamePath(byte* oldpath, byte* newpath);
		/// <summary>
		///   <para>Rename a file or directory.</para>
		/// </summary>
		/// <param name="oldpath">
		///   <para> the old path. </para>
		/// </param>
		/// <param name="newpath">
		///   <para> the new path. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the file at <c>newpath</c> already exists, it will replaced.</para>
		///   <para>Note that this will not copy files across filesystems/drives/volumes, asthat is a much more complicated (and possibly time-consuming) operation.</para>
		///   <para>Which is to say, if this function fails, <see cref="SDL_CopyFile" />() toa temporary file in the same directory as <c>newpath</c>, then<see cref="SDL_RenamePath" />() from the temporary file to <c>newpath</c> and<see cref="SDL_RemovePath" />() on <c>oldpath</c> might work for files.Renaming a non-empty directory across filesystems is dramatically morecomplex, however.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenamePath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenamePath(const char *oldpath, const char *newpath);
		/// </code><para>               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static SDLBool SDL_RenamePath(string oldpath, string newpath)
		{
			var oldpathUTF8 = EncodeAsUTF8(oldpath);
			var newpathUTF8 = EncodeAsUTF8(newpath);
			var result = INTERNAL_SDL_RenamePath(oldpathUTF8, newpathUTF8);

			SDL_free((IntPtr) oldpathUTF8);
			SDL_free((IntPtr) newpathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_CopyFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_CopyFile(byte* oldpath, byte* newpath);
		/// <summary>
		///   <para>Copy a file.</para>
		/// </summary>
		/// <param name="oldpath">
		///   <para> the old path. </para>
		/// </param>
		/// <param name="newpath">
		///   <para> the new path. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the file at <c>newpath</c> already exists, it will be overwritten with thecontents of the file at <c>oldpath</c>.</para>
		///   <para>This function will block until the copy is complete, which might be asignificant time for large files on slow disks. On some platforms, the copycan be handed off to the OS itself, but on others SDL might just open bothpaths, and read from one and write to the other.</para>
		///   <para>Note that this is not an atomic operation! If something tries to read from<c>newpath</c> while the copy is in progress, it will see an incomplete copy ofthe data, and if the calling thread terminates (or the power goes out)during the copy, <c>oldpath</c>'s previous contents will be gone, replaced withan incomplete copy of the data. To avoid this risk, it is recommended thatthe app copy to a temporary file in the same directory as <c>newpath</c>, and ifthe copy is successful, use <see cref="SDL_RenamePath" />() to replace<c>newpath</c> with the temporary file. This will ensure that reads of <c>newpath</c>will either see a complete copy of the data, or it will see the pre-copystate of <c>newpath</c>.</para>
		///   <para>This function attempts to synchronize the newly-copied data to disk beforereturning, if the platform allows it, so that the renaming trick will nothave a problem in a system crash or power failure, where the file could berenamed but the contents never made it from the system file cache to thephysical disk.</para>
		///   <para>If the copy fails for any reason, the state of <c>newpath</c> is undefined. Itmight be half a copy, it might be the untouched data of what was alreadythere, or it might be a zero-byte file, etc.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CopyFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CopyFile(const char *oldpath, const char *newpath);
		/// </code><para>               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static SDLBool SDL_CopyFile(string oldpath, string newpath)
		{
			var oldpathUTF8 = EncodeAsUTF8(oldpath);
			var newpathUTF8 = EncodeAsUTF8(newpath);
			var result = INTERNAL_SDL_CopyFile(oldpathUTF8, newpathUTF8);

			SDL_free((IntPtr) oldpathUTF8);
			SDL_free((IntPtr) newpathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPathInfo", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GetPathInfo(byte* path, out SDL_PathInfo info);
		/// <summary>
		///   <para>Get information about a filesystem path.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the path to query.                                                                                 </para>
		/// </param>
		/// <param name="info">
		///   <para> a pointer filled in with information about the path, or NULL to check for the existence of a file. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false if the file doesn't exist, oranother failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPathInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetPathInfo(const char *path, SDL_PathInfo *info);
		/// </code><para>                                                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static SDLBool SDL_GetPathInfo(string path, out SDL_PathInfo info)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_GetPathInfo(pathUTF8, out info);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GlobDirectory", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GlobDirectory(byte* path, byte* pattern, SDL_GlobFlags flags, out int count);
		/// <summary>
		///   <para>Enumerate a directory tree, filtered by pattern, and return a list.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the path of the directory to enumerate.                                           </para>
		/// </param>
		/// <param name="pattern">
		///   <para> the pattern that files in the directory must match. Can be NULL.                  </para>
		/// </param>
		/// <param name="flags">
		///   <para> <c>SDL_GLOB_*</c> bitflags that affect this search.                                    </para>
		/// </param>
		/// <param name="count">
		///   <para> on return, will be set to the number of items in the returned array. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(char **) Returns an array of strings on success or NULL on failure; call<see cref="SDL_GetError" />() for more information. This is a singleallocation that should be freed with <see cref="SDL_free" />() when it is nolonger needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Files are filtered out if they don't match the string in <c>pattern</c>, whichmay contain wildcard characters '' (match everything) and '?' (match onecharacter). If pattern is NULL, no filtering is done and all results arereturned. Subdirectories are permitted, and are specified with a pathseparator of '/'. Wildcard characters '' and '?' never match a pathseparator.</para>
		///   <para>
		///     <c>flags</c> may be set to <see cref="SDL_GlobFlags.SDL_GLOB_CASEINSENSITIVE" />to make the pattern matching case-insensitive.</para>
		///   <para>The returned array is always NULL-terminated, for your iteratingconvenience, but if <c>count</c> is non-NULL, on return it will contain thenumber of items in the array, not counting the NULL terminator.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GlobDirectory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_filesystem.h">&lt;SDL3/SDL_filesystem.h&gt;</see></para><br /><b>## Syntax ##</b><code>char ** SDL_GlobDirectory(const char *path, const char *pattern, SDL_GlobFlags flags, int *count);
		/// </code><para>                                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryFilesystem">CategoryFilesystem</see></para></misc>
		public static IntPtr SDL_GlobDirectory(string path, string pattern, SDL_GlobFlags flags, out int count)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var patternUTF8 = EncodeAsUTF8(pattern);
			var result = INTERNAL_SDL_GlobDirectory(pathUTF8, patternUTF8, flags, out count);

			SDL_free((IntPtr) pathUTF8);
			SDL_free((IntPtr) patternUTF8);
			return result;
		}

		// /usr/local/include/SDL3/SDL_gpu.h

		/// <summary>
		///   <para>Specifies the primitive topology of a graphics pipeline.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUPrimitiveType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUPrimitiveType
		/// {
		///     SDL_GPU_PRIMITIVETYPE_TRIANGLELIST,  /**&lt; A series of separate triangles. */
		///     SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP, /**&lt; A series of connected triangles. */
		///     SDL_GPU_PRIMITIVETYPE_LINELIST,      /**&lt; A series of separate lines. */
		///     SDL_GPU_PRIMITIVETYPE_LINESTRIP,     /**&lt; A series of connected lines. */
		///     SDL_GPU_PRIMITIVETYPE_POINTLIST      /**&lt; A series of separate points. */
		/// } SDL_GPUPrimitiveType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUPrimitiveType
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUPrimitiveType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRIMITIVETYPE_TRIANGLELIST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUPrimitiveType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUPrimitiveType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRIMITIVETYPE_LINELIST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRIMITIVETYPE_LINELIST = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUPrimitiveType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRIMITIVETYPE_LINESTRIP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRIMITIVETYPE_LINESTRIP = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUPrimitiveType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRIMITIVETYPE_POINTLIST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRIMITIVETYPE_POINTLIST = 4,
		}

		/// <summary>
		///   <para>Specifies how the contents of a texture attached to a render pass are treated at the beginning of the render pass.</para>
		/// </summary>
		/// <seealso cref="SDL_BeginGPURenderPass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPULoadOp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPULoadOp
		/// {
		///     SDL_GPU_LOADOP_LOAD,      /**&lt; The previous contents of the texture will be preserved. */
		///     SDL_GPU_LOADOP_CLEAR,     /**&lt; The contents of the texture will be cleared to a color. */
		///     SDL_GPU_LOADOP_DONT_CARE  /**&lt; The previous contents of the texture need not be preserved. The contents will be undefined. */
		/// } SDL_GPULoadOp;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPULoadOp
		{
			/// <summary><para>Please refer to <see cref="SDL_GPULoadOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_LOADOP_LOAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_LOADOP_LOAD = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPULoadOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_LOADOP_CLEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_LOADOP_CLEAR = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPULoadOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_LOADOP_DONT_CARE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_LOADOP_DONT_CARE = 2,
		}

		/// <summary>
		///   <para>Specifies how the contents of a texture attached to a render pass are treated at the end of the render pass.</para>
		/// </summary>
		/// <seealso cref="SDL_BeginGPURenderPass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUStoreOp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUStoreOp
		/// {
		///     SDL_GPU_STOREOP_STORE,             /**&lt; The contents generated during the render pass will be written to memory. */
		///     SDL_GPU_STOREOP_DONT_CARE,         /**&lt; The contents generated during the render pass are not needed and may be discarded. The contents will be undefined. */
		///     SDL_GPU_STOREOP_RESOLVE,           /**&lt; The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture may then be discarded and will be undefined. */
		///     SDL_GPU_STOREOP_RESOLVE_AND_STORE  /**&lt; The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture will be written to memory. */
		/// } SDL_GPUStoreOp;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUStoreOp
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUStoreOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STOREOP_STORE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STOREOP_STORE = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUStoreOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STOREOP_DONT_CARE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STOREOP_DONT_CARE = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUStoreOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STOREOP_RESOLVE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STOREOP_RESOLVE = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUStoreOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STOREOP_RESOLVE_AND_STORE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STOREOP_RESOLVE_AND_STORE = 3,
		}

		/// <summary>
		///   <para>Specifies the size of elements in an index buffer.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUIndexElementSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUIndexElementSize
		/// {
		///     SDL_GPU_INDEXELEMENTSIZE_16BIT, /**&lt; The index elements are 16-bit. */
		///     SDL_GPU_INDEXELEMENTSIZE_32BIT  /**&lt; The index elements are 32-bit. */
		/// } SDL_GPUIndexElementSize;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUIndexElementSize
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUIndexElementSize" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_INDEXELEMENTSIZE_16BIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_INDEXELEMENTSIZE_16BIT = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUIndexElementSize" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_INDEXELEMENTSIZE_32BIT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_INDEXELEMENTSIZE_32BIT = 1,
		}

		/// <summary>
		///   <para>Specifies the pixel format of a texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>Texture format support varies depending on driver, hardware, and usageflags. In general, you should use<see cref="SDL_GPUTextureSupportsFormat" /> to query if aformat is supported before using it. However, there are a few guaranteedformats.</para>
		///   <para>FIXME: Check universal support for 32-bit component formats FIXME: Checkuniversal support for SIMULTANEOUS_READ_WRITE</para>
		///   <para>For SAMPLER usage, the following formats are universally supported:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>B8G8R8A8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8_SNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8_SNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_SNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32G32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32G32B32A32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R11G11B10_UFLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UNORM_SRGB</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>B8G8R8A8_UNORM_SRGB</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>D16_UNORM</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For COLOR_TARGET usage, the following formats are universally supported:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>B8G8R8A8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32G32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32G32B32A32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UNORM_SRGB</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>B8G8R8A8_UNORM_SRGB</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For STORAGE usages, the following formats are universally supported:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_SNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32G32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R32G32B32A32_FLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_UINT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R8G8B8A8_INT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>R16G16B16A16_INT</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For DEPTH_STENCIL_TARGET usage, the following formats are universallysupported:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>D16_UNORM</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Either (but not necessarily both!) D24_UNORM or D32_SFLOAT</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Either (but not necessarily both!) D24_UNORM_S8_UINT orD32_SFLOAT_S8_UINT</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Unless D16_UNORM is sufficient for your purposes, always check which ofD24/D32 is supported before creating a depth-stencil texture!</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUTexture" />
		/// <seealso cref="SDL_GPUTextureSupportsFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUTextureFormat
		/// {
		///     SDL_GPU_TEXTUREFORMAT_INVALID,
		/// 
		///     /* Unsigned Normalized Float Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_A8_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R8_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R8G8_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R16_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R16G16_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM,
		///     /* Compressed Unsigned Normalized Float Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM,
		///     /* Compressed Signed Float Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT,
		///     /* Compressed Unsigned Float Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT,
		///     /* Signed Normalized Float Color Formats  */
		///     SDL_GPU_TEXTUREFORMAT_R8_SNORM,
		///     SDL_GPU_TEXTUREFORMAT_R8G8_SNORM,
		///     SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM,
		///     SDL_GPU_TEXTUREFORMAT_R16_SNORM,
		///     SDL_GPU_TEXTUREFORMAT_R16G16_SNORM,
		///     SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM,
		///     /* Signed Float Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_R16_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_R32_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT,
		///     /* Unsigned Float Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT,
		///     /* Unsigned Integer Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_R8_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R8G8_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R16_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R16G16_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R32_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R32G32_UINT,
		///     SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT,
		///     /* Signed Integer Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_R8_INT,
		///     SDL_GPU_TEXTUREFORMAT_R8G8_INT,
		///     SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT,
		///     SDL_GPU_TEXTUREFORMAT_R16_INT,
		///     SDL_GPU_TEXTUREFORMAT_R16G16_INT,
		///     SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT,
		///     SDL_GPU_TEXTUREFORMAT_R32_INT,
		///     SDL_GPU_TEXTUREFORMAT_R32G32_INT,
		///     SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT,
		///     /* SRGB Unsigned Normalized Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB,
		///     /* Compressed SRGB Unsigned Normalized Color Formats */
		///     SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB,
		///     /* Depth Formats */
		///     SDL_GPU_TEXTUREFORMAT_D16_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_D24_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_D32_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT,
		///     SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT,
		///     /* Compressed ASTC Normalized Float Color Formats*/
		///     SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM,
		///     /* Compressed SRGB ASTC Normalized Float Color Formats*/
		///     SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB,
		///     /* Compressed ASTC Signed Float Color Formats*/
		///     SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT,
		///     SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT
		/// } SDL_GPUTextureFormat;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUTextureFormat
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_A8_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_A8_UNORM = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8_UNORM = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16_UNORM = 5,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = 16,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8_SNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8_SNORM = 21,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8_SNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 22,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16_SNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16_SNORM = 24,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16_SNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = 25,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 27,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 28,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 30,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 31,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8_UINT = 34,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 35,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16_UINT = 37,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 38,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32_UINT = 40,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32G32_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32G32_UINT = 41,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8_INT = 43,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8_INT = 44,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16_INT = 46,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16_INT = 47,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32_INT = 49,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32G32_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32G32_INT = 50,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_D16_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_D16_UNORM = 58,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_D24_UNORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_D24_UNORM = 59,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_D32_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 60,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62,
		}

		/// <summary>
		///   <para>Specifies how a texture is intended to be used by the client.</para>
		/// </summary>
		/// <remarks>
		///   <para>A texture must have at least one usage flag. Note that some usage flagcombinations are invalid.</para>
		///   <para>With regards to compute storage usage, READ  WRITE means that you can haveshader A that only writes into the texture and shader B that only readsfrom the texture and bind the same texture to either shader respectively.SIMULTANEOUS means that you can do reads and writes within the same shaderor compute pass. It also implies that atomic ops can be used, since thoseare read-modify-write operations. If you use SIMULTANEOUS, you areresponsible for avoiding data races, as there is no data synchronizationwithin a compute pass. Note that SIMULTANEOUS usage is only supported by alimited number of texture formats.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureUsageFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_GPUTextureUsageFlags;
		/// 
		/// #define SDL_GPU_TEXTUREUSAGE_SAMPLER                                 (1u &lt;&lt; 0) /**&lt; Texture supports sampling. */
		/// #define SDL_GPU_TEXTUREUSAGE_COLOR_TARGET                            (1u &lt;&lt; 1) /**&lt; Texture is a color render target. */
		/// #define SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET                    (1u &lt;&lt; 2) /**&lt; Texture is a depth stencil target. */
		/// #define SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ                   (1u &lt;&lt; 3) /**&lt; Texture supports storage reads in graphics stages. */
		/// #define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ                    (1u &lt;&lt; 4) /**&lt; Texture supports storage reads in the compute stage. */
		/// #define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE                   (1u &lt;&lt; 5) /**&lt; Texture supports storage writes in the compute stage. */
		/// #define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE (1u &lt;&lt; 6) /**&lt; Texture supports reads and writes in the same compute shader. This is NOT equivalent to READ | WRITE. */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[Flags]
		public enum SDL_GPUTextureUsageFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREUSAGE_SAMPLER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_TEXTUREUSAGE_SAMPLER = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREUSAGE_COLOR_TARGET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_TEXTUREUSAGE_COLOR_TARGET = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ = 0x08,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ = 0x10,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE = 0x20,
		}

		/// <summary>
		///   <para>Specifies the type of a texture.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUTextureType
		/// {
		///     SDL_GPU_TEXTURETYPE_2D,         /**&lt; The texture is a 2-dimensional image. */
		///     SDL_GPU_TEXTURETYPE_2D_ARRAY,   /**&lt; The texture is a 2-dimensional array image. */
		///     SDL_GPU_TEXTURETYPE_3D,         /**&lt; The texture is a 3-dimensional image. */
		///     SDL_GPU_TEXTURETYPE_CUBE,       /**&lt; The texture is a cube image. */
		///     SDL_GPU_TEXTURETYPE_CUBE_ARRAY  /**&lt; The texture is a cube array image. */
		/// } SDL_GPUTextureType;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUTextureType
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTURETYPE_2D<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTURETYPE_2D = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTURETYPE_2D_ARRAY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTURETYPE_2D_ARRAY = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTURETYPE_3D<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTURETYPE_3D = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTURETYPE_CUBE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTURETYPE_CUBE = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUTextureType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TEXTURETYPE_CUBE_ARRAY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TEXTURETYPE_CUBE_ARRAY = 4,
		}

		/// <summary>
		///   <para>Specifies the sample count of a texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>Used in multisampling. Note that this value only applies when the textureis used as a render target.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUTexture" />
		/// <seealso cref="SDL_GPUTextureSupportsSampleCount" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSampleCount<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUSampleCount
		/// {
		///     SDL_GPU_SAMPLECOUNT_1,  /**&lt; No multisampling. */
		///     SDL_GPU_SAMPLECOUNT_2,  /**&lt; MSAA 2x */
		///     SDL_GPU_SAMPLECOUNT_4,  /**&lt; MSAA 4x */
		///     SDL_GPU_SAMPLECOUNT_8   /**&lt; MSAA 8x */
		/// } SDL_GPUSampleCount;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUSampleCount
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUSampleCount" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLECOUNT_1<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLECOUNT_1 = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUSampleCount" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLECOUNT_2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLECOUNT_2 = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUSampleCount" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLECOUNT_4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLECOUNT_4 = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUSampleCount" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLECOUNT_8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLECOUNT_8 = 3,
		}

		/// <summary>
		///   <para>Specifies the face of a cube map.</para>
		/// </summary>
		/// <remarks>
		///   <para>Can be passed in as the layer field in texture-related structs.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUCubeMapFace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUCubeMapFace
		/// {
		///     SDL_GPU_CUBEMAPFACE_POSITIVEX,
		///     SDL_GPU_CUBEMAPFACE_NEGATIVEX,
		///     SDL_GPU_CUBEMAPFACE_POSITIVEY,
		///     SDL_GPU_CUBEMAPFACE_NEGATIVEY,
		///     SDL_GPU_CUBEMAPFACE_POSITIVEZ,
		///     SDL_GPU_CUBEMAPFACE_NEGATIVEZ
		/// } SDL_GPUCubeMapFace;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUCubeMapFace
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUCubeMapFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CUBEMAPFACE_POSITIVEX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CUBEMAPFACE_POSITIVEX = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUCubeMapFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CUBEMAPFACE_NEGATIVEX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CUBEMAPFACE_NEGATIVEX = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUCubeMapFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CUBEMAPFACE_POSITIVEY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CUBEMAPFACE_POSITIVEY = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUCubeMapFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CUBEMAPFACE_NEGATIVEY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CUBEMAPFACE_NEGATIVEY = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUCubeMapFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CUBEMAPFACE_POSITIVEZ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CUBEMAPFACE_POSITIVEZ = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUCubeMapFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CUBEMAPFACE_NEGATIVEZ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CUBEMAPFACE_NEGATIVEZ = 5,
		}

		/// <summary>
		///   <para>Specifies how a buffer is intended to be used by the client.</para>
		/// </summary>
		/// <remarks>
		///   <para>A buffer must have at least one usage flag. Note that some usage flagcombinations are invalid.</para>
		///   <para>Unlike textures, READ  WRITE can be used for simultaneous read-writeusage. The same data synchronization concerns as textures apply.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBufferUsageFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_GPUBufferUsageFlags;
		/// 
		/// #define SDL_GPU_BUFFERUSAGE_VERTEX                                  (1u &lt;&lt; 0) /**&lt; Buffer is a vertex buffer. */
		/// #define SDL_GPU_BUFFERUSAGE_INDEX                                   (1u &lt;&lt; 1) /**&lt; Buffer is an index buffer. */
		/// #define SDL_GPU_BUFFERUSAGE_INDIRECT                                (1u &lt;&lt; 2) /**&lt; Buffer is an indirect buffer. */
		/// #define SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ                   (1u &lt;&lt; 3) /**&lt; Buffer supports storage reads in graphics stages. */
		/// #define SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ                    (1u &lt;&lt; 4) /**&lt; Buffer supports storage reads in the compute stage. */
		/// #define SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE                   (1u &lt;&lt; 5) /**&lt; Buffer supports storage writes in the compute stage. */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[Flags]
		public enum SDL_GPUBufferUsageFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUBufferUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BUFFERUSAGE_VERTEX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_BUFFERUSAGE_VERTEX = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_GPUBufferUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BUFFERUSAGE_INDEX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_BUFFERUSAGE_INDEX = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_GPUBufferUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BUFFERUSAGE_INDIRECT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_BUFFERUSAGE_INDIRECT = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_GPUBufferUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ = 0x08,
			/// <summary><para>Please refer to <see cref="SDL_GPUBufferUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ = 0x10,
			/// <summary><para>Please refer to <see cref="SDL_GPUBufferUsageFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE = 0x20,
		}

		/// <summary>
		///   <para>Specifies how a transfer buffer is intended to be used by the client.</para>
		/// </summary>
		/// <remarks>
		///   <para>Note that mapping and copying FROM an upload transfer buffer or TO adownload transfer buffer is undefined behavior.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUTransferBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTransferBufferUsage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUTransferBufferUsage
		/// {
		///     SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD,
		///     SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD
		/// } SDL_GPUTransferBufferUsage;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUTransferBufferUsage
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUTransferBufferUsage" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUTransferBufferUsage" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1,
		}

		/// <summary>
		///   <para>Specifies which stage a shader program corresponds to.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUShader" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUShaderStage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUShaderStage
		/// {
		///     SDL_GPU_SHADERSTAGE_VERTEX,
		///     SDL_GPU_SHADERSTAGE_FRAGMENT
		/// } SDL_GPUShaderStage;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUShaderStage
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderStage" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERSTAGE_VERTEX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SHADERSTAGE_VERTEX = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderStage" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERSTAGE_FRAGMENT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SHADERSTAGE_FRAGMENT = 1,
		}

		/// <summary>
		///   <para>Specifies the format of shader code.</para>
		/// </summary>
		/// <remarks>
		///   <para>Each format corresponds to a specific backend that accepts it.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUShader" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUShaderFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_GPUShaderFormat;
		/// 
		/// #define SDL_GPU_SHADERFORMAT_INVALID  0
		/// #define SDL_GPU_SHADERFORMAT_PRIVATE  (1u &lt;&lt; 0) /**&lt; Shaders for NDA'd platforms. */
		/// #define SDL_GPU_SHADERFORMAT_SPIRV    (1u &lt;&lt; 1) /**&lt; SPIR-V shaders for Vulkan. */
		/// #define SDL_GPU_SHADERFORMAT_DXBC     (1u &lt;&lt; 2) /**&lt; DXBC SM5_0 shaders for D3D11. */
		/// #define SDL_GPU_SHADERFORMAT_DXIL     (1u &lt;&lt; 3) /**&lt; DXIL shaders for D3D12. */
		/// #define SDL_GPU_SHADERFORMAT_MSL      (1u &lt;&lt; 4) /**&lt; MSL shaders for Metal. */
		/// #define SDL_GPU_SHADERFORMAT_METALLIB (1u &lt;&lt; 5) /**&lt; Precompiled metallib shaders for Metal. */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[Flags]
		public enum SDL_GPUShaderFormat : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERFORMAT_PRIVATE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_SHADERFORMAT_PRIVATE = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERFORMAT_SPIRV<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_SHADERFORMAT_SPIRV = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERFORMAT_DXBC<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_SHADERFORMAT_DXBC = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERFORMAT_DXIL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_SHADERFORMAT_DXIL = 0x08,
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERFORMAT_MSL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_SHADERFORMAT_MSL = 0x10,
			/// <summary><para>Please refer to <see cref="SDL_GPUShaderFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SHADERFORMAT_METALLIB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_SHADERFORMAT_METALLIB = 0x20,
		}

		/// <summary>
		///   <para>Specifies the format of a vertex attribute.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUVertexElementFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUVertexElementFormat
		/// {
		///     SDL_GPU_VERTEXELEMENTFORMAT_INVALID,
		/// 
		///     /* 32-bit Signed Integers */
		///     SDL_GPU_VERTEXELEMENTFORMAT_INT,
		///     SDL_GPU_VERTEXELEMENTFORMAT_INT2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_INT3,
		///     SDL_GPU_VERTEXELEMENTFORMAT_INT4,
		/// 
		///     /* 32-bit Unsigned Integers */
		///     SDL_GPU_VERTEXELEMENTFORMAT_UINT,
		///     SDL_GPU_VERTEXELEMENTFORMAT_UINT2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_UINT3,
		///     SDL_GPU_VERTEXELEMENTFORMAT_UINT4,
		/// 
		///     /* 32-bit Floats */
		///     SDL_GPU_VERTEXELEMENTFORMAT_FLOAT,
		///     SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3,
		///     SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4,
		/// 
		///     /* 8-bit Signed Integers */
		///     SDL_GPU_VERTEXELEMENTFORMAT_BYTE2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_BYTE4,
		/// 
		///     /* 8-bit Unsigned Integers */
		///     SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4,
		/// 
		///     /* 8-bit Signed Normalized */
		///     SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM,
		///     SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM,
		/// 
		///     /* 8-bit Unsigned Normalized */
		///     SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM,
		///     SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM,
		/// 
		///     /* 16-bit Signed Integers */
		///     SDL_GPU_VERTEXELEMENTFORMAT_SHORT2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_SHORT4,
		/// 
		///     /* 16-bit Unsigned Integers */
		///     SDL_GPU_VERTEXELEMENTFORMAT_USHORT2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_USHORT4,
		/// 
		///     /* 16-bit Signed Normalized */
		///     SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM,
		///     SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM,
		/// 
		///     /* 16-bit Unsigned Normalized */
		///     SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM,
		///     SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM,
		/// 
		///     /* 16-bit Floats */
		///     SDL_GPU_VERTEXELEMENTFORMAT_HALF2,
		///     SDL_GPU_VERTEXELEMENTFORMAT_HALF4
		/// } SDL_GPUVertexElementFormat;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUVertexElementFormat
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_INT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_INT = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_INT2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_INT3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_INT4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UINT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UINT = 5,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UINT2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 6,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UINT3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 7,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UINT4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 8,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_FLOAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 9,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_BYTE2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 13,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_BYTE4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 14,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_SHORT2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 21,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_SHORT4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 22,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_USHORT2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 23,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_USHORT4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 24,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_HALF2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 29,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexElementFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXELEMENTFORMAT_HALF4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 30,
		}

		/// <summary>
		///   <para>Specifies the rate at which vertex attributes are pulled from buffers.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUVertexInputRate<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUVertexInputRate
		/// {
		///     SDL_GPU_VERTEXINPUTRATE_VERTEX,   /**&lt; Attribute addressing is a function of the vertex index. */
		///     SDL_GPU_VERTEXINPUTRATE_INSTANCE  /**&lt; Attribute addressing is a function of the instance index. */
		/// } SDL_GPUVertexInputRate;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUVertexInputRate
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexInputRate" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXINPUTRATE_VERTEX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXINPUTRATE_VERTEX = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUVertexInputRate" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_VERTEXINPUTRATE_INSTANCE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1,
		}

		/// <summary>
		///   <para>Specifies the fill mode of the graphics pipeline.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUFillMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUFillMode
		/// {
		///     SDL_GPU_FILLMODE_FILL,  /**&lt; Polygons will be rendered via rasterization. */
		///     SDL_GPU_FILLMODE_LINE   /**&lt; Polygon edges will be drawn as line segments. */
		/// } SDL_GPUFillMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUFillMode
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUFillMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_FILLMODE_FILL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_FILLMODE_FILL = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUFillMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_FILLMODE_LINE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_FILLMODE_LINE = 1,
		}

		/// <summary>
		///   <para>Specifies the facing direction in which triangle faces will be culled.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUCullMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUCullMode
		/// {
		///     SDL_GPU_CULLMODE_NONE,   /**&lt; No triangles are culled. */
		///     SDL_GPU_CULLMODE_FRONT,  /**&lt; Front-facing triangles are culled. */
		///     SDL_GPU_CULLMODE_BACK    /**&lt; Back-facing triangles are culled. */
		/// } SDL_GPUCullMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUCullMode
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUCullMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CULLMODE_NONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CULLMODE_NONE = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUCullMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CULLMODE_FRONT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CULLMODE_FRONT = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUCullMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_CULLMODE_BACK<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_CULLMODE_BACK = 2,
		}

		/// <summary>
		///   <para>Specifies the vertex winding that will cause a triangle to be determined to be front-facing.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUFrontFace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUFrontFace
		/// {
		///     SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE,  /**&lt; A triangle with counter-clockwise vertex winding will be considered front-facing. */
		///     SDL_GPU_FRONTFACE_CLOCKWISE           /**&lt; A triangle with clockwise vertex winding will be considered front-facing. */
		/// } SDL_GPUFrontFace;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUFrontFace
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUFrontFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUFrontFace" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_FRONTFACE_CLOCKWISE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_FRONTFACE_CLOCKWISE = 1,
		}

		/// <summary>
		///   <para>Specifies a comparison operator for depth, stencil and sampler operations.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUCompareOp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUCompareOp
		/// {
		///     SDL_GPU_COMPAREOP_INVALID,
		///     SDL_GPU_COMPAREOP_NEVER,             /**&lt; The comparison always evaluates false. */
		///     SDL_GPU_COMPAREOP_LESS,              /**&lt; The comparison evaluates reference &lt; test. */
		///     SDL_GPU_COMPAREOP_EQUAL,             /**&lt; The comparison evaluates reference == test. */
		///     SDL_GPU_COMPAREOP_LESS_OR_EQUAL,     /**&lt; The comparison evaluates reference &lt;= test. */
		///     SDL_GPU_COMPAREOP_GREATER,           /**&lt; The comparison evaluates reference &gt; test. */
		///     SDL_GPU_COMPAREOP_NOT_EQUAL,         /**&lt; The comparison evaluates reference != test. */
		///     SDL_GPU_COMPAREOP_GREATER_OR_EQUAL,  /**&lt; The comparison evalutes reference &gt;= test. */
		///     SDL_GPU_COMPAREOP_ALWAYS             /**&lt; The comparison always evaluates true. */
		/// } SDL_GPUCompareOp;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUCompareOp
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_NEVER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_NEVER = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_LESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_LESS = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_EQUAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_EQUAL = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_LESS_OR_EQUAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_GREATER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_GREATER = 5,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_NOT_EQUAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_NOT_EQUAL = 6,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_GREATER_OR_EQUAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 7,
			/// <summary><para>Please refer to <see cref="SDL_GPUCompareOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COMPAREOP_ALWAYS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_COMPAREOP_ALWAYS = 8,
		}

		/// <summary>
		///   <para>Specifies what happens to a stored stencil value if stencil tests fail or pass.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUStencilOp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUStencilOp
		/// {
		///     SDL_GPU_STENCILOP_INVALID,
		///     SDL_GPU_STENCILOP_KEEP,                 /**&lt; Keeps the current value. */
		///     SDL_GPU_STENCILOP_ZERO,                 /**&lt; Sets the value to 0. */
		///     SDL_GPU_STENCILOP_REPLACE,              /**&lt; Sets the value to reference. */
		///     SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP,  /**&lt; Increments the current value and clamps to the maximum value. */
		///     SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP,  /**&lt; Decrements the current value and clamps to 0. */
		///     SDL_GPU_STENCILOP_INVERT,               /**&lt; Bitwise-inverts the current value. */
		///     SDL_GPU_STENCILOP_INCREMENT_AND_WRAP,   /**&lt; Increments the current value and wraps back to 0. */
		///     SDL_GPU_STENCILOP_DECREMENT_AND_WRAP    /**&lt; Decrements the current value and wraps to the maximum value. */
		/// } SDL_GPUStencilOp;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUStencilOp
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_KEEP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_KEEP = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_ZERO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_ZERO = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_REPLACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_REPLACE = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 5,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_INVERT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_INVERT = 6,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_INCREMENT_AND_WRAP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 7,
			/// <summary><para>Please refer to <see cref="SDL_GPUStencilOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_STENCILOP_DECREMENT_AND_WRAP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 8,
		}

		/// <summary>
		///   <para>Specifies the operator to be used when pixels in a render target are blended with existing pixels in the texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>The source color is the value written by the fragment shader. Thedestination color is the value currently existing in the texture.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBlendOp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUBlendOp
		/// {
		///     SDL_GPU_BLENDOP_INVALID,
		///     SDL_GPU_BLENDOP_ADD,               /**&lt; (source * source_factor) + (destination * destination_factor) */
		///     SDL_GPU_BLENDOP_SUBTRACT,          /**&lt; (source * source_factor) - (destination * destination_factor) */
		///     SDL_GPU_BLENDOP_REVERSE_SUBTRACT,  /**&lt; (destination * destination_factor) - (source * source_factor) */
		///     SDL_GPU_BLENDOP_MIN,               /**&lt; min(source, destination) */
		///     SDL_GPU_BLENDOP_MAX                /**&lt; max(source, destination) */
		/// } SDL_GPUBlendOp;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUBlendOp
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDOP_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDOP_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDOP_ADD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDOP_ADD = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDOP_SUBTRACT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDOP_SUBTRACT = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDOP_REVERSE_SUBTRACT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDOP_MIN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDOP_MIN = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendOp" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDOP_MAX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDOP_MAX = 5,
		}

		/// <summary>
		///   <para>Specifies a blending factor to be used when pixels in a render target are blended with existing pixels in the texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>The source color is the value written by the fragment shader. Thedestination color is the value currently existing in the texture.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBlendFactor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUBlendFactor
		/// {
		///     SDL_GPU_BLENDFACTOR_INVALID,
		///     SDL_GPU_BLENDFACTOR_ZERO,                      /**&lt; 0 */
		///     SDL_GPU_BLENDFACTOR_ONE,                       /**&lt; 1 */
		///     SDL_GPU_BLENDFACTOR_SRC_COLOR,                 /**&lt; source color */
		///     SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR,       /**&lt; 1 - source color */
		///     SDL_GPU_BLENDFACTOR_DST_COLOR,                 /**&lt; destination color */
		///     SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR,       /**&lt; 1 - destination color */
		///     SDL_GPU_BLENDFACTOR_SRC_ALPHA,                 /**&lt; source alpha */
		///     SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,       /**&lt; 1 - source alpha */
		///     SDL_GPU_BLENDFACTOR_DST_ALPHA,                 /**&lt; destination alpha */
		///     SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA,       /**&lt; 1 - destination alpha */
		///     SDL_GPU_BLENDFACTOR_CONSTANT_COLOR,            /**&lt; blend constant */
		///     SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR,  /**&lt; 1 - blend constant */
		///     SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE         /**&lt; min(source alpha, 1 - destination alpha) */
		/// } SDL_GPUBlendFactor;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUBlendFactor
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ZERO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ZERO = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ONE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ONE = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_SRC_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_SRC_COLOR = 3,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_DST_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_DST_COLOR = 5,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_SRC_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_SRC_ALPHA = 7,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_DST_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_DST_ALPHA = 9,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_CONSTANT_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 11,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12,
			/// <summary><para>Please refer to <see cref="SDL_GPUBlendFactor" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13,
		}

		/// <summary>
		///   <para>Specifies which color components are written in a graphics pipeline.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUColorComponentFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint8 SDL_GPUColorComponentFlags;
		/// 
		/// #define SDL_GPU_COLORCOMPONENT_R (1u &lt;&lt; 0) /**&lt; the red component */
		/// #define SDL_GPU_COLORCOMPONENT_G (1u &lt;&lt; 1) /**&lt; the green component */
		/// #define SDL_GPU_COLORCOMPONENT_B (1u &lt;&lt; 2) /**&lt; the blue component */
		/// #define SDL_GPU_COLORCOMPONENT_A (1u &lt;&lt; 3) /**&lt; the alpha component */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[Flags]
		public enum SDL_GPUColorComponentFlags : byte
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUColorComponentFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COLORCOMPONENT_R<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_COLORCOMPONENT_R = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_GPUColorComponentFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COLORCOMPONENT_G<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_COLORCOMPONENT_G = 0x2,
			/// <summary><para>Please refer to <see cref="SDL_GPUColorComponentFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COLORCOMPONENT_B<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_COLORCOMPONENT_B = 0x4,
			/// <summary><para>Please refer to <see cref="SDL_GPUColorComponentFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_COLORCOMPONENT_A<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_GPU_COLORCOMPONENT_A = 0x08,
		}

		/// <summary>
		///   <para>Specifies a filter operation used by a sampler.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUSampler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUFilter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUFilter
		/// {
		///     SDL_GPU_FILTER_NEAREST,  /**&lt; Point filtering. */
		///     SDL_GPU_FILTER_LINEAR    /**&lt; Linear filtering. */
		/// } SDL_GPUFilter;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUFilter
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUFilter" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_FILTER_NEAREST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_FILTER_NEAREST = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUFilter" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_FILTER_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_FILTER_LINEAR = 1,
		}

		/// <summary>
		///   <para>Specifies a mipmap mode used by a sampler.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUSampler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSamplerMipmapMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUSamplerMipmapMode
		/// {
		///     SDL_GPU_SAMPLERMIPMAPMODE_NEAREST,  /**&lt; Point filtering. */
		///     SDL_GPU_SAMPLERMIPMAPMODE_LINEAR    /**&lt; Linear filtering. */
		/// } SDL_GPUSamplerMipmapMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUSamplerMipmapMode
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUSamplerMipmapMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLERMIPMAPMODE_NEAREST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUSamplerMipmapMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLERMIPMAPMODE_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1,
		}

		/// <summary>
		///   <para>Specifies behavior of texture sampling when the coordinates exceed the 0-1 range.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUSampler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSamplerAddressMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUSamplerAddressMode
		/// {
		///     SDL_GPU_SAMPLERADDRESSMODE_REPEAT,           /**&lt; Specifies that the coordinates will wrap around. */
		///     SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT,  /**&lt; Specifies that the coordinates will wrap around mirrored. */
		///     SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE     /**&lt; Specifies that the coordinates will clamp to the 0-1 range. */
		/// } SDL_GPUSamplerAddressMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUSamplerAddressMode
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUSamplerAddressMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLERADDRESSMODE_REPEAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUSamplerAddressMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUSamplerAddressMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2,
		}

		/// <summary>
		///   <para>Specifies the timing that will be used to present swapchain textures to the OS.</para>
		/// </summary>
		/// <remarks>
		///   <para>Note that this value affects the behavior of<see cref="SDL_AcquireGPUSwapchainTexture" />. VSYNCmode will always be supported. IMMEDIATE and MAILBOX modes may not besupported on certain systems.</para>
		///   <para>It is recommended to query<see cref="SDL_WindowSupportsGPUPresentMode" /> afterclaiming the window if you wish to change the present mode to IMMEDIATE orMAILBOX.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>VSYNC: Waits for vblank before presenting. No tearing is possible. Ifthere is a pending image to present, the new image is enqueued forpresentation. Disallows tearing at the cost of visual latency. When usingthis present mode, AcquireGPUSwapchainTexture will block if too manyframes are in flight.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>IMMEDIATE: Immediately presents. Lowest latency option, but tearing mayoccur. When using this mode, AcquireGPUSwapchainTexture will return NULLif too many frames are in flight.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>MAILBOX: Waits for vblank before presenting. No tearing is possible. Ifthere is a pending image to present, the pending image is replaced by thenew image. Similar to VSYNC, but with reduced visual latency. When usingthis mode, AcquireGPUSwapchainTexture will return NULL if too many framesare in flight.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_SetGPUSwapchainParameters" />
		/// <seealso cref="SDL_WindowSupportsGPUPresentMode" />
		/// <seealso cref="SDL_AcquireGPUSwapchainTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUPresentMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUPresentMode
		/// {
		///     SDL_GPU_PRESENTMODE_VSYNC,
		///     SDL_GPU_PRESENTMODE_IMMEDIATE,
		///     SDL_GPU_PRESENTMODE_MAILBOX
		/// } SDL_GPUPresentMode;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUPresentMode
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUPresentMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRESENTMODE_VSYNC<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRESENTMODE_VSYNC = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUPresentMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRESENTMODE_IMMEDIATE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRESENTMODE_IMMEDIATE = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUPresentMode" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_PRESENTMODE_MAILBOX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_PRESENTMODE_MAILBOX = 2,
		}

		/// <summary>
		///   <para>Specifies the texture format and colorspace of the swapchain textures.</para>
		/// </summary>
		/// <remarks>
		///   <para>SDR will always be supported. Other compositions may not be supported oncertain systems.</para>
		///   <para>It is recommended to query<see cref="SDL_WindowSupportsGPUSwapchainComposition" />after claiming the window if you wish to change the swapchain compositionfrom SDR.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>SDR: B8G8R8A8 or R8G8B8A8 swapchain. Pixel values are in nonlinear sRGBencoding.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>SDR_LINEAR: B8G8R8A8_SRGB or R8G8B8A8_SRGB swapchain. Pixel values are innonlinear sRGB encoding.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>HDR_EXTENDED_LINEAR: R16G16B16A16_SFLOAT swapchain. Pixel values are inextended linear encoding.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>HDR10_ST2048: A2R10G10B10 or A2B10G10R10 swapchain. Pixel values are inPQ ST2048 encoding.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_SetGPUSwapchainParameters" />
		/// <seealso cref="SDL_WindowSupportsGPUSwapchainComposition" />
		/// <seealso cref="SDL_AcquireGPUSwapchainTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSwapchainComposition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_GPUSwapchainComposition
		/// {
		///     SDL_GPU_SWAPCHAINCOMPOSITION_SDR,
		///     SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR,
		///     SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR,
		///     SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048
		/// } SDL_GPUSwapchainComposition;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public enum SDL_GPUSwapchainComposition
		{
			/// <summary><para>Please refer to <see cref="SDL_GPUSwapchainComposition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SWAPCHAINCOMPOSITION_SDR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0,
			/// <summary><para>Please refer to <see cref="SDL_GPUSwapchainComposition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1,
			/// <summary><para>Please refer to <see cref="SDL_GPUSwapchainComposition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2,
			/// <summary><para>Please refer to <see cref="SDL_GPUSwapchainComposition" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048 = 3,
		}

		/// <summary>
		///   <para>A structure specifying a viewport.</para>
		/// </summary>
		/// <seealso cref="SDL_SetGPUViewport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUViewport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUViewport
		/// {
		///     float x;          /**&lt; The left offset of the viewport. */
		///     float y;          /**&lt; The top offset of the viewport. */
		///     float w;          /**&lt; The width of the viewport. */
		///     float h;          /**&lt; The height of the viewport. */
		///     float min_depth;  /**&lt; The minimum depth of the viewport. */
		///     float max_depth;  /**&lt; The maximum depth of the viewport. */
		/// } SDL_GPUViewport;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUViewport
		{
			public float x;
			public float y;
			public float w;
			public float h;
			public float min_depth;
			public float max_depth;
		}

		/// <summary>
		///   <para>A structure specifying parameters related to transferring data to or from a texture.</para>
		/// </summary>
		/// <seealso cref="SDL_UploadToGPUTexture" />
		/// <seealso cref="SDL_DownloadFromGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureTransferInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTextureTransferInfo
		/// {
		///     SDL_GPUTransferBuffer *transfer_buffer;  /**&lt; The transfer buffer used in the transfer operation. */
		///     Uint32 offset;                           /**&lt; The starting byte of the image data in the transfer buffer. */
		///     Uint32 pixels_per_row;                   /**&lt; The number of pixels from one row to the next. */
		///     Uint32 rows_per_layer;                   /**&lt; The number of rows from one layer/depth-slice to the next. */
		/// } SDL_GPUTextureTransferInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTextureTransferInfo
		{
			public IntPtr transfer_buffer;
			public uint offset;
			public uint pixels_per_row;
			public uint rows_per_layer;
		}

		/// <summary>
		///   <para>A structure specifying a location in a transfer buffer.</para>
		/// </summary>
		/// <remarks>
		///   <para>Used when transferring buffer data to or from a transfer buffer.</para>
		/// </remarks>
		/// <seealso cref="SDL_UploadToGPUBuffer" />
		/// <seealso cref="SDL_DownloadFromGPUBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTransferBufferLocation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTransferBufferLocation
		/// {
		///     SDL_GPUTransferBuffer *transfer_buffer;  /**&lt; The transfer buffer used in the transfer operation. */
		///     Uint32 offset;                           /**&lt; The starting byte of the buffer data in the transfer buffer. */
		/// } SDL_GPUTransferBufferLocation;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTransferBufferLocation
		{
			public IntPtr transfer_buffer;
			public uint offset;
		}

		/// <summary>
		///   <para>A structure specifying a location in a texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>Used when copying data from one texture to another.</para>
		/// </remarks>
		/// <seealso cref="SDL_CopyGPUTextureToTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureLocation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTextureLocation
		/// {
		///     SDL_GPUTexture *texture;  /**&lt; The texture used in the copy operation. */
		///     Uint32 mip_level;         /**&lt; The mip level index of the location. */
		///     Uint32 layer;             /**&lt; The layer index of the location. */
		///     Uint32 x;                 /**&lt; The left offset of the location. */
		///     Uint32 y;                 /**&lt; The top offset of the location. */
		///     Uint32 z;                 /**&lt; The front offset of the location. */
		/// } SDL_GPUTextureLocation;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTextureLocation
		{
			public IntPtr texture;
			public uint mip_level;
			public uint layer;
			public uint x;
			public uint y;
			public uint z;
		}

		/// <summary>
		///   <para>A structure specifying a region of a texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>Used when transferring data to or from a texture.</para>
		/// </remarks>
		/// <seealso cref="SDL_UploadToGPUTexture" />
		/// <seealso cref="SDL_DownloadFromGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureRegion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTextureRegion
		/// {
		///     SDL_GPUTexture *texture;  /**&lt; The texture used in the copy operation. */
		///     Uint32 mip_level;         /**&lt; The mip level index to transfer. */
		///     Uint32 layer;             /**&lt; The layer index to transfer. */
		///     Uint32 x;                 /**&lt; The left offset of the region. */
		///     Uint32 y;                 /**&lt; The top offset of the region. */
		///     Uint32 z;                 /**&lt; The front offset of the region. */
		///     Uint32 w;                 /**&lt; The width of the region. */
		///     Uint32 h;                 /**&lt; The height of the region. */
		///     Uint32 d;                 /**&lt; The depth of the region. */
		/// } SDL_GPUTextureRegion;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTextureRegion
		{
			public IntPtr texture;
			public uint mip_level;
			public uint layer;
			public uint x;
			public uint y;
			public uint z;
			public uint w;
			public uint h;
			public uint d;
		}

		/// <summary>
		///   <para>A structure specifying a region of a texture used in the blit operation.</para>
		/// </summary>
		/// <seealso cref="SDL_BlitGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBlitRegion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUBlitRegion
		/// {
		///     SDL_GPUTexture *texture;  /**&lt; The texture. */
		///     Uint32 mip_level;             /**&lt; The mip level index of the region. */
		///     Uint32 layer_or_depth_plane;  /**&lt; The layer index or depth plane of the region. This value is treated as a layer index on 2D array and cube textures, and as a depth plane on 3D textures. */
		///     Uint32 x;                     /**&lt; The left offset of the region. */
		///     Uint32 y;                     /**&lt; The top offset of the region.  */
		///     Uint32 w;                     /**&lt; The width of the region. */
		///     Uint32 h;                     /**&lt; The height of the region. */
		/// } SDL_GPUBlitRegion;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUBlitRegion
		{
			public IntPtr texture;
			public uint mip_level;
			public uint layer_or_depth_plane;
			public uint x;
			public uint y;
			public uint w;
			public uint h;
		}

		/// <summary>
		///   <para>A structure specifying a location in a buffer.</para>
		/// </summary>
		/// <remarks>
		///   <para>Used when copying data between buffers.</para>
		/// </remarks>
		/// <seealso cref="SDL_CopyGPUBufferToBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBufferLocation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUBufferLocation
		/// {
		///     SDL_GPUBuffer *buffer;  /**&lt; The buffer. */
		///     Uint32 offset;          /**&lt; The starting byte within the buffer. */
		/// } SDL_GPUBufferLocation;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUBufferLocation
		{
			public IntPtr buffer;
			public uint offset;
		}

		/// <summary>
		///   <para>A structure specifying a region of a buffer.</para>
		/// </summary>
		/// <remarks>
		///   <para>Used when transferring data to or from buffers.</para>
		/// </remarks>
		/// <seealso cref="SDL_UploadToGPUBuffer" />
		/// <seealso cref="SDL_DownloadFromGPUBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBufferRegion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUBufferRegion
		/// {
		///     SDL_GPUBuffer *buffer;  /**&lt; The buffer. */
		///     Uint32 offset;          /**&lt; The starting byte within the buffer. */
		///     Uint32 size;            /**&lt; The size in bytes of the region. */
		/// } SDL_GPUBufferRegion;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUBufferRegion
		{
			public IntPtr buffer;
			public uint offset;
			public uint size;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of an indirect draw command.</para>
		/// </summary>
		/// <remarks>
		///   <para>Note that the <c>first_vertex</c> and <c>first_instance</c> parameters are NOTcompatible with built-in vertex/instance ID variables in shaders (forexample, SV_VertexID). If your shader depends on these variables, thecorrelating draw call parameter MUST be 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_DrawGPUPrimitivesIndirect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUIndirectDrawCommand<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUIndirectDrawCommand
		/// {
		///     Uint32 num_vertices;   /**&lt; The number of vertices to draw. */
		///     Uint32 num_instances;  /**&lt; The number of instances to draw. */
		///     Uint32 first_vertex;   /**&lt; The index of the first vertex to draw. */
		///     Uint32 first_instance; /**&lt; The ID of the first instance to draw. */
		/// } SDL_GPUIndirectDrawCommand;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUIndirectDrawCommand
		{
			public uint num_vertices;
			public uint num_instances;
			public uint first_vertex;
			public uint first_instance;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of an indexed indirect draw command.</para>
		/// </summary>
		/// <remarks>
		///   <para>Note that the <c>first_vertex</c> and <c>first_instance</c> parameters are NOTcompatible with built-in vertex/instance ID variables in shaders (forexample, SV_VertexID). If your shader depends on these variables, thecorrelating draw call parameter MUST be 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_DrawGPUIndexedPrimitivesIndirect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUIndexedIndirectDrawCommand<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUIndexedIndirectDrawCommand
		/// {
		///     Uint32 num_indices;    /**&lt; The number of indices to draw per instance. */
		///     Uint32 num_instances;  /**&lt; The number of instances to draw. */
		///     Uint32 first_index;    /**&lt; The base index within the index buffer. */
		///     Sint32 vertex_offset;  /**&lt; The value added to the vertex index before indexing into the vertex buffer. */
		///     Uint32 first_instance; /**&lt; The ID of the first instance to draw. */
		/// } SDL_GPUIndexedIndirectDrawCommand;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUIndexedIndirectDrawCommand
		{
			public uint num_indices;
			public uint num_instances;
			public uint first_index;
			public int vertex_offset;
			public uint first_instance;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of an indexed dispatch command.</para>
		/// </summary>
		/// <seealso cref="SDL_DispatchGPUComputeIndirect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUIndirectDispatchCommand<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUIndirectDispatchCommand
		/// {
		///     Uint32 groupcount_x;  /**&lt; The number of local workgroups to dispatch in the X dimension. */
		///     Uint32 groupcount_y;  /**&lt; The number of local workgroups to dispatch in the Y dimension. */
		///     Uint32 groupcount_z;  /**&lt; The number of local workgroups to dispatch in the Z dimension. */
		/// } SDL_GPUIndirectDispatchCommand;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUIndirectDispatchCommand
		{
			public uint groupcount_x;
			public uint groupcount_y;
			public uint groupcount_z;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a sampler.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUSampler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSamplerCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUSamplerCreateInfo
		/// {
		///     SDL_GPUFilter min_filter;                  /**&lt; The minification filter to apply to lookups. */
		///     SDL_GPUFilter mag_filter;                  /**&lt; The magnification filter to apply to lookups. */
		///     SDL_GPUSamplerMipmapMode mipmap_mode;      /**&lt; The mipmap filter to apply to lookups. */
		///     SDL_GPUSamplerAddressMode address_mode_u;  /**&lt; The addressing mode for U coordinates outside [0, 1). */
		///     SDL_GPUSamplerAddressMode address_mode_v;  /**&lt; The addressing mode for V coordinates outside [0, 1). */
		///     SDL_GPUSamplerAddressMode address_mode_w;  /**&lt; The addressing mode for W coordinates outside [0, 1). */
		///     float mip_lod_bias;                        /**&lt; The bias to be added to mipmap LOD calculation. */
		///     float max_anisotropy;                      /**&lt; The anisotropy value clamp used by the sampler. If enable_anisotropy is false, this is ignored. */
		///     SDL_GPUCompareOp compare_op;               /**&lt; The comparison operator to apply to fetched data before filtering. */
		///     float min_lod;                             /**&lt; Clamps the minimum of the computed LOD value. */
		///     float max_lod;                             /**&lt; Clamps the maximum of the computed LOD value. */
		///     bool enable_anisotropy;                /**&lt; true to enable anisotropic filtering. */
		///     bool enable_compare;                   /**&lt; true to enable comparison against a reference value during lookups. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// 
		///     SDL_PropertiesID props;                    /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUSamplerCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUSamplerCreateInfo
		{
			public SDL_GPUFilter min_filter;
			public SDL_GPUFilter mag_filter;
			public SDL_GPUSamplerMipmapMode mipmap_mode;
			public SDL_GPUSamplerAddressMode address_mode_u;
			public SDL_GPUSamplerAddressMode address_mode_v;
			public SDL_GPUSamplerAddressMode address_mode_w;
			public float mip_lod_bias;
			public float max_anisotropy;
			public SDL_GPUCompareOp compare_op;
			public float min_lod;
			public float max_lod;
			public SDLBool enable_anisotropy;
			public SDLBool enable_compare;
			public byte padding1;
			public byte padding2;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of vertex buffers used in a graphics pipeline.</para>
		/// </summary>
		/// <remarks>
		///   <para>When you call <see cref="SDL_BindGPUVertexBuffers" />, youspecify the binding slots of the vertex buffers. For example if you called<see cref="SDL_BindGPUVertexBuffers" /> with a first_slot of 2and num_bindings of 3, the binding slots 2, 3, 4 would be used by thevertex buffers you pass in.</para>
		///   <para>Vertex attributes are linked to buffers via the buffer_slot field of<see cref="SDL_GPUVertexAttribute" />. For example, if anattribute has a buffer_slot of 0, then that attribute belongs to the vertexbuffer bound at slot 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GPUVertexAttribute" />
		/// <seealso cref="SDL_GPUVertexInputState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUVertexBufferDescription<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUVertexBufferDescription
		/// {
		///     Uint32 slot;                        /**&lt; The binding slot of the vertex buffer. */
		///     Uint32 pitch;                       /**&lt; The byte pitch between consecutive elements of the vertex buffer. */
		///     SDL_GPUVertexInputRate input_rate;  /**&lt; Whether attribute addressing is a function of the vertex index or instance index. */
		///     Uint32 instance_step_rate;          /**&lt; The number of instances to draw using the same per-instance data before advancing in the instance buffer by one element. Ignored unless input_rate is SDL_GPU_VERTEXINPUTRATE_INSTANCE */
		/// } SDL_GPUVertexBufferDescription;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUVertexBufferDescription
		{
			public uint slot;
			public uint pitch;
			public SDL_GPUVertexInputRate input_rate;
			public uint instance_step_rate;
		}

		/// <summary>
		///   <para>A structure specifying a vertex attribute.</para>
		/// </summary>
		/// <remarks>
		///   <para>All vertex attribute locations provided to an<see cref="SDL_GPUVertexInputState" /> must be unique.</para>
		/// </remarks>
		/// <seealso cref="SDL_GPUVertexBufferDescription" />
		/// <seealso cref="SDL_GPUVertexInputState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUVertexAttribute<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUVertexAttribute
		/// {
		///     Uint32 location;                    /**&lt; The shader input location index. */
		///     Uint32 buffer_slot;                 /**&lt; The binding slot of the associated vertex buffer. */
		///     SDL_GPUVertexElementFormat format;  /**&lt; The size and type of the attribute data. */
		///     Uint32 offset;                      /**&lt; The byte offset of this attribute relative to the start of the vertex element. */
		/// } SDL_GPUVertexAttribute;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUVertexAttribute
		{
			public uint location;
			public uint buffer_slot;
			public SDL_GPUVertexElementFormat format;
			public uint offset;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a graphics pipeline vertex input state.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUGraphicsPipelineCreateInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUVertexInputState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUVertexInputState
		/// {
		///     const SDL_GPUVertexBufferDescription *vertex_buffer_descriptions; /**&lt; A pointer to an array of vertex buffer descriptions. */
		///     Uint32 num_vertex_buffers;                                        /**&lt; The number of vertex buffer descriptions in the above array. */
		///     const SDL_GPUVertexAttribute *vertex_attributes;                  /**&lt; A pointer to an array of vertex attribute descriptions. */
		///     Uint32 num_vertex_attributes;                                     /**&lt; The number of vertex attribute descriptions in the above array. */
		/// } SDL_GPUVertexInputState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUVertexInputState
		{
			public SDL_GPUVertexBufferDescription* vertex_buffer_descriptions;
			public uint num_vertex_buffers;
			public SDL_GPUVertexAttribute* vertex_attributes;
			public uint num_vertex_attributes;
		}

		/// <summary>
		///   <para>A structure specifying the stencil operation state of a graphics pipeline.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUDepthStencilState" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUStencilOpState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUStencilOpState
		/// {
		///     SDL_GPUStencilOp fail_op;        /**&lt; The action performed on samples that fail the stencil test. */
		///     SDL_GPUStencilOp pass_op;        /**&lt; The action performed on samples that pass the depth and stencil tests. */
		///     SDL_GPUStencilOp depth_fail_op;  /**&lt; The action performed on samples that pass the stencil test and fail the depth test. */
		///     SDL_GPUCompareOp compare_op;     /**&lt; The comparison operator used in the stencil test. */
		/// } SDL_GPUStencilOpState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUStencilOpState
		{
			public SDL_GPUStencilOp fail_op;
			public SDL_GPUStencilOp pass_op;
			public SDL_GPUStencilOp depth_fail_op;
			public SDL_GPUCompareOp compare_op;
		}

		/// <summary>
		///   <para>A structure specifying the blend state of a color target.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUColorTargetDescription" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUColorTargetBlendState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUColorTargetBlendState
		/// {
		///     SDL_GPUBlendFactor src_color_blendfactor;     /**&lt; The value to be multiplied by the source RGB value. */
		///     SDL_GPUBlendFactor dst_color_blendfactor;     /**&lt; The value to be multiplied by the destination RGB value. */
		///     SDL_GPUBlendOp color_blend_op;                /**&lt; The blend operation for the RGB components. */
		///     SDL_GPUBlendFactor src_alpha_blendfactor;     /**&lt; The value to be multiplied by the source alpha. */
		///     SDL_GPUBlendFactor dst_alpha_blendfactor;     /**&lt; The value to be multiplied by the destination alpha. */
		///     SDL_GPUBlendOp alpha_blend_op;                /**&lt; The blend operation for the alpha component. */
		///     SDL_GPUColorComponentFlags color_write_mask;  /**&lt; A bitmask specifying which of the RGBA components are enabled for writing. Writes to all channels if enable_color_write_mask is false. */
		///     bool enable_blend;                        /**&lt; Whether blending is enabled for the color target. */
		///     bool enable_color_write_mask;             /**&lt; Whether the color write mask is enabled. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_GPUColorTargetBlendState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUColorTargetBlendState
		{
			public SDL_GPUBlendFactor src_color_blendfactor;
			public SDL_GPUBlendFactor dst_color_blendfactor;
			public SDL_GPUBlendOp color_blend_op;
			public SDL_GPUBlendFactor src_alpha_blendfactor;
			public SDL_GPUBlendFactor dst_alpha_blendfactor;
			public SDL_GPUBlendOp alpha_blend_op;
			public SDL_GPUColorComponentFlags color_write_mask;
			public SDLBool enable_blend;
			public SDLBool enable_color_write_mask;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>A structure specifying code and metadata for creating a shader object.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUShader" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUShaderCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUShaderCreateInfo
		/// {
		///     size_t code_size;             /**&lt; The size in bytes of the code pointed to. */
		///     const Uint8 *code;            /**&lt; A pointer to shader code. */
		///     const char *entrypoint;       /**&lt; A pointer to a null-terminated UTF-8 string specifying the entry point function name for the shader. */
		///     SDL_GPUShaderFormat format;   /**&lt; The format of the shader code. */
		///     SDL_GPUShaderStage stage;     /**&lt; The stage the shader program corresponds to. */
		///     Uint32 num_samplers;          /**&lt; The number of samplers defined in the shader. */
		///     Uint32 num_storage_textures;  /**&lt; The number of storage textures defined in the shader. */
		///     Uint32 num_storage_buffers;   /**&lt; The number of storage buffers defined in the shader. */
		///     Uint32 num_uniform_buffers;   /**&lt; The number of uniform buffers defined in the shader. */
		/// 
		///     SDL_PropertiesID props;       /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUShaderCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUShaderCreateInfo
		{
			public UIntPtr code_size;
			public byte* code;
			public byte* entrypoint;
			public SDL_GPUShaderFormat format;
			public SDL_GPUShaderStage stage;
			public uint num_samplers;
			public uint num_storage_textures;
			public uint num_storage_buffers;
			public uint num_uniform_buffers;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a texture.</para>
		/// </summary>
		/// <remarks>
		///   <para>Usage flags can be bitwise OR'd together for combinations of usages. Notethat certain usage combinations are invalid, for example SAMPLER andGRAPHICS_STORAGE.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTextureCreateInfo
		/// {
		///     SDL_GPUTextureType type;          /**&lt; The base dimensionality of the texture. */
		///     SDL_GPUTextureFormat format;      /**&lt; The pixel format of the texture. */
		///     SDL_GPUTextureUsageFlags usage;   /**&lt; How the texture is intended to be used by the client. */
		///     Uint32 width;                     /**&lt; The width of the texture. */
		///     Uint32 height;                    /**&lt; The height of the texture. */
		///     Uint32 layer_count_or_depth;      /**&lt; The layer count or depth of the texture. This value is treated as a layer count on 2D array textures, and as a depth value on 3D textures. */
		///     Uint32 num_levels;                /**&lt; The number of mip levels in the texture. */
		///     SDL_GPUSampleCount sample_count;  /**&lt; The number of samples per texel. Only applies if the texture is used as a render target. */
		/// 
		///     SDL_PropertiesID props;           /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUTextureCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTextureCreateInfo
		{
			public SDL_GPUTextureType type;
			public SDL_GPUTextureFormat format;
			public SDL_GPUTextureUsageFlags usage;
			public uint width;
			public uint height;
			public uint layer_count_or_depth;
			public uint num_levels;
			public SDL_GPUSampleCount sample_count;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a buffer.</para>
		/// </summary>
		/// <remarks>
		///   <para>Usage flags can be bitwise OR'd together for combinations of usages. Notethat certain combinations are invalid, for example VERTEX and INDEX.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBufferCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUBufferCreateInfo
		/// {
		///     SDL_GPUBufferUsageFlags usage;  /**&lt; How the buffer is intended to be used by the client. */
		///     Uint32 size;                    /**&lt; The size in bytes of the buffer. */
		/// 
		///     SDL_PropertiesID props;         /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUBufferCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUBufferCreateInfo
		{
			public SDL_GPUBufferUsageFlags usage;
			public uint size;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a transfer buffer.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUTransferBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTransferBufferCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTransferBufferCreateInfo
		/// {
		///     SDL_GPUTransferBufferUsage usage;  /**&lt; How the transfer buffer is intended to be used by the client. */
		///     Uint32 size;                       /**&lt; The size in bytes of the transfer buffer. */
		/// 
		///     SDL_PropertiesID props;            /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUTransferBufferCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTransferBufferCreateInfo
		{
			public SDL_GPUTransferBufferUsage usage;
			public uint size;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of the graphics pipeline rasterizer state.</para>
		/// </summary>
		/// <remarks>
		///   <para>NOTE: Some backend APIs (D3D11/12) will enable depth clamping even ifenable_depth_clip is true. If you rely on this clamp+clip behavior,consider enabling depth clip and then manually clamping depth in yourfragment shaders on Metal and Vulkan.</para>
		/// </remarks>
		/// <seealso cref="SDL_GPUGraphicsPipelineCreateInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPURasterizerState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPURasterizerState
		/// {
		///     SDL_GPUFillMode fill_mode;         /**&lt; Whether polygons will be filled in or drawn as lines. */
		///     SDL_GPUCullMode cull_mode;         /**&lt; The facing direction in which triangles will be culled. */
		///     SDL_GPUFrontFace front_face;       /**&lt; The vertex winding that will cause a triangle to be determined as front-facing. */
		///     float depth_bias_constant_factor;  /**&lt; A scalar factor controlling the depth value added to each fragment. */
		///     float depth_bias_clamp;            /**&lt; The maximum depth bias of a fragment. */
		///     float depth_bias_slope_factor;     /**&lt; A scalar factor applied to a fragment's slope in depth calculations. */
		///     bool enable_depth_bias;        /**&lt; true to bias fragment depth values. */
		///     bool enable_depth_clip;        /**&lt; true to enable depth clip, false to enable depth clamp. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_GPURasterizerState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPURasterizerState
		{
			public SDL_GPUFillMode fill_mode;
			public SDL_GPUCullMode cull_mode;
			public SDL_GPUFrontFace front_face;
			public float depth_bias_constant_factor;
			public float depth_bias_clamp;
			public float depth_bias_slope_factor;
			public SDLBool enable_depth_bias;
			public SDLBool enable_depth_clip;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of the graphics pipeline multisample state.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUGraphicsPipelineCreateInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUMultisampleState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUMultisampleState
		/// {
		///     SDL_GPUSampleCount sample_count;  /**&lt; The number of samples to be used in rasterization. */
		///     Uint32 sample_mask;               /**&lt; Determines which samples get updated in the render targets. Treated as 0xFFFFFFFF if enable_mask is false. */
		///     bool enable_mask;             /**&lt; Enables sample masking. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_GPUMultisampleState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUMultisampleState
		{
			public SDL_GPUSampleCount sample_count;
			public uint sample_mask;
			public SDLBool enable_mask;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of the graphics pipeline depth stencil state.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUGraphicsPipelineCreateInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUDepthStencilState<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUDepthStencilState
		/// {
		///     SDL_GPUCompareOp compare_op;                /**&lt; The comparison operator used for depth testing. */
		///     SDL_GPUStencilOpState back_stencil_state;   /**&lt; The stencil op state for back-facing triangles. */
		///     SDL_GPUStencilOpState front_stencil_state;  /**&lt; The stencil op state for front-facing triangles. */
		///     Uint8 compare_mask;                         /**&lt; Selects the bits of the stencil values participating in the stencil test. */
		///     Uint8 write_mask;                           /**&lt; Selects the bits of the stencil values updated by the stencil test. */
		///     bool enable_depth_test;                 /**&lt; true enables the depth test. */
		///     bool enable_depth_write;                /**&lt; true enables depth writes. Depth writes are always disabled when enable_depth_test is false. */
		///     bool enable_stencil_test;               /**&lt; true enables the stencil test. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_GPUDepthStencilState;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUDepthStencilState
		{
			public SDL_GPUCompareOp compare_op;
			public SDL_GPUStencilOpState back_stencil_state;
			public SDL_GPUStencilOpState front_stencil_state;
			public byte compare_mask;
			public byte write_mask;
			public SDLBool enable_depth_test;
			public SDLBool enable_depth_write;
			public SDLBool enable_stencil_test;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of color targets used in a graphics pipeline.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUGraphicsPipelineTargetInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUColorTargetDescription<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUColorTargetDescription
		/// {
		///     SDL_GPUTextureFormat format;               /**&lt; The pixel format of the texture to be used as a color target. */
		///     SDL_GPUColorTargetBlendState blend_state;  /**&lt; The blend state to be used for the color target. */
		/// } SDL_GPUColorTargetDescription;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUColorTargetDescription
		{
			public SDL_GPUTextureFormat format;
			public SDL_GPUColorTargetBlendState blend_state;
		}

		/// <summary>
		///   <para>A structure specifying the descriptions of render targets used in a graphics pipeline.</para>
		/// </summary>
		/// <seealso cref="SDL_GPUGraphicsPipelineCreateInfo" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUGraphicsPipelineTargetInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUGraphicsPipelineTargetInfo
		/// {
		///     const SDL_GPUColorTargetDescription *color_target_descriptions;  /**&lt; A pointer to an array of color target descriptions. */
		///     Uint32 num_color_targets;                                        /**&lt; The number of color target descriptions in the above array. */
		///     SDL_GPUTextureFormat depth_stencil_format;                       /**&lt; The pixel format of the depth-stencil target. Ignored if has_depth_stencil_target is false. */
		///     bool has_depth_stencil_target;                               /**&lt; true specifies that the pipeline uses a depth-stencil target. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_GPUGraphicsPipelineTargetInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUGraphicsPipelineTargetInfo
		{
			public SDL_GPUColorTargetDescription* color_target_descriptions;
			public uint num_color_targets;
			public SDL_GPUTextureFormat depth_stencil_format;
			public SDLBool has_depth_stencil_target;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a graphics pipeline state.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUGraphicsPipelineCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUGraphicsPipelineCreateInfo
		/// {
		///     SDL_GPUShader *vertex_shader;                   /**&lt; The vertex shader used by the graphics pipeline. */
		///     SDL_GPUShader *fragment_shader;                 /**&lt; The fragment shader used by the graphics pipeline. */
		///     SDL_GPUVertexInputState vertex_input_state;     /**&lt; The vertex layout of the graphics pipeline. */
		///     SDL_GPUPrimitiveType primitive_type;            /**&lt; The primitive topology of the graphics pipeline. */
		///     SDL_GPURasterizerState rasterizer_state;        /**&lt; The rasterizer state of the graphics pipeline. */
		///     SDL_GPUMultisampleState multisample_state;      /**&lt; The multisample state of the graphics pipeline. */
		///     SDL_GPUDepthStencilState depth_stencil_state;   /**&lt; The depth-stencil state of the graphics pipeline. */
		///     SDL_GPUGraphicsPipelineTargetInfo target_info;  /**&lt; Formats and blend modes for the render targets of the graphics pipeline. */
		/// 
		///     SDL_PropertiesID props;                         /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUGraphicsPipelineCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUGraphicsPipelineCreateInfo
		{
			public IntPtr vertex_shader;
			public IntPtr fragment_shader;
			public SDL_GPUVertexInputState vertex_input_state;
			public SDL_GPUPrimitiveType primitive_type;
			public SDL_GPURasterizerState rasterizer_state;
			public SDL_GPUMultisampleState multisample_state;
			public SDL_GPUDepthStencilState depth_stencil_state;
			public SDL_GPUGraphicsPipelineTargetInfo target_info;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a compute pipeline state.</para>
		/// </summary>
		/// <seealso cref="SDL_CreateGPUComputePipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUComputePipelineCreateInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUComputePipelineCreateInfo
		/// {
		///     size_t code_size;                       /**&lt; The size in bytes of the compute shader code pointed to. */
		///     const Uint8 *code;                      /**&lt; A pointer to compute shader code. */
		///     const char *entrypoint;                 /**&lt; A pointer to a null-terminated UTF-8 string specifying the entry point function name for the shader. */
		///     SDL_GPUShaderFormat format;             /**&lt; The format of the compute shader code. */
		///     Uint32 num_samplers;                    /**&lt; The number of samplers defined in the shader. */
		///     Uint32 num_readonly_storage_textures;   /**&lt; The number of readonly storage textures defined in the shader. */
		///     Uint32 num_readonly_storage_buffers;    /**&lt; The number of readonly storage buffers defined in the shader. */
		///     Uint32 num_readwrite_storage_textures;  /**&lt; The number of read-write storage textures defined in the shader. */
		///     Uint32 num_readwrite_storage_buffers;   /**&lt; The number of read-write storage buffers defined in the shader. */
		///     Uint32 num_uniform_buffers;             /**&lt; The number of uniform buffers defined in the shader. */
		///     Uint32 threadcount_x;                   /**&lt; The number of threads in the X dimension. This should match the value in the shader. */
		///     Uint32 threadcount_y;                   /**&lt; The number of threads in the Y dimension. This should match the value in the shader. */
		///     Uint32 threadcount_z;                   /**&lt; The number of threads in the Z dimension. This should match the value in the shader. */
		/// 
		///     SDL_PropertiesID props;                 /**&lt; A properties ID for extensions. Should be 0 if no extensions are needed. */
		/// } SDL_GPUComputePipelineCreateInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUComputePipelineCreateInfo
		{
			public UIntPtr code_size;
			public byte* code;
			public byte* entrypoint;
			public SDL_GPUShaderFormat format;
			public uint num_samplers;
			public uint num_readonly_storage_textures;
			public uint num_readonly_storage_buffers;
			public uint num_readwrite_storage_textures;
			public uint num_readwrite_storage_buffers;
			public uint num_uniform_buffers;
			public uint threadcount_x;
			public uint threadcount_y;
			public uint threadcount_z;
			public uint props;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a color target used by a render pass.</para>
		/// </summary>
		/// <remarks>
		///   <para>The load_op field determines what is done with the texture at the beginningof the render pass.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>LOAD: Loads the data currently in the texture. Not recommended formultisample textures as it requires significant memory bandwidth.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>CLEAR: Clears the texture to a single color.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>DONT_CARE: The driver will do whatever it wants with the texture memory.This is a good option if you know that every single pixel will be touchedin the render pass.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The store_op field determines what is done with the color results of therender pass.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>STORE: Stores the results of the render pass in the texture. Notrecommended for multisample textures as it requires significant memorybandwidth.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>DONT_CARE: The driver will do whatever it wants with the texture memory.This is often a good option for depth/stencil textures.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>RESOLVE: Resolves a multisample texture into resolve_texture, which musthave a sample count of 1. Then the driver may discard the multisampletexture memory. This is the most performant method of resolving amultisample target.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>RESOLVE_AND_STORE: Resolves a multisample texture into theresolve_texture, which must have a sample count of 1. Then the driverstores the multisample texture's contents. Not recommended as it requiressignificant memory bandwidth.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_BeginGPURenderPass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUColorTargetInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUColorTargetInfo
		/// {
		///     SDL_GPUTexture *texture;         /**&lt; The texture that will be used as a color target by a render pass. */
		///     Uint32 mip_level;                /**&lt; The mip level to use as a color target. */
		///     Uint32 layer_or_depth_plane;     /**&lt; The layer index or depth plane to use as a color target. This value is treated as a layer index on 2D array and cube textures, and as a depth plane on 3D textures. */
		///     SDL_FColor clear_color;          /**&lt; The color to clear the color target to at the start of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */
		///     SDL_GPULoadOp load_op;           /**&lt; What is done with the contents of the color target at the beginning of the render pass. */
		///     SDL_GPUStoreOp store_op;         /**&lt; What is done with the results of the render pass. */
		///     SDL_GPUTexture *resolve_texture; /**&lt; The texture that will receive the results of a multisample resolve operation. Ignored if a RESOLVE* store_op is not used. */
		///     Uint32 resolve_mip_level;        /**&lt; The mip level of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. */
		///     Uint32 resolve_layer;            /**&lt; The layer index of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. */
		///     bool cycle;                  /**&lt; true cycles the texture if the texture is bound and load_op is not LOAD */
		///     bool cycle_resolve_texture;  /**&lt; true cycles the resolve texture if the resolve texture is bound. Ignored if a RESOLVE* store_op is not used. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_GPUColorTargetInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUColorTargetInfo
		{
			public IntPtr texture;
			public uint mip_level;
			public uint layer_or_depth_plane;
			public SDL_FColor clear_color;
			public SDL_GPULoadOp load_op;
			public SDL_GPUStoreOp store_op;
			public IntPtr resolve_texture;
			public uint resolve_mip_level;
			public uint resolve_layer;
			public SDLBool cycle;
			public SDLBool cycle_resolve_texture;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>A structure specifying the parameters of a depth-stencil target used by a render pass.</para>
		/// </summary>
		/// <remarks>
		///   <para>The load_op field determines what is done with the depth contents of thetexture at the beginning of the render pass.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>LOAD: Loads the depth values currently in the texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>CLEAR: Clears the texture to a single depth.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>DONT_CARE: The driver will do whatever it wants with the memory. This isa good option if you know that every single pixel will be touched in therender pass.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The store_op field determines what is done with the depth results of therender pass.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>STORE: Stores the depth results in the texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>DONT_CARE: The driver will do whatever it wants with the depth results.This is often a good option for depth/stencil textures that don't need tobe reused again.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The stencil_load_op field determines what is done with the stencil contentsof the texture at the beginning of the render pass.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>LOAD: Loads the stencil values currently in the texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>CLEAR: Clears the stencil values to a single value.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>DONT_CARE: The driver will do whatever it wants with the memory. This isa good option if you know that every single pixel will be touched in therender pass.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The stencil_store_op field determines what is done with the stencil resultsof the render pass.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>STORE: Stores the stencil results in the texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>DONT_CARE: The driver will do whatever it wants with the stencil results.This is often a good option for depth/stencil textures that don't need tobe reused again.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Note that depth/stencil targets do not support multisample resolves.</para>
		/// </remarks>
		/// <seealso cref="SDL_BeginGPURenderPass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUDepthStencilTargetInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUDepthStencilTargetInfo
		/// {
		///     SDL_GPUTexture *texture;               /**&lt; The texture that will be used as the depth stencil target by the render pass. */
		///     float clear_depth;                     /**&lt; The value to clear the depth component to at the beginning of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */
		///     SDL_GPULoadOp load_op;                 /**&lt; What is done with the depth contents at the beginning of the render pass. */
		///     SDL_GPUStoreOp store_op;               /**&lt; What is done with the depth results of the render pass. */
		///     SDL_GPULoadOp stencil_load_op;         /**&lt; What is done with the stencil contents at the beginning of the render pass. */
		///     SDL_GPUStoreOp stencil_store_op;       /**&lt; What is done with the stencil results of the render pass. */
		///     bool cycle;                        /**&lt; true cycles the texture if the texture is bound and any load ops are not LOAD */
		///     Uint8 clear_stencil;                   /**&lt; The value to clear the stencil component to at the beginning of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		/// } SDL_GPUDepthStencilTargetInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUDepthStencilTargetInfo
		{
			public IntPtr texture;
			public float clear_depth;
			public SDL_GPULoadOp load_op;
			public SDL_GPUStoreOp store_op;
			public SDL_GPULoadOp stencil_load_op;
			public SDL_GPUStoreOp stencil_store_op;
			public SDLBool cycle;
			public byte clear_stencil;
			public byte padding1;
			public byte padding2;
		}

		/// <summary>
		///   <para>A structure containing parameters for a blit command.</para>
		/// </summary>
		/// <seealso cref="SDL_BlitGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBlitInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUBlitInfo {
		///     SDL_GPUBlitRegion source;       /**&lt; The source region for the blit. */
		///     SDL_GPUBlitRegion destination;  /**&lt; The destination region for the blit. */
		///     SDL_GPULoadOp load_op;          /**&lt; What is done with the contents of the destination before the blit. */
		///     SDL_FColor clear_color;         /**&lt; The color to clear the destination region to before the blit. Ignored if load_op is not SDL_GPU_LOADOP_CLEAR. */
		///     SDL_FlipMode flip_mode;         /**&lt; The flip mode for the source region. */
		///     SDL_GPUFilter filter;           /**&lt; The filter mode used when blitting. */
		///     bool cycle;                 /**&lt; true cycles the destination texture if it is already bound. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_GPUBlitInfo;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUBlitInfo
		{
			public SDL_GPUBlitRegion source;
			public SDL_GPUBlitRegion destination;
			public SDL_GPULoadOp load_op;
			public SDL_FColor clear_color;
			public SDL_FlipMode flip_mode;
			public SDL_GPUFilter filter;
			public SDLBool cycle;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>A structure specifying parameters in a buffer binding call.</para>
		/// </summary>
		/// <seealso cref="SDL_BindGPUVertexBuffers" />
		/// <seealso cref="SDL_BindGPUIndexBuffers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUBufferBinding<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUBufferBinding
		/// {
		///     SDL_GPUBuffer *buffer;  /**&lt; The buffer to bind. Must have been created with SDL_GPU_BUFFERUSAGE_VERTEX for SDL_BindGPUVertexBuffers, or SDL_GPU_BUFFERUSAGE_INDEX for SDL_BindGPUIndexBuffers. */
		///     Uint32 offset;          /**&lt; The starting byte of the data to bind in the buffer. */
		/// } SDL_GPUBufferBinding;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUBufferBinding
		{
			public IntPtr buffer;
			public uint offset;
		}

		/// <summary>
		///   <para>A structure specifying parameters in a sampler binding call.</para>
		/// </summary>
		/// <seealso cref="SDL_BindGPUVertexSamplers" />
		/// <seealso cref="SDL_BindGPUFragmentSamplers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureSamplerBinding<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUTextureSamplerBinding
		/// {
		///     SDL_GPUTexture *texture;  /**&lt; The texture to bind. Must have been created with SDL_GPU_TEXTUREUSAGE_SAMPLER. */
		///     SDL_GPUSampler *sampler;  /**&lt; The sampler to bind. */
		/// } SDL_GPUTextureSamplerBinding;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUTextureSamplerBinding
		{
			public IntPtr texture;
			public IntPtr sampler;
		}

		/// <summary>
		///   <para>A structure specifying parameters related to binding buffers in a compute pass.</para>
		/// </summary>
		/// <seealso cref="SDL_BeginGPUComputePass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUStorageBufferReadWriteBinding<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUStorageBufferReadWriteBinding
		/// {
		///     SDL_GPUBuffer *buffer;  /**&lt; The buffer to bind. Must have been created with SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE. */
		///     bool cycle;             /**&lt; true cycles the buffer if it is already bound. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_GPUStorageBufferReadWriteBinding;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUStorageBufferReadWriteBinding
		{
			public IntPtr buffer;
			public SDLBool cycle;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		/// <summary>
		///   <para>A structure specifying parameters related to binding textures in a compute pass.</para>
		/// </summary>
		/// <seealso cref="SDL_BeginGPUComputePass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUStorageTextureReadWriteBinding<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_GPUStorageTextureReadWriteBinding
		/// {
		///     SDL_GPUTexture *texture;  /**&lt; The texture to bind. Must have been created with SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE or SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE. */
		///     Uint32 mip_level;         /**&lt; The mip level index to bind. */
		///     Uint32 layer;             /**&lt; The layer index to bind. */
		///     bool cycle;               /**&lt; true cycles the texture if it is already bound. */
		///     Uint8 padding1;
		///     Uint8 padding2;
		///     Uint8 padding3;
		/// } SDL_GPUStorageTextureReadWriteBinding;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_GPUStorageTextureReadWriteBinding
		{
			public IntPtr texture;
			public uint mip_level;
			public uint layer;
			public SDLBool cycle;
			public byte padding1;
			public byte padding2;
			public byte padding3;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GPUSupportsShaderFormats", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, byte* name);
		/// <summary>
		///   <para>Checks for GPU runtime support.</para>
		/// </summary>
		/// <param name="format_flags">
		///   <para> a bitflag indicating which shader formats the app is able to provide. </para>
		/// </param>
		/// <param name="name">
		///   <para> the preferred GPU driver, or NULL to let SDL pick the optimal driver. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if supported, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateGPUDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSupportsShaderFormats<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GPUSupportsShaderFormats(
		///     SDL_GPUShaderFormat format_flags,
		///     const char *name);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static SDLBool SDL_GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GPUSupportsShaderFormats(format_flags, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>Checks for GPU runtime support.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if supported, false otherwise.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateGPUDeviceWithProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUSupportsProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GPUSupportsProperties(
		///     SDL_PropertiesID props);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GPUSupportsProperties(uint props);

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateGPUDevice", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_CreateGPUDevice(SDL_GPUShaderFormat format_flags, SDLBool debug_mode, byte* name);
		/// <summary>
		///   <para>Creates a GPU context.</para>
		/// </summary>
		/// <param name="format_flags">
		///   <para> a bitflag indicating which shader formats the app is able to provide. </para>
		/// </param>
		/// <param name="debug_mode">
		///   <para> enable debug mode properties and validations.                         </para>
		/// </param>
		/// <param name="name">
		///   <para> the preferred GPU driver, or NULL to let SDL pick the optimal driver. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUDevice" /> *) Returns a GPU context on success or NULLon failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGPUShaderFormats" />
		/// <seealso cref="SDL_GetGPUDeviceDriver" />
		/// <seealso cref="SDL_DestroyGPUDevice" />
		/// <seealso cref="SDL_GPUSupportsShaderFormats" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUDevice* SDL_CreateGPUDevice(
		///     SDL_GPUShaderFormat format_flags,
		///     bool debug_mode,
		///     const char *name);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static IntPtr SDL_CreateGPUDevice(SDL_GPUShaderFormat format_flags, SDLBool debug_mode, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_CreateGPUDevice(format_flags, debug_mode, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>Creates a GPU context.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUDevice" /> *) Returns a GPU context on success or NULLon failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOL" />:enable debug mode properties and validations, defaults to true.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOL" />:enable to prefer energy efficiency over maximum GPU performance, defaultsto false.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING" />:the name of the GPU driver to use, if a specific one is desired.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>These are the current shader format properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOL" />:The app is able to provide shaders for an NDA platform.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOL" />:The app is able to provide SPIR-V shaders if applicable.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOL" />:The app is able to provide DXBC shaders if applicable<see cref="SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOL" />:The app is able to provide DXIL shaders if applicable.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOL" />:The app is able to provide MSL shaders if applicable.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOL" />:The app is able to provide Metal shader libraries if applicable.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the D3D12 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING" />:the prefix to use for all vertex semantics, default is "TEXCOORD".</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_GetGPUShaderFormats" />
		/// <seealso cref="SDL_GetGPUDeviceDriver" />
		/// <seealso cref="SDL_DestroyGPUDevice" />
		/// <seealso cref="SDL_GPUSupportsProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUDeviceWithProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUDevice* SDL_CreateGPUDeviceWithProperties(
		///     SDL_PropertiesID props);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUDeviceWithProperties(uint props);

		/// <summary>
		///   <para>Destroys a GPU context previously returned by <see cref="SDL_CreateGPUDevice" />.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context to destroy. </para>
		/// </param>
		/// <seealso cref="SDL_CreateGPUDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyGPUDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyGPUDevice(SDL_GPUDevice *device);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyGPUDevice(IntPtr device);

		/// <summary>
		///   <para>Get the number of GPU drivers compiled into SDL.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the number of built in GPU drivers.</para>
		/// </returns>
		/// <seealso cref="SDL_GetGPUDriver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumGPUDrivers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumGPUDrivers(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumGPUDrivers();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGPUDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGPUDriver(int index);
		/// <summary>
		///   <para>Get the name of a built in GPU driver.</para>
		/// </summary>
		/// <param name="index">
		///   <para> the index of a GPU driver. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the GPU driver with the given index.</para>
		/// </returns>
		/// <remarks>
		///   <para>The GPU drivers are presented in the order in which they are normallychecked during initialization.</para>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "vulkan","metal" or "direct3d12". These never have Unicode characters, and are notmeant to be proper names.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumGPUDrivers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGPUDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGPUDriver(int index);
		/// </code><para>                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static string SDL_GetGPUDriver(int index)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGPUDriver(index));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetGPUDeviceDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetGPUDeviceDriver(IntPtr device);
		/// <summary>
		///   <para>Returns the name of the backend used to create this GPU context.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the device's driver, or NULL on error.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGPUDeviceDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetGPUDeviceDriver(SDL_GPUDevice *device);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static string SDL_GetGPUDeviceDriver(IntPtr device)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetGPUDeviceDriver(device));
		}

		/// <summary>
		///   <para>Returns the supported shader formats for this GPU context.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUShaderFormat" />) Returns a bitflag indicatingwhich shader formats the driver is able to consume.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGPUShaderFormats<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUShaderFormat SDL_GetGPUShaderFormats(SDL_GPUDevice *device);
		/// </code><para>                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GPUShaderFormat SDL_GetGPUShaderFormats(IntPtr device);

		/// <summary>
		///   <para>Creates a pipeline object to be used in a compute workflow.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                                   </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the compute pipeline to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUComputePipeline" /> *) Returns a computepipeline object on success, or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Shader resource bindings must be authored to follow a particular orderdepending on the shader format.</para>
		///   <para>For SPIR-V shaders, use the following resource sets:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>0: Sampled textures, followed by read-only storage textures, followed byread-only storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>1: Write-only storage textures, followed by write-only storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>2: Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For DXBC Shader Model 5_0 shaders, use the following register order:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>t registers: Sampled textures, followed by read-only storage textures,followed by read-only storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>u registers: Write-only storage textures, followed by write-only storagebuffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>b registers: Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For DXIL shaders, use the following register order:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>(t[n], space0): Sampled textures, followed by read-only storage textures,followed by read-only storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>(u[n], space1): Write-only storage textures, followed by write-onlystorage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>(b[n], space2): Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For MSL/metallib, use the following order:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>[[buffer]]: Uniform buffers, followed by write-only storage buffers,followed by write-only storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>[[texture]]: Sampled textures, followed by read-only storage textures,followed by write-only storage textures</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_BindGPUComputePipeline" />
		/// <seealso cref="SDL_ReleaseGPUComputePipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUComputePipeline<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUComputePipeline* SDL_CreateGPUComputePipeline(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUComputePipelineCreateInfo *createinfo);
		/// </code><para>                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUComputePipeline(IntPtr device, ref SDL_GPUComputePipelineCreateInfo createinfo);

		/// <summary>
		///   <para>Creates a pipeline object to be used in a graphics workflow.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                                    </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the graphics pipeline to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUGraphicsPipeline" /> *) Returns a graphicspipeline object on success, or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateGPUShader" />
		/// <seealso cref="SDL_BindGPUGraphicsPipeline" />
		/// <seealso cref="SDL_ReleaseGPUGraphicsPipeline" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUGraphicsPipeline<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUGraphicsPipeline* SDL_CreateGPUGraphicsPipeline(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUGraphicsPipelineCreateInfo *createinfo);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUGraphicsPipeline(IntPtr device, ref SDL_GPUGraphicsPipelineCreateInfo createinfo);

		/// <summary>
		///   <para>Creates a sampler object to be used when binding textures in a graphics workflow.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                          </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the sampler to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUSampler" /> *) Returns a sampler object on success,or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_BindGPUVertexSamplers" />
		/// <seealso cref="SDL_BindGPUFragmentSamplers" />
		/// <seealso cref="SDL_ReleaseSampler" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUSampler<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUSampler* SDL_CreateGPUSampler(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUSamplerCreateInfo *createinfo);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUSampler(IntPtr device, ref SDL_GPUSamplerCreateInfo createinfo);

		/// <summary>
		///   <para>Creates a shader to be used when creating a graphics pipeline.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                         </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the shader to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUShader" /> *) Returns a shader object on success, orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Shader resource bindings must be authored to follow a particular orderdepending on the shader format.</para>
		///   <para>For SPIR-V shaders, use the following resource sets:</para>
		///   <para>For vertex shaders:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>0: Sampled textures, followed by storage textures, followed by storagebuffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>1: Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For fragment shaders:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>2: Sampled textures, followed by storage textures, followed by storagebuffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>3: Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For DXBC Shader Model 5_0 shaders, use the following register order:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>t registers: Sampled textures, followed by storage textures, followed bystorage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>s registers: Samplers with indices corresponding to the sampled textures</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>b registers: Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For DXIL shaders, use the following register order:</para>
		///   <para>For vertex shaders:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>(t[n], space0): Sampled textures, followed by storage textures, followedby storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>(s[n], space0): Samplers with indices corresponding to the sampledtextures</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>(b[n], space1): Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For pixel shaders:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>(t[n], space2): Sampled textures, followed by storage textures, followedby storage buffers</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>(s[n], space2): Samplers with indices corresponding to the sampledtextures</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>(b[n], space3): Uniform buffers</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For MSL/metallib, use the following order:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>[[texture]]: Sampled textures, followed by storage textures</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>[[sampler]]: Samplers with indices corresponding to the sampled textures</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>[[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.Rather than manually authoring vertex buffer indices, use the[[stage_in]] attribute which will automatically use the vertex inputinformation from the <see cref="SDL_GPUPipeline" />.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_CreateGPUGraphicsPipeline" />
		/// <seealso cref="SDL_ReleaseGPUShader" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUShader<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUShader* SDL_CreateGPUShader(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUShaderCreateInfo *createinfo);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUShader(IntPtr device, ref SDL_GPUShaderCreateInfo createinfo);

		/// <summary>
		///   <para>Creates a texture object to be used in graphics or compute workflows.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                          </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the texture to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUTexture" /> *) Returns a texture object on success,or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The contents of this texture are undefined until data is written to thetexture.</para>
		///   <para>Note that certain combinations of usage flags are invalid. For example, atexture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.</para>
		///   <para>If you request a sample count higher than the hardware supports, theimplementation will automatically fall back to the highest available samplecount.</para>
		/// </remarks>
		/// <seealso cref="SDL_UploadToGPUTexture" />
		/// <seealso cref="SDL_DownloadFromGPUTexture" />
		/// <seealso cref="SDL_BindGPUVertexSamplers" />
		/// <seealso cref="SDL_BindGPUVertexStorageTextures" />
		/// <seealso cref="SDL_BindGPUFragmentSamplers" />
		/// <seealso cref="SDL_BindGPUFragmentStorageTextures" />
		/// <seealso cref="SDL_BindGPUComputeStorageTextures" />
		/// <seealso cref="SDL_BlitGPUTexture" />
		/// <seealso cref="SDL_ReleaseGPUTexture" />
		/// <seealso cref="SDL_GPUTextureSupportsFormat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUTexture* SDL_CreateGPUTexture(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUTextureCreateInfo *createinfo);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUTexture(IntPtr device, ref SDL_GPUTextureCreateInfo createinfo);

		/// <summary>
		///   <para>Creates a buffer object to be used in graphics or compute workflows.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                         </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the buffer to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUBuffer" /> *) Returns a buffer object on success, orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The contents of this buffer are undefined until data is written to thebuffer.</para>
		///   <para>Note that certain combinations of usage flags are invalid. For example, abuffer cannot have both the VERTEX and INDEX flags.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetGPUBufferName" />
		/// <seealso cref="SDL_UploadToGPUBuffer" />
		/// <seealso cref="SDL_DownloadFromGPUBuffer" />
		/// <seealso cref="SDL_CopyGPUBufferToBuffer" />
		/// <seealso cref="SDL_BindGPUVertexBuffers" />
		/// <seealso cref="SDL_BindGPUIndexBuffer" />
		/// <seealso cref="SDL_BindGPUVertexStorageBuffers" />
		/// <seealso cref="SDL_BindGPUFragmentStorageBuffers" />
		/// <seealso cref="SDL_DrawGPUPrimitivesIndirect" />
		/// <seealso cref="SDL_DrawGPUIndexedPrimitivesIndirect" />
		/// <seealso cref="SDL_BindGPUComputeStorageBuffers" />
		/// <seealso cref="SDL_DispatchGPUComputeIndirect" />
		/// <seealso cref="SDL_ReleaseGPUBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUBuffer* SDL_CreateGPUBuffer(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUBufferCreateInfo *createinfo);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUBuffer(IntPtr device, ref SDL_GPUBufferCreateInfo createinfo);

		/// <summary>
		///   <para>Creates a transfer buffer to be used when uploading to or downloading from graphics resources.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                                  </para>
		/// </param>
		/// <param name="createinfo">
		///   <para> a struct describing the state of the transfer buffer to create. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUTransferBuffer" /> *) Returns a transferbuffer on success, or NULL on failure; call <see cref="SDL_GetError" />()for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_UploadToGPUBuffer" />
		/// <seealso cref="SDL_DownloadFromGPUBuffer" />
		/// <seealso cref="SDL_UploadToGPUTexture" />
		/// <seealso cref="SDL_DownloadFromGPUTexture" />
		/// <seealso cref="SDL_ReleaseGPUTransferBuffer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateGPUTransferBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUTransferBuffer* SDL_CreateGPUTransferBuffer(
		///     SDL_GPUDevice *device,
		///     const SDL_GPUTransferBufferCreateInfo *createinfo);
		/// </code><para>                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateGPUTransferBuffer(IntPtr device, ref SDL_GPUTransferBufferCreateInfo createinfo);

		[DllImport(nativeLibName, EntryPoint = "SDL_SetGPUBufferName", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_SetGPUBufferName(IntPtr device, IntPtr buffer, byte* text);
		/// <summary>
		///   <para>Sets an arbitrary string constant to label a buffer.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                             </para>
		/// </param>
		/// <param name="buffer">
		///   <para> a buffer to attach the name to.                            </para>
		/// </param>
		/// <param name="text">
		///   <para> a UTF-8 string constant to mark as the name of the buffer. </para>
		/// </param>
		/// <remarks>
		///   <para>Useful for debugging.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUBufferName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGPUBufferName(
		///     SDL_GPUDevice *device,
		///     SDL_GPUBuffer *buffer,
		///     const char *text);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static void SDL_SetGPUBufferName(IntPtr device, IntPtr buffer, string text)
		{
			var textUTF8 = EncodeAsUTF8(text);
			INTERNAL_SDL_SetGPUBufferName(device, buffer, textUTF8);

			SDL_free((IntPtr) textUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetGPUTextureName", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_SetGPUTextureName(IntPtr device, IntPtr texture, byte* text);
		/// <summary>
		///   <para>Sets an arbitrary string constant to label a texture.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU Context.                                              </para>
		/// </param>
		/// <param name="texture">
		///   <para> a texture to attach the name to.                            </para>
		/// </param>
		/// <param name="text">
		///   <para> a UTF-8 string constant to mark as the name of the texture. </para>
		/// </param>
		/// <remarks>
		///   <para>Useful for debugging.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUTextureName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGPUTextureName(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTexture *texture,
		///     const char *text);
		/// </code><para>                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static void SDL_SetGPUTextureName(IntPtr device, IntPtr texture, string text)
		{
			var textUTF8 = EncodeAsUTF8(text);
			INTERNAL_SDL_SetGPUTextureName(device, texture, textUTF8);

			SDL_free((IntPtr) textUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_InsertGPUDebugLabel", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_InsertGPUDebugLabel(IntPtr command_buffer, byte* text);
		/// <summary>
		///   <para>Inserts an arbitrary string label into the command buffer callstream.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                               </para>
		/// </param>
		/// <param name="text">
		///   <para> a UTF-8 string constant to insert as the label. </para>
		/// </param>
		/// <remarks>
		///   <para>Useful for debugging.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_InsertGPUDebugLabel<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_InsertGPUDebugLabel(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     const char *text);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static void SDL_InsertGPUDebugLabel(IntPtr command_buffer, string text)
		{
			var textUTF8 = EncodeAsUTF8(text);
			INTERNAL_SDL_InsertGPUDebugLabel(command_buffer, textUTF8);

			SDL_free((IntPtr) textUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_PushGPUDebugGroup", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_PushGPUDebugGroup(IntPtr command_buffer, byte* name);
		/// <summary>
		///   <para>Begins a debug group with an arbitary name.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                             </para>
		/// </param>
		/// <param name="name">
		///   <para> a UTF-8 string constant that names the group. </para>
		/// </param>
		/// <remarks>
		///   <para>Used for denoting groups of calls when viewing the command buffercallstream in a graphics debugging tool.</para>
		///   <para>Each call to <see cref="SDL_PushGPUDebugGroup" /> must have acorresponding call to <see cref="SDL_PopGPUDebugGroup" />.</para>
		///   <para>On some backends (e.g. Metal), pushing a debug group during arender/blit/compute pass will create a group that is scoped to the nativepass rather than the command buffer. For best results, if you push a debuggroup during a pass, always pop it in the same pass.</para>
		/// </remarks>
		/// <seealso cref="SDL_PopGPUDebugGroup" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PushGPUDebugGroup<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_PushGPUDebugGroup(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     const char *name);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		public static void SDL_PushGPUDebugGroup(IntPtr command_buffer, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			INTERNAL_SDL_PushGPUDebugGroup(command_buffer, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
		}

		/// <summary>
		///   <para>Ends the most-recently pushed debug group.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer. </para>
		/// </param>
		/// <seealso cref="SDL_PushGPUDebugGroup" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PopGPUDebugGroup<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_PopGPUDebugGroup(
		///     SDL_GPUCommandBuffer *command_buffer);
		/// </code><para>                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_PopGPUDebugGroup(IntPtr command_buffer);

		/// <summary>
		///   <para>Frees the given texture as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.             </para>
		/// </param>
		/// <param name="texture">
		///   <para> a texture to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the texture after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUTexture(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTexture *texture);
		/// </code><para>                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUTexture(IntPtr device, IntPtr texture);

		/// <summary>
		///   <para>Frees the given sampler as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.             </para>
		/// </param>
		/// <param name="sampler">
		///   <para> a sampler to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the sampler after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUSampler<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUSampler(
		///     SDL_GPUDevice *device,
		///     SDL_GPUSampler *sampler);
		/// </code><para>                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUSampler(IntPtr device, IntPtr sampler);

		/// <summary>
		///   <para>Frees the given buffer as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.            </para>
		/// </param>
		/// <param name="buffer">
		///   <para> a buffer to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the buffer after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUBuffer(
		///     SDL_GPUDevice *device,
		///     SDL_GPUBuffer *buffer);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUBuffer(IntPtr device, IntPtr buffer);

		/// <summary>
		///   <para>Frees the given transfer buffer as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                     </para>
		/// </param>
		/// <param name="transfer_buffer">
		///   <para> a transfer buffer to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the transfer buffer after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUTransferBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUTransferBuffer(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTransferBuffer *transfer_buffer);
		/// </code><para>                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUTransferBuffer(IntPtr device, IntPtr transfer_buffer);

		/// <summary>
		///   <para>Frees the given compute pipeline as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                      </para>
		/// </param>
		/// <param name="compute_pipeline">
		///   <para> a compute pipeline to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the compute pipeline after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUComputePipeline<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUComputePipeline(
		///     SDL_GPUDevice *device,
		///     SDL_GPUComputePipeline *compute_pipeline);
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUComputePipeline(IntPtr device, IntPtr compute_pipeline);

		/// <summary>
		///   <para>Frees the given shader as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.            </para>
		/// </param>
		/// <param name="shader">
		///   <para> a shader to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the shader after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUShader<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUShader(
		///     SDL_GPUDevice *device,
		///     SDL_GPUShader *shader);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUShader(IntPtr device, IntPtr shader);

		/// <summary>
		///   <para>Frees the given graphics pipeline as soon as it is safe to do so.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                       </para>
		/// </param>
		/// <param name="graphics_pipeline">
		///   <para> a graphics pipeline to be destroyed. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not reference the graphics pipeline after calling this function.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUGraphicsPipeline<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUGraphicsPipeline(
		///     SDL_GPUDevice *device,
		///     SDL_GPUGraphicsPipeline *graphics_pipeline);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUGraphicsPipeline(IntPtr device, IntPtr graphics_pipeline);

		/// <summary>
		///   <para>Acquire a command buffer.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUCommandBuffer" /> *) Returns a command buffer,or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>This command buffer is managed by the implementation and should not befreed by the user. The command buffer may only be used on the thread it wasacquired on. The command buffer should be submitted on the thread it wasacquired on.</para>
		/// </remarks>
		/// <seealso cref="SDL_SubmitGPUCommandBuffer" />
		/// <seealso cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AcquireGPUCommandBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUCommandBuffer* SDL_AcquireGPUCommandBuffer(
		///     SDL_GPUDevice *device);
		/// </code><para>                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_AcquireGPUCommandBuffer(IntPtr device);

		/// <summary>
		///   <para>Pushes data to a vertex uniform slot on the command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                        </para>
		/// </param>
		/// <param name="slot_index">
		///   <para> the vertex uniform slot to push data to. </para>
		/// </param>
		/// <param name="data">
		///   <para> client data to write.                    </para>
		/// </param>
		/// <param name="length">
		///   <para> the length of the data to write.         </para>
		/// </param>
		/// <remarks>
		///   <para>Subsequent draw calls will use this uniform data.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PushGPUVertexUniformData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_PushGPUVertexUniformData(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     Uint32 slot_index,
		///     const void *data,
		///     Uint32 length);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_PushGPUVertexUniformData(IntPtr command_buffer, uint slot_index, IntPtr data, uint length);

		/// <summary>
		///   <para>Pushes data to a fragment uniform slot on the command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                          </para>
		/// </param>
		/// <param name="slot_index">
		///   <para> the fragment uniform slot to push data to. </para>
		/// </param>
		/// <param name="data">
		///   <para> client data to write.                      </para>
		/// </param>
		/// <param name="length">
		///   <para> the length of the data to write.           </para>
		/// </param>
		/// <remarks>
		///   <para>Subsequent draw calls will use this uniform data.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PushGPUFragmentUniformData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_PushGPUFragmentUniformData(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     Uint32 slot_index,
		///     const void *data,
		///     Uint32 length);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_PushGPUFragmentUniformData(IntPtr command_buffer, uint slot_index, IntPtr data, uint length);

		/// <summary>
		///   <para>Pushes data to a uniform slot on the command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                 </para>
		/// </param>
		/// <param name="slot_index">
		///   <para> the uniform slot to push data to. </para>
		/// </param>
		/// <param name="data">
		///   <para> client data to write.             </para>
		/// </param>
		/// <param name="length">
		///   <para> the length of the data to write.  </para>
		/// </param>
		/// <remarks>
		///   <para>Subsequent draw calls will use this uniform data.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PushGPUComputeUniformData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_PushGPUComputeUniformData(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     Uint32 slot_index,
		///     const void *data,
		///     Uint32 length);
		/// </code><para>                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_PushGPUComputeUniformData(IntPtr command_buffer, uint slot_index, IntPtr data, uint length);

		/// <summary>
		///   <para>Begins a render pass on a command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                                                                     </para>
		/// </param>
		/// <param name="color_target_infos">
		///   <para> an array of texture subresources with corresponding clear values and load/store ops.  </para>
		/// </param>
		/// <param name="num_color_targets">
		///   <para> the number of color targets in the color_target_infos array.                          </para>
		/// </param>
		/// <param name="depth_stencil_target_info">
		///   <para> a texture subresource with corresponding clear value and load/store ops, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPURenderPass" /> *) Returns a render pass handle.</para>
		/// </returns>
		/// <remarks>
		///   <para>A render pass consists of a set of texture subresources (or depth slices inthe 3D texture case) which will be rendered to during the render pass,along with corresponding clear values and load/store operations. Alloperations related to graphics pipelines must take place inside of a renderpass. A default viewport and scissor state are automatically set when thisis called. You cannot begin another render pass, or begin a compute pass orcopy pass until you have ended the render pass.</para>
		/// </remarks>
		/// <seealso cref="SDL_EndGPURenderPass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BeginGPURenderPass<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPURenderPass* SDL_BeginGPURenderPass(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     const SDL_GPUColorTargetInfo *color_target_infos,
		///     Uint32 num_color_targets,
		///     const SDL_GPUDepthStencilTargetInfo *depth_stencil_target_info);
		/// </code><para>                                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## D3D12 Warnings ##</b><para>On D3D12 with <see href="https://wiki.libsdl.org/SDL3/SDL_CreateGPUDevice#function-parameters">debug_mode</see> enabled,when clearing a color texture or depth/stencil texture, you may see a<c>CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE</c> or<c>CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE</c> warning at runtime like:</para><code><para>D3D12 WARNING: ... The clear values do not match those passed to resourcecreation. The clear operation is typically slower as a result; but willstill clear to the desired value.</para></code><para>You can avoid these warnings by, when creating the texture, setting the relevantproperties below, in the <c>props</c> of your <see cref="SDL_GPUTextureCreateInfo" />,to the same clear color/depth/stencil value that you use in your render pass.</para><para>For the color texture:</para><list type="bullet"><item><description><para><see cref="SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_R_FLOAT" />: the red channel of the clear color</para></description></item><item><description><para><see cref="SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_G_FLOAT" />: the green channel of the clear color</para></description></item><item><description><para><see cref="SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_B_FLOAT" />: the blue channel of the clear color</para></description></item><item><description><para><see cref="SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_A_FLOAT" />: the alpha channel of the clear color</para></description></item></list><para>For the depth/stencil texture:</para><list type="bullet"><item><description><para><see cref="SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_DEPTH_FLOAT" />: the depth clear value</para></description></item><item><description><para><see cref="SDL_PROP_GPU_CREATETEXTURE_D3D12_CLEAR_STENCIL_UINT8" />: the stencil clear value</para></description></item></list><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_BeginGPURenderPass(IntPtr command_buffer, SDL_GPUColorTargetInfo[] color_target_infos, uint num_color_targets, ref SDL_GPUDepthStencilTargetInfo depth_stencil_target_info);

		/// <summary>
		///   <para>Binds a graphics pipeline on a render pass to be used in rendering.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.          </para>
		/// </param>
		/// <param name="graphics_pipeline">
		///   <para> the graphics pipeline to bind. </para>
		/// </param>
		/// <remarks>
		///   <para>A graphics pipeline must be bound before making any draw calls.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUGraphicsPipeline<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUGraphicsPipeline(
		///     SDL_GPURenderPass *render_pass,
		///     SDL_GPUGraphicsPipeline *graphics_pipeline);
		/// </code><para>                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUGraphicsPipeline(IntPtr render_pass, IntPtr graphics_pipeline);

		/// <summary>
		///   <para>Sets the current viewport state on a command buffer.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle. </para>
		/// </param>
		/// <param name="viewport">
		///   <para> the viewport to set.  </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUViewport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGPUViewport(
		///     SDL_GPURenderPass *render_pass,
		///     const SDL_GPUViewport *viewport);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetGPUViewport(IntPtr render_pass, ref SDL_GPUViewport viewport);

		/// <summary>
		///   <para>Sets the current scissor state on a command buffer.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.    </para>
		/// </param>
		/// <param name="scissor">
		///   <para> the scissor area to set. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUScissor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGPUScissor(
		///     SDL_GPURenderPass *render_pass,
		///     const SDL_Rect *scissor);
		/// </code><para>                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetGPUScissor(IntPtr render_pass, ref SDL_Rect scissor);

		/// <summary>
		///   <para>Sets the current blend constants on a command buffer.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.     </para>
		/// </param>
		/// <param name="blend_constants">
		///   <para> the blend constant color. </para>
		/// </param>
		/// <seealso cref="SDL_GPUBlendFactor.SDL_GPU_BLENDFACTOR_CONSTANT_COLOR" />
		/// <seealso cref="SDL_GPUBlendFactor.SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUBlendConstants<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGPUBlendConstants(
		///     SDL_GPURenderPass *render_pass,
		///     SDL_FColor blend_constants);
		/// </code><para>                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetGPUBlendConstants(IntPtr render_pass, SDL_FColor blend_constants);

		/// <summary>
		///   <para>Sets the current stencil reference value on a command buffer.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.               </para>
		/// </param>
		/// <param name="reference">
		///   <para> the stencil reference value to set. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUStencilReference<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetGPUStencilReference(
		///     SDL_GPURenderPass *render_pass,
		///     Uint8 reference);
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetGPUStencilReference(IntPtr render_pass, byte reference);

		/// <summary>
		///   <para>Binds vertex buffers on a command buffer for use with subsequent draw calls.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                                                                         </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the vertex buffer slot to begin binding from.                                                                 </para>
		/// </param>
		/// <param name="bindings">
		///   <para> an array of <see cref="SDL_GPUBufferBinding" /> structs containing vertex buffers and offset values. </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of bindings in the bindings array.                                                                 </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUVertexBuffers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUVertexBuffers(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     const SDL_GPUBufferBinding *bindings,
		///     Uint32 num_bindings);
		/// </code><para>                                                                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUVertexBuffers(IntPtr render_pass, uint first_slot, SDL_GPUBufferBinding[] bindings, uint num_bindings);

		/// <summary>
		///   <para>Binds an index buffer on a command buffer for use with subsequent draw calls.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                        </para>
		/// </param>
		/// <param name="binding">
		///   <para> a pointer to a struct containing an index buffer and offset. </para>
		/// </param>
		/// <param name="index_element_size">
		///   <para> whether the index values in the buffer are 16- or 32-bit.    </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUIndexBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUIndexBuffer(
		///     SDL_GPURenderPass *render_pass,
		///     const SDL_GPUBufferBinding *binding,
		///     SDL_GPUIndexElementSize index_element_size);
		/// </code><para>                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUIndexBuffer(IntPtr render_pass, ref SDL_GPUBufferBinding binding, SDL_GPUIndexElementSize index_element_size);

		/// <summary>
		///   <para>Binds texture-sampler pairs for use on the vertex shader.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                       </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the vertex sampler slot to begin binding from.              </para>
		/// </param>
		/// <param name="texture_sampler_bindings">
		///   <para> an array of texture-sampler binding structs.                </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of texture-sampler pairs to bind from the array. </para>
		/// </param>
		/// <remarks>
		///   <para>The textures must have been created with<see cref="SDL_GPUTextureUsageFlags.SDL_GPU_TEXTUREUSAGE_SAMPLER" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUVertexSamplers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUVertexSamplers(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,
		///     Uint32 num_bindings);
		/// </code><para>                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUVertexSamplers(IntPtr render_pass, uint first_slot, SDL_GPUTextureSamplerBinding[] texture_sampler_bindings, uint num_bindings);

		/// <summary>
		///   <para>Binds storage textures for use on the vertex shader.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                  </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the vertex storage texture slot to begin binding from. </para>
		/// </param>
		/// <param name="storage_textures">
		///   <para> an array of storage textures.                          </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of storage texture to bind from the array.  </para>
		/// </param>
		/// <remarks>
		///   <para>These textures must have been created with<see cref="SDL_GPUTextureUsageFlags.SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUVertexStorageTextures<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUVertexStorageTextures(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     SDL_GPUTexture *const *storage_textures,
		///     Uint32 num_bindings);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUVertexStorageTextures(IntPtr render_pass, uint first_slot, IntPtr[] storage_textures, uint num_bindings);

		/// <summary>
		///   <para>Binds storage buffers for use on the vertex shader.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                 </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the vertex storage buffer slot to begin binding from. </para>
		/// </param>
		/// <param name="storage_buffers">
		///   <para> an array of buffers.                                  </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of buffers to bind from the array.         </para>
		/// </param>
		/// <remarks>
		///   <para>These buffers must have been created with<see cref="SDL_GPUBufferUsageFlags.SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUVertexStorageBuffers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUVertexStorageBuffers(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     SDL_GPUBuffer *const *storage_buffers,
		///     Uint32 num_bindings);
		/// </code><para>                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUVertexStorageBuffers(IntPtr render_pass, uint first_slot, IntPtr[] storage_buffers, uint num_bindings);

		/// <summary>
		///   <para>Binds texture-sampler pairs for use on the fragment shader.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                       </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the fragment sampler slot to begin binding from.            </para>
		/// </param>
		/// <param name="texture_sampler_bindings">
		///   <para> an array of texture-sampler binding structs.                </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of texture-sampler pairs to bind from the array. </para>
		/// </param>
		/// <remarks>
		///   <para>The textures must have been created with<see cref="SDL_GPUTextureUsageFlags.SDL_GPU_TEXTUREUSAGE_SAMPLER" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUFragmentSamplers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUFragmentSamplers(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,
		///     Uint32 num_bindings);
		/// </code><para>                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUFragmentSamplers(IntPtr render_pass, uint first_slot, SDL_GPUTextureSamplerBinding[] texture_sampler_bindings, uint num_bindings);

		/// <summary>
		///   <para>Binds storage textures for use on the fragment shader.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                    </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the fragment storage texture slot to begin binding from. </para>
		/// </param>
		/// <param name="storage_textures">
		///   <para> an array of storage textures.                            </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of storage textures to bind from the array.   </para>
		/// </param>
		/// <remarks>
		///   <para>These textures must have been created with<see cref="SDL_GPUTextureUsageFlags.SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUFragmentStorageTextures<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUFragmentStorageTextures(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     SDL_GPUTexture *const *storage_textures,
		///     Uint32 num_bindings);
		/// </code><para>                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUFragmentStorageTextures(IntPtr render_pass, uint first_slot, IntPtr[] storage_textures, uint num_bindings);

		/// <summary>
		///   <para>Binds storage buffers for use on the fragment shader.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                   </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the fragment storage buffer slot to begin binding from. </para>
		/// </param>
		/// <param name="storage_buffers">
		///   <para> an array of storage buffers.                            </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of storage buffers to bind from the array.   </para>
		/// </param>
		/// <remarks>
		///   <para>These buffers must have been created with<see cref="SDL_GPUBufferUsageFlags.SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUFragmentStorageBuffers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUFragmentStorageBuffers(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 first_slot,
		///     SDL_GPUBuffer *const *storage_buffers,
		///     Uint32 num_bindings);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUFragmentStorageBuffers(IntPtr render_pass, uint first_slot, IntPtr[] storage_buffers, uint num_bindings);

		/// <summary>
		///   <para>Draws data using bound graphics state with an index buffer and instancing enabled.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                               </para>
		/// </param>
		/// <param name="num_indices">
		///   <para> the number of indices to draw per instance.                         </para>
		/// </param>
		/// <param name="num_instances">
		///   <para> the number of instances to draw.                                    </para>
		/// </param>
		/// <param name="first_index">
		///   <para> the starting index within the index buffer.                         </para>
		/// </param>
		/// <param name="vertex_offset">
		///   <para> value added to vertex index before indexing into the vertex buffer. </para>
		/// </param>
		/// <param name="first_instance">
		///   <para> the ID of the first instance to draw.                               </para>
		/// </param>
		/// <remarks>
		///   <para>You must not call this function before binding a graphics pipeline.</para>
		///   <para>Note that the <c>first_vertex</c> and <c>first_instance</c> parameters are NOTcompatible with built-in vertex/instance ID variables in shaders (forexample, SV_VertexID). If your shader depends on these variables, thecorrelating draw call parameter MUST be 0.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DrawGPUIndexedPrimitives<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DrawGPUIndexedPrimitives(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 num_indices,
		///     Uint32 num_instances,
		///     Uint32 first_index,
		///     Sint32 vertex_offset,
		///     Uint32 first_instance);
		/// </code><para>                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DrawGPUIndexedPrimitives(IntPtr render_pass, uint num_indices, uint num_instances, uint first_index, int vertex_offset, uint first_instance);

		/// <summary>
		///   <para>Draws data using bound graphics state.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                       </para>
		/// </param>
		/// <param name="num_vertices">
		///   <para> the number of vertices to draw.             </para>
		/// </param>
		/// <param name="num_instances">
		///   <para> the number of instances that will be drawn. </para>
		/// </param>
		/// <param name="first_vertex">
		///   <para> the index of the first vertex to draw.      </para>
		/// </param>
		/// <param name="first_instance">
		///   <para> the ID of the first instance to draw.       </para>
		/// </param>
		/// <remarks>
		///   <para>You must not call this function before binding a graphics pipeline.</para>
		///   <para>Note that the <c>first_vertex</c> and <c>first_instance</c> parameters are NOTcompatible with built-in vertex/instance ID variables in shaders (forexample, SV_VertexID). If your shader depends on these variables, thecorrelating draw call parameter MUST be 0.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DrawGPUPrimitives<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DrawGPUPrimitives(
		///     SDL_GPURenderPass *render_pass,
		///     Uint32 num_vertices,
		///     Uint32 num_instances,
		///     Uint32 first_vertex,
		///     Uint32 first_instance);
		/// </code><para>                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DrawGPUPrimitives(IntPtr render_pass, uint num_vertices, uint num_instances, uint first_vertex, uint first_instance);

		/// <summary>
		///   <para>Draws data using bound graphics state and with draw parameters set from a buffer.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                                       </para>
		/// </param>
		/// <param name="buffer">
		///   <para> a buffer containing draw parameters.                                        </para>
		/// </param>
		/// <param name="offset">
		///   <para> the offset to start reading from the draw buffer.                           </para>
		/// </param>
		/// <param name="draw_count">
		///   <para> the number of draw parameter sets that should be read from the draw buffer. </para>
		/// </param>
		/// <remarks>
		///   <para>The buffer must consist of tightly-packed draw parameter sets that eachmatch the layout of<see cref="SDL_GPUIndirectDrawCommand" />. You must not callthis function before binding a graphics pipeline.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DrawGPUPrimitivesIndirect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DrawGPUPrimitivesIndirect(
		///     SDL_GPURenderPass *render_pass,
		///     SDL_GPUBuffer *buffer,
		///     Uint32 offset,
		///     Uint32 draw_count);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DrawGPUPrimitivesIndirect(IntPtr render_pass, IntPtr buffer, uint offset, uint draw_count);

		/// <summary>
		///   <para>Draws data using bound graphics state with an index buffer enabled and with draw parameters set from a buffer.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle.                                                       </para>
		/// </param>
		/// <param name="buffer">
		///   <para> a buffer containing draw parameters.                                        </para>
		/// </param>
		/// <param name="offset">
		///   <para> the offset to start reading from the draw buffer.                           </para>
		/// </param>
		/// <param name="draw_count">
		///   <para> the number of draw parameter sets that should be read from the draw buffer. </para>
		/// </param>
		/// <remarks>
		///   <para>The buffer must consist of tightly-packed draw parameter sets that eachmatch the layout of<see cref="SDL_GPUIndexedIndirectDrawCommand" />. Youmust not call this function before binding a graphics pipeline.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DrawGPUIndexedPrimitivesIndirect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DrawGPUIndexedPrimitivesIndirect(
		///     SDL_GPURenderPass *render_pass,
		///     SDL_GPUBuffer *buffer,
		///     Uint32 offset,
		///     Uint32 draw_count);
		/// </code><para>                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DrawGPUIndexedPrimitivesIndirect(IntPtr render_pass, IntPtr buffer, uint offset, uint draw_count);

		/// <summary>
		///   <para>Ends the given render pass.</para>
		/// </summary>
		/// <param name="render_pass">
		///   <para> a render pass handle. </para>
		/// </param>
		/// <remarks>
		///   <para>All bound graphics state on the render pass command buffer is unset. Therender pass handle is now invalid.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EndGPURenderPass<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_EndGPURenderPass(
		///     SDL_GPURenderPass *render_pass);
		/// </code><para>                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_EndGPURenderPass(IntPtr render_pass);

		/// <summary>
		///   <para>Begins a compute pass on a command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                                      </para>
		/// </param>
		/// <param name="storage_texture_bindings">
		///   <para> an array of writeable storage texture binding structs. </para>
		/// </param>
		/// <param name="num_storage_texture_bindings">
		///   <para> the number of storage textures to bind from the array. </para>
		/// </param>
		/// <param name="storage_buffer_bindings">
		///   <para> an array of writeable storage buffer binding structs.  </para>
		/// </param>
		/// <param name="num_storage_buffer_bindings">
		///   <para> the number of storage buffers to bind from the array.  </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUComputePass" /> *) Returns a compute pass handle.</para>
		/// </returns>
		/// <remarks>
		///   <para>A compute pass is defined by a set of texture subresources and buffers thatmay be written to by compute pipelines. These textures and buffers musthave been created with the COMPUTE_STORAGE_WRITE bit or theCOMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE bit. If you do not create a texturewith COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE, you must not read from thetexture in the compute pass. All operations related to compute pipelinesmust take place inside of a compute pass. You must not begin anothercompute pass, or a render pass or copy pass before ending the compute pass.</para>
		///   <para>A VERY IMPORTANT NOTE - Reads and writes in compute passes are NOTimplicitly synchronized. This means you may cause data races by bothreading and writing a resource region in a compute pass, or by writingmultiple times to a resource region. If your compute work depends onreading the completed output from a previous dispatch, you MUST end thecurrent compute pass and begin a new one before you can safely access thedata. Otherwise you will receive unexpected results. Reading and writing atexture in the same compute pass is only supported by specific textureformats. Make sure you check the format support!</para>
		/// </remarks>
		/// <seealso cref="SDL_EndGPUComputePass" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BeginGPUComputePass<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUComputePass* SDL_BeginGPUComputePass(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     const SDL_GPUStorageTextureReadWriteBinding *storage_texture_bindings,
		///     Uint32 num_storage_texture_bindings,
		///     const SDL_GPUStorageBufferReadWriteBinding *storage_buffer_bindings,
		///     Uint32 num_storage_buffer_bindings);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_BeginGPUComputePass(IntPtr command_buffer, SDL_GPUStorageTextureReadWriteBinding[] storage_texture_bindings, uint num_storage_texture_bindings, SDL_GPUStorageBufferReadWriteBinding[] storage_buffer_bindings, uint num_storage_buffer_bindings);

		/// <summary>
		///   <para>Binds a compute pipeline on a command buffer for use in compute dispatch.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle.      </para>
		/// </param>
		/// <param name="compute_pipeline">
		///   <para> a compute pipeline to bind. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUComputePipeline<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUComputePipeline(
		///     SDL_GPUComputePass *compute_pass,
		///     SDL_GPUComputePipeline *compute_pipeline);
		/// </code><para>                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUComputePipeline(IntPtr compute_pass, IntPtr compute_pipeline);

		/// <summary>
		///   <para>Binds texture-sampler pairs for use on the compute shader.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle.                                         </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the compute sampler slot to begin binding from.                </para>
		/// </param>
		/// <param name="texture_sampler_bindings">
		///   <para> an array of texture-sampler binding structs.                   </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of texture-sampler bindings to bind from the array. </para>
		/// </param>
		/// <remarks>
		///   <para>The textures must have been created with<see cref="SDL_GPUTextureUsageFlags.SDL_GPU_TEXTUREUSAGE_SAMPLER" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUComputeSamplers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUComputeSamplers(
		///     SDL_GPUComputePass *compute_pass,
		///     Uint32 first_slot,
		///     const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,
		///     Uint32 num_bindings);
		/// </code><para>                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUComputeSamplers(IntPtr compute_pass, uint first_slot, SDL_GPUTextureSamplerBinding[] texture_sampler_bindings, uint num_bindings);

		/// <summary>
		///   <para>Binds storage textures as readonly for use on the compute pipeline.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle.                                  </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the compute storage texture slot to begin binding from. </para>
		/// </param>
		/// <param name="storage_textures">
		///   <para> an array of storage textures.                           </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of storage textures to bind from the array.  </para>
		/// </param>
		/// <remarks>
		///   <para>These textures must have been created with<see cref="SDL_GPUTextureUsageFlags.SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUComputeStorageTextures<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUComputeStorageTextures(
		///     SDL_GPUComputePass *compute_pass,
		///     Uint32 first_slot,
		///     SDL_GPUTexture *const *storage_textures,
		///     Uint32 num_bindings);
		/// </code><para>                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUComputeStorageTextures(IntPtr compute_pass, uint first_slot, IntPtr[] storage_textures, uint num_bindings);

		/// <summary>
		///   <para>Binds storage buffers as readonly for use on the compute pipeline.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle.                                 </para>
		/// </param>
		/// <param name="first_slot">
		///   <para> the compute storage buffer slot to begin binding from. </para>
		/// </param>
		/// <param name="storage_buffers">
		///   <para> an array of storage buffer binding structs.            </para>
		/// </param>
		/// <param name="num_bindings">
		///   <para> the number of storage buffers to bind from the array.  </para>
		/// </param>
		/// <remarks>
		///   <para>These buffers must have been created with<see cref="SDL_GPUBufferUsageFlags.SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BindGPUComputeStorageBuffers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BindGPUComputeStorageBuffers(
		///     SDL_GPUComputePass *compute_pass,
		///     Uint32 first_slot,
		///     SDL_GPUBuffer *const *storage_buffers,
		///     Uint32 num_bindings);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BindGPUComputeStorageBuffers(IntPtr compute_pass, uint first_slot, IntPtr[] storage_buffers, uint num_bindings);

		/// <summary>
		///   <para>Dispatches compute work.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle.                                     </para>
		/// </param>
		/// <param name="groupcount_x">
		///   <para> number of local workgroups to dispatch in the X dimension. </para>
		/// </param>
		/// <param name="groupcount_y">
		///   <para> number of local workgroups to dispatch in the Y dimension. </para>
		/// </param>
		/// <param name="groupcount_z">
		///   <para> number of local workgroups to dispatch in the Z dimension. </para>
		/// </param>
		/// <remarks>
		///   <para>You must not call this function before binding a compute pipeline.</para>
		///   <para>A VERY IMPORTANT NOTE If you dispatch multiple times in a compute pass, andthe dispatches write to the same resource region as each other, there is noguarantee of which order the writes will occur. If the write order matters,you MUST end the compute pass and begin another one.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DispatchGPUCompute<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DispatchGPUCompute(
		///     SDL_GPUComputePass *compute_pass,
		///     Uint32 groupcount_x,
		///     Uint32 groupcount_y,
		///     Uint32 groupcount_z);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DispatchGPUCompute(IntPtr compute_pass, uint groupcount_x, uint groupcount_y, uint groupcount_z);

		/// <summary>
		///   <para>Dispatches compute work with parameters set from a buffer.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle.                                </para>
		/// </param>
		/// <param name="buffer">
		///   <para> a buffer containing dispatch parameters.              </para>
		/// </param>
		/// <param name="offset">
		///   <para> the offset to start reading from the dispatch buffer. </para>
		/// </param>
		/// <remarks>
		///   <para>The buffer layout should match the layout of<see cref="SDL_GPUIndirectDispatchCommand" />. You mustnot call this function before binding a compute pipeline.</para>
		///   <para>A VERY IMPORTANT NOTE If you dispatch multiple times in a compute pass, andthe dispatches write to the same resource region as each other, there is noguarantee of which order the writes will occur. If the write order matters,you MUST end the compute pass and begin another one.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DispatchGPUComputeIndirect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DispatchGPUComputeIndirect(
		///     SDL_GPUComputePass *compute_pass,
		///     SDL_GPUBuffer *buffer,
		///     Uint32 offset);
		/// </code><para>                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DispatchGPUComputeIndirect(IntPtr compute_pass, IntPtr buffer, uint offset);

		/// <summary>
		///   <para>Ends the current compute pass.</para>
		/// </summary>
		/// <param name="compute_pass">
		///   <para> a compute pass handle. </para>
		/// </param>
		/// <remarks>
		///   <para>All bound compute state on the command buffer is unset. The compute passhandle is now invalid.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EndGPUComputePass<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_EndGPUComputePass(
		///     SDL_GPUComputePass *compute_pass);
		/// </code><para>                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_EndGPUComputePass(IntPtr compute_pass);

		/// <summary>
		///   <para>Maps a transfer buffer into application address space.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                                              </para>
		/// </param>
		/// <param name="transfer_buffer">
		///   <para> a transfer buffer.                                          </para>
		/// </param>
		/// <param name="cycle">
		///   <para> if true, cycles the transfer buffer if it is already bound. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the address of the mapped transfer buffer memory, or NULLon failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You must unmap the transfer buffer before encoding upload commands.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MapGPUTransferBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void* SDL_MapGPUTransferBuffer(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTransferBuffer *transfer_buffer,
		///     bool cycle);
		/// </code><para>                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_MapGPUTransferBuffer(IntPtr device, IntPtr transfer_buffer, SDLBool cycle);

		/// <summary>
		///   <para>Unmaps a previously mapped transfer buffer.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                       </para>
		/// </param>
		/// <param name="transfer_buffer">
		///   <para> a previously mapped transfer buffer. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnmapGPUTransferBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnmapGPUTransferBuffer(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTransferBuffer *transfer_buffer);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnmapGPUTransferBuffer(IntPtr device, IntPtr transfer_buffer);

		/// <summary>
		///   <para>Begins a copy pass on a command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUCopyPass" /> *) Returns a copy pass handle.</para>
		/// </returns>
		/// <remarks>
		///   <para>All operations related to copying to or from buffers or textures take placeinside a copy pass. You must not begin another copy pass, or a render passor compute pass before ending the copy pass.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BeginGPUCopyPass<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUCopyPass* SDL_BeginGPUCopyPass(
		///     SDL_GPUCommandBuffer *command_buffer);
		/// </code><para>                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_BeginGPUCopyPass(IntPtr command_buffer);

		/// <summary>
		///   <para>Uploads data from a transfer buffer to a texture.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle.                                                                 </para>
		/// </param>
		/// <param name="source">
		///   <para> the source transfer buffer with image layout information.                           </para>
		/// </param>
		/// <param name="destination">
		///   <para> the destination texture region.                                                     </para>
		/// </param>
		/// <param name="cycle">
		///   <para> if true, cycles the texture if the texture is bound, otherwise overwrites the data. </para>
		/// </param>
		/// <remarks>
		///   <para>The upload occurs on the GPU timeline. You may assume that the upload hasfinished in subsequent commands.</para>
		///   <para>You must align the data in the transfer buffer to a multiple of the texelsize of the texture format.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UploadToGPUTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UploadToGPUTexture(
		///     SDL_GPUCopyPass *copy_pass,
		///     const SDL_GPUTextureTransferInfo *source,
		///     const SDL_GPUTextureRegion *destination,
		///     bool cycle);
		/// </code><para>                                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UploadToGPUTexture(IntPtr copy_pass, ref SDL_GPUTextureTransferInfo source, ref SDL_GPUTextureRegion destination, SDLBool cycle);

		/// <summary>
		///   <para>Uploads data from a transfer buffer to a buffer.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle.                                                               </para>
		/// </param>
		/// <param name="source">
		///   <para> the source transfer buffer with offset.                                           </para>
		/// </param>
		/// <param name="destination">
		///   <para> the destination buffer with offset and size.                                      </para>
		/// </param>
		/// <param name="cycle">
		///   <para> if true, cycles the buffer if it is already bound, otherwise overwrites the data. </para>
		/// </param>
		/// <remarks>
		///   <para>The upload occurs on the GPU timeline. You may assume that the upload hasfinished in subsequent commands.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UploadToGPUBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UploadToGPUBuffer(
		///     SDL_GPUCopyPass *copy_pass,
		///     const SDL_GPUTransferBufferLocation *source,
		///     const SDL_GPUBufferRegion *destination,
		///     bool cycle);
		/// </code><para>                                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UploadToGPUBuffer(IntPtr copy_pass, ref SDL_GPUTransferBufferLocation source, ref SDL_GPUBufferRegion destination, SDLBool cycle);

		/// <summary>
		///   <para>Performs a texture-to-texture copy.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle.                                                                                         </para>
		/// </param>
		/// <param name="source">
		///   <para> a source texture region.                                                                                    </para>
		/// </param>
		/// <param name="destination">
		///   <para> a destination texture region.                                                                               </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the region to copy.                                                                            </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the region to copy.                                                                           </para>
		/// </param>
		/// <param name="d">
		///   <para> the depth of the region to copy.                                                                            </para>
		/// </param>
		/// <param name="cycle">
		///   <para> if true, cycles the destination texture if the destination texture is bound, otherwise overwrites the data. </para>
		/// </param>
		/// <remarks>
		///   <para>This copy occurs on the GPU timeline. You may assume the copy has finishedin subsequent commands.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CopyGPUTextureToTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CopyGPUTextureToTexture(
		///     SDL_GPUCopyPass *copy_pass,
		///     const SDL_GPUTextureLocation *source,
		///     const SDL_GPUTextureLocation *destination,
		///     Uint32 w,
		///     Uint32 h,
		///     Uint32 d,
		///     bool cycle);
		/// </code><para>                                                                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CopyGPUTextureToTexture(IntPtr copy_pass, ref SDL_GPUTextureLocation source, ref SDL_GPUTextureLocation destination, uint w, uint h, uint d, SDLBool cycle);

		/// <summary>
		///   <para>Performs a buffer-to-buffer copy.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle.                                                                           </para>
		/// </param>
		/// <param name="source">
		///   <para> the buffer and offset to copy from.                                                           </para>
		/// </param>
		/// <param name="destination">
		///   <para> the buffer and offset to copy to.                                                             </para>
		/// </param>
		/// <param name="size">
		///   <para> the length of the buffer to copy.                                                             </para>
		/// </param>
		/// <param name="cycle">
		///   <para> if true, cycles the destination buffer if it is already bound, otherwise overwrites the data. </para>
		/// </param>
		/// <remarks>
		///   <para>This copy occurs on the GPU timeline. You may assume the copy has finishedin subsequent commands.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CopyGPUBufferToBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CopyGPUBufferToBuffer(
		///     SDL_GPUCopyPass *copy_pass,
		///     const SDL_GPUBufferLocation *source,
		///     const SDL_GPUBufferLocation *destination,
		///     Uint32 size,
		///     bool cycle);
		/// </code><para>                                                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CopyGPUBufferToBuffer(IntPtr copy_pass, ref SDL_GPUBufferLocation source, ref SDL_GPUBufferLocation destination, uint size, SDLBool cycle);

		/// <summary>
		///   <para>Copies data from a texture to a transfer buffer on the GPU timeline.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle.                                            </para>
		/// </param>
		/// <param name="source">
		///   <para> the source texture region.                                     </para>
		/// </param>
		/// <param name="destination">
		///   <para> the destination transfer buffer with image layout information. </para>
		/// </param>
		/// <remarks>
		///   <para>This data is not guaranteed to be copied until the command buffer fence issignaled.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DownloadFromGPUTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DownloadFromGPUTexture(
		///     SDL_GPUCopyPass *copy_pass,
		///     const SDL_GPUTextureRegion *source,
		///     const SDL_GPUTextureTransferInfo *destination);
		/// </code><para>                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DownloadFromGPUTexture(IntPtr copy_pass, ref SDL_GPUTextureRegion source, ref SDL_GPUTextureTransferInfo destination);

		/// <summary>
		///   <para>Copies data from a buffer to a transfer buffer on the GPU timeline.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle.                          </para>
		/// </param>
		/// <param name="source">
		///   <para> the source buffer with offset and size.      </para>
		/// </param>
		/// <param name="destination">
		///   <para> the destination transfer buffer with offset. </para>
		/// </param>
		/// <remarks>
		///   <para>This data is not guaranteed to be copied until the command buffer fence issignaled.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DownloadFromGPUBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DownloadFromGPUBuffer(
		///     SDL_GPUCopyPass *copy_pass,
		///     const SDL_GPUBufferRegion *source,
		///     const SDL_GPUTransferBufferLocation *destination);
		/// </code><para>                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DownloadFromGPUBuffer(IntPtr copy_pass, ref SDL_GPUBufferRegion source, ref SDL_GPUTransferBufferLocation destination);

		/// <summary>
		///   <para>Ends the current copy pass.</para>
		/// </summary>
		/// <param name="copy_pass">
		///   <para> a copy pass handle. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EndGPUCopyPass<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_EndGPUCopyPass(
		///     SDL_GPUCopyPass *copy_pass);
		/// </code><para>                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_EndGPUCopyPass(IntPtr copy_pass);

		/// <summary>
		///   <para>Generates mipmaps for the given texture.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command_buffer.                     </para>
		/// </param>
		/// <param name="texture">
		///   <para> a texture with more than 1 mip level. </para>
		/// </param>
		/// <remarks>
		///   <para>This function must not be called inside of any pass.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GenerateMipmapsForGPUTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GenerateMipmapsForGPUTexture(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     SDL_GPUTexture *texture);
		/// </code><para>                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GenerateMipmapsForGPUTexture(IntPtr command_buffer, IntPtr texture);

		/// <summary>
		///   <para>Blits from a source texture region to a destination texture region.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                                    </para>
		/// </param>
		/// <param name="info">
		///   <para> the blit info struct containing the blit parameters. </para>
		/// </param>
		/// <remarks>
		///   <para>This function must not be called inside of any pass.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_BlitGPUTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_BlitGPUTexture(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     const SDL_GPUBlitInfo *info);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_BlitGPUTexture(IntPtr command_buffer, ref SDL_GPUBlitInfo info);

		/// <summary>
		///   <para>Determines whether a swapchain composition is supported by the window.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                      </para>
		/// </param>
		/// <param name="window">
		///   <para> an <see cref="SDL_Window" />.        </para>
		/// </param>
		/// <param name="swapchain_composition">
		///   <para> the swapchain composition to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if supported, false if unsupported.</para>
		/// </returns>
		/// <remarks>
		///   <para>The window must be claimed before calling this function.</para>
		/// </remarks>
		/// <seealso cref="SDL_ClaimWindowForGPUDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WindowSupportsGPUSwapchainComposition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WindowSupportsGPUSwapchainComposition(
		///     SDL_GPUDevice *device,
		///     SDL_Window *window,
		///     SDL_GPUSwapchainComposition swapchain_composition);
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WindowSupportsGPUSwapchainComposition(IntPtr device, IntPtr window, SDL_GPUSwapchainComposition swapchain_composition);

		/// <summary>
		///   <para>Determines whether a presentation mode is supported by the window.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                  </para>
		/// </param>
		/// <param name="window">
		///   <para> an <see cref="SDL_Window" />.    </para>
		/// </param>
		/// <param name="present_mode">
		///   <para> the presentation mode to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if supported, false if unsupported.</para>
		/// </returns>
		/// <remarks>
		///   <para>The window must be claimed before calling this function.</para>
		/// </remarks>
		/// <seealso cref="SDL_ClaimWindowForGPUDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WindowSupportsGPUPresentMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WindowSupportsGPUPresentMode(
		///     SDL_GPUDevice *device,
		///     SDL_Window *window,
		///     SDL_GPUPresentMode present_mode);
		/// </code><para>                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WindowSupportsGPUPresentMode(IntPtr device, IntPtr window, SDL_GPUPresentMode present_mode);

		/// <summary>
		///   <para>Claims a window, creating a swapchain structure for it.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.               </para>
		/// </param>
		/// <param name="window">
		///   <para> an <see cref="SDL_Window" />. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This must be called before<see cref="SDL_AcquireGPUSwapchainTexture" /> is calledusing the window. You should only call this function from the thread thatcreated the window.</para>
		///   <para>The swapchain will be created with<see cref="SDL_GPUSwapchainComposition.SDL_GPU_SWAPCHAINCOMPOSITION_SDR" /> and<see cref="SDL_GPUPresentMode.SDL_GPU_PRESENTMODE_VSYNC" />. If you want to havedifferent swapchain parameters, you must call<see cref="SDL_SetGPUSwapchainParameters" /> afterclaiming the window.</para>
		/// </remarks>
		/// <seealso cref="SDL_AcquireGPUSwapchainTexture" />
		/// <seealso cref="SDL_ReleaseWindowFromGPUDevice" />
		/// <seealso cref="SDL_WindowSupportsGPUPresentMode" />
		/// <seealso cref="SDL_WindowSupportsGPUSwapchainComposition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ClaimWindowForGPUDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ClaimWindowForGPUDevice(
		///     SDL_GPUDevice *device,
		///     SDL_Window *window);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ClaimWindowForGPUDevice(IntPtr device, IntPtr window);

		/// <summary>
		///   <para>Unclaims a window, destroying its swapchain structure.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                                     </para>
		/// </param>
		/// <param name="window">
		///   <para> an <see cref="SDL_Window" /> that has been claimed. </para>
		/// </param>
		/// <seealso cref="SDL_ClaimWindowForGPUDevice" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseWindowFromGPUDevice<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseWindowFromGPUDevice(
		///     SDL_GPUDevice *device,
		///     SDL_Window *window);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseWindowFromGPUDevice(IntPtr device, IntPtr window);

		/// <summary>
		///   <para>Changes the swapchain parameters for the given claimed window.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                                     </para>
		/// </param>
		/// <param name="window">
		///   <para> an <see cref="SDL_Window" /> that has been claimed. </para>
		/// </param>
		/// <param name="swapchain_composition">
		///   <para> the desired composition of the swapchain.          </para>
		/// </param>
		/// <param name="present_mode">
		///   <para> the desired present mode for the swapchain.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if successful, false on error; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function will fail if the requested present mode or swapchaincomposition are unsupported by the device. Check if the parameters aresupported via<see cref="SDL_WindowSupportsGPUPresentMode" /> /<see cref="SDL_WindowSupportsGPUSwapchainComposition" />prior to calling this function.</para>
		///   <para>
		///     <see cref="SDL_GPUPresentMode.SDL_GPU_PRESENTMODE_VSYNC" /> and<see cref="SDL_GPUSwapchainComposition.SDL_GPU_SWAPCHAINCOMPOSITION_SDR" /> arealways supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_WindowSupportsGPUPresentMode" />
		/// <seealso cref="SDL_WindowSupportsGPUSwapchainComposition" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetGPUSwapchainParameters<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetGPUSwapchainParameters(
		///     SDL_GPUDevice *device,
		///     SDL_Window *window,
		///     SDL_GPUSwapchainComposition swapchain_composition,
		///     SDL_GPUPresentMode present_mode);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetGPUSwapchainParameters(IntPtr device, IntPtr window, SDL_GPUSwapchainComposition swapchain_composition, SDL_GPUPresentMode present_mode);

		/// <summary>
		///   <para>Obtains the texture format of the swapchain for the given window.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                                     </para>
		/// </param>
		/// <param name="window">
		///   <para> an <see cref="SDL_Window" /> that has been claimed. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUTextureFormat" />) Returns the texture formatof the swapchain.</para>
		/// </returns>
		/// <remarks>
		///   <para>Note that this format can change if the swapchain parameters change.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetGPUSwapchainTextureFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUTextureFormat SDL_GetGPUSwapchainTextureFormat(
		///     SDL_GPUDevice *device,
		///     SDL_Window *window);
		/// </code><para>                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_GPUTextureFormat SDL_GetGPUSwapchainTextureFormat(IntPtr device, IntPtr window);

		/// <summary>
		///   <para>Acquire a texture to use in presentation.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer.                                                   </para>
		/// </param>
		/// <param name="window">
		///   <para> a window that has been claimed.                                     </para>
		/// </param>
		/// <param name="swapchain_texture">
		///   <para> a pointer filled in with a swapchain texture handle.                </para>
		/// </param>
		/// <param name="swapchain_texture_width">
		///   <para> a pointer filled in with the swapchain texture width, may be NULL.  </para>
		/// </param>
		/// <param name="swapchain_texture_height">
		///   <para> a pointer filled in with the swapchain texture height, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false on error; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When a swapchain texture is acquired on a command buffer, it willautomatically be submitted for presentation when the command buffer issubmitted. The swapchain texture should only be referenced by the commandbuffer used to acquire it. The swapchain texture handle can be filled inwith NULL under certain conditions. This is not necessarily an error. Ifthis function returns false then there is an error.</para>
		///   <para>The swapchain texture is managed by the implementation and must not befreed by the user. You MUST NOT call this function from any thread otherthan the one that created the window.</para>
		/// </remarks>
		/// <seealso cref="SDL_ClaimWindowForGPUDevice" />
		/// <seealso cref="SDL_SubmitGPUCommandBuffer" />
		/// <seealso cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />
		/// <seealso cref="SDL_GetWindowSizeInPixels" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AcquireGPUSwapchainTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_AcquireGPUSwapchainTexture(
		///     SDL_GPUCommandBuffer *command_buffer,
		///     SDL_Window *window,
		///     SDL_GPUTexture **swapchain_texture,
		///     Uint32 *swapchain_texture_width,
		///     Uint32 *swapchain_texture_height);
		/// </code><para>                                                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_AcquireGPUSwapchainTexture(IntPtr command_buffer, IntPtr window, out IntPtr swapchain_texture, out uint swapchain_texture_width, out uint swapchain_texture_height);

		/// <summary>
		///   <para>Submits a command buffer so its commands can be processed on the GPU.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>It is invalid to use the command buffer after this is called.</para>
		///   <para>This must be called from the thread the command buffer was acquired on.</para>
		///   <para>All commands in the submission are guaranteed to begin executing before anycommand in a subsequent submission begins executing.</para>
		/// </remarks>
		/// <seealso cref="SDL_AcquireGPUCommandBuffer" />
		/// <seealso cref="SDL_AcquireGPUSwapchainTexture" />
		/// <seealso cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SubmitGPUCommandBuffer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SubmitGPUCommandBuffer(
		///     SDL_GPUCommandBuffer *command_buffer);
		/// </code><para>                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SubmitGPUCommandBuffer(IntPtr command_buffer);

		/// <summary>
		///   <para>Submits a command buffer so its commands can be processed on the GPU, and acquires a fence associated with the command buffer.</para>
		/// </summary>
		/// <param name="command_buffer">
		///   <para> a command buffer. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_GPUFence" /> *) Returns a fence associated with thecommand buffer, or NULL on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You must release this fence when it is no longer needed or it will cause aleak. It is invalid to use the command buffer after this is called.</para>
		///   <para>This must be called from the thread the command buffer was acquired on.</para>
		///   <para>All commands in the submission are guaranteed to begin executing before anycommand in a subsequent submission begins executing.</para>
		/// </remarks>
		/// <seealso cref="SDL_AcquireGPUCommandBuffer" />
		/// <seealso cref="SDL_AcquireGPUSwapchainTexture" />
		/// <seealso cref="SDL_SubmitGPUCommandBuffer" />
		/// <seealso cref="SDL_ReleaseGPUFence" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SubmitGPUCommandBufferAndAcquireFence<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_GPUFence* SDL_SubmitGPUCommandBufferAndAcquireFence(
		///     SDL_GPUCommandBuffer *command_buffer);
		/// </code><para>                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_SubmitGPUCommandBufferAndAcquireFence(IntPtr command_buffer);

		/// <summary>
		///   <para>Blocks the thread until the GPU is completely idle.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_WaitForGPUFences" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitForGPUIdle<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitForGPUIdle(
		///     SDL_GPUDevice *device);
		/// </code><para>                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitForGPUIdle(IntPtr device);

		/// <summary>
		///   <para>Blocks the thread until the given fences are signaled.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                                                                     </para>
		/// </param>
		/// <param name="wait_all">
		///   <para> if 0, wait for any fence to be signaled, if 1, wait for all fences to be signaled. </para>
		/// </param>
		/// <param name="fences">
		///   <para> an array of fences to wait on.                                                     </para>
		/// </param>
		/// <param name="num_fences">
		///   <para> the number of fences in the fences array.                                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success, false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />
		/// <seealso cref="SDL_WaitForGPUIdle" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitForGPUFences<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitForGPUFences(
		///     SDL_GPUDevice *device,
		///     bool wait_all,
		///     SDL_GPUFence *const *fences,
		///     Uint32 num_fences);
		/// </code><para>                                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitForGPUFences(IntPtr device, SDLBool wait_all, IntPtr[] fences, uint num_fences);

		/// <summary>
		///   <para>Checks the status of a fence.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context. </para>
		/// </param>
		/// <param name="fence">
		///   <para> a fence.       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the fence is signaled, false if it is not.</para>
		/// </returns>
		/// <seealso cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_QueryGPUFence<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_QueryGPUFence(
		///     SDL_GPUDevice *device,
		///     SDL_GPUFence *fence);
		/// </code><para>                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_QueryGPUFence(IntPtr device, IntPtr fence);

		/// <summary>
		///   <para>Releases a fence obtained from <see cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context. </para>
		/// </param>
		/// <param name="fence">
		///   <para> a fence.       </para>
		/// </param>
		/// <seealso cref="SDL_SubmitGPUCommandBufferAndAcquireFence" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReleaseGPUFence<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ReleaseGPUFence(
		///     SDL_GPUDevice *device,
		///     SDL_GPUFence *fence);
		/// </code><para>                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ReleaseGPUFence(IntPtr device, IntPtr fence);

		/// <summary>
		///   <para>Obtains the texel block size for a texture format.</para>
		/// </summary>
		/// <param name="format">
		///   <para> the texture format you want to know the texel size of. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns the texel block size of the texture format.</para>
		/// </returns>
		/// <seealso cref="SDL_UploadToGPUTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureFormatTexelBlockSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_GPUTextureFormatTexelBlockSize(
		///     SDL_GPUTextureFormat format);
		/// </code><para>                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GPUTextureFormatTexelBlockSize(SDL_GPUTextureFormat format);

		/// <summary>
		///   <para>Determines whether a texture format is supported for a given type and usage.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.                             </para>
		/// </param>
		/// <param name="format">
		///   <para> the texture format to check.               </para>
		/// </param>
		/// <param name="type">
		///   <para> the type of texture (2D, 3D, Cube).        </para>
		/// </param>
		/// <param name="usage">
		///   <para> a bitmask of all usage scenarios to check. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns whether the texture format is supported for this type andusage.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureSupportsFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GPUTextureSupportsFormat(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTextureFormat format,
		///     SDL_GPUTextureType type,
		///     SDL_GPUTextureUsageFlags usage);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GPUTextureSupportsFormat(IntPtr device, SDL_GPUTextureFormat format, SDL_GPUTextureType type, SDL_GPUTextureUsageFlags usage);

		/// <summary>
		///   <para>Determines if a sample count for a texture format is supported.</para>
		/// </summary>
		/// <param name="device">
		///   <para> a GPU context.               </para>
		/// </param>
		/// <param name="format">
		///   <para> the texture format to check. </para>
		/// </param>
		/// <param name="sample_count">
		///   <para> the sample count to check.   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns a hardware-specific version of min(preferred, possible).</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GPUTextureSupportsSampleCount<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_gpu.h">&lt;SDL3/SDL_gpu.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GPUTextureSupportsSampleCount(
		///     SDL_GPUDevice *device,
		///     SDL_GPUTextureFormat format,
		///     SDL_GPUSampleCount sample_count);
		/// </code><para>                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryGPU">CategoryGPU</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GPUTextureSupportsSampleCount(IntPtr device, SDL_GPUTextureFormat format, SDL_GPUSampleCount sample_count);

		// /usr/local/include/SDL3/SDL_haptic.h

		/// <summary>
		///   <para>Structure that represents a haptic direction.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is the direction where the force comes from, instead of the directionin which the force is exerted.</para>
		///   <para>Directions can be specified by:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_POLAR" /> : Specified by polar coordinates.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_CARTESIAN" /> : Specified by cartesiancoordinates.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_SPHERICAL" /> : Specified by sphericalcoordinates.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Cardinal directions of the haptic device are relative to the positioning ofthe device. North is considered to be away from the user.</para>
		///   <para>The following diagram represents the cardinal directions:</para>
		///   <code>               .--.
		///                |__| .-------.
		///                |=.| |.-----.|
		///                |--| ||     ||
		///                |  | |'-----'|
		///                |__|~')_____('
		///                  [ COMPUTER ]
		/// 
		/// 
		///                    North (0,-1)
		///                        ^
		///                        |
		///                        |
		///  (-1,0)  West &lt;----[ HAPTIC ]----&gt; East (1,0)
		///                        |
		///                        |
		///                        v
		///                     South (0,1)
		/// 
		/// 
		///                     [ USER ]
		///                       \|||/
		///                       (o o)
		///                 ---ooO-(_)-Ooo---
		/// </code>
		///   <para>If type is <see cref="SDL_HAPTIC_POLAR" />, direction is encoded byhundredths of a degree starting north and turning clockwise.<see cref="SDL_HAPTIC_POLAR" /> only uses the first <c>dir</c> parameter.The cardinal directions would be:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>North: 0 (0 degrees)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>East: 9000 (90 degrees)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>South: 18000 (180 degrees)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>West: 27000 (270 degrees)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>If type is <see cref="SDL_HAPTIC_CARTESIAN" />, direction isencoded by three positions (X axis, Y axis and Z axis (with 3 axes)).<see cref="SDL_HAPTIC_CARTESIAN" /> uses the first three <c>dir</c>parameters. The cardinal directions would be:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>North: 0,-1, 0</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>East: 1, 0, 0</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>South: 0, 1, 0</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>West: -1, 0, 0</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The Z axis represents the height of the effect if supported, otherwise it'sunused. In cartesian encoding (1, 2) would be the same as (2, 4), you canuse any multiple you want, only the direction matters.</para>
		///   <para>If type is <see cref="SDL_HAPTIC_SPHERICAL" />, direction isencoded by two rotations. The first two <c>dir</c> parameters are used. The<c>dir</c> parameters are as follows (all values are in hundredths of degrees):</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>Degrees from (1, 0) rotated towards (0, 1).</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Degrees towards (0, 0, 1) (device needs at least 3 axes).</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Example of force coming from the south with all encodings (force comingfrom the south means the user will have to pull the stick to counteract):</para>
		///   <code> SDL_HapticDirection direction;
		/// 
		///  // Cartesian directions
		///  direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.
		///  direction.dir[0] = 0; // X position
		///  direction.dir[1] = 1; // Y position
		///  // Assuming the device has 2 axes, we don't need to specify third parameter.
		/// 
		///  // Polar directions
		///  direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.
		///  direction.dir[0] = 18000; // Polar only uses first parameter
		/// 
		///  // Spherical coordinates
		///  direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
		///  direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_HAPTIC_POLAR" />
		/// <seealso cref="SDL_HAPTIC_CARTESIAN" />
		/// <seealso cref="SDL_HAPTIC_SPHERICAL" />
		/// <seealso cref="SDL_HAPTIC_STEERING_AXIS" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <seealso cref="SDL_GetNumHapticAxes" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticDirection<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticDirection
		/// {
		///     Uint8 type;         /**&lt; The type of encoding. */
		///     Sint32 dir[3];      /**&lt; The encoded direction. */
		/// } SDL_HapticDirection;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticDirection
		{
			public byte type;
			public fixed int dir[3];
		}

		/// <summary>
		///   <para>A structure containing a template for a Constant effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>This struct is exclusively for the<see cref="SDL_HAPTIC_CONSTANT" /> effect.</para>
		///   <para>A constant effect applies a constant force in the specified direction tothe joystick.</para>
		/// </remarks>
		/// <seealso cref="SDL_HAPTIC_CONSTANT" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticConstant<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticConstant
		/// {
		///     /* Header */
		///     Uint16 type;            /**&lt; SDL_HAPTIC_CONSTANT */
		///     SDL_HapticDirection direction;  /**&lt; Direction of the effect. */
		/// 
		///     /* Replay */
		///     Uint32 length;          /**&lt; Duration of the effect. */
		///     Uint16 delay;           /**&lt; Delay before starting the effect. */
		/// 
		///     /* Trigger */
		///     Uint16 button;          /**&lt; Button that triggers the effect. */
		///     Uint16 interval;        /**&lt; How soon it can be triggered again after button. */
		/// 
		///     /* Constant */
		///     Sint16 level;           /**&lt; Strength of the constant effect. */
		/// 
		///     /* Envelope */
		///     Uint16 attack_length;   /**&lt; Duration of the attack. */
		///     Uint16 attack_level;    /**&lt; Level at the start of the attack. */
		///     Uint16 fade_length;     /**&lt; Duration of the fade. */
		///     Uint16 fade_level;      /**&lt; Level at the end of the fade. */
		/// } SDL_HapticConstant;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticConstant
		{
			public ushort type;
			public SDL_HapticDirection direction;
			public uint length;
			public ushort delay;
			public ushort button;
			public ushort interval;
			public short level;
			public ushort attack_length;
			public ushort attack_level;
			public ushort fade_length;
			public ushort fade_level;
		}

		/// <summary>
		///   <para>A structure containing a template for a Periodic effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>The struct handles the following effects:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_SINE" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_SQUARE" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_TRIANGLE" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_SAWTOOTHUP" />
		///         </para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_SAWTOOTHDOWN" />
		///         </para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>A periodic effect consists in a wave-shaped effect that repeats itself overtime. The type determines the shape of the wave and the parametersdetermine the dimensions of the wave.</para>
		///   <para>Phase is given by hundredth of a degree meaning that giving the phase avalue of 9000 will displace it 25% of its period. Here are sample values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>0: No phase displacement.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>9000: Displaced 25% of its period.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>18000: Displaced 50% of its period.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>27000: Displaced 75% of its period.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>36000: Displaced 100% of its period, same as 0, but 0 is preferred.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Examples:</para>
		///   <code>  SDL_HAPTIC_SINE
		///     __      __      __      __
		///    /  \    /  \    /  \    /
		///   /    \__/    \__/    \__/
		/// 
		///   SDL_HAPTIC_SQUARE
		///    __    __    __    __    __
		///   |  |  |  |  |  |  |  |  |  |
		///   |  |__|  |__|  |__|  |__|  |
		/// 
		///   SDL_HAPTIC_TRIANGLE
		///     /\    /\    /\    /\    /\
		///    /  \  /  \  /  \  /  \  /
		///   /    \/    \/    \/    \/
		/// 
		///   SDL_HAPTIC_SAWTOOTHUP
		///     /|  /|  /|  /|  /|  /|  /|
		///    / | / | / | / | / | / | / |
		///   /  |/  |/  |/  |/  |/  |/  |
		/// 
		///   SDL_HAPTIC_SAWTOOTHDOWN
		///   \  |\  |\  |\  |\  |\  |\  |
		///    \ | \ | \ | \ | \ | \ | \ |
		///     \|  \|  \|  \|  \|  \|  \|
		/// </code>
		/// </remarks>
		/// <seealso cref="SDL_HAPTIC_SINE" />
		/// <seealso cref="SDL_HAPTIC_SQUARE" />
		/// <seealso cref="SDL_HAPTIC_TRIANGLE" />
		/// <seealso cref="SDL_HAPTIC_SAWTOOTHUP" />
		/// <seealso cref="SDL_HAPTIC_SAWTOOTHDOWN" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticPeriodic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticPeriodic
		/// {
		///     /* Header */
		///     Uint16 type;        /**&lt; SDL_HAPTIC_SINE, SDL_HAPTIC_SQUARE
		///                              SDL_HAPTIC_TRIANGLE, SDL_HAPTIC_SAWTOOTHUP or
		///                              SDL_HAPTIC_SAWTOOTHDOWN */
		///     SDL_HapticDirection direction;  /**&lt; Direction of the effect. */
		/// 
		///     /* Replay */
		///     Uint32 length;      /**&lt; Duration of the effect. */
		///     Uint16 delay;       /**&lt; Delay before starting the effect. */
		/// 
		///     /* Trigger */
		///     Uint16 button;      /**&lt; Button that triggers the effect. */
		///     Uint16 interval;    /**&lt; How soon it can be triggered again after button. */
		/// 
		///     /* Periodic */
		///     Uint16 period;      /**&lt; Period of the wave. */
		///     Sint16 magnitude;   /**&lt; Peak value; if negative, equivalent to 180 degrees extra phase shift. */
		///     Sint16 offset;      /**&lt; Mean value of the wave. */
		///     Uint16 phase;       /**&lt; Positive phase shift given by hundredth of a degree. */
		/// 
		///     /* Envelope */
		///     Uint16 attack_length;   /**&lt; Duration of the attack. */
		///     Uint16 attack_level;    /**&lt; Level at the start of the attack. */
		///     Uint16 fade_length; /**&lt; Duration of the fade. */
		///     Uint16 fade_level;  /**&lt; Level at the end of the fade. */
		/// } SDL_HapticPeriodic;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticPeriodic
		{
			public ushort type;
			public SDL_HapticDirection direction;
			public uint length;
			public ushort delay;
			public ushort button;
			public ushort interval;
			public ushort period;
			public short magnitude;
			public short offset;
			public ushort phase;
			public ushort attack_length;
			public ushort attack_level;
			public ushort fade_length;
			public ushort fade_level;
		}

		/// <summary>
		///   <para>A structure containing a template for a Condition effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>The struct handles the following effects:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_SPRING" />: Effect based on axes position.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_DAMPER" />: Effect based on axes velocity.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_INERTIA" />: Effect based on axesacceleration.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_HAPTIC_FRICTION" />: Effect based on axesmovement.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Direction is handled by condition internals instead of a direction member.The condition effect specific members have three parameters. The firstrefers to the X axis, the second refers to the Y axis and the third refersto the Z axis. The right terms refer to the positive side of the axis andthe left terms refer to the negative side of the axis. Please refer to the<see cref="SDL_HapticDirection" /> diagram for which side ispositive and which is negative.</para>
		/// </remarks>
		/// <seealso cref="SDL_HapticDirection" />
		/// <seealso cref="SDL_HAPTIC_SPRING" />
		/// <seealso cref="SDL_HAPTIC_DAMPER" />
		/// <seealso cref="SDL_HAPTIC_INERTIA" />
		/// <seealso cref="SDL_HAPTIC_FRICTION" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticCondition<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticCondition
		/// {
		///     /* Header */
		///     Uint16 type;            /**&lt; SDL_HAPTIC_SPRING, SDL_HAPTIC_DAMPER,
		///                                  SDL_HAPTIC_INERTIA or SDL_HAPTIC_FRICTION */
		///     SDL_HapticDirection direction;  /**&lt; Direction of the effect - Not used ATM. */
		/// 
		///     /* Replay */
		///     Uint32 length;          /**&lt; Duration of the effect. */
		///     Uint16 delay;           /**&lt; Delay before starting the effect. */
		/// 
		///     /* Trigger */
		///     Uint16 button;          /**&lt; Button that triggers the effect. */
		///     Uint16 interval;        /**&lt; How soon it can be triggered again after button. */
		/// 
		///     /* Condition */
		///     Uint16 right_sat[3];    /**&lt; Level when joystick is to the positive side; max 0xFFFF. */
		///     Uint16 left_sat[3];     /**&lt; Level when joystick is to the negative side; max 0xFFFF. */
		///     Sint16 right_coeff[3];  /**&lt; How fast to increase the force towards the positive side. */
		///     Sint16 left_coeff[3];   /**&lt; How fast to increase the force towards the negative side. */
		///     Uint16 deadband[3];     /**&lt; Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered. */
		///     Sint16 center[3];       /**&lt; Position of the dead zone. */
		/// } SDL_HapticCondition;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticCondition
		{
			public ushort type;
			public SDL_HapticDirection direction;
			public uint length;
			public ushort delay;
			public ushort button;
			public ushort interval;
			public fixed ushort right_sat[3];
			public fixed ushort left_sat[3];
			public fixed short right_coeff[3];
			public fixed short left_coeff[3];
			public fixed ushort deadband[3];
			public fixed short center[3];
		}

		/// <summary>
		///   <para>A structure containing a template for a Ramp effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>This struct is exclusively for the <see cref="SDL_HAPTIC_RAMP" />effect.</para>
		///   <para>The ramp effect starts at start strength and ends at end strength. Itaugments in linear fashion. If you use attack and fade with a ramp theeffects get added to the ramp effect making the effect become quadraticinstead of linear.</para>
		/// </remarks>
		/// <seealso cref="SDL_HAPTIC_RAMP" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticRamp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticRamp
		/// {
		///     /* Header */
		///     Uint16 type;            /**&lt; SDL_HAPTIC_RAMP */
		///     SDL_HapticDirection direction;  /**&lt; Direction of the effect. */
		/// 
		///     /* Replay */
		///     Uint32 length;          /**&lt; Duration of the effect. */
		///     Uint16 delay;           /**&lt; Delay before starting the effect. */
		/// 
		///     /* Trigger */
		///     Uint16 button;          /**&lt; Button that triggers the effect. */
		///     Uint16 interval;        /**&lt; How soon it can be triggered again after button. */
		/// 
		///     /* Ramp */
		///     Sint16 start;           /**&lt; Beginning strength level. */
		///     Sint16 end;             /**&lt; Ending strength level. */
		/// 
		///     /* Envelope */
		///     Uint16 attack_length;   /**&lt; Duration of the attack. */
		///     Uint16 attack_level;    /**&lt; Level at the start of the attack. */
		///     Uint16 fade_length;     /**&lt; Duration of the fade. */
		///     Uint16 fade_level;      /**&lt; Level at the end of the fade. */
		/// } SDL_HapticRamp;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticRamp
		{
			public ushort type;
			public SDL_HapticDirection direction;
			public uint length;
			public ushort delay;
			public ushort button;
			public ushort interval;
			public short start;
			public short end;
			public ushort attack_length;
			public ushort attack_level;
			public ushort fade_length;
			public ushort fade_level;
		}

		/// <summary>
		///   <para>A structure containing a template for a Left/Right effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>This struct is exclusively for the<see cref="SDL_HAPTIC_LEFTRIGHT" /> effect.</para>
		///   <para>The Left/Right effect is used to explicitly control the large and smallmotors, commonly found in modern game controllers. The small (right) motoris high frequency, and the large (left) motor is low frequency.</para>
		/// </remarks>
		/// <seealso cref="SDL_HAPTIC_LEFTRIGHT" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticLeftRight<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticLeftRight
		/// {
		///     /* Header */
		///     Uint16 type;            /**&lt; SDL_HAPTIC_LEFTRIGHT */
		/// 
		///     /* Replay */
		///     Uint32 length;          /**&lt; Duration of the effect in milliseconds. */
		/// 
		///     /* Rumble */
		///     Uint16 large_magnitude; /**&lt; Control of the large controller motor. */
		///     Uint16 small_magnitude; /**&lt; Control of the small controller motor. */
		/// } SDL_HapticLeftRight;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticLeftRight
		{
			public ushort type;
			public uint length;
			public ushort large_magnitude;
			public ushort small_magnitude;
		}

		/// <summary>
		///   <para>A structure containing a template for the <see cref="SDL_HAPTIC_CUSTOM" /> effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>This struct is exclusively for the <see cref="SDL_HAPTIC_CUSTOM" />effect.</para>
		///   <para>A custom force feedback effect is much like a periodic effect, where theapplication can define its exact shape. You will have to allocate the datayourself. Data should consist of channels * samples Uint16 samples.</para>
		///   <para>If channels is one, the effect is rotated using the defined direction.Otherwise it uses the samples in data for the different axes.</para>
		/// </remarks>
		/// <seealso cref="SDL_HAPTIC_CUSTOM" />
		/// <seealso cref="SDL_HapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticCustom<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_HapticCustom
		/// {
		///     /* Header */
		///     Uint16 type;            /**&lt; SDL_HAPTIC_CUSTOM */
		///     SDL_HapticDirection direction;  /**&lt; Direction of the effect. */
		/// 
		///     /* Replay */
		///     Uint32 length;          /**&lt; Duration of the effect. */
		///     Uint16 delay;           /**&lt; Delay before starting the effect. */
		/// 
		///     /* Trigger */
		///     Uint16 button;          /**&lt; Button that triggers the effect. */
		///     Uint16 interval;        /**&lt; How soon it can be triggered again after button. */
		/// 
		///     /* Custom */
		///     Uint8 channels;         /**&lt; Axes to use, minimum of one. */
		///     Uint16 period;          /**&lt; Sample periods. */
		///     Uint16 samples;         /**&lt; Amount of samples. */
		///     Uint16 *data;           /**&lt; Should contain channels*samples items. */
		/// 
		///     /* Envelope */
		///     Uint16 attack_length;   /**&lt; Duration of the attack. */
		///     Uint16 attack_level;    /**&lt; Level at the start of the attack. */
		///     Uint16 fade_length;     /**&lt; Duration of the fade. */
		///     Uint16 fade_level;      /**&lt; Level at the end of the fade. */
		/// } SDL_HapticCustom;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_HapticCustom
		{
			public ushort type;
			public SDL_HapticDirection direction;
			public uint length;
			public ushort delay;
			public ushort button;
			public ushort interval;
			public byte channels;
			public ushort period;
			public ushort samples;
			public ushort* data;
			public ushort attack_length;
			public ushort attack_level;
			public ushort fade_length;
			public ushort fade_level;
		}

		/// <summary>
		///   <para>The generic template for any haptic effect.</para>
		/// </summary>
		/// <remarks>
		///   <para>All values max at 32767 (0x7FFF). Signed values also can be negative. Timevalues unless specified otherwise are in milliseconds.</para>
		///   <para>You can also pass <see cref="SDL_HAPTIC_INFINITY" /> to lengthinstead of a 0-32767 value. Neither delay, interval, attack_length norfade_length support <see cref="SDL_HAPTIC_INFINITY" />. Fade willalso not be used since effect never ends.</para>
		///   <para>Additionally, the <see cref="SDL_HAPTIC_RAMP" /> effect does notsupport a duration of <see cref="SDL_HAPTIC_INFINITY" />.</para>
		///   <para>Button triggers may not be supported on all devices, it is advised to notuse them if possible. Buttons start at index 1 instead of index 0 like thejoystick.</para>
		///   <para>If both attack_length and fade_level are 0, the envelope is not used,otherwise both values are used.</para>
		///   <para>Common parts:</para>
		///   <code> // Replay - All effects have this
		///  Uint32 length;        // Duration of effect (ms).
		///  Uint16 delay;         // Delay before starting effect.
		/// 
		///  // Trigger - All effects have this
		///  Uint16 button;        // Button that triggers effect.
		///  Uint16 interval;      // How soon before effect can be triggered again.
		/// 
		///  // Envelope - All effects except condition effects have this
		///  Uint16 attack_length; // Duration of the attack (ms).
		///  Uint16 attack_level;  // Level at the start of the attack.
		///  Uint16 fade_length;   // Duration of the fade out (ms).
		///  Uint16 fade_level;    // Level at the end of the fade.
		/// </code>
		///   <para>Here we have an example of a constant effect evolution in time:</para>
		///   <code> Strength
		///  ^
		///  |
		///  |    effect level --&gt;  _________________
		///  |                     /                 \
		///  |                    /                   \
		///  |                   /                     \
		///  |                  /                       \
		///  | attack_level --&gt; |                        \
		///  |                  |                        |  &lt;---  fade_level
		///  |
		///  +--------------------------------------------------&gt; Time
		///                     [--]                 [---]
		///                     attack_length        fade_length
		/// 
		///  [------------------][-----------------------]
		///  delay               length
		/// </code>
		///   <para>Note either the attack_level or the fade_level may be above the actualeffect level.</para>
		/// </remarks>
		/// <seealso cref="SDL_HapticConstant" />
		/// <seealso cref="SDL_HapticPeriodic" />
		/// <seealso cref="SDL_HapticCondition" />
		/// <seealso cref="SDL_HapticRamp" />
		/// <seealso cref="SDL_HapticLeftRight" />
		/// <seealso cref="SDL_HapticCustom" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef union SDL_HapticEffect
		/// {
		///     /* Common for all force feedback effects */
		///     Uint16 type;                    /**&lt; Effect type. */
		///     SDL_HapticConstant constant;    /**&lt; Constant effect. */
		///     SDL_HapticPeriodic periodic;    /**&lt; Periodic effect. */
		///     SDL_HapticCondition condition;  /**&lt; Condition effect. */
		///     SDL_HapticRamp ramp;            /**&lt; Ramp effect. */
		///     SDL_HapticLeftRight leftright;  /**&lt; Left/Right effect. */
		///     SDL_HapticCustom custom;        /**&lt; Custom effect. */
		/// } SDL_HapticEffect;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[StructLayout(LayoutKind.Explicit)]
		public struct SDL_HapticEffect
		{
			[FieldOffset(0)]
			public ushort type;
			[FieldOffset(0)]
			public SDL_HapticConstant constant;
			[FieldOffset(0)]
			public SDL_HapticPeriodic periodic;
			[FieldOffset(0)]
			public SDL_HapticCondition condition;
			[FieldOffset(0)]
			public SDL_HapticRamp ramp;
			[FieldOffset(0)]
			public SDL_HapticLeftRight leftright;
			[FieldOffset(0)]
			public SDL_HapticCustom custom;
		}

		/// <summary>
		///   <para>Get a list of currently connected haptic devices.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of haptic devices returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_HapticID" /> *) Returns a 0 terminated array of hapticdevice instance IDs or NULL on failure; call <see cref="SDL_GetError" />()for more information. This should be freed with <see cref="SDL_free" />() whenit is no longer needed.</para>
		/// </returns>
		/// <seealso cref="SDL_OpenHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHaptics<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_HapticID * SDL_GetHaptics(int *count);
		/// </code><para>                                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetHaptics(out int count);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetHapticNameForID", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetHapticNameForID(uint instance_id);
		/// <summary>
		///   <para>Get the implementation dependent name of a haptic device.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the haptic device instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected haptic device. If no namecan be found, this function returns NULL; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called before any haptic devices are opened.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHapticName" />
		/// <seealso cref="SDL_OpenHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHapticNameForID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetHapticNameForID(SDL_HapticID instance_id);
		/// </code><para>                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		public static string SDL_GetHapticNameForID(uint instance_id)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetHapticNameForID(instance_id));
		}

		/// <summary>
		///   <para>Open a haptic device for use.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the haptic device instance ID. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Haptic" /> *) Returns the device identifier or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The index passed as an argument refers to the N'th haptic device on thissystem.</para>
		///   <para>When opening a haptic device, its gain will be set to maximum andautocenter will be disabled. To modify these values use<see cref="SDL_SetHapticGain" />() and<see cref="SDL_SetHapticAutocenter" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseHaptic" />
		/// <seealso cref="SDL_GetHaptics" />
		/// <seealso cref="SDL_OpenHapticFromJoystick" />
		/// <seealso cref="SDL_OpenHapticFromMouse" />
		/// <seealso cref="SDL_SetHapticAutocenter" />
		/// <seealso cref="SDL_SetHapticGain" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenHaptic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Haptic * SDL_OpenHaptic(SDL_HapticID instance_id);
		/// </code><para>                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenHaptic(uint instance_id);

		/// <summary>
		///   <para>Get the <see cref="SDL_Haptic" /> associated with an instance ID, if it has been opened.</para>
		/// </summary>
		/// <param name="instance_id">
		///   <para> the instance ID to get the <see cref="SDL_Haptic" /> for. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Haptic" /> *) Returns an <see cref="SDL_Haptic" /> on successor NULL on failure or if it hasn't been opened yet; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHapticFromID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Haptic * SDL_GetHapticFromID(SDL_HapticID instance_id);
		/// </code><para>                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetHapticFromID(uint instance_id);

		/// <summary>
		///   <para>Get the instance ID of an opened haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_HapticID" />) Returns the instance ID of the specifiedhaptic device on success or 0 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHapticID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_HapticID SDL_GetHapticID(SDL_Haptic *haptic);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetHapticID(IntPtr haptic);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetHapticName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetHapticName(IntPtr haptic);
		/// <summary>
		///   <para>Get the implementation dependent name of a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> obtained from <see cref="SDL_OpenJoystick" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected haptic device. If no namecan be found, this function returns NULL; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetHapticNameForID" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHapticName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetHapticName(SDL_Haptic *haptic);
		/// </code><para>                                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		public static string SDL_GetHapticName(IntPtr haptic)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetHapticName(haptic));
		}

		/// <summary>
		///   <para>Query whether or not the current mouse has haptic capabilities.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the mouse is haptic or false if it isn't.</para>
		/// </returns>
		/// <seealso cref="SDL_OpenHapticFromMouse" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IsMouseHaptic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_IsMouseHaptic(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_IsMouseHaptic();

		/// <summary>
		///   <para>Try to open a haptic device from the current mouse.</para>
		/// </summary>
		/// <returns>
		///   <para>(<see cref="SDL_Haptic" /> *) Returns the haptic device identifier or NULLon failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CloseHaptic" />
		/// <seealso cref="SDL_IsMouseHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenHapticFromMouse<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Haptic * SDL_OpenHapticFromMouse(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenHapticFromMouse();

		/// <summary>
		///   <para>Query if a joystick has haptic features.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> to test for haptic capabilities. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the joystick is haptic or false if it isn't.</para>
		/// </returns>
		/// <seealso cref="SDL_OpenHapticFromJoystick" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IsJoystickHaptic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_IsJoystickHaptic(SDL_Joystick *joystick);
		/// </code><para>                                                                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_IsJoystickHaptic(IntPtr joystick);

		/// <summary>
		///   <para>Open a haptic device for use from a joystick device.</para>
		/// </summary>
		/// <param name="joystick">
		///   <para> the <see cref="SDL_Joystick" /> to create a haptic device from. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Haptic" /> *) Returns a valid haptic device identifier onsuccess or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>You must still close the haptic device separately. It will not be closedwith the joystick.</para>
		///   <para>When opened from a joystick you should first close the haptic device beforeclosing the joystick device. If not, on some implementations the hapticdevice will also get unallocated and you'll be unable to use force feedbackon that device.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseHaptic" />
		/// <seealso cref="SDL_IsJoystickHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenHapticFromJoystick<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Haptic * SDL_OpenHapticFromJoystick(SDL_Joystick *joystick);
		/// </code><para>                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenHapticFromJoystick(IntPtr joystick);

		/// <summary>
		///   <para>Close a haptic device previously opened with <see cref="SDL_OpenHaptic" />().</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to close. </para>
		/// </param>
		/// <seealso cref="SDL_OpenHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseHaptic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_CloseHaptic(SDL_Haptic *haptic);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_CloseHaptic(IntPtr haptic);

		/// <summary>
		///   <para>Get the number of effects a haptic device can store.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of effects the haptic device can store or anegative error code on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>On some platforms this isn't fully supported, and therefore is anapproximation. Always check to see if your created effect was actuallycreated and do not rely solely on<see cref="SDL_GetMaxHapticEffects" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetMaxHapticEffectsPlaying" />
		/// <seealso cref="SDL_GetHapticFeatures" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMaxHapticEffects<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetMaxHapticEffects(SDL_Haptic *haptic);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetMaxHapticEffects(IntPtr haptic);

		/// <summary>
		///   <para>Get the number of effects a haptic device can play at the same time.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query maximum playing effects. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of effects the haptic device can play at the sametime or -1 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is not supported on all platforms, but will always return a value.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetMaxHapticEffects" />
		/// <seealso cref="SDL_GetHapticFeatures" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetMaxHapticEffectsPlaying<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetMaxHapticEffectsPlaying(SDL_Haptic *haptic);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetMaxHapticEffectsPlaying(IntPtr haptic);

		/// <summary>
		///   <para>Get the haptic device's supported features in bitwise manner.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint32) Returns a list of supported haptic features in bitwise manner(OR'd), or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_HapticEffectSupported" />
		/// <seealso cref="SDL_GetMaxHapticEffects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHapticFeatures<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_GetHapticFeatures(SDL_Haptic *haptic);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetHapticFeatures(IntPtr haptic);

		/// <summary>
		///   <para>Get the number of haptic axes the device has.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of axes on success or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The number of haptic axes might be useful if working with the<see cref="SDL_HapticDirection" /> effect.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumHapticAxes<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumHapticAxes(SDL_Haptic *haptic);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumHapticAxes(IntPtr haptic);

		/// <summary>
		///   <para>Check to see if an effect is supported by a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query. </para>
		/// </param>
		/// <param name="effect">
		///   <para> the desired effect to query.                  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the effect is supported or false if it isn't.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateHapticEffect" />
		/// <seealso cref="SDL_GetHapticFeatures" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticEffectSupported<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HapticEffectSupported(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HapticEffectSupported(IntPtr haptic, ref SDL_HapticEffect effect);

		/// <summary>
		///   <para>Create a new haptic effect on a specified device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> an <see cref="SDL_Haptic" /> device to create the effect on.                                          </para>
		/// </param>
		/// <param name="effect">
		///   <para> an <see cref="SDL_HapticEffect" /> structure containing the properties of the effect to create. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the ID of the effect on success or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_DestroyHapticEffect" />
		/// <seealso cref="SDL_RunHapticEffect" />
		/// <seealso cref="SDL_UpdateHapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateHapticEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_CreateHapticEffect(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
		/// </code><para>                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_CreateHapticEffect(IntPtr haptic, ref SDL_HapticEffect effect);

		/// <summary>
		///   <para>Update the properties of an effect.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device that has the effect.                                       </para>
		/// </param>
		/// <param name="effect">
		///   <para> the identifier of the effect to update.                                                        </para>
		/// </param>
		/// <param name="data">
		///   <para> an <see cref="SDL_HapticEffect" /> structure containing the new effect properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Can be used dynamically, although behavior when dynamically changingdirection may be strange. Specifically the effect may re-upload itself andstart playing from the start. You also cannot change the type either whenrunning <see cref="SDL_UpdateHapticEffect" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateHapticEffect" />
		/// <seealso cref="SDL_RunHapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateHapticEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UpdateHapticEffect(SDL_Haptic *haptic, int effect, const SDL_HapticEffect *data);
		/// </code><para>                                                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UpdateHapticEffect(IntPtr haptic, int effect, ref SDL_HapticEffect data);

		/// <summary>
		///   <para>Run the haptic effect on its associated haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to run the effect on.                                                       </para>
		/// </param>
		/// <param name="effect">
		///   <para> the ID of the haptic effect to run.                                                                             </para>
		/// </param>
		/// <param name="iterations">
		///   <para> the number of iterations to run the effect; use <see cref="SDL_HAPTIC_INFINITY" /> to repeat forever. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>To repeat the effect over and over indefinitely, set <c>iterations</c> to<see cref="SDL_HAPTIC_INFINITY" />. (Repeats the envelope -attack and fade.) To make one instance of the effect last indefinitely (sothe effect does not fade), set the effect's <c>length</c> in its structure/unionto <see cref="SDL_HAPTIC_INFINITY" /> instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHapticEffectStatus" />
		/// <seealso cref="SDL_StopHapticEffect" />
		/// <seealso cref="SDL_StopHapticEffects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RunHapticEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RunHapticEffect(SDL_Haptic *haptic, int effect, Uint32 iterations);
		/// </code><para>                                                                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RunHapticEffect(IntPtr haptic, int effect, uint iterations);

		/// <summary>
		///   <para>Stop the haptic effect on its associated haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to stop the effect on. </para>
		/// </param>
		/// <param name="effect">
		///   <para> the ID of the haptic effect to stop.                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RunHapticEffect" />
		/// <seealso cref="SDL_StopHapticEffects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StopHapticEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StopHapticEffect(SDL_Haptic *haptic, int effect);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StopHapticEffect(IntPtr haptic, int effect);

		/// <summary>
		///   <para>Destroy a haptic effect on the device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to destroy the effect on. </para>
		/// </param>
		/// <param name="effect">
		///   <para> the ID of the haptic effect to destroy.                       </para>
		/// </param>
		/// <remarks>
		///   <para>This will stop the effect if it's running. Effects are automaticallydestroyed when the device is closed.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateHapticEffect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyHapticEffect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyHapticEffect(SDL_Haptic *haptic, int effect);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyHapticEffect(IntPtr haptic, int effect);

		/// <summary>
		///   <para>Get the status of the current effect on the specified haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to query for the effect status on. </para>
		/// </param>
		/// <param name="effect">
		///   <para> the ID of the haptic effect to query its status.                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if it is playing, false if it isn't playing or hapticstatus isn't supported.</para>
		/// </returns>
		/// <remarks>
		///   <para>Device must support the <see cref="SDL_HAPTIC_STATUS" /> feature.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHapticFeatures" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHapticEffectStatus<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetHapticEffectStatus(SDL_Haptic *haptic, int effect);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetHapticEffectStatus(IntPtr haptic, int effect);

		/// <summary>
		///   <para>Set the global gain of the specified haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to set the gain on.          </para>
		/// </param>
		/// <param name="gain">
		///   <para> value to set the gain to, should be between 0 and 100 (0 - 100). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Device must support the <see cref="SDL_HAPTIC_GAIN" /> feature.</para>
		///   <para>The user may specify the maximum gain by setting the environment variable<see cref="SDL_HAPTIC_GAIN_MAX" /> which should be between 0 and100. All calls to <see cref="SDL_SetHapticGain" />() will scalelinearly using <see cref="SDL_HAPTIC_GAIN_MAX" /> as the maximum.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHapticFeatures" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetHapticGain<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetHapticGain(SDL_Haptic *haptic, int gain);
		/// </code><para>                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetHapticGain(IntPtr haptic, int gain);

		/// <summary>
		///   <para>Set the global autocenter of the device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to set autocentering on. </para>
		/// </param>
		/// <param name="autocenter">
		///   <para> value to set autocenter to (0-100).                          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Autocenter should be between 0 and 100. Setting it to 0 will disableautocentering.</para>
		///   <para>Device must support the <see cref="SDL_HAPTIC_AUTOCENTER" />feature.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHapticFeatures" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetHapticAutocenter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetHapticAutocenter(SDL_Haptic *haptic, int autocenter);
		/// </code><para>                                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetHapticAutocenter(IntPtr haptic, int autocenter);

		/// <summary>
		///   <para>Pause a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to pause. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Device must support the <see cref="SDL_HAPTIC_PAUSE" /> feature.Call <see cref="SDL_ResumeHaptic" />() to resume playback.</para>
		///   <para>Do not modify the effects nor add new ones while the device is paused. Thatcan cause all sorts of weird errors.</para>
		/// </remarks>
		/// <seealso cref="SDL_ResumeHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PauseHaptic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PauseHaptic(SDL_Haptic *haptic);
		/// </code><para>                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PauseHaptic(IntPtr haptic);

		/// <summary>
		///   <para>Resume a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to unpause. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Call to unpause after <see cref="SDL_PauseHaptic" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_PauseHaptic" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResumeHaptic<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ResumeHaptic(SDL_Haptic *haptic);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ResumeHaptic(IntPtr haptic);

		/// <summary>
		///   <para>Stop all the currently playing effects on a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the <see cref="SDL_Haptic" /> device to stop. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RunHapticEffect" />
		/// <seealso cref="SDL_StopHapticEffects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StopHapticEffects<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StopHapticEffects(SDL_Haptic *haptic);
		/// </code><para>                                              </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StopHapticEffects(IntPtr haptic);

		/// <summary>
		///   <para>Check whether rumble is supported on a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> haptic device to check for rumble support. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the effect is supported or false if it isn't.</para>
		/// </returns>
		/// <seealso cref="SDL_InitHapticRumble" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HapticRumbleSupported<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_HapticRumbleSupported(SDL_Haptic *haptic);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_HapticRumbleSupported(IntPtr haptic);

		/// <summary>
		///   <para>Initialize a haptic device for simple rumble playback.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the haptic device to initialize for simple rumble playback. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_PlayHapticRumble" />
		/// <seealso cref="SDL_StopHapticRumble" />
		/// <seealso cref="SDL_HapticRumbleSupported" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_InitHapticRumble<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_InitHapticRumble(SDL_Haptic *haptic);
		/// </code><para>                                                             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_InitHapticRumble(IntPtr haptic);

		/// <summary>
		///   <para>Run a simple rumble effect on a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the haptic device to play the rumble effect on.      </para>
		/// </param>
		/// <param name="strength">
		///   <para> strength of the rumble to play as a 0-1 float value. </para>
		/// </param>
		/// <param name="length">
		///   <para> length of the rumble to play in milliseconds.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_InitHapticRumble" />
		/// <seealso cref="SDL_StopHapticRumble" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_PlayHapticRumble<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_PlayHapticRumble(SDL_Haptic *haptic, float strength, Uint32 length);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_PlayHapticRumble(IntPtr haptic, float strength, uint length);

		/// <summary>
		///   <para>Stop the simple rumble on a haptic device.</para>
		/// </summary>
		/// <param name="haptic">
		///   <para> the haptic device to stop the rumble effect on. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_PlayHapticRumble" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StopHapticRumble<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_haptic.h">&lt;SDL3/SDL_haptic.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StopHapticRumble(SDL_Haptic *haptic);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHaptic">CategoryHaptic</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StopHapticRumble(IntPtr haptic);

		// /usr/local/include/SDL3/SDL_hidapi.h

		/// <summary>
		///   <para>HID underlying bus types.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_bus_type<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_hid_bus_type {
		///     /** Unknown bus type */
		///     SDL_HID_API_BUS_UNKNOWN = 0x00,
		/// 
		///     /** USB bus
		///        Specifications:
		///        https://usb.org/hid */
		///     SDL_HID_API_BUS_USB = 0x01,
		/// 
		///     /** Bluetooth or Bluetooth LE bus
		///        Specifications:
		///        https://www.bluetooth.com/specifications/specs/human-interface-device-profile-1-1-1/
		///        https://www.bluetooth.com/specifications/specs/hid-service-1-0/
		///        https://www.bluetooth.com/specifications/specs/hid-over-gatt-profile-1-0/ */
		///     SDL_HID_API_BUS_BLUETOOTH = 0x02,
		/// 
		///     /** I2C bus
		///        Specifications:
		///        https://docs.microsoft.com/previous-versions/windows/hardware/design/dn642101(v=vs.85) */
		///     SDL_HID_API_BUS_I2C = 0x03,
		/// 
		///     /** SPI bus
		///        Specifications:
		///        https://www.microsoft.com/download/details.aspx?id=103325 */
		///     SDL_HID_API_BUS_SPI = 0x04
		/// 
		/// } SDL_hid_bus_type;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public enum SDL_hid_bus_type
		{
			/// <summary><para>Please refer to <see cref="SDL_hid_bus_type" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HID_API_BUS_UNKNOWN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HID_API_BUS_UNKNOWN = 0,
			/// <summary><para>Please refer to <see cref="SDL_hid_bus_type" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HID_API_BUS_USB<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HID_API_BUS_USB = 1,
			/// <summary><para>Please refer to <see cref="SDL_hid_bus_type" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HID_API_BUS_BLUETOOTH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HID_API_BUS_BLUETOOTH = 2,
			/// <summary><para>Please refer to <see cref="SDL_hid_bus_type" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HID_API_BUS_I2C<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HID_API_BUS_I2C = 3,
			/// <summary><para>Please refer to <see cref="SDL_hid_bus_type" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HID_API_BUS_SPI<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HID_API_BUS_SPI = 4,
		}

		/// <summary>
		///   <para>Information about a connected HID device</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_device_info<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_hid_device_info
		/// {
		///     /** Platform-specific device path */
		///     char *path;
		///     /** Device Vendor ID */
		///     unsigned short vendor_id;
		///     /** Device Product ID */
		///     unsigned short product_id;
		///     /** Serial Number */
		///     wchar_t *serial_number;
		///     /** Device Release Number in binary-coded decimal,
		///         also known as Device Version Number */
		///     unsigned short release_number;
		///     /** Manufacturer String */
		///     wchar_t *manufacturer_string;
		///     /** Product string */
		///     wchar_t *product_string;
		///     /** Usage Page for this Device/Interface
		///         (Windows/Mac/hidraw only) */
		///     unsigned short usage_page;
		///     /** Usage for this Device/Interface
		///         (Windows/Mac/hidraw only) */
		///     unsigned short usage;
		///     /** The USB interface which this logical device
		///         represents.
		/// 
		///         Valid only if the device is a USB HID device.
		///         Set to -1 in all other cases.
		///     */
		///     int interface_number;
		/// 
		///     /** Additional information about the USB interface.
		///         Valid on libusb and Android implementations. */
		///     int interface_class;
		///     int interface_subclass;
		///     int interface_protocol;
		/// 
		///     /** Underlying bus type */
		///     SDL_hid_bus_type bus_type;
		/// 
		///     /** Pointer to the next device */
		///     struct SDL_hid_device_info *next;
		/// 
		/// } SDL_hid_device_info;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_hid_device_info
		{
			public byte* path;
			public ushort vendor_id;
			public ushort product_id;
			public byte* serial_number;
			public ushort release_number;
			public byte* manufacturer_string;
			public byte* product_string;
			public ushort usage_page;
			public ushort usage;
			public int interface_number;
			public int interface_class;
			public int interface_subclass;
			public int interface_protocol;
			public SDL_hid_bus_type bus_type;
			public SDL_hid_device_info* next;
		}

		/// <summary>
		///   <para>Initialize the HIDAPI library.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function initializes the HIDAPI library. Calling it is not strictlynecessary, as it will be called automatically by<see cref="SDL_hid_enumerate" />() and any of the<see cref="SDL_hid_open_" />*() functions if it is needed. This functionshould be called at the beginning of execution however, if there is achance of HIDAPI handles being opened by different threads simultaneously.</para>
		///   <para>Each call to this function should have a matching call to<see cref="SDL_hid_exit" />()</para>
		/// </remarks>
		/// <seealso cref="SDL_hid_exit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_init<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_init(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_init();

		/// <summary>
		///   <para>Finalize the HIDAPI library.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function frees all of the static data associated with HIDAPI. Itshould be called at the end of execution to avoid memory leaks.</para>
		/// </remarks>
		/// <seealso cref="SDL_hid_init" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_exit<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_exit(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_exit();

		/// <summary>
		///   <para>Check to see if devices may have been added or removed.</para>
		/// </summary>
		/// <returns>
		///   <para>(Uint32) Returns a change counter that is incremented with each potentialdevice change, or 0 if device change detection isn't available.</para>
		/// </returns>
		/// <remarks>
		///   <para>Enumerating the HID devices is an expensive operation, so you can call thisto see if there have been any system device changes since the last call tothis function. A change in the counter returned doesn't necessarily meanthat anything has changed, but you can call<see cref="SDL_hid_enumerate" />() to get an updated device list.</para>
		///   <para>Calling this function for the first time may cause a thread or other systemresource to be allocated to track device change notifications.</para>
		/// </remarks>
		/// <seealso cref="SDL_hid_enumerate" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_device_change_count<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint32 SDL_hid_device_change_count(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_hid_device_change_count();

		/// <summary>
		///   <para>Enumerate the HID Devices.</para>
		/// </summary>
		/// <param name="vendor_id">
		///   <para> the Vendor ID (VID) of the types of device to open, or 0 to match any vendor.   </para>
		/// </param>
		/// <param name="product_id">
		///   <para> the Product ID (PID) of the types of device to open, or 0 to match any product. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_hid_device_info" /> *) Returns a pointer to alinked list of type <see cref="SDL_hid_device_info" />, containinginformation about the HID devices attached to the system, or NULL in thecase of failure. Free this linked list by calling<see cref="SDL_hid_free_enumeration" />().</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns a linked list of all the HID devices attached to thesystem which match vendor_id and product_id. If <c>vendor_id</c> is set to 0then any vendor matches. If <c>product_id</c> is set to 0 then any productmatches. If <c>vendor_id</c> and <c>product_id</c> are both set to 0, then all HIDdevices will be returned.</para>
		///   <para>By default SDL will only enumerate controllers, to reduce risk of hangingor crashing on bad drivers, but<see cref="SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS" />can be set to "0" to enumerate all HID devices.</para>
		/// </remarks>
		/// <seealso cref="SDL_hid_device_change_count" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_enumerate<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_hid_device_info * SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);
		/// </code><para>                                                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_hid_enumerate(ushort vendor_id, ushort product_id);

		/// <summary>
		///   <para>Free an enumeration linked list.</para>
		/// </summary>
		/// <param name="devs">
		///   <para> pointer to a list of struct_device returned from <see cref="SDL_hid_enumerate" />(). </para>
		/// </param>
		/// <remarks>
		///   <para>This function frees a linked list created by<see cref="SDL_hid_enumerate" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_free_enumeration<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_hid_free_enumeration(SDL_hid_device_info *devs);
		/// </code><para>                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_hid_free_enumeration(IntPtr devs); // WARN_UNKNOWN_POINTER_PARAMETER

		[DllImport(nativeLibName, EntryPoint = "SDL_hid_open", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_hid_open(ushort vendor_id, ushort product_id, byte* serial_number);
		/// <summary>
		///   <para>Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally a serial number.</para>
		/// </summary>
		/// <param name="vendor_id">
		///   <para> the Vendor ID (VID) of the device to open.                 </para>
		/// </param>
		/// <param name="product_id">
		///   <para> the Product ID (PID) of the device to open.                </para>
		/// </param>
		/// <param name="serial_number">
		///   <para> the Serial Number of the device to open (Optionally NULL). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_hid_device" /> *) Returns a pointer to a<see cref="SDL_hid_device" /> object on success or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If <c>serial_number</c> is NULL, the first device with the specified VID and PIDis opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_open<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_hid_device * SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public static IntPtr SDL_hid_open(ushort vendor_id, ushort product_id, string serial_number)
		{
			var serial_numberUTF8 = EncodeAsUTF8(serial_number);
			var result = INTERNAL_SDL_hid_open(vendor_id, product_id, serial_numberUTF8);

			SDL_free((IntPtr) serial_numberUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_hid_open_path", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_hid_open_path(byte* path);
		/// <summary>
		///   <para>Open a HID device by its path name.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the path name of the device to open. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_hid_device" /> *) Returns a pointer to a<see cref="SDL_hid_device" /> object on success or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The path name be determined by calling<see cref="SDL_hid_enumerate" />(), or a platform-specific path namecan be used (eg: /dev/hidraw0 on Linux).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_open_path<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_hid_device * SDL_hid_open_path(const char *path);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public static IntPtr SDL_hid_open_path(string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_hid_open_path(pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		/// <summary>
		///   <para>Write an Output report to a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().    </para>
		/// </param>
		/// <param name="data">
		///   <para> the data to send, including the report number as the first byte. </para>
		/// </param>
		/// <param name="length">
		///   <para> the length in bytes of the data to send.                         </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the actual number of bytes written and -1 on on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The first byte of <c>data</c> must contain the Report ID. For devices which onlysupport a single report, this must be set to 0x0. The remaining bytescontain the report data. Since the Report ID is mandatory, calls to<see cref="SDL_hid_write" />() will always contain one more byte than thereport contains. For example, if a hid report is 16 bytes long, 17 bytesmust be passed to <see cref="SDL_hid_write" />(), the Report ID (or 0x0,for devices with a single report), followed by the report data (16 bytes).In this example, the length passed in would be 17.</para>
		///   <para>
		///     <see cref="SDL_hid_write" />() will send the data on the first OUTendpoint, if one exists. If it does not, it will send the data through theControl Endpoint (Endpoint 0).</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_write<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_write(SDL_hid_device *dev, const unsigned char *data, size_t length);
		/// </code><para>                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_write(IntPtr dev, IntPtr data, UIntPtr length); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Read an Input report from a HID device with timeout.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().                                                          </para>
		/// </param>
		/// <param name="data">
		///   <para> a buffer to put the read data into.                                                                                    </para>
		/// </param>
		/// <param name="length">
		///   <para> the number of bytes to read. For devices with multiple reports, make sure to read an extra byte for the report number. </para>
		/// </param>
		/// <param name="milliseconds">
		///   <para> timeout in milliseconds or -1 for blocking wait.                                                                       </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the actual number of bytes read and -1 on on failure; call<see cref="SDL_GetError" />() for more information. If no packet wasavailable to be read within the timeout period, this function returns 0.</para>
		/// </returns>
		/// <remarks>
		///   <para>Input reports are returned to the host through the INTERRUPT IN endpoint.The first byte will contain the Report number if the device uses numberedreports.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_read_timeout<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_read_timeout(SDL_hid_device *dev, unsigned char *data, size_t length, int milliseconds);
		/// </code><para>                                                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_read_timeout(IntPtr dev, IntPtr data, UIntPtr length, int milliseconds); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Read an Input report from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().                                                          </para>
		/// </param>
		/// <param name="data">
		///   <para> a buffer to put the read data into.                                                                                    </para>
		/// </param>
		/// <param name="length">
		///   <para> the number of bytes to read. For devices with multiple reports, make sure to read an extra byte for the report number. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the actual number of bytes read and -1 on failure; call<see cref="SDL_GetError" />() for more information. If no packet wasavailable to be read and the handle is in non-blocking mode, this functionreturns 0.</para>
		/// </returns>
		/// <remarks>
		///   <para>Input reports are returned to the host through the INTERRUPT IN endpoint.The first byte will contain the Report number if the device uses numberedreports.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_read<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_read(SDL_hid_device *dev, unsigned char *data, size_t length);
		/// </code><para>                                                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_read(IntPtr dev, IntPtr data, UIntPtr length); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set the device handle to be non-blocking.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().                             </para>
		/// </param>
		/// <param name="nonblock">
		///   <para> enable or not the nonblocking reads - 1 to enable nonblocking - 0 to disable nonblocking. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>In non-blocking mode calls to <see cref="SDL_hid_read" />() will returnimmediately with a value of 0 if there is no data to be read. In blockingmode, <see cref="SDL_hid_read" />() will wait (block) until there is datato read before returning.</para>
		///   <para>Nonblocking can be turned on and off at any time.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_set_nonblocking<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_set_nonblocking(SDL_hid_device *dev, int nonblock);
		/// </code><para>                                                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_set_nonblocking(IntPtr dev, int nonblock);

		/// <summary>
		///   <para>Send a Feature report to the device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().         </para>
		/// </param>
		/// <param name="data">
		///   <para> the data to send, including the report number as the first byte.      </para>
		/// </param>
		/// <param name="length">
		///   <para> the length in bytes of the data to send, including the report number. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the actual number of bytes written and -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Feature reports are sent over the Control endpoint as a Set_Reporttransfer. The first byte of <c>data</c> must contain the Report ID. For deviceswhich only support a single report, this must be set to 0x0. The remainingbytes contain the report data. Since the Report ID is mandatory, calls to<see cref="SDL_hid_send_feature_report" />() will alwayscontain one more byte than the report contains. For example, if a hidreport is 16 bytes long, 17 bytes must be passed to<see cref="SDL_hid_send_feature_report" />(): the Report ID(or 0x0, for devices which do not use numbered reports), followed by thereport data (16 bytes). In this example, the length passed in would be 17.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_send_feature_report<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_send_feature_report(SDL_hid_device *dev, const unsigned char *data, size_t length);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_send_feature_report(IntPtr dev, IntPtr data, UIntPtr length); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get a feature report from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().                                                                                                                                        </para>
		/// </param>
		/// <param name="data">
		///   <para> a buffer to put the read data into, including the Report ID. Set the first byte of <c>data</c> to the Report ID of the report to be read, or set it to zero if your device does not use numbered reports. </para>
		/// </param>
		/// <param name="length">
		///   <para> the number of bytes to read, including an extra byte for the report ID. The buffer can be longer than the actual report.                                                                             </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of bytes read plus one for the report ID (which isstill in the first byte), or -1 on on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Set the first byte of <c>data</c> to the Report ID of the report to be read.Make sure to allow space for this extra byte in <c>data</c>. Upon return, thefirst byte will still contain the Report ID, and the report data will startin data[1].</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_feature_report<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_feature_report(SDL_hid_device *dev, unsigned char *data, size_t length);
		/// </code><para>                                                                                                                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_get_feature_report(IntPtr dev, IntPtr data, UIntPtr length); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get an input report from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />().                                                                                                                                        </para>
		/// </param>
		/// <param name="data">
		///   <para> a buffer to put the read data into, including the Report ID. Set the first byte of <c>data</c> to the Report ID of the report to be read, or set it to zero if your device does not use numbered reports. </para>
		/// </param>
		/// <param name="length">
		///   <para> the number of bytes to read, including an extra byte for the report ID. The buffer can be longer than the actual report.                                                                             </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of bytes read plus one for the report ID (which isstill in the first byte), or -1 on on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Set the first byte of <c>data</c> to the Report ID of the report to be read.Make sure to allow space for this extra byte in <c>data</c>. Upon return, thefirst byte will still contain the Report ID, and the report data will startin data[1].</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_input_report<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_input_report(SDL_hid_device *dev, unsigned char *data, size_t length);
		/// </code><para>                                                                                                                                                                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_get_input_report(IntPtr dev, IntPtr data, UIntPtr length); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Close a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_close<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_close(SDL_hid_device *dev);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_close(IntPtr dev);

		[DllImport(nativeLibName, EntryPoint = "SDL_hid_get_manufacturer_string", CallingConvention = CallingConvention.Cdecl)]
		private static extern int INTERNAL_SDL_hid_get_manufacturer_string(IntPtr dev, byte* @string, UIntPtr maxlen);
		/// <summary>
		///   <para>Get The Manufacturer String from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <param name="string">
		///   <para> a wide string buffer to put the data into.                    </para>
		/// </param>
		/// <param name="maxlen">
		///   <para> the length of the buffer in multiples of wchar_t.             </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_manufacturer_string<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_manufacturer_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public static int SDL_hid_get_manufacturer_string(IntPtr dev, string @string, UIntPtr maxlen)
		{
			var @stringUTF8 = EncodeAsUTF8(@string);
			var result = INTERNAL_SDL_hid_get_manufacturer_string(dev, @stringUTF8, maxlen);

			SDL_free((IntPtr) @stringUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_hid_get_product_string", CallingConvention = CallingConvention.Cdecl)]
		private static extern int INTERNAL_SDL_hid_get_product_string(IntPtr dev, byte* @string, UIntPtr maxlen);
		/// <summary>
		///   <para>Get The Product String from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <param name="string">
		///   <para> a wide string buffer to put the data into.                    </para>
		/// </param>
		/// <param name="maxlen">
		///   <para> the length of the buffer in multiples of wchar_t.             </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_product_string<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_product_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public static int SDL_hid_get_product_string(IntPtr dev, string @string, UIntPtr maxlen)
		{
			var @stringUTF8 = EncodeAsUTF8(@string);
			var result = INTERNAL_SDL_hid_get_product_string(dev, @stringUTF8, maxlen);

			SDL_free((IntPtr) @stringUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_hid_get_serial_number_string", CallingConvention = CallingConvention.Cdecl)]
		private static extern int INTERNAL_SDL_hid_get_serial_number_string(IntPtr dev, byte* @string, UIntPtr maxlen);
		/// <summary>
		///   <para>Get The Serial Number String from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <param name="string">
		///   <para> a wide string buffer to put the data into.                    </para>
		/// </param>
		/// <param name="maxlen">
		///   <para> the length of the buffer in multiples of wchar_t.             </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_serial_number_string<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_serial_number_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public static int SDL_hid_get_serial_number_string(IntPtr dev, string @string, UIntPtr maxlen)
		{
			var @stringUTF8 = EncodeAsUTF8(@string);
			var result = INTERNAL_SDL_hid_get_serial_number_string(dev, @stringUTF8, maxlen);

			SDL_free((IntPtr) @stringUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_hid_get_indexed_string", CallingConvention = CallingConvention.Cdecl)]
		private static extern int INTERNAL_SDL_hid_get_indexed_string(IntPtr dev, int string_index, byte* @string, UIntPtr maxlen);
		/// <summary>
		///   <para>Get a string from a HID device, based on its string index.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <param name="string_index">
		///   <para> the index of the string to get.                               </para>
		/// </param>
		/// <param name="string">
		///   <para> a wide string buffer to put the data into.                    </para>
		/// </param>
		/// <param name="maxlen">
		///   <para> the length of the buffer in multiples of wchar_t.             </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns 0 on success or a negative error code on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_indexed_string<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_indexed_string(SDL_hid_device *dev, int string_index, wchar_t *string, size_t maxlen);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		public static int SDL_hid_get_indexed_string(IntPtr dev, int string_index, string @string, UIntPtr maxlen)
		{
			var @stringUTF8 = EncodeAsUTF8(@string);
			var result = INTERNAL_SDL_hid_get_indexed_string(dev, string_index, @stringUTF8, maxlen);

			SDL_free((IntPtr) @stringUTF8);
			return result;
		}

		/// <summary>
		///   <para>Get the device info from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_hid_device_info" /> *) Returns a pointer to the<see cref="SDL_hid_device_info" /> for this hid_device or NULL onfailure; call <see cref="SDL_GetError" />() for more information. Thisstruct is valid until the device is closed with<see cref="SDL_hid_close" />().</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_device_info<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_hid_device_info * SDL_hid_get_device_info(SDL_hid_device *dev);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_hid_get_device_info(IntPtr dev);

		/// <summary>
		///   <para>Get a report descriptor from a HID device.</para>
		/// </summary>
		/// <param name="dev">
		///   <para> a device handle returned from <see cref="SDL_hid_open" />(). </para>
		/// </param>
		/// <param name="buf">
		///   <para> the buffer to copy descriptor into.                           </para>
		/// </param>
		/// <param name="buf_size">
		///   <para> the size of the buffer in bytes.                              </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of bytes actually copied or -1 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>User has to provide a preallocated buffer where descriptor will be copiedto. The recommended size for a preallocated buffer is 4096 bytes.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_get_report_descriptor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_hid_get_report_descriptor(SDL_hid_device *dev, unsigned char *buf, size_t buf_size);
		/// </code><para>                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_hid_get_report_descriptor(IntPtr dev, IntPtr buf, UIntPtr buf_size); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers.</para>
		/// </summary>
		/// <param name="active">
		///   <para> true to start the scan, false to stop the scan. </para>
		/// </param>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_hid_ble_scan<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hidapi.h">&lt;SDL3/SDL_hidapi.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_hid_ble_scan(bool active);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHIDAPI">CategoryHIDAPI</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_hid_ble_scan(SDLBool active);

		// /usr/local/include/SDL3/SDL_hints.h

		/// <summary>
		///   <para>Specify the behavior of Alt+Tab while the keyboard is grabbed.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL emulates Alt+Tab functionality while the keyboard isgrabbed and your window is full-screen. This prevents the user from gettingstuck in your application if you've enabled keyboard grab.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": SDL will not handle Alt+Tab. Your application is responsible forhandling Alt+Tab while the keyboard is grabbed.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will minimize your window when Alt+Tab is pressed (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED";
		/// <summary>
		///   <para>A variable to control whether the SDL activity is allowed to be re-created.</para>
		/// </summary>
		/// <remarks>
		///   <para>If this hint is true, the activity can be recreated on demand by the OS,and Java static data and C++ static data remain with their current values.If this hint is false, then SDL will call exit() when you return from yourmain function and the application will be terminated and then started fresheach time.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The application starts fresh at each launch. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The application activity can be recreated by the OS.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY = "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY";
		/// <summary>
		///   <para>A variable to control whether the event loop will block itself when the app is paused.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Non blocking.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Blocking. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ANDROID_BLOCK_ON_PAUSE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE "SDL_ANDROID_BLOCK_ON_PAUSE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ANDROID_BLOCK_ON_PAUSE = "SDL_ANDROID_BLOCK_ON_PAUSE";
		/// <summary>
		///   <para>A variable to control whether we trap the Android back button to handle it manually.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is necessary for the right mouse button to work on some Androiddevices, or to be able to trap the back button for use in your codereliably. If this hint is true, the back button will show up as an<see cref="SDL_EventType.SDL_EVENT_KEY_DOWN" /> /<see cref="SDL_EventType.SDL_EVENT_KEY_UP" /> pair with a keycode of<see cref="SDL_Scancode.SDL_SCANCODE_AC_BACK" />.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Back button will be handled as usual for system. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Back button will be trapped, allowing you to handle the key pressmanually. (This will also let right mouse click work on systems where theright mouse button functions as back.)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ANDROID_TRAP_BACK_BUTTON<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ANDROID_TRAP_BACK_BUTTON "SDL_ANDROID_TRAP_BACK_BUTTON"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ANDROID_TRAP_BACK_BUTTON = "SDL_ANDROID_TRAP_BACK_BUTTON";
		/// <summary>
		///   <para>A variable setting the app ID string.</para>
		/// </summary>
		/// <remarks>
		///   <para>This string is used by desktop compositors to identify and group windowstogether, as well as match applications with associated desktop settingsand icons.</para>
		///   <para>This will override<see cref="SDL_PROP_APP_METADATA_IDENTIFIER_STRING" />,if set by the application.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_APP_ID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_APP_ID "SDL_APP_ID"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_APP_ID = "SDL_APP_ID";
		/// <summary>
		///   <para>A variable setting the application name.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint lets you specify the application name sent to the OS whenrequired. For example, this will often appear in volume control applets foraudio streams, and in lists of applications which are inhibiting thescreensaver. You should use a string that describes your program ("My Game2: The Revenge")</para>
		///   <para>This will override<see cref="SDL_PROP_APP_METADATA_NAME_STRING" />, ifset by the application.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_APP_NAME<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_APP_NAME "SDL_APP_NAME"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_APP_NAME = "SDL_APP_NAME";
		/// <summary>
		///   <para>A variable controlling whether controllers used with the Apple TV generate UI events.</para>
		/// </summary>
		/// <remarks>
		///   <para>When UI events are generated by controller input, the app will bebackgrounded when the Apple TV remote's menu button is pressed, and whenthe pause or B buttons on gamepads are pressed.</para>
		///   <para>More information about properly making use of controllers for the Apple TVcan be found here:https://developer.apple.com/tvos/human-interface-guidelines/remote-and-controllers/</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Controller input does not generate UI events. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Controller input generates UI events.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS";
		/// <summary>
		///   <para>A variable controlling whether the Apple TV remote's joystick axes will automatically match the rotation of the remote.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Remote orientation does not affect joystick axes. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Joystick axes are based on the orientation of the remote.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION";
		/// <summary>
		///   <para>Specify the default ALSA audio device name.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable is a specific audio device to open when the "default" audiodevice is used. By default if 4 channel audio is requested, the"plug:surround40" device will be opened and if 6 channel audio is requestedthe "plug:surround51" device will be opened.</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE "SDL_AUDIO_ALSA_DEFAULT_DEVICE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE = "SDL_AUDIO_ALSA_DEFAULT_DEVICE";
		/// <summary>
		///   <para>A variable controlling the audio category on iOS and macOS.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"ambient": Use the AVAudioSessionCategoryAmbient audio category, will bemuted by the phone mute switch (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"playback": Use the AVAudioSessionCategoryPlayback category.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>For more information, see Apple's documentation:https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/AudioSessionCategoriesandModes/AudioSessionCategoriesandModes.html</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_CATEGORY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_CATEGORY "SDL_AUDIO_CATEGORY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_CATEGORY = "SDL_AUDIO_CATEGORY";
		/// <summary>
		///   <para>A variable controlling the default audio channel count.</para>
		/// </summary>
		/// <remarks>
		///   <para>If the application doesn't specify the audio channel count when opening thedevice, this hint can be used to specify a default channel count that willbe used. This defaults to "1" for recording and "2" for playback devices.</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_CHANNELS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_CHANNELS "SDL_AUDIO_CHANNELS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_CHANNELS = "SDL_AUDIO_CHANNELS";
		/// <summary>
		///   <para>Specify an application icon name for an audio device.</para>
		/// </summary>
		/// <remarks>
		///   <para>Some audio backends (such as Pulseaudio and Pipewire) allow you to set anXDG icon name for your application. Among other things, this icon mightshow up in a system control panel that lets the user adjust the volume onspecific audio streams instead of using one giant master volume slider.Note that this is unrelated to the icon used by the windowing system, whichmay be set with <see cref="SDL_SetWindowIcon" /> (or via desktop fileon Wayland).</para>
		///   <para>Setting this to "" or leaving it unset will have SDL use a reasonabledefault, "applications-games", which is likely to be installed. Seehttps://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.htmlandhttps://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.htmlfor the relevant XDG icon specs.</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME "SDL_AUDIO_DEVICE_APP_ICON_NAME"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME = "SDL_AUDIO_DEVICE_APP_ICON_NAME";
		/// <summary>
		///   <para>A variable controlling device buffer size.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint is an integer &gt; 0, that represents the size of the device'sbuffer in sample frames (stereo audio data in 16-bit format is 4 bytes persample frame, for example).</para>
		///   <para>SDL3 generally decides this value on behalf of the app, but if for somereason the app needs to dictate this (because they want either lowerlatency or higher throughput AND ARE WILLING TO DEAL WITH what that mightrequire of the app), they can specify it.</para>
		///   <para>SDL will try to accommodate this value, but there is no promise you'll getthe buffer size requested. Many platforms won't honor this request at all,or might adjust it.</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES "SDL_AUDIO_DEVICE_SAMPLE_FRAMES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES = "SDL_AUDIO_DEVICE_SAMPLE_FRAMES";
		/// <summary>
		///   <para>Specify an audio stream name for an audio device.</para>
		/// </summary>
		/// <remarks>
		///   <para>Some audio backends (such as PulseAudio) allow you to describe your audiostream. Among other things, this description might show up in a systemcontrol panel that lets the user adjust the volume on specific audiostreams instead of using one giant master volume slider.</para>
		///   <para>This hints lets you transmit that information to the OS. The contents ofthis hint are used while opening an audio device. You should use a stringthat describes your what your program is playing ("audio stream" isprobably sufficient in many cases, but this could be useful for somethinglike "team chat" if you have a headset playing VoIP audio separately).</para>
		///   <para>Setting this to "" or leaving it unset will have SDL use a reasonabledefault: "audio stream" or something similar.</para>
		///   <para>Note that while this talks about audio streams, this is an OS-levelconcept, so it applies to a physical audio device in this case, and not an<see cref="SDL_AudioStream" />, nor an SDL logical audio device.</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DEVICE_STREAM_NAME<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DEVICE_STREAM_NAME "SDL_AUDIO_DEVICE_STREAM_NAME"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DEVICE_STREAM_NAME = "SDL_AUDIO_DEVICE_STREAM_NAME";
		/// <summary>
		///   <para>Specify an application role for an audio device.</para>
		/// </summary>
		/// <remarks>
		///   <para>Some audio backends (such as Pipewire) allow you to describe the role ofyour audio stream. Among other things, this description might show up in asystem control panel or software for displaying and manipulating mediaplayback/recording graphs.</para>
		///   <para>This hints lets you transmit that information to the OS. The contents ofthis hint are used while opening an audio device. You should use a stringthat describes your what your program is playing (Game, Music, Movie,etc...).</para>
		///   <para>Setting this to "" or leaving it unset will have SDL use a reasonabledefault: "Game" or something similar.</para>
		///   <para>Note that while this talks about audio streams, this is an OS-levelconcept, so it applies to a physical audio device in this case, and not an<see cref="SDL_AudioStream" />, nor an SDL logical audio device.</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DEVICE_STREAM_ROLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE "SDL_AUDIO_DEVICE_STREAM_ROLE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = "SDL_AUDIO_DEVICE_STREAM_ROLE";
		/// <summary>
		///   <para>Specify the input file when recording audio using the disk audio driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>This defaults to "sdlaudio-in.raw"</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DISK_INPUT_FILE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DISK_INPUT_FILE "SDL_AUDIO_DISK_INPUT_FILE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DISK_INPUT_FILE = "SDL_AUDIO_DISK_INPUT_FILE";
		/// <summary>
		///   <para>Specify the output file when playing audio using the disk audio driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>This defaults to "sdlaudio.raw"</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DISK_OUTPUT_FILE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DISK_OUTPUT_FILE "SDL_AUDIO_DISK_OUTPUT_FILE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DISK_OUTPUT_FILE = "SDL_AUDIO_DISK_OUTPUT_FILE";
		/// <summary>
		///   <para>A variable controlling the audio rate when using the disk audio driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The disk audio driver normally simulates real-time for the audio rate thatwas specified, but you can use this variable to adjust this rate higher orlower down to 0. The default value is "1.0".</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DISK_TIMESCALE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DISK_TIMESCALE "SDL_AUDIO_DISK_TIMESCALE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DISK_TIMESCALE = "SDL_AUDIO_DISK_TIMESCALE";
		/// <summary>
		///   <para>A variable that specifies an audio backend to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available audio backends in a reasonable orderuntil it finds one that can work, but this hint allows the app or user toforce a specific driver, such as "pipewire" if, say, you are on PulseAudiobut want to try talking to the lower level instead.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DRIVER "SDL_AUDIO_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DRIVER = "SDL_AUDIO_DRIVER";
		/// <summary>
		///   <para>A variable controlling the audio rate when using the dummy audio driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The dummy audio driver normally simulates real-time for the audio rate thatwas specified, but you can use this variable to adjust this rate higher orlower down to 0. The default value is "1.0".</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_DUMMY_TIMESCALE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_DUMMY_TIMESCALE "SDL_AUDIO_DUMMY_TIMESCALE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_DUMMY_TIMESCALE = "SDL_AUDIO_DUMMY_TIMESCALE";
		/// <summary>
		///   <para>A variable controlling the default audio format.</para>
		/// </summary>
		/// <remarks>
		///   <para>If the application doesn't specify the audio format when opening thedevice, this hint can be used to specify a default format that will beused.</para>
		///   <para>The variable can be set to the following values: - "U8": Unsigned 8-bitaudio - "S8": Signed 8-bit audio - "S16LE": Signed 16-bit little-endianaudio - "S16BE": Signed 16-bit big-endian audio - "S16": Signed 16-bitnative-endian audio (default) - "S32LE": Signed 32-bit little-endian audio</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"S32BE": Signed 32-bit big-endian audio - "S32": Signed 32-bitnative-endian audio - "F32LE": Floating point little-endian audio -"F32BE": Floating point big-endian audio - "F32": Floating pointnative-endian audio</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_FORMAT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_FORMAT "SDL_AUDIO_FORMAT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_FORMAT = "SDL_AUDIO_FORMAT";
		/// <summary>
		///   <para>A variable controlling the default audio frequency.</para>
		/// </summary>
		/// <remarks>
		///   <para>If the application doesn't specify the audio frequency when opening thedevice, this hint can be used to specify a default frequency that will beused. This defaults to "44100".</para>
		///   <para>This hint should be set before an audio device is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_FREQUENCY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_FREQUENCY "SDL_AUDIO_FREQUENCY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_FREQUENCY = "SDL_AUDIO_FREQUENCY";
		/// <summary>
		///   <para>A variable that causes SDL to not ignore audio "monitors".</para>
		/// </summary>
		/// <remarks>
		///   <para>This is currently only used by the PulseAudio driver.</para>
		///   <para>By default, SDL ignores audio devices that aren't associated with physicalhardware. Changing this hint to "1" will expose anything SDL sees thatappears to be an audio source or sink. This will add "devices" to the listthat the user probably doesn't want or need, but it can be useful inscenarios where you want to hook up SDL to some sort of virtual device,etc.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Audio monitor devices will be ignored. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Audio monitor devices will show up in the device list.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUDIO_INCLUDE_MONITORS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUDIO_INCLUDE_MONITORS "SDL_AUDIO_INCLUDE_MONITORS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUDIO_INCLUDE_MONITORS = "SDL_AUDIO_INCLUDE_MONITORS";
		/// <summary>
		///   <para>A variable controlling whether SDL updates joystick state when getting input events.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": You'll call <see cref="SDL_UpdateJoysticks" />() manually.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will automatically call<see cref="SDL_UpdateJoysticks" />(). (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUTO_UPDATE_JOYSTICKS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUTO_UPDATE_JOYSTICKS "SDL_AUTO_UPDATE_JOYSTICKS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUTO_UPDATE_JOYSTICKS = "SDL_AUTO_UPDATE_JOYSTICKS";
		/// <summary>
		///   <para>A variable controlling whether SDL updates sensor state when getting input events.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": You'll call <see cref="SDL_UpdateSensors" />() manually.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will automatically call<see cref="SDL_UpdateSensors" />(). (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_AUTO_UPDATE_SENSORS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_AUTO_UPDATE_SENSORS "SDL_AUTO_UPDATE_SENSORS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_AUTO_UPDATE_SENSORS = "SDL_AUTO_UPDATE_SENSORS";
		/// <summary>
		///   <para>Prevent SDL from using version 4 of the bitmap header when saving BMPs.</para>
		/// </summary>
		/// <remarks>
		///   <para>The bitmap header version 4 is required for proper alpha channel supportand SDL will use it when required. Should this not be desired, this hintcan force the use of the 40 byte header version which is supportedeverywhere.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Surfaces with a colorkey or an alpha channel are saved to a 32-bitBMP file with an alpha mask. SDL will use the bitmap header version 4 andset the alpha mask accordingly. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Surfaces with a colorkey or an alpha channel are saved to a 32-bitBMP file without an alpha mask. The alpha channel data will be in thefile, but applications are going to ignore it.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_BMP_SAVE_LEGACY_FORMAT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_BMP_SAVE_LEGACY_FORMAT "SDL_BMP_SAVE_LEGACY_FORMAT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_BMP_SAVE_LEGACY_FORMAT = "SDL_BMP_SAVE_LEGACY_FORMAT";
		/// <summary>
		///   <para>A variable that decides what camera backend to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available camera backends in a reasonableorder until it finds one that can work, but this hint allows the app oruser to force a specific target, such as "directshow" if, say, you are onWindows Media Foundations but want to try DirectShow instead.</para>
		///   <para>The default value is unset, in which case SDL will try to figure out thebest camera backend on your behalf. This hint needs to be set before<see cref="SDL_Init" />() is called to be useful.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_CAMERA_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_CAMERA_DRIVER "SDL_CAMERA_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_CAMERA_DRIVER = "SDL_CAMERA_DRIVER";
		/// <summary>
		///   <para>A variable that limits what CPU features are available.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL marks all features the current CPU supports as available.This hint allows to limit these to a subset.</para>
		///   <para>When the hint is unset, or empty, SDL will enable all detected CPUfeatures.</para>
		///   <para>The variable can be set to a comma separated list containing the followingitems:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"all"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"altivec"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"sse"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"sse2"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"sse3"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"sse41"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"sse42"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"avx"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"avx2"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"avx512f"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"arm-simd"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"neon"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"lsx"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"lasx"</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The items can be prefixed by '+'/'-' to add/remove features.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_CPU_FEATURE_MASK<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_CPU_FEATURE_MASK "SDL_CPU_FEATURE_MASK"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_CPU_FEATURE_MASK = "SDL_CPU_FEATURE_MASK";
		/// <summary>
		///   <para>A variable controlling whether DirectInput should be used for controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable DirectInput detection.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable DirectInput detection. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_DIRECTINPUT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_DIRECTINPUT "SDL_JOYSTICK_DIRECTINPUT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_DIRECTINPUT = "SDL_JOYSTICK_DIRECTINPUT";
		/// <summary>
		///   <para>A variable that specifies a dialog backend to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available dialog backends in a reasonableorder until it finds one that can work, but this hint allows the app oruser to force a specific target.</para>
		///   <para>If the specified target does not exist or is not available, thedialog-related function calls will fail.</para>
		///   <para>This hint currently only applies to platforms using the generic "Unix"dialog implementation, but may be extended to more platforms in the future.Note that some Unix and Unix-like platforms have their own implementation,such as macOS and Haiku.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>NULL: Select automatically (default, all platforms)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"portal": Use XDG Portals through DBus (Unix only)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"zenity": Use the Zenity program (Unix only)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>More options may be added in the future.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_FILE_DIALOG_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_FILE_DIALOG_DRIVER "SDL_FILE_DIALOG_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_FILE_DIALOG_DRIVER = "SDL_FILE_DIALOG_DRIVER";
		/// <summary>
		///   <para>Override for <see cref="SDL_GetDisplayUsableBounds" />().</para>
		/// </summary>
		/// <remarks>
		///   <para>If set, this hint will override the expected results for<see cref="SDL_GetDisplayUsableBounds" />() for displayindex 0. Generally you don't want to do this, but this allows an embeddedsystem to request that some of the screen be reserved for other uses whenpaired with a well-behaved application.</para>
		///   <para>The contents of this hint must be 4 comma-separated integers, the first isthe bounds x, then y, width and height, in that order.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_DISPLAY_USABLE_BOUNDS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_DISPLAY_USABLE_BOUNDS "SDL_DISPLAY_USABLE_BOUNDS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_DISPLAY_USABLE_BOUNDS = "SDL_DISPLAY_USABLE_BOUNDS";
		/// <summary>
		///   <para>Disable giving back control to the browser automatically when running with asyncify.</para>
		/// </summary>
		/// <remarks>
		///   <para>With -s ASYNCIFY, SDL calls emscripten_sleep during operations such asrefreshing the screen or polling events.</para>
		///   <para>This hint only applies to the emscripten platform.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable emscripten_sleep calls (if you give back browser controlmanually or use asyncify for other purposes).</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable emscripten_sleep calls. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_EMSCRIPTEN_ASYNCIFY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_EMSCRIPTEN_ASYNCIFY "SDL_EMSCRIPTEN_ASYNCIFY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_EMSCRIPTEN_ASYNCIFY = "SDL_EMSCRIPTEN_ASYNCIFY";
		/// <summary>
		///   <para>Specify the CSS selector used for the "default" window/canvas.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint only applies to the emscripten platform.</para>
		///   <para>The default value is "#canvas"</para>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR "SDL_EMSCRIPTEN_CANVAS_SELECTOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = "SDL_EMSCRIPTEN_CANVAS_SELECTOR";
		/// <summary>
		///   <para>Override the binding element for keyboard inputs for Emscripten builds.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint only applies to the emscripten platform.</para>
		///   <para>The variable can be one of:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"#window": the javascript window object (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"#document": the javascript document object</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"#screen": the javascript window.screen object</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"#canvas": the WebGL canvas element</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>any other string without a leading # sign applies to the element on thepage with that ID.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT";
		/// <summary>
		///   <para>A variable that controls whether the on-screen keyboard should be shown when text input is active.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"auto": The on-screen keyboard will be shown if there is no physicalkeyboard attached. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"0": Do not show the on-screen keyboard.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Show the on-screen keyboard, if available.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint must be set before <see cref="SDL_StartTextInput" />() iscalled</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ENABLE_SCREEN_KEYBOARD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ENABLE_SCREEN_KEYBOARD "SDL_ENABLE_SCREEN_KEYBOARD"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ENABLE_SCREEN_KEYBOARD = "SDL_ENABLE_SCREEN_KEYBOARD";
		/// <summary>
		///   <para>A variable containing a list of evdev devices to use if udev is not available.</para>
		/// </summary>
		/// <remarks>
		///   <para>The list of devices is in the form:</para>
		///   <para>deviceclass:path[,deviceclass:path[,...]]</para>
		///   <para>where device class is an integer representing the<see cref="SDL_UDEV_deviceclass" /> and path is the full path tothe event device.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_EVDEV_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_EVDEV_DEVICES "SDL_EVDEV_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_EVDEV_DEVICES = "SDL_EVDEV_DEVICES";
		/// <summary>
		///   <para>A variable controlling verbosity of the logging of SDL events pushed onto the internal queue.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values, from least to mostverbose:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Don't log any events. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Log most events (other than the really spammy ones).</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"2": Include mouse and finger motion events.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This is generally meant to be used to debug SDL itself, but can be usefulfor application developers that need better visibility into what is goingon in the event queue. Logged events are sent through <see cref="SDL_Log" />(),which means by default they appear on stdout on most platforms or maybeOutputDebugString() on Windows, and can be funneled by the app with<see cref="SDL_SetLogOutputFunction" />(), etc.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_EVENT_LOGGING<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_EVENT_LOGGING "SDL_EVENT_LOGGING"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_EVENT_LOGGING = "SDL_EVENT_LOGGING";
		/// <summary>
		///   <para>A variable controlling whether raising the window should be done more forcefully.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Honor the OS policy for raising windows. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Force the window to be raised, overriding any OS policy.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>At present, this is only an issue under MS Windows, which makes it nearlyimpossible to programmatically move a window to the foreground, for"security" reasons. See http://stackoverflow.com/a/34414846 for adiscussion.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_FORCE_RAISEWINDOW<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_FORCE_RAISEWINDOW "SDL_FORCE_RAISEWINDOW"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_FORCE_RAISEWINDOW = "SDL_FORCE_RAISEWINDOW";
		/// <summary>
		///   <para>A variable controlling how 3D acceleration is used to accelerate the SDL screen surface.</para>
		/// </summary>
		/// <remarks>
		///   <para>SDL can try to accelerate the SDL screen surface by using streamingtextures with a 3D rendering engine. This variable controls whether and howthis is done.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable 3D acceleration</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable 3D acceleration, using the default renderer. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"X": Enable 3D acceleration, using X where X is one of the validrendering drivers. (e.g. "direct3d", "opengl", etc.)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before calling<see cref="SDL_GetWindowSurface" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_FRAMEBUFFER_ACCELERATION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_FRAMEBUFFER_ACCELERATION "SDL_FRAMEBUFFER_ACCELERATION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION";
		/// <summary>
		///   <para>A variable that lets you manually hint extra gamecontroller db entries.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable should be newline delimited rows of gamecontroller configdata, see <see cref="SDL_gamepad" />.h</para>
		///   <para>You can update mappings after SDL is initialized with<see cref="SDL_GetGamepadMappingForGUID" />() and<see cref="SDL_AddGamepadMapping" />()</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GAMECONTROLLERCONFIG<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GAMECONTROLLERCONFIG "SDL_GAMECONTROLLERCONFIG"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG";
		/// <summary>
		///   <para>A variable that lets you provide a file with extra gamecontroller db entries.</para>
		/// </summary>
		/// <remarks>
		///   <para>The file should contain lines of gamecontroller config data, see<see cref="SDL_gamepad" />.h</para>
		///   <para>You can update mappings after SDL is initialized with<see cref="SDL_GetGamepadMappingForGUID" />() and<see cref="SDL_AddGamepadMapping" />()</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GAMECONTROLLERCONFIG_FILE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GAMECONTROLLERCONFIG_FILE "SDL_GAMECONTROLLERCONFIG_FILE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GAMECONTROLLERCONFIG_FILE = "SDL_GAMECONTROLLERCONFIG_FILE";
		/// <summary>
		///   <para>A variable that overrides the automatic controller type detection.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable should be comma separated entries, in the form: VID/PID=type</para>
		///   <para>The VID and PID should be hexadecimal with exactly 4 digits, e.g. 0x00fd</para>
		///   <para>This hint affects what low level protocol is used with the HIDAPI driver.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"Xbox360"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"XboxOne"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"PS3"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"PS4"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"PS5"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"SwitchPro"</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GAMECONTROLLERTYPE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GAMECONTROLLERTYPE "SDL_GAMECONTROLLERTYPE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GAMECONTROLLERTYPE = "SDL_GAMECONTROLLERTYPE";
		/// <summary>
		///   <para>A variable containing a list of devices to skip when scanning for game controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>0xAAAA/0xBBBB,0xCCCC/0xDDDD</para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES "SDL_GAMECONTROLLER_IGNORE_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = "SDL_GAMECONTROLLER_IGNORE_DEVICES";
		/// <summary>
		///   <para>If set, all devices will be skipped when scanning for game controllers except for the ones listed in this variable.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>0xAAAA/0xBBBB,0xCCCC/0xDDDD</para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT";
		/// <summary>
		///   <para>A variable that controls whether the device's built-in accelerometer and gyro should be used as sensors for gamepads.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Sensor fusion is disabled</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Sensor fusion is enabled for all controllers that lack sensors</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Or the variable can be a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>0xAAAA/0xBBBB,0xCCCC/0xDDDD</para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint should be set before a gamepad is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GAMECONTROLLER_SENSOR_FUSION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GAMECONTROLLER_SENSOR_FUSION "SDL_GAMECONTROLLER_SENSOR_FUSION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GAMECONTROLLER_SENSOR_FUSION = "SDL_GAMECONTROLLER_SENSOR_FUSION";
		/// <summary>
		///   <para>This variable sets the default text of the TextInput window on GDK platforms.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint is available only if <see cref="SDL_GDK_TEXTINPUT" />defined.</para>
		///   <para>This hint should be set before calling<see cref="SDL_StartTextInput" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT "SDL_GDK_TEXTINPUT_DEFAULT_TEXT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT = "SDL_GDK_TEXTINPUT_DEFAULT_TEXT";
		/// <summary>
		///   <para>This variable sets the description of the TextInput window on GDK platforms.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint is available only if <see cref="SDL_GDK_TEXTINPUT" />defined.</para>
		///   <para>This hint should be set before calling<see cref="SDL_StartTextInput" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GDK_TEXTINPUT_DESCRIPTION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GDK_TEXTINPUT_DESCRIPTION "SDL_GDK_TEXTINPUT_DESCRIPTION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = "SDL_GDK_TEXTINPUT_DESCRIPTION";
		/// <summary>
		///   <para>This variable sets the maximum input length of the TextInput window on GDK platforms.</para>
		/// </summary>
		/// <remarks>
		///   <para>The value must be a stringified integer, for example "10" to allow for upto 10 characters of text input.</para>
		///   <para>This hint is available only if <see cref="SDL_GDK_TEXTINPUT" />defined.</para>
		///   <para>This hint should be set before calling<see cref="SDL_StartTextInput" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH "SDL_GDK_TEXTINPUT_MAX_LENGTH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = "SDL_GDK_TEXTINPUT_MAX_LENGTH";
		/// <summary>
		///   <para>This variable sets the input scope of the TextInput window on GDK platforms.</para>
		/// </summary>
		/// <remarks>
		///   <para>Set this hint to change the XGameUiTextEntryInputScope value that will bepassed to the window creation function. The value must be a stringifiedinteger, for example "0" for XGameUiTextEntryInputScope::Default.</para>
		///   <para>This hint is available only if <see cref="SDL_GDK_TEXTINPUT" />defined.</para>
		///   <para>This hint should be set before calling<see cref="SDL_StartTextInput" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GDK_TEXTINPUT_SCOPE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GDK_TEXTINPUT_SCOPE "SDL_GDK_TEXTINPUT_SCOPE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GDK_TEXTINPUT_SCOPE = "SDL_GDK_TEXTINPUT_SCOPE";
		/// <summary>
		///   <para>This variable sets the title of the TextInput window on GDK platforms.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint is available only if <see cref="SDL_GDK_TEXTINPUT" />defined.</para>
		///   <para>This hint should be set before calling<see cref="SDL_StartTextInput" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GDK_TEXTINPUT_TITLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GDK_TEXTINPUT_TITLE "SDL_GDK_TEXTINPUT_TITLE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GDK_TEXTINPUT_TITLE = "SDL_GDK_TEXTINPUT_TITLE";
		/// <summary>
		///   <para>A variable to control whether HIDAPI uses libusb for device access.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default libusb will only be used for a few devices that require directUSB access, and this can be controlled with<see cref="SDL_HINT_HIDAPI_LIBUSB_WHITELIST" />.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI will not use libusb for device access.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI will use libusb for device access if available. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_HIDAPI_LIBUSB<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_HIDAPI_LIBUSB "SDL_HIDAPI_LIBUSB"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_HIDAPI_LIBUSB = "SDL_HIDAPI_LIBUSB";
		/// <summary>
		///   <para>A variable to control whether HIDAPI uses libusb only for whitelisted devices.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default libusb will only be used for a few devices that require directUSB access.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI will use libusb for all device access.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI will use libusb only for whitelisted devices. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_HIDAPI_LIBUSB_WHITELIST<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_HIDAPI_LIBUSB_WHITELIST "SDL_HIDAPI_LIBUSB_WHITELIST"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_HIDAPI_LIBUSB_WHITELIST = "SDL_HIDAPI_LIBUSB_WHITELIST";
		/// <summary>
		///   <para>A variable to control whether HIDAPI uses udev for device detection.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI will poll for device changes.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI will use udev for device detection. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_HIDAPI_UDEV<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_HIDAPI_UDEV "SDL_HIDAPI_UDEV"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_HIDAPI_UDEV = "SDL_HIDAPI_UDEV";
		/// <summary>
		///   <para>A variable that specifies a GPU backend to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available GPU backends in a reasonable orderuntil it finds one that can work, but this hint allows the app or user toforce a specific target, such as "direct3d11" if, say, your hardwaresupports D3D12 but want to try using D3D11 instead.</para>
		///   <para>This hint should be set before<see cref="SDL_GPUSelectBackend" />() is called.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_GPU_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_GPU_DRIVER "SDL_GPU_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_GPU_DRIVER = "SDL_GPU_DRIVER";
		/// <summary>
		///   <para>A variable to control whether <see cref="SDL_hid_enumerate" />() enumerates all HID devices or only controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": <see cref="SDL_hid_enumerate" />() will enumerate all HIDdevices.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": <see cref="SDL_hid_enumerate" />() will only enumeratecontrollers. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default SDL will only enumerate controllers, to reduce risk of hangingor crashing on devices with bad drivers and avoiding macOS keyboard capturepermission prompts.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS = "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS";
		/// <summary>
		///   <para>A variable containing a list of devices to ignore in <see cref="SDL_hid_enumerate" />().</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>For example, to ignore the Shanwan DS3 controller and any Valve controller,you might use the string "0x2563/0x0523,0x28de/0x0000"</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_HIDAPI_IGNORE_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_HIDAPI_IGNORE_DEVICES "SDL_HIDAPI_IGNORE_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_HIDAPI_IGNORE_DEVICES = "SDL_HIDAPI_IGNORE_DEVICES";
		/// <summary>
		///   <para>A variable describing what IME UI elements the application can display.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default IME UI is handled using native components by the OS wherepossible, however this can interfere with or not be visible when exclusivefullscreen mode is used.</para>
		///   <para>The variable can be set to a comma separated list containing the followingitems:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"none" or "0": The application can't render any IME elements, and nativeUI should be used. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"composition": The application handles<see cref="SDL_EventType.SDL_EVENT_TEXT_EDITING" /> events and can renderthe composition text.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"candidates": The application handles<see cref="SDL_EventType.SDL_EVENT_TEXT_EDITING_CANDIDATES" />and can render the candidate list.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_IME_IMPLEMENTED_UI<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_IME_IMPLEMENTED_UI "SDL_IME_IMPLEMENTED_UI"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_IME_IMPLEMENTED_UI = "SDL_IME_IMPLEMENTED_UI";
		/// <summary>
		///   <para>A variable controlling whether the home indicator bar on iPhone X should be hidden.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The indicator bar is not hidden. (default for windowed applications)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The indicator bar is hidden and is shown when the screen is touched(useful for movie playback applications).</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"2": The indicator bar is dim and the first swipe makes it visible andthe second swipe performs the "home" action. (default for fullscreenapplications)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_IOS_HIDE_HOME_INDICATOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_IOS_HIDE_HOME_INDICATOR "SDL_IOS_HIDE_HOME_INDICATOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_IOS_HIDE_HOME_INDICATOR = "SDL_IOS_HIDE_HOME_INDICATOR";
		/// <summary>
		///   <para>A variable that lets you enable joystick (and gamecontroller) events even when your app is in the background.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable joystick &amp; gamecontroller input events when the applicationis in the background. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable joystick &amp; gamecontroller input events when the applicationis in the background.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";
		/// <summary>
		///   <para>A variable containing a list of arcade stick style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES "SDL_JOYSTICK_ARCADESTICK_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES = "SDL_JOYSTICK_ARCADESTICK_DEVICES";
		/// <summary>
		///   <para>A variable containing a list of devices that are not arcade stick style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override<see cref="SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES" />and the built in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED = "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED";
		/// <summary>
		///   <para>A variable containing a list of devices that should not be considered joysticks.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_BLACKLIST_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES "SDL_JOYSTICK_BLACKLIST_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = "SDL_JOYSTICK_BLACKLIST_DEVICES";
		/// <summary>
		///   <para>A variable containing a list of devices that should be considered joysticks.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override<see cref="SDL_HINT_JOYSTICK_BLACKLIST_DEVICES" />and the built in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED = "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED";
		/// <summary>
		///   <para>A variable containing a comma separated list of devices to open as joysticks.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable is currently only used by the Linux joystick driver.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_DEVICE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_DEVICE "SDL_JOYSTICK_DEVICE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_DEVICE = "SDL_JOYSTICK_DEVICE";
		/// <summary>
		///   <para>A variable containing a list of flightstick style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of @file, in which case the named filewill be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES "SDL_JOYSTICK_FLIGHTSTICK_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES";
		/// <summary>
		///   <para>A variable containing a list of devices that are not flightstick style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override<see cref="SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES" />and the built in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED";
		/// <summary>
		///   <para>A variable controlling whether GameInput should be used for controller handling on Windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": GameInput is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": GameInput is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is "1" on GDK platforms, and "0" otherwise.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_GAMEINPUT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_GAMEINPUT "SDL_JOYSTICK_GAMEINPUT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_GAMEINPUT = "SDL_JOYSTICK_GAMEINPUT";
		/// <summary>
		///   <para>A variable containing a list of devices known to have a GameCube form factor.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_GAMECUBE_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES "SDL_JOYSTICK_GAMECUBE_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = "SDL_JOYSTICK_GAMECUBE_DEVICES";
		/// <summary>
		///   <para>A variable containing a list of devices known not to have a GameCube form factor.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override<see cref="SDL_HINT_JOYSTICK_GAMECUBE_DEVICES" />and the built in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED = "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI joystick drivers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI drivers are not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI drivers are used. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This variable is the default for all drivers, but can be overridden by thehints for specific drivers below.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI "SDL_JOYSTICK_HIDAPI"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI = "SDL_JOYSTICK_HIDAPI";
		/// <summary>
		///   <para>A variable controlling whether Nintendo Switch Joy-Con controllers will be combined into a single Pro-like controller when using the HIDAPI driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Left and right Joy-Con controllers will not be combined and eachwill be a mini-gamepad.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Left and right Joy-Con controllers will be combined into a singlecontroller. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Nintendo GameCube controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" /></para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE "SDL_JOYSTICK_HIDAPI_GAMECUBE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = "SDL_JOYSTICK_HIDAPI_GAMECUBE";
		/// <summary>
		///   <para>A variable controlling whether rumble is used to implement the GameCube controller's 3 rumble modes, Stop(0), Rumble(1), and StopHard(2).</para>
		/// </summary>
		/// <remarks>
		///   <para>This is useful for applications that need full compatibility for thingslike ADSR envelopes. - Stop is implemented by setting low_frequency_rumbleto 0 and high_frequency_rumble &gt;0 - Rumble is both at any arbitrary value -StopHard is implemented by setting both low_frequency_rumble andhigh_frequency_rumble to 0</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Normal rumble behavior is behavior is used. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Proper GameCube controller rumble behavior is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE = "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Nintendo Switch Joy-Cons should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS "SDL_JOYSTICK_HIDAPI_JOY_CONS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = "SDL_JOYSTICK_HIDAPI_JOY_CONS";
		/// <summary>
		///   <para>A variable controlling whether the Home button LED should be turned on when a Nintendo Switch Joy-Con controller is opened.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": home button LED is turned off</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": home button LED is turned on</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default the Home button LED state is not changed. This hint can also beset to a floating point value between 0.0 and 1.0 which controls thebrightness of the Home button LED.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Amazon Luna controllers connected via Bluetooth should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_LUNA<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_LUNA "SDL_JOYSTICK_HIDAPI_LUNA"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_LUNA = "SDL_JOYSTICK_HIDAPI_LUNA";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Nintendo Online classic controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for PS3 controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" /> on macOS, and "0" onother platforms.</para>
		///   <para>For official Sony driver (sixaxis.sys) use<see cref="SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER" />.See https://github.com/ViGEm/DsHidMini for an alternative driver onWindows.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS3<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS3 "SDL_JOYSTICK_HIDAPI_PS3"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS3 = "SDL_JOYSTICK_HIDAPI_PS3";
		/// <summary>
		///   <para>A variable controlling whether the Sony driver (sixaxis.sys) for PS3 controllers (Sixaxis/DualShock 3) should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Sony driver (sixaxis.sys) is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Sony driver (sixaxis.sys) is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default value is 0.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER = "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for PS4 controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS4<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS4 "SDL_JOYSTICK_HIDAPI_PS4"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS4 = "SDL_JOYSTICK_HIDAPI_PS4";
		/// <summary>
		///   <para>A variable controlling the update rate of the PS4 controller over Bluetooth when using the HIDAPI driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>This defaults to 4 ms, to match the behavior over USB, and to be morefriendly to other Bluetooth devices and older Bluetooth hardware on thecomputer. It can be set to "1" (1000Hz), "2" (500Hz) and "4" (250Hz)</para>
		///   <para>This hint can be set anytime, but only takes effect when extended inputreports are enabled.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL = "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL";
		/// <summary>
		///   <para>A variable controlling whether extended input reports should be used for PS4 controllers when using the HIDAPI driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": extended reports are not enabled. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": extended reports are enabled.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Extended input reports allow rumble on Bluetooth PS4 controllers, but breakDirectInput handling for applications that don't use SDL.</para>
		///   <para>Once extended reports are enabled, they can not be disabled without powercycling the controller.</para>
		///   <para>For compatibility with applications written for versions of SDL prior tothe introduction of PS5 controller support, this value will also controlthe state of extended reports on PS5 controllers when the<see cref="SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE" />hint is not explicitly set.</para>
		///   <para>This hint can be enabled anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for PS5 controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS5<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS5 "SDL_JOYSTICK_HIDAPI_PS5"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS5 = "SDL_JOYSTICK_HIDAPI_PS5";
		/// <summary>
		///   <para>A variable controlling whether the player LEDs should be lit to indicate which player is associated with a PS5 controller.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": player LEDs are not enabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": player LEDs are enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED";
		/// <summary>
		///   <para>A variable controlling whether extended input reports should be used for PS5 controllers when using the HIDAPI driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": extended reports are not enabled. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": extended reports.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Extended input reports allow rumble on Bluetooth PS5 controllers, but breakDirectInput handling for applications that don't use SDL.</para>
		///   <para>Once extended reports are enabled, they can not be disabled without powercycling the controller.</para>
		///   <para>For compatibility with applications written for versions of SDL prior tothe introduction of PS5 controller support, this value defaults to thevalue of<see cref="SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE" />.</para>
		///   <para>This hint can be enabled anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for NVIDIA SHIELD controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SHIELD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_SHIELD "SDL_JOYSTICK_HIDAPI_SHIELD"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_SHIELD = "SDL_JOYSTICK_HIDAPI_SHIELD";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Google Stadia controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STADIA<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_STADIA "SDL_JOYSTICK_HIDAPI_STADIA"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_STADIA = "SDL_JOYSTICK_HIDAPI_STADIA";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Bluetooth Steam Controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used for Steam Controllers, which requiresBluetooth access and may prompt the user for permission on iOS andAndroid.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAM<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_STEAM "SDL_JOYSTICK_HIDAPI_STEAM"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_STEAM = "SDL_JOYSTICK_HIDAPI_STEAM";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for the Steam Deck builtin controller should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK "SDL_JOYSTICK_HIDAPI_STEAMDECK"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = "SDL_JOYSTICK_HIDAPI_STEAMDECK";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for HORI licensed Steam controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable can be set to the following values: "0" - HIDAPI driver isnot used "1" - HIDAPI driver is used</para>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" /></para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI "SDL_JOYSTICK_HIDAPI_STEAM_HORI"
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI = "SDL_JOYSTICK_HIDAPI_STEAM_HORI";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Nintendo Switch controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SWITCH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH "SDL_JOYSTICK_HIDAPI_SWITCH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_SWITCH = "SDL_JOYSTICK_HIDAPI_SWITCH";
		/// <summary>
		///   <para>A variable controlling whether the Home button LED should be turned on when a Nintendo Switch Pro controller is opened.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Home button LED is turned off.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Home button LED is turned on.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default the Home button LED state is not changed. This hint can also beset to a floating point value between 0.0 and 1.0 which controls thebrightness of the Home button LED.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED";
		/// <summary>
		///   <para>A variable controlling whether the player LEDs should be lit to indicate which player is associated with a Nintendo Switch controller.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Player LEDs are not enabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Player LEDs are enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED";
		/// <summary>
		///   <para>A variable controlling whether Nintendo Switch Joy-Con controllers will be in vertical mode when using the HIDAPI driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Left and right Joy-Con controllers will not be in vertical mode.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Left and right Joy-Con controllers will be in vertical mode.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before opening a Joy-Con controller.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for Nintendo Wii and Wii U controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This driver doesn't work with the dolphinbar, so the default is false fornow.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_WII<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_WII "SDL_JOYSTICK_HIDAPI_WII"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_WII = "SDL_JOYSTICK_HIDAPI_WII";
		/// <summary>
		///   <para>A variable controlling whether the player LEDs should be lit to indicate which player is associated with a Wii controller.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Player LEDs are not enabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Player LEDs are enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for XBox controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is "0" on Windows, otherwise the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI" /></para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_XBOX "SDL_JOYSTICK_HIDAPI_XBOX"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_XBOX = "SDL_JOYSTICK_HIDAPI_XBOX";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for XBox 360 controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI_XBOX" /></para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 "SDL_JOYSTICK_HIDAPI_XBOX_360"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = "SDL_JOYSTICK_HIDAPI_XBOX_360";
		/// <summary>
		///   <para>A variable controlling whether the player LEDs should be lit to indicate which player is associated with an Xbox 360 controller.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Player LEDs are not enabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Player LEDs are enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for XBox 360 wireless controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI_XBOX_360" /></para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS";
		/// <summary>
		///   <para>A variable controlling whether the HIDAPI driver for XBox One controllers should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": HIDAPI driver is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": HIDAPI driver is used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default is the value of<see cref="SDL_HINT_JOYSTICK_HIDAPI_XBOX" />.</para>
		///   <para>This hint should be set before enumerating controllers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE "SDL_JOYSTICK_HIDAPI_XBOX_ONE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = "SDL_JOYSTICK_HIDAPI_XBOX_ONE";
		/// <summary>
		///   <para>A variable controlling whether the Home button LED should be turned on when an Xbox One controller is opened.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Home button LED is turned off.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Home button LED is turned on.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default the Home button LED state is not changed. This hint can also beset to a floating point value between 0.0 and 1.0 which controls thebrightness of the Home button LED. The default brightness is 0.4.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED";
		/// <summary>
		///   <para>A variable controlling whether IOKit should be used for controller handling.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": IOKit is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": IOKit is used. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_IOKIT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_IOKIT "SDL_JOYSTICK_IOKIT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_IOKIT = "SDL_JOYSTICK_IOKIT";
		/// <summary>
		///   <para>A variable controlling whether to use the classic /dev/input/js* joystick interface or the newer /dev/input/event* joystick interface on Linux.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use /dev/input/event* (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Use /dev/input/js*</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_LINUX_CLASSIC<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_LINUX_CLASSIC "SDL_JOYSTICK_LINUX_CLASSIC"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_LINUX_CLASSIC = "SDL_JOYSTICK_LINUX_CLASSIC";
		/// <summary>
		///   <para>A variable controlling whether joysticks on Linux adhere to their HID-defined deadzones or return unfiltered values.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Return unfiltered joystick axis values. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Return axis values with deadzones taken into account.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before a controller is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_LINUX_DEADZONES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_LINUX_DEADZONES "SDL_JOYSTICK_LINUX_DEADZONES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_LINUX_DEADZONES = "SDL_JOYSTICK_LINUX_DEADZONES";
		/// <summary>
		///   <para>A variable controlling whether joysticks on Linux will always treat 'hat' axis inputs (ABS_HAT0X - ABS_HAT3Y) as 8-way digital hats without checking whether they may be analog.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Only map hat axis inputs to digital hat outputs if the input axesappear to actually be digital. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Always handle the input axes numbered ABS_HAT0X to ABS_HAT3Y asdigital hats.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before a controller is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS "SDL_JOYSTICK_LINUX_DIGITAL_HATS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS = "SDL_JOYSTICK_LINUX_DIGITAL_HATS";
		/// <summary>
		///   <para>A variable controlling whether digital hats on Linux will apply deadzones to their underlying input axes or use unfiltered values.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Return digital hat values based on unfiltered input axis values.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Return digital hat values with deadzones on the input axes takeninto account. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before a controller is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES "SDL_JOYSTICK_LINUX_HAT_DEADZONES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES = "SDL_JOYSTICK_LINUX_HAT_DEADZONES";
		/// <summary>
		///   <para>A variable controlling whether GCController should be used for controller handling.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": GCController is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": GCController is used. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_MFI<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_MFI "SDL_JOYSTICK_MFI"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_MFI = "SDL_JOYSTICK_MFI";
		/// <summary>
		///   <para>A variable controlling whether the RAWINPUT joystick drivers should be used for better handling XInput-capable devices.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": RAWINPUT drivers are not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": RAWINPUT drivers are used. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_RAWINPUT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_RAWINPUT "SDL_JOYSTICK_RAWINPUT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_RAWINPUT = "SDL_JOYSTICK_RAWINPUT";
		/// <summary>
		///   <para>A variable controlling whether the RAWINPUT driver should pull correlated data from XInput.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": RAWINPUT driver will only use data from raw input APIs.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": RAWINPUT driver will also pull data from XInput andWindows.Gaming.Input, providing better trigger axes, guide buttonpresses, and rumble support for Xbox controllers. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before a gamepad is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT";
		/// <summary>
		///   <para>A variable controlling whether the ROG Chakram mice should show up as joysticks.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": ROG Chakram mice do not show up as joysticks. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": ROG Chakram mice show up as joysticks.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_ROG_CHAKRAM<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_ROG_CHAKRAM "SDL_JOYSTICK_ROG_CHAKRAM"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_ROG_CHAKRAM = "SDL_JOYSTICK_ROG_CHAKRAM";
		/// <summary>
		///   <para>A variable controlling whether a separate thread should be used for handling joystick detection and raw input messages on Windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": A separate thread is not used. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": A separate thread is used for handling raw input messages.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_THREAD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_THREAD "SDL_JOYSTICK_THREAD"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_THREAD = "SDL_JOYSTICK_THREAD";
		/// <summary>
		///   <para>A variable containing a list of throttle style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_THROTTLE_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES "SDL_JOYSTICK_THROTTLE_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_THROTTLE_DEVICES = "SDL_JOYSTICK_THROTTLE_DEVICES";
		/// <summary>
		///   <para>A variable containing a list of devices that are not throttle style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override<see cref="SDL_HINT_JOYSTICK_THROTTLE_DEVICES" />and the built in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED = "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED";
		/// <summary>
		///   <para>A variable controlling whether Windows.Gaming.Input should be used for controller handling.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": WGI is not used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": WGI is used. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_WGI<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_WGI "SDL_JOYSTICK_WGI"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_WGI = "SDL_JOYSTICK_WGI";
		/// <summary>
		///   <para>A variable containing a list of wheel style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_WHEEL_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_WHEEL_DEVICES "SDL_JOYSTICK_WHEEL_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_WHEEL_DEVICES = "SDL_JOYSTICK_WHEEL_DEVICES";
		/// <summary>
		///   <para>A variable containing a list of devices that are not wheel style controllers.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override<see cref="SDL_HINT_JOYSTICK_WHEEL_DEVICES" /> and thebuilt in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED = "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED";
		/// <summary>
		///   <para>A variable containing a list of devices known to have all axes centered at zero.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint should be set before a controller is opened.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES "SDL_JOYSTICK_ZERO_CENTERED_DEVICES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES = "SDL_JOYSTICK_ZERO_CENTERED_DEVICES";
		/// <summary>
		///   <para>A variable that controls keycode representation in keyboard events.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable is a comma separated set of options for translating keycodesin events:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"none": Keycode options are cleared, this overrides other options.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"hide_numpad": The numpad keysyms will be translated into theirnon-numpad versions based on the current NumLock state. For example,<see href="https://wiki.libsdl.org/SDL3/SDLK_KP_4">SDLK_KP_4</see> would become <see href="https://wiki.libsdl.org/SDL3/SDLK_4">SDLK_4</see> if<see cref="SDL_KMOD_NUM" /> is set in the event modifiers, and<see href="https://wiki.libsdl.org/SDL3/SDLK_LEFT">SDLK_LEFT</see> if it is unset.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"french_numbers": The number row on French keyboards is inverted, sopressing the 1 key would yield the keycode <see href="https://wiki.libsdl.org/SDL3/SDLK_1">SDLK_1</see>, or '1',instead of <see href="https://wiki.libsdl.org/SDL3/SDLK_AMPERSAND">SDLK_AMPERSAND</see>, or '&amp;'</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"latin_letters": For keyboards using non-Latin letters, such as Russianor Thai, the letter keys generate keycodes as though it had an en_USlayout. e.g. pressing the key associated with<see cref="SDL_Scancode.SDL_SCANCODE_A" /> on a Russian keyboard would yield 'a'instead of a Cyrillic letter.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default value for this hint is "french_numbers,latin_letters"</para>
		///   <para>Some platforms like Emscripten only provide modified keycodes and theoptions are not used.</para>
		///   <para>These options do not affect the return value of<see cref="SDL_GetKeyFromScancode" />() or<see cref="SDL_GetScancodeFromKey" />(), they just apply to thekeycode included in key events.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_KEYCODE_OPTIONS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_KEYCODE_OPTIONS "SDL_KEYCODE_OPTIONS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_KEYCODE_OPTIONS = "SDL_KEYCODE_OPTIONS";
		/// <summary>
		///   <para>A variable that controls what KMSDRM device to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>SDL might open something like "/dev/dri/cardNN" to access KMSDRMfunctionality, where "NN" is a device index number. SDL makes a guess atthe best index to use (usually zero), but the app or user can set this hintto a number between 0 and 99 to force selection.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_KMSDRM_DEVICE_INDEX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_KMSDRM_DEVICE_INDEX "SDL_KMSDRM_DEVICE_INDEX"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_KMSDRM_DEVICE_INDEX = "SDL_KMSDRM_DEVICE_INDEX";
		/// <summary>
		///   <para>A variable that controls whether SDL requires DRM master access in order to initialize the KMSDRM video backend.</para>
		/// </summary>
		/// <remarks>
		///   <para>The DRM subsystem has a concept of a "DRM master" which is a DRM clientthat has the ability to set planes, set cursor, etc. When SDL is DRMmaster, it can draw to the screen using the SDL rendering APIs. Without DRMmaster, SDL is still able to process input and query attributes of attacheddisplays, but it cannot change display state or draw to the screendirectly.</para>
		///   <para>In some cases, it can be useful to have the KMSDRM backend even if itcannot be used for rendering. An app may want to use SDL for inputprocessing while using another rendering API (such as an MMAL overlay onRaspberry Pi) or using its own code to render to DRM overlays that SDLdoesn't support.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": SDL will allow usage of the KMSDRM backend without DRM master.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL Will require DRM master to use the KMSDRM backend. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER "SDL_KMSDRM_REQUIRE_DRM_MASTER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = "SDL_KMSDRM_REQUIRE_DRM_MASTER";
		/// <summary>
		///   <para>A variable controlling the default SDL log levels.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable is a comma separated set of category=level tokens that definethe default logging levels for SDL applications.</para>
		///   <para>The category can be a numeric category, one of "app", "error", "assert","system", "audio", "video", "render", "input", "test", or <c>*</c> for anyunspecified category.</para>
		///   <para>The level can be a numeric level, one of "verbose", "debug", "info","warn", "error", "critical", or "quiet" to disable that category.</para>
		///   <para>You can omit the category if you want to set the logging level for allcategories.</para>
		///   <para>If this hint isn't set, the default log levels are equivalent to:</para>
		///   <para>
		///     <c>app=info,assert=warn,test=verbose,*=error</c>
		///   </para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_LOGGING<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_LOGGING "SDL_LOGGING"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_LOGGING = "SDL_LOGGING";
		/// <summary>
		///   <para>A variable controlling whether to force the application to become the foreground process when launched on macOS.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The application is brought to the foreground when launched.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The application may remain in the background when launched.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint needs to be set before <see cref="SDL_Init" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MAC_BACKGROUND_APP<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MAC_BACKGROUND_APP "SDL_MAC_BACKGROUND_APP"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MAC_BACKGROUND_APP = "SDL_MAC_BACKGROUND_APP";
		/// <summary>
		///   <para>A variable that determines whether Ctrl+Click should generate a right-click event on macOS.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Ctrl+Click does not generate a right mouse button click event.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Ctrl+Click generated a right mouse button click event.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";
		/// <summary>
		///   <para>A variable controlling whether dispatching OpenGL context updates should block the dispatching thread until the main thread finishes processing on macOS.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Dispatching OpenGL context updates will block the dispatching threaduntil the main thread finishes processing. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Dispatching OpenGL context updates will allow the dispatching threadto continue execution.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Generally you want the default, but if you have OpenGL code in a backgroundthread on a Mac, and the main thread hangs because it's waiting for thatbackground thread, but that background thread is also hanging because it'swaiting for the main thread to do an update, this might fix your issue.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH "SDL_MAC_OPENGL_ASYNC_DISPATCH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = "SDL_MAC_OPENGL_ASYNC_DISPATCH";
		/// <summary>
		///   <para>Request <see cref="SDL_AppIterate" />() be called at a specific rate.</para>
		/// </summary>
		/// <remarks>
		///   <para>This number is in Hz, so "60" means try to iterate 60 times per second.</para>
		///   <para>On some platforms, or if you are using <see cref="SDL_main" /> instead of<see cref="SDL_AppIterate" />, this hint is ignored. When the hint canbe used, it is allowed to be changed at any time.</para>
		///   <para>This defaults to 60, and specifying NULL for the hint's value will restorethe default.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MAIN_CALLBACK_RATE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MAIN_CALLBACK_RATE "SDL_MAIN_CALLBACK_RATE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MAIN_CALLBACK_RATE = "SDL_MAIN_CALLBACK_RATE";
		/// <summary>
		///   <para>A variable controlling whether the mouse is captured while mouse buttons are pressed.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The mouse is not captured while mouse buttons are pressed.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The mouse is captured while mouse buttons are pressed.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default the mouse is captured while mouse buttons are pressed so if themouse is dragged outside the window, the application continues to receivemouse events until the button is released.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_AUTO_CAPTURE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_AUTO_CAPTURE "SDL_MOUSE_AUTO_CAPTURE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_AUTO_CAPTURE = "SDL_MOUSE_AUTO_CAPTURE";
		/// <summary>
		///   <para>A variable setting the double click radius, in pixels.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS "SDL_MOUSE_DOUBLE_CLICK_RADIUS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = "SDL_MOUSE_DOUBLE_CLICK_RADIUS";
		/// <summary>
		///   <para>A variable setting the double click time, in milliseconds.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_DOUBLE_CLICK_TIME<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME "SDL_MOUSE_DOUBLE_CLICK_TIME"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = "SDL_MOUSE_DOUBLE_CLICK_TIME";
		/// <summary>
		///   <para>A variable controlling whether warping a hidden mouse cursor will activate relative mouse mode.</para>
		/// </summary>
		/// <remarks>
		///   <para>When this hint is set, the mouse cursor is hidden, and multiple warps tothe window center occur within a short time period, SDL will emulate mousewarps using relative mouse mode. This can provide smoother and morereliable mouse motion for some older games, which continuously calculatethe distance travelled by the mouse pointer and warp it back to the centerof the window, rather than using relative mouse motion.</para>
		///   <para>Note that relative mouse mode may have different mouse accelerationbehavior than pointer warps.</para>
		///   <para>If your application needs to repeatedly warp the hidden mouse cursor at ahigh-frequency for other purposes, it should disable this hint.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Attempts to warp the mouse will always be made.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Some mouse warps will be emulated by forcing relative mouse mode.(default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>If not set, this is automatically enabled unless an application usesrelative mouse mode directly.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE = "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE";
		/// <summary>
		///   <para>Allow mouse click events when clicking to focus an SDL window.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Ignore mouse clicks that activate a window. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Generate events for mouse clicks that activate a window.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH "SDL_MOUSE_FOCUS_CLICKTHROUGH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = "SDL_MOUSE_FOCUS_CLICKTHROUGH";
		/// <summary>
		///   <para>A variable setting the speed scale for mouse motion, in floating point, when the mouse is not in relative mode.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_NORMAL_SPEED_SCALE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE "SDL_MOUSE_NORMAL_SPEED_SCALE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = "SDL_MOUSE_NORMAL_SPEED_SCALE";
		/// <summary>
		///   <para>A variable controlling whether relative mouse mode constrains the mouse to the center of the window.</para>
		/// </summary>
		/// <remarks>
		///   <para>Constraining to the center of the window works better for FPS games andwhen the application is running over RDP. Constraining to the whole windowworks better for 2D games and increases the chance that the mouse will bein the correct position when using high DPI mice.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Relative mouse mode constrains the mouse to the window.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Relative mouse mode constrains the mouse to the center of thewindow. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_MODE_CENTER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER "SDL_MOUSE_RELATIVE_MODE_CENTER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = "SDL_MOUSE_RELATIVE_MODE_CENTER";
		/// <summary>
		///   <para>A variable controlling whether relative mouse mode is implemented using mouse warping.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Relative mouse mode uses raw input. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Relative mouse mode uses mouse warping.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime relative mode is not currently enabled.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_MODE_WARP<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_MODE_WARP "SDL_MOUSE_RELATIVE_MODE_WARP"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP";
		/// <summary>
		///   <para>A variable setting the scale for mouse motion, in floating point, when the mouse is in relative mode.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE "SDL_MOUSE_RELATIVE_SPEED_SCALE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = "SDL_MOUSE_RELATIVE_SPEED_SCALE";
		/// <summary>
		///   <para>A variable controlling whether the system mouse acceleration curve is used for relative mouse motion.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Relative mouse motion will be unscaled. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Relative mouse motion will be scaled using the system mouseacceleration curve.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>If<see cref="SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE" />is set, that will override the system speed scale.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE";
		/// <summary>
		///   <para>A variable controlling whether a motion event should be generated for mouse warping in relative mode.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Warping the mouse will not generate a motion event in relative mode</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Warping the mouse will generate a motion event in relative mode</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default warping the mouse will not generate motion events in relativemode. This avoids the application having to filter out large relativemotion due to warping.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_WARP_MOTION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION "SDL_MOUSE_RELATIVE_WARP_MOTION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = "SDL_MOUSE_RELATIVE_WARP_MOTION";
		/// <summary>
		///   <para>A variable controlling whether the hardware cursor stays visible when relative mode is active.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable can be set to the following values: "0" - The cursor will behidden while relative mode is active (default) "1" - The cursor will remainvisible while relative mode is active</para>
		///   <para>Note that for systems without raw hardware inputs, relative mode isimplemented using warping, so the hardware cursor will visibly warp betweenframes if this is enabled on those systems.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE = "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE";
		/// <summary>
		///   <para>Controls how often SDL issues cursor confinement commands to the operating system while relative mode is active, in case the desired confinement state became out-of-sync due to interference from other running programs.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be integers representing milliseconds between eachrefresh. A value of zero means SDL will not automatically refresh theconfinement. The default value varies depending on the operating system,this variable might not have any effects on inapplicable platforms such asthose without a cursor.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL "SDL_MOUSE_RELATIVE_CLIP_INTERVAL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL = "SDL_MOUSE_RELATIVE_CLIP_INTERVAL";
		/// <summary>
		///   <para>A variable controlling whether mouse events should generate synthetic touch events.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Mouse events will not generate touch events. (default for desktopplatforms)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Mouse events will generate touch events. (default for mobileplatforms, such as Android and iOS)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MOUSE_TOUCH_EVENTS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MOUSE_TOUCH_EVENTS "SDL_MOUSE_TOUCH_EVENTS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MOUSE_TOUCH_EVENTS = "SDL_MOUSE_TOUCH_EVENTS";
		/// <summary>
		///   <para>A variable controlling whether the keyboard should be muted on the console.</para>
		/// </summary>
		/// <remarks>
		///   <para>Normally the keyboard is muted while SDL applications are running so thatkeyboard input doesn't show up as key strokes on the console. This hintallows you to turn that off for debugging purposes.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Allow keystrokes to go through to the console.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Mute keyboard input so it doesn't show up on the console. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_MUTE_CONSOLE_KEYBOARD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_MUTE_CONSOLE_KEYBOARD "SDL_MUTE_CONSOLE_KEYBOARD"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_MUTE_CONSOLE_KEYBOARD = "SDL_MUTE_CONSOLE_KEYBOARD";
		/// <summary>
		///   <para>Tell SDL not to catch the SIGINT or SIGTERM signals on POSIX platforms.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": SDL will install a SIGINT and SIGTERM handler, and when it catches asignal, convert it into an <see cref="SDL_EventType.SDL_EVENT_QUIT" /> event.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will not install a signal handler at all.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_NO_SIGNAL_HANDLERS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_NO_SIGNAL_HANDLERS "SDL_NO_SIGNAL_HANDLERS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_NO_SIGNAL_HANDLERS = "SDL_NO_SIGNAL_HANDLERS";
		/// <summary>
		///   <para>Specify the OpenGL library to load.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint should be set before creating an OpenGL window or creating anOpenGL context.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_OPENGL_LIBRARY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_OPENGL_LIBRARY "SDL_OPENGL_LIBRARY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_OPENGL_LIBRARY = "SDL_OPENGL_LIBRARY";
		/// <summary>
		///   <para>A variable controlling what driver to use for OpenGL ES contexts.</para>
		/// </summary>
		/// <remarks>
		///   <para>On some platforms, currently Windows and X11, OpenGL drivers may supportcreating contexts with an OpenGL ES profile. By default SDL uses theseprofiles, when available, otherwise it attempts to load an OpenGL ESlibrary, e.g. that provided by the ANGLE project. This variable controlswhether SDL follows this default behaviour or will always load an OpenGL ESlibrary.</para>
		///   <para>Circumstances where this is useful include - Testing an app with aparticular OpenGL ES implementation, e.g ANGLE, or emulator, e.g. thosefrom ARM, Imagination or Qualcomm. - Resolving OpenGL ES function addressesat link time by linking with the OpenGL ES library instead of querying themat run time with <see cref="SDL_GL_GetProcAddress" />().</para>
		///   <para>Caution: for an application to work with the default behaviour acrossdifferent OpenGL drivers it must query the OpenGL ES function addresses atrun time using <see cref="SDL_GL_GetProcAddress" />().</para>
		///   <para>This variable is ignored on most platforms because OpenGL ES is native ornot supported.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use ES profile of OpenGL, if available. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Load OpenGL ES library using the default library names.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_OPENGL_ES_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_OPENGL_ES_DRIVER "SDL_OPENGL_ES_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_OPENGL_ES_DRIVER = "SDL_OPENGL_ES_DRIVER";
		/// <summary>
		///   <para>A variable controlling which orientations are allowed on iOS/Android.</para>
		/// </summary>
		/// <remarks>
		///   <para>In some circumstances it is necessary to be able to explicitly controlwhich UI orientations are allowed.</para>
		///   <para>This variable is a space delimited list of the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"LandscapeLeft"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"LandscapeRight"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"Portrait"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"PortraitUpsideDown"</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ORIENTATIONS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ORIENTATIONS "SDL_ORIENTATIONS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ORIENTATIONS = "SDL_ORIENTATIONS";
		/// <summary>
		///   <para>A variable controlling the use of a sentinel event when polling the event queue.</para>
		/// </summary>
		/// <remarks>
		///   <para>When polling for events, <see cref="SDL_PumpEvents" /> is used to gathernew events from devices. If a device keeps producing new events betweencalls to <see cref="SDL_PumpEvents" />, a poll loop will become stuckuntil the new events stop. This is most noticeable when moving a highfrequency mouse.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable poll sentinels.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable poll sentinels. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_POLL_SENTINEL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_POLL_SENTINEL "SDL_POLL_SENTINEL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_POLL_SENTINEL = "SDL_POLL_SENTINEL";
		/// <summary>
		///   <para>Override for <see cref="SDL_GetPreferredLocales" />().</para>
		/// </summary>
		/// <remarks>
		///   <para>If set, this will be favored over anything the OS might report for theuser's preferred locales. Changing this hint at runtime will not generate a<see cref="SDL_EventType.SDL_EVENT_LOCALE_CHANGED" /> event (but if you canchange the hint, you can push your own event, if you want).</para>
		///   <para>The format of this hint is a comma-separated list of language and locale,combined with an underscore, as is a common format: "en_GB". Locale isoptional: "en". So you might have a list like this: "en_GB,jp,es_PT"</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_PREFERRED_LOCALES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_PREFERRED_LOCALES "SDL_PREFERRED_LOCALES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_PREFERRED_LOCALES = "SDL_PREFERRED_LOCALES";
		/// <summary>
		///   <para>A variable that decides whether to send <see cref="SDL_EventType.SDL_EVENT_QUIT" /> when closing the last window.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": SDL will not send an <see cref="SDL_EventType.SDL_EVENT_QUIT" /> event when thelast window is requesting to close. Note that in this case, there arestill other legitimate reasons one might get an<see cref="SDL_EventType.SDL_EVENT_QUIT" /> event: choosing "Quit" from the macOSmenu bar, sending a SIGINT (ctrl-c) on Unix, etc.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will send a quit event when the last window is requesting toclose. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE "SDL_QUIT_ON_LAST_WINDOW_CLOSE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = "SDL_QUIT_ON_LAST_WINDOW_CLOSE";
		/// <summary>
		///   <para>A variable controlling whether the Direct3D device is initialized for thread-safe operations.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Thread-safety is not enabled. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Thread-safety is enabled.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_DIRECT3D_THREADSAFE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE "SDL_RENDER_DIRECT3D_THREADSAFE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE";
		/// <summary>
		///   <para>A variable controlling whether to enable Direct3D 11+'s Debug Layer.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable does not have any effect on the Direct3D 9 based renderer.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable Debug Layer use. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable Debug Layer use.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_DIRECT3D11_DEBUG<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_DIRECT3D11_DEBUG "SDL_RENDER_DIRECT3D11_DEBUG"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_RENDER_DIRECT3D11_DEBUG";
		/// <summary>
		///   <para>A variable controlling whether to enable Vulkan Validation Layers.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable Validation Layer use</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable Validation Layer use</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>By default, SDL does not use Vulkan Validation Layers.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_VULKAN_DEBUG<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_VULKAN_DEBUG "SDL_RENDER_VULKAN_DEBUG"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_VULKAN_DEBUG = "SDL_RENDER_VULKAN_DEBUG";
		/// <summary>
		///   <para>A variable controlling whether to create the GPU device in debug mode.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable debug mode use (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable debug mode use</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_GPU_DEBUG<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_GPU_DEBUG "SDL_RENDER_GPU_DEBUG"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_GPU_DEBUG = "SDL_RENDER_GPU_DEBUG";
		/// <summary>
		///   <para>A variable controlling whether to prefer a low-power GPU on multi-GPU systems.</para>
		/// </summary>
		/// <remarks>
		///   <para>This variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Prefer high-performance GPU (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Prefer low-power GPU</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_GPU_LOW_POWER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_GPU_LOW_POWER "SDL_RENDER_GPU_LOW_POWER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_GPU_LOW_POWER = "SDL_RENDER_GPU_LOW_POWER";
		/// <summary>
		///   <para>A variable specifying which render driver to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>If the application doesn't pick a specific renderer to use, this variablespecifies the name of the preferred renderer. If the preferred renderercan't be initialized, creating a renderer will fail.</para>
		///   <para>This variable is case insensitive and can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"direct3d"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"direct3d11"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"direct3d12"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"opengl"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"opengles2"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"opengles"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"metal"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"vulkan"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"software"</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The default varies by platform, but it's the first one in the list that isavailable on the current platform.</para>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_DRIVER "SDL_RENDER_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER";
		/// <summary>
		///   <para>A variable controlling how the 2D render API renders lines.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use the default line drawing method (Bresenham's line algorithm)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Use the driver point API using Bresenham's line algorithm (correct,draws many points)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"2": Use the driver line API (occasionally misses line endpoints based onhardware driver quirks</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"3": Use the driver geometry API (correct, draws thicker diagonal lines)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_LINE_METHOD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_LINE_METHOD "SDL_RENDER_LINE_METHOD"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_LINE_METHOD = "SDL_RENDER_LINE_METHOD";
		/// <summary>
		///   <para>A variable controlling whether the Metal render driver select low power device over default one.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use the preferred OS device. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Select a low power device.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE";
		/// <summary>
		///   <para>A variable controlling whether updates to the SDL screen surface should be synchronized with the vertical refresh, to avoid tearing.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint overrides the application preference when creating a renderer.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable vsync. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable vsync.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a renderer.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RENDER_VSYNC<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RENDER_VSYNC "SDL_RENDER_VSYNC"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC";
		/// <summary>
		///   <para>A variable to control whether the return key on the soft keyboard should hide the soft keyboard on Android and iOS.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint sets the default value of<see cref="SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN" />.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The return key will be handled as a key event. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The return key will hide the keyboard.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RETURN_KEY_HIDES_IME<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RETURN_KEY_HIDES_IME "SDL_RETURN_KEY_HIDES_IME"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RETURN_KEY_HIDES_IME = "SDL_RETURN_KEY_HIDES_IME";
		/// <summary>
		///   <para>A variable containing a list of ROG gamepad capable mice.</para>
		/// </summary>
		/// <remarks>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <seealso cref="SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ROG_GAMEPAD_MICE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ROG_GAMEPAD_MICE "SDL_ROG_GAMEPAD_MICE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ROG_GAMEPAD_MICE = "SDL_ROG_GAMEPAD_MICE";
		/// <summary>
		///   <para>A variable containing a list of devices that are not ROG gamepad capable mice.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will override <see cref="SDL_HINT_ROG_GAMEPAD_MICE" />and the built in device list.</para>
		///   <para>The format of the string is a comma separated list of USB VID/PID pairs inhexadecimal form, e.g.</para>
		///   <para>
		///     <c>0xAAAA/0xBBBB,0xCCCC/0xDDDD</c>
		///   </para>
		///   <para>The variable can also take the form of "@file", in which case the namedfile will be loaded and interpreted as the value of the variable.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED "SDL_ROG_GAMEPAD_MICE_EXCLUDED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = "SDL_ROG_GAMEPAD_MICE_EXCLUDED";
		/// <summary>
		///   <para>A variable controlling which Dispmanx layer to use on a Raspberry PI.</para>
		/// </summary>
		/// <remarks>
		///   <para>Also known as Z-order. The variable can take a negative or positive value.The default is 10000.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_RPI_VIDEO_LAYER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_RPI_VIDEO_LAYER "SDL_RPI_VIDEO_LAYER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_RPI_VIDEO_LAYER = "SDL_RPI_VIDEO_LAYER";
		/// <summary>
		///   <para>Specify an "activity name" for screensaver inhibition.</para>
		/// </summary>
		/// <remarks>
		///   <para>Some platforms, notably Linux desktops, list the applications which areinhibiting the screensaver or other power-saving features.</para>
		///   <para>This hint lets you specify the "activity name" sent to the OS when<see cref="SDL_DisableScreenSaver" />() is used (or thescreensaver is automatically disabled). The contents of this hint are usedwhen the screensaver is disabled. You should use a string that describeswhat your program is doing (and, therefore, why the screensaver isdisabled). For example, "Playing a game" or "Watching a video".</para>
		///   <para>Setting this to "" or leaving it unset will have SDL use a reasonabledefault: "Playing a game" or something similar.</para>
		///   <para>This hint should be set before calling<see cref="SDL_DisableScreenSaver" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME";
		/// <summary>
		///   <para>A variable controlling whether SDL calls dbus_shutdown() on quit.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is useful as a debug tool to validate memory leaks, but shouldn't everbe set in production applications, as other libraries used by theapplication might use dbus under the hood and this can cause crashes ifthey continue after <see cref="SDL_Quit" />().</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": SDL will not call dbus_shutdown() on quit. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will call dbus_shutdown() on quit.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_SHUTDOWN_DBUS_ON_QUIT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT "SDL_SHUTDOWN_DBUS_ON_QUIT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = "SDL_SHUTDOWN_DBUS_ON_QUIT";
		/// <summary>
		///   <para>A variable that specifies a backend to use for title storage.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available storage backends in a reasonableorder until it finds one that can work, but this hint allows the app oruser to force a specific target, such as "pc" if, say, you are on Steam butwant to avoid SteamRemoteStorage for title data.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_STORAGE_TITLE_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_STORAGE_TITLE_DRIVER "SDL_STORAGE_TITLE_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_STORAGE_TITLE_DRIVER = "SDL_STORAGE_TITLE_DRIVER";
		/// <summary>
		///   <para>A variable that specifies a backend to use for user storage.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available storage backends in a reasonableorder until it finds one that can work, but this hint allows the app oruser to force a specific target, such as "pc" if, say, you are on Steam butwant to avoid SteamRemoteStorage for user data.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_STORAGE_USER_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_STORAGE_USER_DRIVER "SDL_STORAGE_USER_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_STORAGE_USER_DRIVER = "SDL_STORAGE_USER_DRIVER";
		/// <summary>
		///   <para>Specifies whether <see cref="SDL_ThreadPriority.SDL_THREAD_PRIORITY_TIME_CRITICAL" /> should be treated as realtime.</para>
		/// </summary>
		/// <remarks>
		///   <para>On some platforms, like Linux, a realtime priority thread may be subject torestrictions that require special handling by the application. This hintexists to let SDL know that the app is prepared to handle saidrestrictions.</para>
		///   <para>On Linux, SDL will apply the following configuration to any thread thatbecomes realtime:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>The SCHED_RESET_ON_FORK bit will be set on the scheduling policy,</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>An RLIMIT_RTTIME budget will be configured to the rtkit specified limit.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Exceeding this limit will result in the kernel sending SIGKILL to theapp, refer to the man pages for more information.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": default platform specific behaviour</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Force<see cref="SDL_ThreadPriority.SDL_THREAD_PRIORITY_TIME_CRITICAL" /> toa realtime scheduling policy</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before calling<see cref="SDL_SetCurrentThreadPriority" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL";
		/// <summary>
		///   <para>A string specifying additional information to use with <see cref="SDL_SetCurrentThreadPriority" />.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default <see cref="SDL_SetCurrentThreadPriority" />will make appropriate system changes in order to apply a thread priority.For example on systems using pthreads the scheduler policy is changedautomatically to a policy that works well with a given priority. Code whichhas specific requirements can override SDL's default behavior with thishint.</para>
		///   <para>pthread hint values are "current", "other", "fifo" and "rr". Currently noother platform hint values are defined but may be in the future.</para>
		///   <para>On Linux, the kernel may send SIGKILL to realtime tasks which exceed thedistro configured execution budget for rtkit. This budget can be queriedthrough RLIMIT_RTTIME after calling<see cref="SDL_SetCurrentThreadPriority" />().</para>
		///   <para>This hint should be set before calling<see cref="SDL_SetCurrentThreadPriority" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_THREAD_PRIORITY_POLICY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_THREAD_PRIORITY_POLICY "SDL_THREAD_PRIORITY_POLICY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_THREAD_PRIORITY_POLICY = "SDL_THREAD_PRIORITY_POLICY";
		/// <summary>
		///   <para>A variable that controls the timer resolution, in milliseconds.</para>
		/// </summary>
		/// <remarks>
		///   <para>The higher resolution the timer, the more frequently the CPU services timerinterrupts, and the more precise delays are, but this takes up power andCPU time. This hint is only used on Windows.</para>
		///   <para>See this blog post for more information:http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/</para>
		///   <para>The default value is "1".</para>
		///   <para>If this variable is set to "0", the system timer resolution is not set.</para>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_TIMER_RESOLUTION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_TIMER_RESOLUTION "SDL_TIMER_RESOLUTION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION";
		/// <summary>
		///   <para>A variable controlling whether touch events should generate synthetic mouse events.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Touch events will not generate mouse events.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Touch events will generate mouse events. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_TOUCH_MOUSE_EVENTS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_TOUCH_MOUSE_EVENTS "SDL_TOUCH_MOUSE_EVENTS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_TOUCH_MOUSE_EVENTS = "SDL_TOUCH_MOUSE_EVENTS";
		/// <summary>
		///   <para>A variable controlling whether trackpads should be treated as touch devices.</para>
		/// </summary>
		/// <remarks>
		///   <para>On macOS (and possibly other platforms in the future), SDL will reporttouches on a trackpad as mouse input, which is generally what users expectfrom this device; however, these are often actually full multitouch-capabletouch devices, so it might be preferable to some apps to treat them assuch.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Trackpad will send mouse events. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Trackpad will send touch events.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_TRACKPAD_IS_TOUCH_ONLY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY "SDL_TRACKPAD_IS_TOUCH_ONLY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = "SDL_TRACKPAD_IS_TOUCH_ONLY";
		/// <summary>
		///   <para>A variable controlling whether the Android / tvOS remotes should be listed as joystick devices, instead of sending keyboard events.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Remotes send enter/escape/arrow key events.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Remotes are available as 2 axis, 2 button joysticks. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_TV_REMOTE_AS_JOYSTICK<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_TV_REMOTE_AS_JOYSTICK "SDL_TV_REMOTE_AS_JOYSTICK"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_TV_REMOTE_AS_JOYSTICK = "SDL_TV_REMOTE_AS_JOYSTICK";
		/// <summary>
		///   <para>A variable controlling whether the screensaver is enabled.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable screensaver. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable screensaver.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_ALLOW_SCREENSAVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER "SDL_VIDEO_ALLOW_SCREENSAVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER";
		/// <summary>
		///   <para>Tell the video driver that we only want a double buffer.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, most lowlevel 2D APIs will use a triple buffer scheme thatwastes no CPU time on waiting for vsync after issuing a flip, butintroduces a frame of latency. On the other hand, using a double bufferscheme instead is recommended for cases where low latency is an importantfactor because we save a whole frame of latency.</para>
		///   <para>We do so by waiting for vsync immediately after issuing a flip, usuallyjust after eglSwapBuffers call in the backend's *_SwapWindow function.</para>
		///   <para>This hint is currently supported on the following drivers:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>Raspberry Pi (raspberrypi)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Wayland (wayland)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_DOUBLE_BUFFER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_DOUBLE_BUFFER "SDL_VIDEO_DOUBLE_BUFFER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_DOUBLE_BUFFER = "SDL_VIDEO_DOUBLE_BUFFER";
		/// <summary>
		///   <para>A variable that specifies a video backend to use.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default, SDL will try all available video backends in a reasonable orderuntil it finds one that can work, but this hint allows the app or user toforce a specific target, such as "x11" if, say, you are on Wayland but wantto try talking to the X server instead.</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_DRIVER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_DRIVER "SDL_VIDEO_DRIVER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_DRIVER = "SDL_VIDEO_DRIVER";
		/// <summary>
		///   <para>A variable controlling whether the dummy video driver saves output frames.</para>
		/// </summary>
		/// <remarks>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Video frames are not saved to disk. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Video frames are saved to files in the format"<see cref="SDL_windowX" />-Y.bmp", where X is the window ID, and Y isthe frame number.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES "SDL_VIDEO_DUMMY_SAVE_FRAMES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES = "SDL_VIDEO_DUMMY_SAVE_FRAMES";
		/// <summary>
		///   <para>If eglGetPlatformDisplay fails, fall back to calling eglGetDisplay.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to one of the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Do not fall back to eglGetDisplay.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Fall back to eglGetDisplay if eglGetPlatformDisplay fails. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK = "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK";
		/// <summary>
		///   <para>A variable controlling whether the OpenGL context should be created with EGL.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use platform-specific GL context creation API (GLX, WGL, CGL, etc).(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Use EGL</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_FORCE_EGL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_FORCE_EGL "SDL_VIDEO_FORCE_EGL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_FORCE_EGL = "SDL_VIDEO_FORCE_EGL";
		/// <summary>
		///   <para>A variable that specifies the policy for fullscreen Spaces on macOS.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable Spaces support (FULLSCREEN_DESKTOP won't use them and<see cref="SDL_WindowFlags.SDL_WINDOW_RESIZABLE" /> windows won't offer the"fullscreen" button on their titlebars).</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable Spaces support (FULLSCREEN_DESKTOP will use them and<see cref="SDL_WindowFlags.SDL_WINDOW_RESIZABLE" /> windows will offer the"fullscreen" button on their titlebars). (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES "SDL_VIDEO_MAC_FULLSCREEN_SPACES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";
		/// <summary>
		///   <para>A variable controlling whether fullscreen windows are minimized when they lose focus.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Fullscreen windows will not be minimized when they lose focus.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Fullscreen windows are minimized when they lose focus.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";
		/// <summary>
		///   <para>A variable controlling whether the offscreen video driver saves output frames.</para>
		/// </summary>
		/// <remarks>
		///   <para>This only saves frames that are generated using software rendering, notaccelerated OpenGL rendering.</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Video frames are not saved to disk. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Video frames are saved to files in the format"<see cref="SDL_windowX" />-Y.bmp", where X is the window ID, and Y isthe frame number.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES = "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES";
		/// <summary>
		///   <para>A variable controlling whether all window operations will block until complete.</para>
		/// </summary>
		/// <remarks>
		///   <para>Window systems that run asynchronously may not have the results of windowoperations that resize or move the window applied immediately upon thereturn of the requesting function. Setting this hint will cause suchoperations to block after every call until the pending operation hascompleted. Setting this to '1' is the equivalent of calling<see cref="SDL_SyncWindow" />() after every function call.</para>
		///   <para>Be aware that amount of time spent blocking while waiting for windowoperations to complete can be quite lengthy, as animations may have tocomplete, which can take upwards of multiple seconds in some cases.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Window operations are non-blocking. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Window operations will block until completed.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS "SDL_VIDEO_SYNC_WINDOW_OPERATIONS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS = "SDL_VIDEO_SYNC_WINDOW_OPERATIONS";
		/// <summary>
		///   <para>A variable controlling whether the libdecor Wayland backend is allowed to be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>libdecor is used over xdg-shell when xdg-decoration protocol isunavailable.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": libdecor use is disabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": libdecor use is enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR";
		/// <summary>
		///   <para>A variable controlling whether video mode emulation is enabled under Wayland.</para>
		/// </summary>
		/// <remarks>
		///   <para>When this hint is set, a standard set of emulated CVT video modes will beexposed for use by the application. If it is disabled, the only modesexposed will be the logical desktop size and, in the case of a scaleddesktop, the native display resolution.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Video mode emulation is disabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Video mode emulation is enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION "SDL_VIDEO_WAYLAND_MODE_EMULATION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = "SDL_VIDEO_WAYLAND_MODE_EMULATION";
		/// <summary>
		///   <para>A variable controlling how modes with a non-native aspect ratio are displayed under Wayland.</para>
		/// </summary>
		/// <remarks>
		///   <para>When this hint is set, the requested scaling will be used when displayingfullscreen video modes that don't match the display's native aspect ratio.This is contingent on compositor viewport support.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"aspect" - Video modes will be displayed scaled, in their proper aspectratio, with black bars.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"stretch" - Video modes will be scaled to fill the entire display.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"none" - Video modes will be displayed as 1:1 with no scaling.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_WAYLAND_MODE_SCALING<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_WAYLAND_MODE_SCALING "SDL_VIDEO_WAYLAND_MODE_SCALING"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = "SDL_VIDEO_WAYLAND_MODE_SCALING";
		/// <summary>
		///   <para>A variable controlling whether the libdecor Wayland backend is preferred over native decorations.</para>
		/// </summary>
		/// <remarks>
		///   <para>When this hint is set, libdecor will be used to provide window decorations,even if xdg-decoration is available. (Note that, by default, libdecor willuse xdg-decoration itself if available).</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": libdecor is enabled only if server-side decorations are unavailable.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": libdecor is always enabled if available.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR";
		/// <summary>
		///   <para>A variable forcing non-DPI-aware Wayland windows to output at 1:1 scaling.</para>
		/// </summary>
		/// <remarks>
		///   <para>This must be set before initializing the video subsystem.</para>
		///   <para>When this hint is set, Wayland windows that are not flagged as beingDPI-aware will be output with scaling designed to force 1:1 pixel mapping.</para>
		///   <para>This is intended to allow legacy applications to be displayed withoutdesktop scaling being applied, and has issues with certain displayconfigurations, as this forces the window to behave in a way that Waylanddesktops were not designed to accommodate:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>Rounding errors can result with odd window sizes and/or desktop scales,which can cause the window contents to appear slightly blurry.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The window may be unusably small on scaled desktops.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The window may jump in size when moving between displays of differentscale factors.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Displays may appear to overlap when using a multi-monitor setup withscaling enabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>Possible loss of cursor precision due to the logical size of the windowbeing reduced.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>New applications should be designed with proper DPI awareness handlinginstead of enabling this.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Windows will be scaled normally.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Windows will be forced to scale to achieve 1:1 output.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY = "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY";
		/// <summary>
		///   <para>A variable specifying which shader compiler to preload when using the Chrome ANGLE binaries.</para>
		/// </summary>
		/// <remarks>
		///   <para>SDL has EGL and OpenGL ES2 support on Windows via the ANGLE project. It canuse two different sets of binaries, those compiled by the user from sourceor those provided by the Chrome browser. In the later case, these binariesrequire that SDL loads a DLL providing the shader compiler.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"d3dcompiler_46.dll" - best for Vista or later. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"d3dcompiler_43.dll" - for XP support.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"none" - do not load any library, useful if you compiled ANGLE fromsource and included the compiler in your binaries.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_WIN_D3DCOMPILER<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_WIN_D3DCOMPILER "SDL_VIDEO_WIN_D3DCOMPILER"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER";
		/// <summary>
		///   <para>A variable controlling whether the X11 _NET_WM_BYPASS_COMPOSITOR hint should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable _NET_WM_BYPASS_COMPOSITOR.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable _NET_WM_BYPASS_COMPOSITOR. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR";
		/// <summary>
		///   <para>A variable controlling whether the X11 _NET_WM_PING protocol should be supported.</para>
		/// </summary>
		/// <remarks>
		///   <para>By default SDL will use _NET_WM_PING, but for applications that know theywill not always be able to respond to ping requests in a timely manner theycan turn it off to avoid the window manager thinking the app is hung.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable _NET_WM_PING.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable _NET_WM_PING. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_NET_WM_PING<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_NET_WM_PING "SDL_VIDEO_X11_NET_WM_PING"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_NET_WM_PING = "SDL_VIDEO_X11_NET_WM_PING";
		/// <summary>
		///   <para>A variable controlling whether SDL uses DirectColor visuals.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable DirectColor visuals.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable DirectColor visuals. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before initializing the video subsystem.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_NODIRECTCOLOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_NODIRECTCOLOR "SDL_VIDEO_X11_NODIRECTCOLOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_NODIRECTCOLOR = "SDL_VIDEO_X11_NODIRECTCOLOR";
		/// <summary>
		///   <para>A variable forcing the content scaling factor for X11 displays.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to a floating point value in the range 1.0-10.0f</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_SCALING_FACTOR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_SCALING_FACTOR "SDL_VIDEO_X11_SCALING_FACTOR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_SCALING_FACTOR = "SDL_VIDEO_X11_SCALING_FACTOR";
		/// <summary>
		///   <para>A variable forcing the visual ID used for X11 display modes.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint should be set before initializing the video subsystem.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_VISUALID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_VISUALID "SDL_VIDEO_X11_VISUALID"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_VISUALID = "SDL_VIDEO_X11_VISUALID";
		/// <summary>
		///   <para>A variable forcing the visual ID chosen for new X11 windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_WINDOW_VISUALID<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_WINDOW_VISUALID "SDL_VIDEO_X11_WINDOW_VISUALID"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_WINDOW_VISUALID = "SDL_VIDEO_X11_WINDOW_VISUALID";
		/// <summary>
		///   <para>A variable controlling whether the X11 XRandR extension should be used.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable XRandR.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable XRandR. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VIDEO_X11_XRANDR<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VIDEO_X11_XRANDR "SDL_VIDEO_X11_XRANDR"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR";
		/// <summary>
		///   <para>A variable controlling whether touch should be enabled on the back panel of the PlayStation Vita.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable touch on the back panel.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable touch on the back panel. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_ENABLE_BACK_TOUCH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_ENABLE_BACK_TOUCH "SDL_VITA_ENABLE_BACK_TOUCH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_ENABLE_BACK_TOUCH = "SDL_VITA_ENABLE_BACK_TOUCH";
		/// <summary>
		///   <para>A variable controlling whether touch should be enabled on the front panel of the PlayStation Vita.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Disable touch on the front panel.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Enable touch on the front panel. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_ENABLE_FRONT_TOUCH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_ENABLE_FRONT_TOUCH "SDL_VITA_ENABLE_FRONT_TOUCH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_ENABLE_FRONT_TOUCH = "SDL_VITA_ENABLE_FRONT_TOUCH";
		/// <summary>
		///   <para>A variable controlling the module path on the PlayStation Vita.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint defaults to "app0:module"</para>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_MODULE_PATH<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_MODULE_PATH "SDL_VITA_MODULE_PATH"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_MODULE_PATH = "SDL_VITA_MODULE_PATH";
		/// <summary>
		///   <para>A variable controlling whether to perform PVR initialization on the PlayStation Vita.</para>
		/// </summary>
		/// <remarks>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Skip PVR initialization.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Perform the normal PVR initialization. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_PVR_INIT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_PVR_INIT "SDL_VITA_PVR_INIT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_PVR_INIT = "SDL_VITA_PVR_INIT";
		/// <summary>
		///   <para>A variable overriding the resolution reported on the PlayStation Vita.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"544": 544p (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"720": 725p for PSTV</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1080": 1088i for PSTV</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_RESOLUTION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_RESOLUTION "SDL_VITA_RESOLUTION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_RESOLUTION = "SDL_VITA_RESOLUTION";
		/// <summary>
		///   <para>A variable controlling whether OpenGL should be used instead of OpenGL ES on the PlayStation Vita.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use OpenGL ES. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Use OpenGL.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_PVR_OPENGL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_PVR_OPENGL "SDL_VITA_PVR_OPENGL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_PVR_OPENGL = "SDL_VITA_PVR_OPENGL";
		/// <summary>
		///   <para>A variable controlling which touchpad should generate synthetic mouse events.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Only front touchpad should generate mouse events. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Only back touchpad should generate mouse events.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"2": Both touchpads should generate mouse events.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VITA_TOUCH_MOUSE_DEVICE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE "SDL_VITA_TOUCH_MOUSE_DEVICE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = "SDL_VITA_TOUCH_MOUSE_DEVICE";
		/// <summary>
		///   <para>A variable overriding the display index used in <see cref="SDL_Vulkan_CreateSurface" />()</para>
		/// </summary>
		/// <remarks>
		///   <para>The display index starts at 0, which is the default.</para>
		///   <para>This hint should be set before calling<see cref="SDL_Vulkan_CreateSurface" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VULKAN_DISPLAY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VULKAN_DISPLAY "SDL_VULKAN_DISPLAY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VULKAN_DISPLAY = "SDL_VULKAN_DISPLAY";
		/// <summary>
		///   <para>Specify the Vulkan library to load.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint should be set before creating a Vulkan window or calling<see cref="SDL_Vulkan_LoadLibrary" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_VULKAN_LIBRARY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_VULKAN_LIBRARY "SDL_VULKAN_LIBRARY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_VULKAN_LIBRARY = "SDL_VULKAN_LIBRARY";
		/// <summary>
		///   <para>A variable controlling how the fact chunk affects the loading of a WAVE file.</para>
		/// </summary>
		/// <remarks>
		///   <para>The fact chunk stores information about the number of samples of a WAVEfile. The Standards Update from Microsoft notes that this value can be usedto 'determine the length of the data in seconds'. This is especially usefulfor compressed formats (for which this is a mandatory chunk) if theyproduce multiple sample frames per block and truncating the block is notallowed. The fact chunk can exactly specify how many sample frames thereshould be in this case.</para>
		///   <para>Unfortunately, most application seem to ignore the fact chunk and so SDLignores it by default as well.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"truncate" - Use the number of samples to truncate the wave data if thefact chunk is present and valid.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"strict" - Like "truncate", but raise an error if the fact chunk isinvalid, not present for non-PCM formats, or if the data chunk doesn'thave that many samples.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"ignorezero" - Like "truncate", but ignore fact chunk if the number ofsamples is zero.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"ignore" - Ignore fact chunk entirely. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before calling <see cref="SDL_LoadWAV" />() or<see cref="SDL_LoadWAV_IO" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WAVE_FACT_CHUNK<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WAVE_FACT_CHUNK "SDL_WAVE_FACT_CHUNK"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WAVE_FACT_CHUNK = "SDL_WAVE_FACT_CHUNK";
		/// <summary>
		///   <para>A variable controlling the maximum number of chunks in a WAVE file.</para>
		/// </summary>
		/// <remarks>
		///   <para>This sets an upper bound on the number of chunks in a WAVE file to avoidwasting time on malformed or corrupt WAVE files. This defaults to "10000".</para>
		///   <para>This hint should be set before calling <see cref="SDL_LoadWAV" />() or<see cref="SDL_LoadWAV_IO" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WAVE_CHUNK_LIMIT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WAVE_CHUNK_LIMIT "SDL_WAVE_CHUNK_LIMIT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WAVE_CHUNK_LIMIT = "SDL_WAVE_CHUNK_LIMIT";
		/// <summary>
		///   <para>A variable controlling how the size of the RIFF chunk affects the loading of a WAVE file.</para>
		/// </summary>
		/// <remarks>
		///   <para>The size of the RIFF chunk (which includes all the sub-chunks of the WAVEfile) is not always reliable. In case the size is wrong, it's possible tojust ignore it and step through the chunks until a fixed limit is reached.</para>
		///   <para>Note that files that have trailing data unrelated to the WAVE file orcorrupt files may slow down the loading process without a reliableboundary. By default, SDL stops after 10000 chunks to prevent wasting time.Use <see cref="SDL_HINT_WAVE_CHUNK_LIMIT" /> to adjust thisvalue.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"force" - Always use the RIFF chunk size as a boundary for the chunksearch.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"ignorezero" - Like "force", but a zero size searches up to 4 GiB.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"ignore" - Ignore the RIFF chunk size and always search up to 4 GiB.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"maximum" - Search for chunks until the end of file. (not recommended)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before calling <see cref="SDL_LoadWAV" />() or<see cref="SDL_LoadWAV_IO" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WAVE_RIFF_CHUNK_SIZE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WAVE_RIFF_CHUNK_SIZE "SDL_WAVE_RIFF_CHUNK_SIZE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WAVE_RIFF_CHUNK_SIZE = "SDL_WAVE_RIFF_CHUNK_SIZE";
		/// <summary>
		///   <para>A variable controlling how a truncated WAVE file is handled.</para>
		/// </summary>
		/// <remarks>
		///   <para>A WAVE file is considered truncated if any of the chunks are incomplete orthe data chunk size is not a multiple of the block size. By default, SDLdecodes until the first incomplete block, as most applications seem to do.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"verystrict" - Raise an error if the file is truncated.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"strict" - Like "verystrict", but the size of the RIFF chunk is ignored.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"dropframe" - Decode until the first incomplete sample frame.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"dropblock" - Decode until the first incomplete block. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before calling <see cref="SDL_LoadWAV" />() or<see cref="SDL_LoadWAV_IO" />()</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WAVE_TRUNCATION<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WAVE_TRUNCATION "SDL_WAVE_TRUNCATION"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WAVE_TRUNCATION = "SDL_WAVE_TRUNCATION";
		/// <summary>
		///   <para>A variable controlling whether the window is activated when the <see cref="SDL_RaiseWindow" /> function is called.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The window is not activated when the<see cref="SDL_RaiseWindow" /> function is called.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The window is activated when the <see cref="SDL_RaiseWindow" />function is called. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED "SDL_WINDOW_ACTIVATE_WHEN_RAISED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = "SDL_WINDOW_ACTIVATE_WHEN_RAISED";
		/// <summary>
		///   <para>A variable controlling whether the window is activated when the <see cref="SDL_ShowWindow" /> function is called.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The window is not activated when the<see cref="SDL_ShowWindow" /> function is called.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The window is activated when the <see cref="SDL_ShowWindow" />function is called. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN "SDL_WINDOW_ACTIVATE_WHEN_SHOWN"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = "SDL_WINDOW_ACTIVATE_WHEN_SHOWN";
		/// <summary>
		///   <para>If set to "0" then never set the top-most flag on an SDL Window even if the application requests it.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is a debugging aid for developers and not expected to be used by endusers.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": don't allow topmost</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": allow topmost (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOW_ALLOW_TOPMOST<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOW_ALLOW_TOPMOST "SDL_WINDOW_ALLOW_TOPMOST"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOW_ALLOW_TOPMOST = "SDL_WINDOW_ALLOW_TOPMOST";
		/// <summary>
		///   <para>A variable controlling whether the window frame and title bar are interactive when the cursor is hidden.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The window frame is not interactive when the cursor is hidden (nomove, resize, etc).</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The window frame is interactive when the cursor is hidden. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN";
		/// <summary>
		///   <para>A variable controlling whether SDL generates window-close events for Alt+F4 on Windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": SDL will only do normal key handling for Alt+F4.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": SDL will generate a window-close event when it sees Alt+F4.(default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 "SDL_WINDOWS_CLOSE_ON_ALT_F4"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 = "SDL_WINDOWS_CLOSE_ON_ALT_F4";
		/// <summary>
		///   <para>A variable controlling whether menus can be opened with their keyboard shortcut (Alt+mnemonic).</para>
		/// </summary>
		/// <remarks>
		///   <para>If the mnemonics are enabled, then menus can be opened by pressing the Altkey and the corresponding mnemonic (for example, Alt+F opens the Filemenu). However, in case an invalid mnemonic is pressed, Windows makes anaudible beep to convey that nothing happened. This is true even if thewindow has no menu at all!</para>
		///   <para>Because most SDL applications don't have menus, and some want to use theAlt key for other purposes, SDL disables mnemonics (and the beeping) bydefault.</para>
		///   <para>Note: This also affects keyboard events: with mnemonics enabled, when amenu is opened from the keyboard, you will not receive a KEYUP event forthe mnemonic key, and might not receive one for Alt.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Alt+mnemonic does nothing, no beeping. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Alt+mnemonic opens menus, invalid mnemonics produce a beep.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS "SDL_WINDOWS_ENABLE_MENU_MNEMONICS"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS";
		/// <summary>
		///   <para>A variable controlling whether the windows message loop is processed by SDL.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The window message loop is not run.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": The window message loop is processed in<see cref="SDL_PumpEvents" />(). (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP "SDL_WINDOWS_ENABLE_MESSAGELOOP"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = "SDL_WINDOWS_ENABLE_MESSAGELOOP";
		/// <summary>
		///   <para>A variable controlling whether GameInput is used for raw keyboard and mouse on Windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": GameInput is not used for raw keyboard and mouse events.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": GameInput is used for raw keyboard and mouse events, if available.(default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_GAMEINPUT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_GAMEINPUT   "SDL_WINDOWS_GAMEINPUT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_GAMEINPUT = "SDL_WINDOWS_GAMEINPUT";
		/// <summary>
		///   <para>A variable controlling whether raw keyboard events are used on Windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": The Windows message loop is used for keyboard events. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Low latency raw keyboard events are used.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint can be set anytime.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_RAW_KEYBOARD<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_RAW_KEYBOARD "SDL_WINDOWS_RAW_KEYBOARD"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_RAW_KEYBOARD = "SDL_WINDOWS_RAW_KEYBOARD";
		/// <summary>
		///   <para>A variable controlling whether SDL uses Kernel Semaphores on Windows.</para>
		/// </summary>
		/// <remarks>
		///   <para>Kernel Semaphores are inter-process and require a context switch on everyinteraction. On Windows 8 and newer, the WaitOnAddress API is available.Using that and atomics to implement semaphores increases performance. SDLwill fall back to Kernel Objects on older OS versions or if forced to bythis hint.</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use Atomics and WaitOnAddress API when available, otherwise fallback to Kernel Objects. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Force the use of Kernel Objects in all cases.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL";
		/// <summary>
		///   <para>A variable to specify custom icon resource id from RC file on Windows platform.</para>
		/// </summary>
		/// <remarks>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_INTRESOURCE_ICON<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_INTRESOURCE_ICON       "SDL_WINDOWS_INTRESOURCE_ICON"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_INTRESOURCE_ICON = "SDL_WINDOWS_INTRESOURCE_ICON";
		public const string SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL";
		/// <summary>
		///   <para>A variable controlling whether SDL uses the D3D9Ex API introduced in Windows Vista, instead of normal D3D9.</para>
		/// </summary>
		/// <remarks>
		///   <para>Direct3D 9Ex contains changes to state management that can eliminate deviceloss errors during scenarios like Alt+Tab or UAC prompts. D3D9Ex mayrequire some changes to your application to cope with the new behavior, sothis is disabled by default.</para>
		///   <para>For more information on Direct3D 9Ex, see:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>https://docs.microsoft.com/en-us/windows/win32/direct3darticles/graphics-apis-in-windows-vista#direct3d-9ex</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>https://docs.microsoft.com/en-us/windows/win32/direct3darticles/direct3d-9ex-improvements</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Use the original Direct3D 9 API. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Use the Direct3D 9Ex API on Vista and later (and fall back if D3D9Exis unavailable)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_USE_D3D9EX<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_USE_D3D9EX "SDL_WINDOWS_USE_D3D9EX"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_USE_D3D9EX = "SDL_WINDOWS_USE_D3D9EX";
		/// <summary>
		///   <para>A variable controlling whether SDL will clear the window contents when the WM_ERASEBKGND message is received.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0"/"never": Never clear the window.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1"/"initial": Clear the window when the first WM_ERASEBKGND event fires.(default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"2"/"always": Clear the window on every WM_ERASEBKGND event.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE "SDL_WINDOWS_ERASE_BACKGROUND_MODE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE = "SDL_WINDOWS_ERASE_BACKGROUND_MODE";
		/// <summary>
		///   <para>A variable controlling whether X11 windows are marked as override-redirect.</para>
		/// </summary>
		/// <remarks>
		///   <para>If set, this might increase framerate at the expense of the desktop notworking as expected. Override-redirect windows aren't noticed by the windowmanager at all.</para>
		///   <para>You should probably only use this for fullscreen windows, and you probablyshouldn't even use it for that. But it's here if you want to try!</para>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": Do not mark the window as override-redirect. (default)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": Mark the window as override-redirect.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT "SDL_X11_FORCE_OVERRIDE_REDIRECT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = "SDL_X11_FORCE_OVERRIDE_REDIRECT";
		/// <summary>
		///   <para>A variable specifying the type of an X11 window.</para>
		/// </summary>
		/// <remarks>
		///   <para>During <see cref="SDL_CreateWindow" />, SDL uses the_NET_WM_WINDOW_TYPE X11 property to report to the window manager the typeof window it wants to create. This might be set to various things if<see cref="SDL_WindowFlags.SDL_WINDOW_TOOLTIP" /> or<see cref="SDL_WindowFlags.SDL_WINDOW_POPUP_MENU" />, etc, were specified. For"normal" windows that haven't set a specific type, this hint can be used tospecify a custom type. For example, a dock window might set this to"_NET_WM_WINDOW_TYPE_DOCK".</para>
		///   <para>This hint should be set before creating a window.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_X11_WINDOW_TYPE<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_X11_WINDOW_TYPE "SDL_X11_WINDOW_TYPE"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_X11_WINDOW_TYPE = "SDL_X11_WINDOW_TYPE";
		/// <summary>
		///   <para>Specify the XCB library to load for the X11 driver.</para>
		/// </summary>
		/// <remarks>
		///   <para>The default is platform-specific, often "libX11-xcb.so.1".</para>
		///   <para>This hint should be set before initializing the video subsystem.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_X11_XCB_LIBRARY<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_X11_XCB_LIBRARY "SDL_X11_XCB_LIBRARY"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_X11_XCB_LIBRARY = "SDL_X11_XCB_LIBRARY";
		/// <summary>
		///   <para>A variable controlling whether XInput should be used for controller handling.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"0": XInput is not enabled.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"1": XInput is enabled. (default)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This hint should be set before SDL is initialized.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_XINPUT_ENABLED<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_XINPUT_ENABLED "SDL_XINPUT_ENABLED"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED";
		/// <summary>
		///   <para>A variable controlling response to <see cref="SDL_assert" /> failures.</para>
		/// </summary>
		/// <remarks>
		///   <para>The variable can be set to the following case-sensitive values:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"abort": Program terminates immediately.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"break": Program triggers a debugger breakpoint.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"retry": Program reruns the <see cref="SDL_assert" />'s test again.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"ignore": Program continues on, ignoring this assertion failure thistime.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"always_ignore": Program continues on, ignoring this assertion failurefor the rest of the run.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Note that <see cref="SDL_SetAssertionHandler" /> offers aprogrammatic means to deal with assertion failures through a callback, andthis hint is largely intended to be used via environment variables by endusers and automated tools.</para>
		///   <para>This hint should be set before an assertion failure is triggered and can bechanged at any time.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HINT_ASSERT<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>#define SDL_HINT_ASSERT "SDL_ASSERT"
		/// </code><br /><b>## Version ##</b><para>This hint is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public const string SDL_HINT_ASSERT = "SDL_ASSERT";

		/// <summary>
		///   <para>An enumeration of hint priorities.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HintPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_HintPriority
		/// {
		///     SDL_HINT_DEFAULT,
		///     SDL_HINT_NORMAL,
		///     SDL_HINT_OVERRIDE
		/// } SDL_HintPriority;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public enum SDL_HintPriority
		{
			/// <summary><para>Please refer to <see cref="SDL_HintPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HINT_DEFAULT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HINT_DEFAULT = 0,
			/// <summary><para>Please refer to <see cref="SDL_HintPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HINT_NORMAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HINT_NORMAL = 1,
			/// <summary><para>Please refer to <see cref="SDL_HintPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_HINT_OVERRIDE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_HINT_OVERRIDE = 2,
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetHintWithPriority", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetHintWithPriority(byte* name, byte* value, SDL_HintPriority priority);
		/// <summary>
		///   <para>Set a hint with a specific priority.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the hint to set.                                             </para>
		/// </param>
		/// <param name="value">
		///   <para> the value of the hint variable.                              </para>
		/// </param>
		/// <param name="priority">
		///   <para> the <see cref="SDL_HintPriority" /> level for the hint. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The priority controls the behavior when setting a hint that already has avalue. Hints will replace existing hints of their priority and lower.Environment variables are considered to have override priority.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHint" />
		/// <seealso cref="SDL_ResetHint" />
		/// <seealso cref="SDL_SetHint" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetHintWithPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetHintWithPriority(const char *name, const char *value, SDL_HintPriority priority);
		/// </code><para>                                                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static SDLBool SDL_SetHintWithPriority(string name, string value, SDL_HintPriority priority)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var valueUTF8 = EncodeAsUTF8(value);
			var result = INTERNAL_SDL_SetHintWithPriority(nameUTF8, valueUTF8, priority);

			SDL_free((IntPtr) nameUTF8);
			SDL_free((IntPtr) valueUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetHint", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetHint(byte* name, byte* value);
		/// <summary>
		///   <para>Set a hint with normal priority.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the hint to set.                </para>
		/// </param>
		/// <param name="value">
		///   <para> the value of the hint variable. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Hints will not be set if there is an existing override hint or environmentvariable that takes precedence. You can use<see cref="SDL_SetHintWithPriority" />() to set the hint withoverride priority instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetHint" />
		/// <seealso cref="SDL_ResetHint" />
		/// <seealso cref="SDL_SetHintWithPriority" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetHint<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetHint(const char *name, const char *value);
		/// </code><para>                                 </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static SDLBool SDL_SetHint(string name, string value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var valueUTF8 = EncodeAsUTF8(value);
			var result = INTERNAL_SDL_SetHint(nameUTF8, valueUTF8);

			SDL_free((IntPtr) nameUTF8);
			SDL_free((IntPtr) valueUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_ResetHint", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_ResetHint(byte* name);
		/// <summary>
		///   <para>Reset a hint to the default value.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the hint to set. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This will reset a hint to the value of the environment variable, or NULL ifthe environment isn't set. Callbacks will be called normally with thischange.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetHint" />
		/// <seealso cref="SDL_ResetHints" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResetHint<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ResetHint(const char *name);
		/// </code><para>                  </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static SDLBool SDL_ResetHint(string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_ResetHint(nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>Reset all hints to the default values.</para>
		/// </summary>
		/// <remarks>
		///   <para>This will reset all hints to the value of the associated environmentvariable, or NULL if the environment isn't set. Callbacks will be callednormally with this change.</para>
		/// </remarks>
		/// <seealso cref="SDL_ResetHint" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResetHints<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ResetHints(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ResetHints();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetHint", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetHint(byte* name);
		/// <summary>
		///   <para>Get the value of a hint.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the hint to query. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the string value of a hint or NULL if the hint isn'tset.</para>
		/// </returns>
		/// <seealso cref="SDL_SetHint" />
		/// <seealso cref="SDL_SetHintWithPriority" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHint<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char* SDL_GetHint(const char *name);
		/// </code><para>                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, however the return valueonly remains valid until the hint is changed; if another thread might doso, the app should supply locks and/or make a copy of the string. Note thatusing a hint callback instead is always thread-safe, as SDL holds a lock onthe thread subsystem during the callback.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static string SDL_GetHint(string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = DecodeFromUTF8(INTERNAL_SDL_GetHint(nameUTF8));

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetHintBoolean", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GetHintBoolean(byte* name, SDLBool default_value);
		/// <summary>
		///   <para>Get the boolean value of a hint variable.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the name of the hint to get the boolean value from. </para>
		/// </param>
		/// <param name="default_value">
		///   <para> the value to return if the hint does not exist.     </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns the boolean value of a hint or the provided default value ifthe hint does not exist.</para>
		/// </returns>
		/// <seealso cref="SDL_GetHint" />
		/// <seealso cref="SDL_SetHint" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetHintBoolean<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetHintBoolean(const char *name, bool default_value);
		/// </code><para>                                                     </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static SDLBool SDL_GetHintBoolean(string name, SDLBool default_value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_GetHintBoolean(nameUTF8, default_value);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>A callback used to send notifications of hint value changes.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is called an initial time during<see cref="SDL_AddHintCallback" /> with the hint's current value,and then again each time the hint's value changes.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddHintCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_HintCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void(SDLCALL *SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);
		/// </code><br /><b>## Thread Safety ##</b><para>This callback is fired from whatever thread is setting a new hint value.SDL holds a lock on the hint subsystem when calling this callback.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_HintCallback(IntPtr userdata, byte* name, byte* oldValue, byte* newValue);

		[DllImport(nativeLibName, EntryPoint = "SDL_AddHintCallback", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_AddHintCallback(byte* name, SDL_HintCallback callback, IntPtr userdata);
		/// <summary>
		///   <para>Add a function to watch a particular hint.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the hint to watch.                                                                                </para>
		/// </param>
		/// <param name="callback">
		///   <para> An <see cref="SDL_HintCallback" /> function that will be called when the hint value changes. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer to pass to the callback function.                                                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is called during this function, to provide it aninitial value, and again each time the hint's value changes.</para>
		/// </remarks>
		/// <seealso cref="SDL_RemoveHintCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddHintCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_AddHintCallback(const char *name, SDL_HintCallback callback, void *userdata);
		/// </code><para>                                                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static SDLBool SDL_AddHintCallback(string name, SDL_HintCallback callback, IntPtr userdata)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_AddHintCallback(nameUTF8, callback, userdata);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_RemoveHintCallback", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_RemoveHintCallback(byte* name, SDL_HintCallback callback, IntPtr userdata);
		/// <summary>
		///   <para>Remove a function watching a particular hint.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the hint being watched.                                                                           </para>
		/// </param>
		/// <param name="callback">
		///   <para> an <see cref="SDL_HintCallback" /> function that will be called when the hint value changes. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer being passed to the callback function.                                                  </para>
		/// </param>
		/// <seealso cref="SDL_AddHintCallback" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RemoveHintCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_hints.h">&lt;SDL3/SDL_hints.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_RemoveHintCallback(const char *name,
		///                          SDL_HintCallback callback,
		///                          void *userdata);
		/// </code><para>                                                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryHints">CategoryHints</see></para></misc>
		public static void SDL_RemoveHintCallback(string name, SDL_HintCallback callback, IntPtr userdata)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			INTERNAL_SDL_RemoveHintCallback(nameUTF8, callback, userdata);

			SDL_free((IntPtr) nameUTF8);
		}

		// /usr/local/include/SDL3/SDL_init.h

		/// <summary>
		///   <para>Initialization flags for <see cref="SDL_Init" /> and/or <see cref="SDL_InitSubSystem" /></para>
		/// </summary>
		/// <remarks>
		///   <para>These are the flags which may be passed to <see cref="SDL_Init" />(). Youshould specify the subsystems which you will be using in your application.</para>
		/// </remarks>
		/// <seealso cref="SDL_Init" />
		/// <seealso cref="SDL_Quit" />
		/// <seealso cref="SDL_InitSubSystem" />
		/// <seealso cref="SDL_QuitSubSystem" />
		/// <seealso cref="SDL_WasInit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_InitFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_InitFlags;
		/// 
		/// #define SDL_INIT_AUDIO      0x00000010u /**&lt; `SDL_INIT_AUDIO` implies `SDL_INIT_EVENTS` */
		/// #define SDL_INIT_VIDEO      0x00000020u /**&lt; `SDL_INIT_VIDEO` implies `SDL_INIT_EVENTS` */
		/// #define SDL_INIT_JOYSTICK   0x00000200u /**&lt; `SDL_INIT_JOYSTICK` implies `SDL_INIT_EVENTS`, should be initialized on the same thread as SDL_INIT_VIDEO on Windows if you don't set SDL_HINT_JOYSTICK_THREAD */
		/// #define SDL_INIT_HAPTIC     0x00001000u
		/// #define SDL_INIT_GAMEPAD    0x00002000u /**&lt; `SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK` */
		/// #define SDL_INIT_EVENTS     0x00004000u
		/// #define SDL_INIT_SENSOR     0x00008000u /**&lt; `SDL_INIT_SENSOR` implies `SDL_INIT_EVENTS` */
		/// #define SDL_INIT_CAMERA     0x00010000u /**&lt; `SDL_INIT_CAMERA` implies `SDL_INIT_EVENTS` */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		[Flags]
		public enum SDL_InitFlags : uint
		{
			SDL_INIT_TIMER = 0x1,
			SDL_INIT_AUDIO = 0x10,
			SDL_INIT_VIDEO = 0x20,
			SDL_INIT_JOYSTICK = 0x200,
			SDL_INIT_HAPTIC = 0x1000,
			SDL_INIT_GAMEPAD = 0x2000,
			SDL_INIT_EVENTS = 0x4000,
			SDL_INIT_SENSOR = 0x08000,
			SDL_INIT_CAMERA = 0x10000,
		}

		/// <summary>
		///   <para>Return values for optional main callbacks.</para>
		/// </summary>
		/// <remarks>
		///   <para>Returning <see cref="SDL_AppResult.SDL_APP_SUCCESS" /> or<see cref="SDL_AppResult.SDL_APP_FAILURE" /> from <see cref="SDL_AppInit" />,<see cref="SDL_AppEvent" />, or <see cref="SDL_AppIterate" /> willterminate the program and report success/failure to the operating system.What that means is platform-dependent. On Unix, for example, on success,the process error code will be zero, and on failure it will be 1. Thisinterface doesn't allow you to return specific exit codes, just whetherthere was an error generally or not.</para>
		///   <para>Returning <see cref="SDL_AppResult.SDL_APP_CONTINUE" /> from these functions willlet the app continue to run.</para>
		///   <para>See<see href="https://wiki.libsdl.org/SDL3/README/main-functions#main-callbacks-in-sdl3">Main callbacks in SDL3</see>for complete details.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AppResult<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_AppResult
		/// {
		///     SDL_APP_CONTINUE,   /**&lt; Value that requests that the app continue from the main callbacks. */
		///     SDL_APP_SUCCESS,    /**&lt; Value that requests termination with success from the main callbacks. */
		///     SDL_APP_FAILURE     /**&lt; Value that requests termination with error from the main callbacks. */
		/// } SDL_AppResult;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		public enum SDL_AppResult
		{
			/// <summary><para>Please refer to <see cref="SDL_AppResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_APP_CONTINUE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_APP_CONTINUE = 0,
			/// <summary><para>Please refer to <see cref="SDL_AppResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_APP_SUCCESS<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_APP_SUCCESS = 1,
			/// <summary><para>Please refer to <see cref="SDL_AppResult" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_APP_FAILURE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_APP_FAILURE = 2,
		}

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate SDL_AppResult SDL_AppInit_func(IntPtr appstate, int argc, IntPtr argv);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate SDL_AppResult SDL_AppIterate_func(IntPtr appstate);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate SDL_AppResult SDL_AppEvent_func(IntPtr appstate, SDL_Event* evt);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_AppQuit_func(IntPtr appstate, SDL_AppResult result);

		/// <summary>
		///   <para>Initialize the SDL library.</para>
		/// </summary>
		/// <param name="flags">
		///   <para> subsystem initialization flags. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>
		///     <see cref="SDL_Init" />() simply forwards to calling<see cref="SDL_InitSubSystem" />(). Therefore, the two may be usedinterchangeably. Though for readability of your code<see cref="SDL_InitSubSystem" />() might be preferred.</para>
		///   <para>The file I/O (for example: <see cref="SDL_IOFromFile" />) and threading(<see cref="SDL_CreateThread" />) subsystems are initialized bydefault. Message boxes(<see cref="SDL_ShowSimpleMessageBox" />) also attempt to workwithout initializing the video subsystem, in hopes of being useful inshowing an error dialog when <see cref="SDL_Init" /> fails. You mustspecifically initialize other subsystems if you use them in yourapplication.</para>
		///   <para>Logging (such as <see cref="SDL_Log" />) works without initialization, too.</para>
		///   <para>
		///     <c>flags</c> may be any of the following OR'd together:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_AUDIO" />: audio subsystem; automaticallyinitializes the events subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_VIDEO" />: video subsystem; automaticallyinitializes the events subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_JOYSTICK" />: joystick subsystem;automatically initializes the events subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_HAPTIC" />: haptic (force feedback) subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_GAMEPAD" />: gamepad subsystem; automaticallyinitializes the joystick subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_EVENTS" />: events subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_SENSOR" />: sensor subsystem; automaticallyinitializes the events subsystem</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_INIT_CAMERA" />: camera subsystem; automaticallyinitializes the events subsystem</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Subsystem initialization is ref-counted, you must call<see cref="SDL_QuitSubSystem" />() for each<see cref="SDL_InitSubSystem" />() to correctly shutdown a subsystemmanually (or call <see cref="SDL_Quit" />() to force shutdown). If a subsystemis already loaded then this call will increase the ref-count and return.</para>
		///   <para>Consider reporting some basic metadata about your application beforecalling <see cref="SDL_Init" />, using either<see cref="SDL_SetAppMetadata" />() or<see cref="SDL_SetAppMetadataProperty" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAppMetadata" />
		/// <seealso cref="SDL_SetAppMetadataProperty" />
		/// <seealso cref="SDL_InitSubSystem" />
		/// <seealso cref="SDL_Quit" />
		/// <seealso cref="SDL_SetMainReady" />
		/// <seealso cref="SDL_WasInit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Init<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_Init(SDL_InitFlags flags);
		/// </code><para>                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_Init(SDL_InitFlags flags);

		/// <summary>
		///   <para>Compatibility function to initialize the SDL library.</para>
		/// </summary>
		/// <param name="flags">
		///   <para> any of the flags used by <see cref="SDL_Init" />(); see <see cref="SDL_Init" /> for details. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function and <see cref="SDL_Init" />() are interchangeable.</para>
		/// </remarks>
		/// <seealso cref="SDL_Init" />
		/// <seealso cref="SDL_Quit" />
		/// <seealso cref="SDL_QuitSubSystem" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_InitSubSystem<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_InitSubSystem(SDL_InitFlags flags);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_InitSubSystem(SDL_InitFlags flags);

		/// <summary>
		///   <para>Shut down specific SDL subsystems.</para>
		/// </summary>
		/// <param name="flags">
		///   <para> any of the flags used by <see cref="SDL_Init" />(); see <see cref="SDL_Init" /> for details. </para>
		/// </param>
		/// <remarks>
		///   <para>You still need to call <see cref="SDL_Quit" />() even if you close all opensubsystems with <see cref="SDL_QuitSubSystem" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_InitSubSystem" />
		/// <seealso cref="SDL_Quit" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_QuitSubSystem<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_QuitSubSystem(SDL_InitFlags flags);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_QuitSubSystem(SDL_InitFlags flags);

		/// <summary>
		///   <para>Get a mask of the specified subsystems which are currently initialized.</para>
		/// </summary>
		/// <param name="flags">
		///   <para> any of the flags used by <see cref="SDL_Init" />(); see <see cref="SDL_Init" /> for details. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_InitFlags" />) Returns a mask of all initializedsubsystems if <c>flags</c> is 0, otherwise it returns the initialization statusof the specified subsystems.</para>
		/// </returns>
		/// <seealso cref="SDL_Init" />
		/// <seealso cref="SDL_InitSubSystem" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WasInit<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_InitFlags SDL_WasInit(SDL_InitFlags flags);
		/// </code><para>                                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_InitFlags SDL_WasInit(SDL_InitFlags flags);

		/// <summary>
		///   <para>Clean up all initialized subsystems.</para>
		/// </summary>
		/// <remarks>
		///   <para>You should call this function even if you have already shutdown eachinitialized subsystem with <see cref="SDL_QuitSubSystem" />(). It issafe to call this function even in the case of errors in initialization.</para>
		///   <para>You can use this function with atexit() to ensure that it is run when yourapplication is shutdown, but it is not wise to do this from a library orother dynamically loaded code.</para>
		/// </remarks>
		/// <seealso cref="SDL_Init" />
		/// <seealso cref="SDL_QuitSubSystem" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Quit<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_Quit(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_Quit();

		[DllImport(nativeLibName, EntryPoint = "SDL_SetAppMetadata", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetAppMetadata(byte* appname, byte* appversion, byte* appidentifier);
		/// <summary>
		///   <para>Specify basic metadata about your app.</para>
		/// </summary>
		/// <param name="appname">
		///   <para> The name of the application ("My Game 2: Bad Guy's Revenge!").                             </para>
		/// </param>
		/// <param name="appversion">
		///   <para> The version of the application ("1.0.0beta5" or a git hash, or whatever makes sense).      </para>
		/// </param>
		/// <param name="appidentifier">
		///   <para> A unique string in reverse-domain format that identifies this app ("com.example.mygame2"). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can optionally provide metadata about your app to SDL. This is notrequired, but strongly encouraged.</para>
		///   <para>There are several locations where SDL can make use of metadata (an "About"box in the macOS menu bar, the name of the app can be shown on some audiomixers, etc). Any piece of metadata can be left as NULL, if a specificdetail doesn't make sense for the app.</para>
		///   <para>This function should be called as early as possible, before<see cref="SDL_Init" />. Multiple calls to this function are allowed, butvarious state might not change once it has been set up with a previous callto this function.</para>
		///   <para>Passing a NULL removes any previous metadata.</para>
		///   <para>This is a simplified interface for the most important information. You cansupply significantly more detailed metadata with<see cref="SDL_SetAppMetadataProperty" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAppMetadataProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAppMetadata<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAppMetadata(const char *appname, const char *appversion, const char *appidentifier);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		public static SDLBool SDL_SetAppMetadata(string appname, string appversion, string appidentifier)
		{
			var appnameUTF8 = EncodeAsUTF8(appname);
			var appversionUTF8 = EncodeAsUTF8(appversion);
			var appidentifierUTF8 = EncodeAsUTF8(appidentifier);
			var result = INTERNAL_SDL_SetAppMetadata(appnameUTF8, appversionUTF8, appidentifierUTF8);

			SDL_free((IntPtr) appnameUTF8);
			SDL_free((IntPtr) appversionUTF8);
			SDL_free((IntPtr) appidentifierUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_SetAppMetadataProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetAppMetadataProperty(byte* name, byte* value);
		/// <summary>
		///   <para>Specify metadata about your app through a set of properties.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the name of the metadata property to set.                   </para>
		/// </param>
		/// <param name="value">
		///   <para> the value of the property, or NULL to remove that property. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can optionally provide metadata about your app to SDL. This is notrequired, but strongly encouraged.</para>
		///   <para>There are several locations where SDL can make use of metadata (an "About"box in the macOS menu bar, the name of the app can be shown on some audiomixers, etc). Any piece of metadata can be left out, if a specific detaildoesn't make sense for the app.</para>
		///   <para>This function should be called as early as possible, before<see cref="SDL_Init" />. Multiple calls to this function are allowed, butvarious state might not change once it has been set up with a previous callto this function.</para>
		///   <para>Once set, this metadata can be read using<see cref="SDL_GetMetadataProperty" />().</para>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_NAME_STRING" />:The human-readable name of the application, like "My Game 2: Bad Guy'sRevenge!". This will show up anywhere the OS shows the name of theapplication separately from window titles, such as volume controlapplets, etc. This defaults to "SDL Application".</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_VERSION_STRING" />:The version of the app that is running; there are no rules on format, so"1.0.3beta2" and "April 22nd, 2024" and a git hash are all valid options.This has no default.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_IDENTIFIER_STRING" />:A unique string that identifies this app. This must be in reverse-domainformat, like "com.example.mygame2". This string is used by desktopcompositors to identify and group windows together, as well as matchapplications with associated desktop settings and icons. If you plan topackage your application in a container such as Flatpak, the app IDshould match the name of your Flatpak container as well. This has nodefault.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_CREATOR_STRING" />:The human-readable name of the creator/developer/maker of this app, like"MojoWorkshop, LLC"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_COPYRIGHT_STRING" />:The human-readable copyright notice, like "Copyright (c) 2024MojoWorkshop, LLC" or whatnot. Keep this to one line, don't paste a copyof a whole software license in here. This has no default.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_URL_STRING" />: AURL to the app on the web. Maybe a product page, or a storefront, or evena GitHub repository, for user's further information This has no default.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_APP_METADATA_TYPE_STRING" />:The type of application this is. Currently this string can be "game" fora video game, "mediaplayer" for a media player, or generically"application" if nothing else applies. Future versions of SDL might addnew types. This defaults to "application".</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_GetAppMetadataProperty" />
		/// <seealso cref="SDL_SetAppMetadata" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetAppMetadataProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetAppMetadataProperty(const char *name, const char *value);
		/// </code><para>                                                             </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		public static SDLBool SDL_SetAppMetadataProperty(string name, string value)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var valueUTF8 = EncodeAsUTF8(value);
			var result = INTERNAL_SDL_SetAppMetadataProperty(nameUTF8, valueUTF8);

			SDL_free((IntPtr) nameUTF8);
			SDL_free((IntPtr) valueUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetAppMetadataProperty", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetAppMetadataProperty(byte* name);
		/// <summary>
		///   <para>Get metadata about your app.</para>
		/// </summary>
		/// <param name="name">
		///   <para> the name of the metadata property to get. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the current value of the metadata property, or thedefault if it is not set, NULL for properties with no default.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns metadata previously set using<see cref="SDL_SetAppMetadata" />() or<see cref="SDL_SetAppMetadataProperty" />(). See<see cref="SDL_SetAppMetadataProperty" />() for the list ofavailable properties and their meanings.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetAppMetadata" />
		/// <seealso cref="SDL_SetAppMetadataProperty" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetAppMetadataProperty<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_init.h">&lt;SDL3/SDL_init.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetAppMetadataProperty(const char *name);
		/// </code><para>                                           </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, although the stringreturned is not protected and could potentially be freed if you call<see cref="SDL_SetAppMetadataProperty" />() to set thatproperty from another thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryInit">CategoryInit</see></para></misc>
		public static string SDL_GetAppMetadataProperty(string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = DecodeFromUTF8(INTERNAL_SDL_GetAppMetadataProperty(nameUTF8));

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		// /usr/local/include/SDL3/SDL_loadso.h

		[DllImport(nativeLibName, EntryPoint = "SDL_LoadObject", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_LoadObject(byte* sofile);
		/// <summary>
		///   <para>Dynamically load a shared object.</para>
		/// </summary>
		/// <param name="sofile">
		///   <para> a system-dependent name of the object file. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_SharedObject" /> *) Returns an opaque pointer to theobject handle or NULL on failure; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <seealso cref="SDL_LoadFunction" />
		/// <seealso cref="SDL_UnloadObject" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadObject<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_loadso.h">&lt;SDL3/SDL_loadso.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_SharedObject * SDL_LoadObject(const char *sofile);
		/// </code><para>                                             </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySharedObject">CategorySharedObject</see></para></misc>
		public static IntPtr SDL_LoadObject(string sofile)
		{
			var sofileUTF8 = EncodeAsUTF8(sofile);
			var result = INTERNAL_SDL_LoadObject(sofileUTF8);

			SDL_free((IntPtr) sofileUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LoadFunction", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_LoadFunction(IntPtr handle, byte* name);
		/// <summary>
		///   <para>Look up the address of the named function in a shared object.</para>
		/// </summary>
		/// <param name="handle">
		///   <para> a valid shared object handle returned by <see cref="SDL_LoadObject" />(). </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the function to look up.                                         </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_FunctionPointer" />) Returns a pointer to thefunction or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function pointer is no longer valid after calling<see cref="SDL_UnloadObject" />().</para>
		///   <para>This function can only look up C function names. Other languages may havename mangling and intrinsic language support that varies from compiler tocompiler.</para>
		///   <para>Make sure you declare your function pointers with the same callingconvention as the actual library function. Your code will crashmysteriously if you do not do this.</para>
		///   <para>If the requested function doesn't exist, NULL is returned.</para>
		/// </remarks>
		/// <seealso cref="SDL_LoadObject" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LoadFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_loadso.h">&lt;SDL3/SDL_loadso.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_FunctionPointer SDL_LoadFunction(SDL_SharedObject *handle, const char *name);
		/// </code><para>                                                                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>
		/// /* Variable declaration */
		/// SDL_SharedObject* myHandle = NULL;
		/// const char* myFunctionName = "myFancyFunction";
		/// void (*myFancyFunction)(int anInt);
		/// 
		/// /* Dynamically load mylib.so */
		/// myHandle = SDL_LoadObject("mylib.so");
		/// 
		/// /* Load the exported function from mylib.so
		///  * The exported function has the following prototype
		///  * void myFancyFunction(int anInt);
		///  */
		/// myFancyFunction = (void (*)(int))SDL_LoadFunction(myHandle, myFunctionName);
		/// 
		/// /* Call myFancyFunction with a random integer */
		/// if (myFancyFunction != NULL) {
		///     myFancyFunction(15);
		/// } else {
		///     /* Error handling here */
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySharedObject">CategorySharedObject</see></para></misc>
		public static IntPtr SDL_LoadFunction(IntPtr handle, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_LoadFunction(handle, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>Unload a shared object from memory.</para>
		/// </summary>
		/// <param name="handle">
		///   <para> a valid shared object handle returned by <see cref="SDL_LoadObject" />(). </para>
		/// </param>
		/// <remarks>
		///   <para>Note that any pointers from this object looked up through<see cref="SDL_LoadFunction" />() will no longer be valid.</para>
		/// </remarks>
		/// <seealso cref="SDL_LoadObject" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnloadObject<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_loadso.h">&lt;SDL3/SDL_loadso.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnloadObject(SDL_SharedObject *handle);
		/// </code><para>                                                                              </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySharedObject">CategorySharedObject</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnloadObject(IntPtr handle);

		// /usr/local/include/SDL3/SDL_locale.h

		/// <summary>
		///   <para>A struct to provide locale data.</para>
		/// </summary>
		/// <remarks>
		///   <para>Locale data is split into a spoken language, like English, and an optionalcountry, like Canada. The language will be in ISO-639 format (so Englishwould be "en"), and the country, if not NULL, will be an ISO-3166 countrycode (so Canada would be "CA").</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPreferredLocales" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Locale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_locale.h">&lt;SDL3/SDL_locale.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Locale
		/// {
		///     const char *language;  /**&lt; A language name, like "en" for English. */
		///     const char *country;  /**&lt; A country, like "US" for America. Can be NULL. */
		/// } SDL_Locale;
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLocale">CategoryLocale</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Locale
		{
			public byte* language;
			public byte* country;
		}

		/// <summary>
		///   <para>Report the user's preferred locale.</para>
		/// </summary>
		/// <param name="count">
		///   <para> a pointer filled in with the number of locales returned, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Locale" /> **) Returns a NULL terminated array of localepointers, or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation. This is a single allocation that should be freed with<see cref="SDL_free" />() when it is no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Returned language strings are in the format xx, where 'xx' is an ISO-639language specifier (such as "en" for English, "de" for German, etc).Country strings are in the format YY, where "YY" is an ISO-3166 countrycode (such as "US" for the United States, "CA" for Canada, etc). Countrymight be NULL if there's no specific guidance on them (so you might get {"en", "US" } for American English, but { "en", NULL } means "Englishlanguage, generically"). Language strings are never NULL, except toterminate the array.</para>
		///   <para>Please note that not all of these strings are 2 characters; some are threeor more.</para>
		///   <para>The returned list of locales are in the order of the user's preference. Forexample, a German citizen that is fluent in US English and knows enoughJapanese to navigate around Tokyo might have a list like: { "de", "en_US","jp", NULL }. Someone from England might prefer British English (where"color" is spelled "colour", etc), but will settle for anything like it: {"en_GB", "en", NULL }.</para>
		///   <para>This function returns NULL on error, including when the platform does notsupply this information at all.</para>
		///   <para>This might be a "slow" call that has to query the operating system. It'sbest to ask for this once and save the results. However, this list canchange, usually because the user has changed a system preference outside ofyour program; SDL will send an<see cref="SDL_EventType.SDL_EVENT_LOCALE_CHANGED" /> event in this case, ifpossible, and you can call this function again to get an updated copy ofpreferred locales.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPreferredLocales<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_locale.h">&lt;SDL3/SDL_locale.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Locale ** SDL_GetPreferredLocales(int *count);
		/// </code><para>                                                                       </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLocale">CategoryLocale</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetPreferredLocales(out int count);

		// /usr/local/include/SDL3/SDL_log.h

		/// <summary>
		///   <para>The predefined log categories</para>
		/// </summary>
		/// <remarks>
		///   <para>By default the application and gpu categories are enabled at the INFOlevel, the assert category is enabled at the WARN level, test is enabled atthe VERBOSE level and all other categories are enabled at the ERROR level.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogCategory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_LogCategory
		/// {
		///     SDL_LOG_CATEGORY_APPLICATION,
		///     SDL_LOG_CATEGORY_ERROR,
		///     SDL_LOG_CATEGORY_ASSERT,
		///     SDL_LOG_CATEGORY_SYSTEM,
		///     SDL_LOG_CATEGORY_AUDIO,
		///     SDL_LOG_CATEGORY_VIDEO,
		///     SDL_LOG_CATEGORY_RENDER,
		///     SDL_LOG_CATEGORY_INPUT,
		///     SDL_LOG_CATEGORY_TEST,
		///     SDL_LOG_CATEGORY_GPU,
		/// 
		///     /* Reserved for future SDL library use */
		///     SDL_LOG_CATEGORY_RESERVED2,
		///     SDL_LOG_CATEGORY_RESERVED3,
		///     SDL_LOG_CATEGORY_RESERVED4,
		///     SDL_LOG_CATEGORY_RESERVED5,
		///     SDL_LOG_CATEGORY_RESERVED6,
		///     SDL_LOG_CATEGORY_RESERVED7,
		///     SDL_LOG_CATEGORY_RESERVED8,
		///     SDL_LOG_CATEGORY_RESERVED9,
		///     SDL_LOG_CATEGORY_RESERVED10,
		/// 
		///     /* Beyond this point is reserved for application use, e.g.
		///        enum {
		///            MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,
		///            MYAPP_CATEGORY_AWESOME2,
		///            MYAPP_CATEGORY_AWESOME3,
		///            ...
		///        };
		///      */
		///     SDL_LOG_CATEGORY_CUSTOM
		/// } SDL_LogCategory;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public enum SDL_LogCategory
		{
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_APPLICATION<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_APPLICATION = 0,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_ERROR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_ERROR = 1,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_ASSERT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_ASSERT = 2,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_SYSTEM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_SYSTEM = 3,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_AUDIO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_AUDIO = 4,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_VIDEO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_VIDEO = 5,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RENDER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RENDER = 6,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_INPUT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_INPUT = 7,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_TEST<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_TEST = 8,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_GPU<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_GPU = 9,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED2<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED2 = 10,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED3<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED3 = 11,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED4<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED4 = 12,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED5<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED5 = 13,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED6<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED6 = 14,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED7<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED7 = 15,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED8<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED8 = 16,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED9<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED9 = 17,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_RESERVED10<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_RESERVED10 = 18,
			/// <summary><para>Please refer to <see cref="SDL_LogCategory" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_CATEGORY_CUSTOM<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_CATEGORY_CUSTOM = 19,
		}

		/// <summary>
		///   <para>The predefined log priorities</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_LogPriority
		/// {
		///     SDL_LOG_PRIORITY_INVALID,
		///     SDL_LOG_PRIORITY_TRACE,
		///     SDL_LOG_PRIORITY_VERBOSE,
		///     SDL_LOG_PRIORITY_DEBUG,
		///     SDL_LOG_PRIORITY_INFO,
		///     SDL_LOG_PRIORITY_WARN,
		///     SDL_LOG_PRIORITY_ERROR,
		///     SDL_LOG_PRIORITY_CRITICAL,
		///     SDL_LOG_PRIORITY_COUNT
		/// } SDL_LogPriority;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public enum SDL_LogPriority
		{
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_INVALID<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_INVALID = 0,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_TRACE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_TRACE = 1,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_VERBOSE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_VERBOSE = 2,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_DEBUG<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_DEBUG = 3,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_INFO<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_INFO = 4,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_WARN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_WARN = 5,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_ERROR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_ERROR = 6,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_CRITICAL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_CRITICAL = 7,
			/// <summary><para>Please refer to <see cref="SDL_LogPriority" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOG_PRIORITY_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOG_PRIORITY_COUNT = 8,
		}

		/// <summary>
		///   <para>Set the priority of all log categories.</para>
		/// </summary>
		/// <param name="priority">
		///   <para> the <see cref="SDL_LogPriority" /> to assign. </para>
		/// </param>
		/// <seealso cref="SDL_ResetLogPriorities" />
		/// <seealso cref="SDL_SetLogPriority" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetLogPriorities<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetLogPriorities(SDL_LogPriority priority);
		/// </code><para>                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetLogPriorities(SDL_LogPriority priority);

		/// <summary>
		///   <para>Set the priority of a particular log category.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category to assign a priority to.             </para>
		/// </param>
		/// <param name="priority">
		///   <para> the <see cref="SDL_LogPriority" /> to assign. </para>
		/// </param>
		/// <seealso cref="SDL_GetLogPriority" />
		/// <seealso cref="SDL_ResetLogPriorities" />
		/// <seealso cref="SDL_SetLogPriorities" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetLogPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetLogPriority(int category, SDL_LogPriority priority);
		/// </code><para>                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetLogPriority(int category, SDL_LogPriority priority);

		/// <summary>
		///   <para>Get the priority of a particular log category.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_LogPriority" />) Returns the<see cref="SDL_LogPriority" /> for the requested category.</para>
		/// </returns>
		/// <seealso cref="SDL_SetLogPriority" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetLogPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_LogPriority SDL_GetLogPriority(int category);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDL_LogPriority SDL_GetLogPriority(int category);

		/// <summary>
		///   <para>Reset all priorities to default.</para>
		/// </summary>
		/// <remarks>
		///   <para>This is called by <see cref="SDL_Quit" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_SetLogPriorities" />
		/// <seealso cref="SDL_SetLogPriority" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ResetLogPriorities<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_ResetLogPriorities(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_ResetLogPriorities();

		[DllImport(nativeLibName, EntryPoint = "SDL_SetLogPriorityPrefix", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_SetLogPriorityPrefix(SDL_LogPriority priority, byte* prefix);
		/// <summary>
		///   <para>Set the text prepended to log messages of a given priority.</para>
		/// </summary>
		/// <param name="priority">
		///   <para> the <see cref="SDL_LogPriority" /> to modify.                  </para>
		/// </param>
		/// <param name="prefix">
		///   <para> the prefix to use for that log priority, or NULL to use no prefix. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>By default <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_INFO" /> and below have noprefix, and <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_WARN" /> and higher havea prefix showing their priority, e.g. "WARNING: ".</para>
		/// </remarks>
		/// <seealso cref="SDL_SetLogPriorities" />
		/// <seealso cref="SDL_SetLogPriority" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetLogPriorityPrefix<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, const char *prefix);
		/// </code><para>                                                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static SDLBool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, string prefix)
		{
			var prefixUTF8 = EncodeAsUTF8(prefix);
			var result = INTERNAL_SDL_SetLogPriorityPrefix(priority, prefixUTF8);

			SDL_free((IntPtr) prefixUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_Log", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_Log(byte* fmt);
		/// <summary />
		/// <param name="x">
		///   <para> floating point value. Must be greater than 0. </para>
		/// </param>
		/// <returns>
		///   <para>(double) Returns the natural logarithm of <c>x</c>.</para>
		/// </returns>
		/// <remarks>
		///   <para>Domain: <c>0 &lt; x &lt;= INF</c></para>
		///   <para>Range: <c>-INF &lt;= y &lt;= INF</c></para>
		///   <para>It is an error for <c>x</c> to be less than or equal to 0.</para>
		///   <para>This function operates on double-precision floating point values, use<see cref="SDL_logf" /> for single-precision floats.</para>
		///   <para>This function may use a different approximation across different versions,platforms and configurations. i.e, it can return a different value giventhe same input on different machines or operating systems, or if SDL isupdated.</para>
		/// </remarks>
		/// <seealso cref="SDL_logf" />
		/// <seealso cref="SDL_log10" />
		/// <seealso cref="SDL_exp" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Log<br /><b>## SDL_log ##</b><para>Compute the natural logarithm of <c>x</c>.</para><br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_stdinc.h">&lt;SDL3/SDL_stdinc.h&gt;</see></para><br /><b>## Syntax ##</b><code>double SDL_log(double x);
		/// </code><para>                                               </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStdinc">CategoryStdinc</see></para></misc>
		public static void SDL_Log(string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_Log(fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogTrace", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogTrace(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_TRACE" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogTrace<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogTrace(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogTrace(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogTrace(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogVerbose", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogVerbose(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_VERBOSE" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogVerbose<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogVerbose(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogVerbose(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogVerbose(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogDebug", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogDebug(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_DEBUG" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogDebug<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogDebug(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogDebug(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogDebug(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogInfo", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogInfo(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_INFO" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogInfo(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogInfo(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogInfo(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogWarn", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogWarn(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_WARN" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogWarn<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogWarn(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogWarn(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogWarn(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogError", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogError(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_ERROR" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogError<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogError(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogError(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogError(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogCritical", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogCritical(int category, byte* fmt);
		/// <summary>
		///   <para>Log a message with <see cref="SDL_LogPriority.SDL_LOG_PRIORITY_CRITICAL" />.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessage" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogCritical<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogCritical(int category, const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogCritical(int category, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogCritical(category, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_LogMessage", CallingConvention = CallingConvention.Cdecl)]
		private static extern void INTERNAL_SDL_LogMessage(int category, SDL_LogPriority priority, byte* fmt);
		/// <summary>
		///   <para>Log a message with the specified category and priority.</para>
		/// </summary>
		/// <param name="category">
		///   <para> the category of the message.                                           </para>
		/// </param>
		/// <param name="priority">
		///   <para> the priority of the message.                                           </para>
		/// </param>
		/// <param name="fmt">
		///   <para> a printf() style message format string.                                </para>
		/// </param>
		/// <param name="...">
		///   <para> additional parameters matching % tokens in the fmt string, if any. </para>
		/// </param>
		/// <seealso cref="SDL_Log" />
		/// <seealso cref="SDL_LogCritical" />
		/// <seealso cref="SDL_LogDebug" />
		/// <seealso cref="SDL_LogError" />
		/// <seealso cref="SDL_LogInfo" />
		/// <seealso cref="SDL_LogMessageV" />
		/// <seealso cref="SDL_LogTrace" />
		/// <seealso cref="SDL_LogVerbose" />
		/// <seealso cref="SDL_LogWarn" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogMessage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_LogMessage(int category,
		///                 SDL_LogPriority priority,
		///                 const char *fmt, ...);
		/// </code><para>                                                                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		public static void SDL_LogMessage(int category, SDL_LogPriority priority, string fmt)
		{
			var fmtUTF8 = EncodeAsUTF8(fmt);
			INTERNAL_SDL_LogMessage(category, priority, fmtUTF8);

			SDL_free((IntPtr) fmtUTF8);
		}

		/// <summary>
		///   <para>The prototype for the log output callback function.</para>
		/// </summary>
		/// <remarks>
		///   <para>This function is called by SDL when there is new text to be logged. A mutexis held so that this function is never called by more than one thread atonce.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LogOutputFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef void (SDLCALL *SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void SDL_LogOutputFunction(IntPtr userdata, int category, SDL_LogPriority priority, byte* message);

		/// <summary>
		///   <para>Get the current log output function.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> an <see cref="SDL_LogOutputFunction" /> filled in with the current log callback. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer filled in with the pointer that is passed to <c>callback</c>.                         </para>
		/// </param>
		/// <seealso cref="SDL_SetLogOutputFunction" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetLogOutputFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_GetLogOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_GetLogOutputFunction(out SDL_LogOutputFunction callback, out IntPtr userdata);

		/// <summary>
		///   <para>Replace the default log output function with one of your own.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> an <see cref="SDL_LogOutputFunction" /> to call instead of the default. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>callback</c>.                                           </para>
		/// </param>
		/// <seealso cref="SDL_GetLogOutputFunction" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetLogOutputFunction<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_log.h">&lt;SDL3/SDL_log.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, void *userdata);
		/// </code><para>                                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryLog">CategoryLog</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, IntPtr userdata);

		// /usr/local/include/SDL3/SDL_messagebox.h

		/// <summary>
		///   <para>
		///     <see cref="SDL_MessageBox" /> flags.</para>
		/// </summary>
		/// <remarks>
		///   <para>If supported will display warning icon, etc.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_MessageBoxFlags;
		/// 
		/// #define SDL_MESSAGEBOX_ERROR                    0x00000010u /**&lt; error dialog */
		/// #define SDL_MESSAGEBOX_WARNING                  0x00000020u /**&lt; warning dialog */
		/// #define SDL_MESSAGEBOX_INFORMATION              0x00000040u /**&lt; informational dialog */
		/// #define SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT    0x00000080u /**&lt; buttons placed left to right */
		/// #define SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT    0x00000100u /**&lt; buttons placed right to left */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[Flags]
		public enum SDL_MessageBoxFlags : uint
		{
			SDL_MESSAGEBOX_ERROR = 0x10,
			SDL_MESSAGEBOX_WARNING = 0x20,
			SDL_MESSAGEBOX_INFORMATION = 0x40,
			SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 0x080,
			SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 0x100,
		}

		/// <summary>
		///   <para>
		///     <see cref="SDL_MessageBoxButtonData" /> flags.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxButtonFlags<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 SDL_MessageBoxButtonFlags;
		/// 
		/// #define SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT 0x00000001u /**&lt; Marks the default button when return is hit */
		/// #define SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT 0x00000002u /**&lt; Marks the default button when escape is hit */
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[Flags]
		public enum SDL_MessageBoxButtonFlags : uint
		{
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x1,
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxButtonFlags" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIMacro">CategoryAPIMacro</see></para></misc>
			SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x2,
		}

		/// <summary>
		///   <para>Individual button data.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxButtonData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MessageBoxButtonData
		/// {
		///     SDL_MessageBoxButtonFlags flags;
		///     int buttonID;       /**&lt; User defined button id (value returned via SDL_ShowMessageBox) */
		///     const char *text;   /**&lt; The UTF-8 button text */
		/// } SDL_MessageBoxButtonData;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MessageBoxButtonData
		{
			public SDL_MessageBoxButtonFlags flags;
			public int buttonID;
			public byte* text;
		}

		/// <summary>
		///   <para>RGB value used in a message box color scheme</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxColor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MessageBoxColor
		/// {
		///     Uint8 r, g, b;
		/// } SDL_MessageBoxColor;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MessageBoxColor
		{
			public byte r;
			public byte g;
			public byte b;
		}

		/// <summary>
		///   <para>An enumeration of indices inside the colors array of <see cref="SDL_MessageBoxColorScheme" />.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxColorType<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_MessageBoxColorType
		/// {
		///     SDL_MESSAGEBOX_COLOR_BACKGROUND,
		///     SDL_MESSAGEBOX_COLOR_TEXT,
		///     SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
		///     SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
		///     SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
		///     SDL_MESSAGEBOX_COLOR_COUNT                    /**&lt; Size of the colors array of SDL_MessageBoxColorScheme. */
		/// } SDL_MessageBoxColorType;
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		public enum SDL_MessageBoxColorType
		{
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_COLOR_BACKGROUND<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MESSAGEBOX_COLOR_BACKGROUND = 0,
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_COLOR_TEXT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MESSAGEBOX_COLOR_TEXT = 1,
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_COLOR_BUTTON_BORDER<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
			/// <summary><para>Please refer to <see cref="SDL_MessageBoxColorType" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_MESSAGEBOX_COLOR_COUNT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_MESSAGEBOX_COLOR_COUNT = 5,
		}

		/// <summary>
		///   <para>A set of colors to use for message box dialogs</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxColorScheme<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MessageBoxColorScheme
		/// {
		///     SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_COUNT];
		/// } SDL_MessageBoxColorScheme;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MessageBoxColorScheme
		{
			public SDL_MessageBoxColor colors0;
			public SDL_MessageBoxColor colors1;
			public SDL_MessageBoxColor colors2;
			public SDL_MessageBoxColor colors3;
			public SDL_MessageBoxColor colors4;
		}

		/// <summary>
		///   <para>MessageBox structure containing title, text, window, etc.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_MessageBoxData<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_MessageBoxData
		/// {
		///     SDL_MessageBoxFlags flags;
		///     SDL_Window *window;                 /**&lt; Parent window, can be NULL */
		///     const char *title;                  /**&lt; UTF-8 title */
		///     const char *message;                /**&lt; UTF-8 message text */
		/// 
		///     int numbuttons;
		///     const SDL_MessageBoxButtonData *buttons;
		/// 
		///     const SDL_MessageBoxColorScheme *colorScheme;   /**&lt; SDL_MessageBoxColorScheme, can be NULL to use system settings */
		/// } SDL_MessageBoxData;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_MessageBoxData
		{
			public SDL_MessageBoxFlags flags;
			public IntPtr window;
			public byte* title;
			public byte* message;
			public int numbuttons;
			public SDL_MessageBoxButtonData* buttons;
			public SDL_MessageBoxColorScheme* colorScheme;
		}

		/// <summary>
		///   <para>Create a modal message box.</para>
		/// </summary>
		/// <param name="messageboxdata">
		///   <para> the <see cref="SDL_MessageBoxData" /> structure with title, text and other options. </para>
		/// </param>
		/// <param name="buttonid">
		///   <para> the pointer to which user id of hit button should be copied.                               </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If your needs aren't complex, it might be easier to use<see cref="SDL_ShowSimpleMessageBox" />.</para>
		///   <para>This function should be called on the thread that created the parentwindow, or on the main thread if the messagebox has no parent. It willblock execution of that thread until the user clicks a button or closes themessagebox.</para>
		///   <para>This function may be called at any time, even before<see cref="SDL_Init" />(). This makes it useful for reporting errors like afailure to create a renderer or OpenGL context.</para>
		///   <para>On X11, SDL rolls its own dialog box with X11 primitives instead of aformal toolkit like GTK+ or Qt.</para>
		///   <para>Note that if <see cref="SDL_Init" />() would fail because there isn't anyavailable video target, this function is likely to fail for the samereasons. If this is a concern, check the return value from this functionand fall back to writing to stderr if you can.</para>
		/// </remarks>
		/// <seealso cref="SDL_ShowSimpleMessageBox" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowMessageBox<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
		/// </code><para>                                                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ShowMessageBox(ref SDL_MessageBoxData messageboxdata, out int buttonid);

		[DllImport(nativeLibName, EntryPoint = "SDL_ShowSimpleMessageBox", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, byte* title, byte* message, IntPtr window);
		/// <summary>
		///   <para>Display a simple modal message box.</para>
		/// </summary>
		/// <param name="flags">
		///   <para> an <see cref="SDL_MessageBoxFlags" /> value. </para>
		/// </param>
		/// <param name="title">
		///   <para> uTF-8 title text.                                    </para>
		/// </param>
		/// <param name="message">
		///   <para> uTF-8 message text.                                  </para>
		/// </param>
		/// <param name="window">
		///   <para> the parent window, or NULL for no parent.            </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If your needs aren't complex, this function is preferred over<see cref="SDL_ShowMessageBox" />.</para>
		///   <para>
		///     <c>flags</c> may be any of the following:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_MESSAGEBOX_ERROR" />: error dialog</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_MESSAGEBOX_WARNING" />: warning dialog</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_MESSAGEBOX_INFORMATION" />: informationaldialog</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>This function should be called on the thread that created the parentwindow, or on the main thread if the messagebox has no parent. It willblock execution of that thread until the user clicks a button or closes themessagebox.</para>
		///   <para>This function may be called at any time, even before<see cref="SDL_Init" />(). This makes it useful for reporting errors like afailure to create a renderer or OpenGL context.</para>
		///   <para>On X11, SDL rolls its own dialog box with X11 primitives instead of aformal toolkit like GTK+ or Qt.</para>
		///   <para>Note that if <see cref="SDL_Init" />() would fail because there isn't anyavailable video target, this function is likely to fail for the samereasons. If this is a concern, check the return value from this functionand fall back to writing to stderr if you can.</para>
		/// </remarks>
		/// <seealso cref="SDL_ShowMessageBox" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ShowSimpleMessageBox<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_messagebox.h">&lt;SDL3/SDL_messagebox.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, const char *title, const char *message, SDL_Window *window);
		/// </code><para>                                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMessagebox">CategoryMessagebox</see></para></misc>
		public static SDLBool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, string title, string message, IntPtr window)
		{
			var titleUTF8 = EncodeAsUTF8(title);
			var messageUTF8 = EncodeAsUTF8(message);
			var result = INTERNAL_SDL_ShowSimpleMessageBox(flags, titleUTF8, messageUTF8, window);

			SDL_free((IntPtr) titleUTF8);
			SDL_free((IntPtr) messageUTF8);
			return result;
		}

		// /usr/local/include/SDL3/SDL_metal.h

		/// <summary>
		///   <para>Create a CAMetalLayer-backed NSView/UIView and attach it to the specified window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_MetalView" />) Returns handle NSView or UIView.</para>
		/// </returns>
		/// <remarks>
		///   <para>On macOS, this does not associate a MTLDevice with the CAMetalLayer onits own. It is up to user code to do that.</para>
		///   <para>The returned handle can be casted directly to a NSView or UIView. To accessthe backing CAMetalLayer, call <see cref="SDL_Metal_GetLayer" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_Metal_DestroyView" />
		/// <seealso cref="SDL_Metal_GetLayer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Metal_CreateView<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_metal.h">&lt;SDL3/SDL_metal.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_MetalView SDL_Metal_CreateView(SDL_Window *window);
		/// </code><para>             </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMetal">CategoryMetal</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_Metal_CreateView(IntPtr window);

		/// <summary>
		///   <para>Destroy an existing <see cref="SDL_MetalView" /> object.</para>
		/// </summary>
		/// <param name="view">
		///   <para> the <see cref="SDL_MetalView" /> object. </para>
		/// </param>
		/// <remarks>
		///   <para>This should be called before <see cref="SDL_DestroyWindow" />, if<see cref="SDL_Metal_CreateView" /> was called after<see cref="SDL_CreateWindow" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_Metal_CreateView" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Metal_DestroyView<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_metal.h">&lt;SDL3/SDL_metal.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_Metal_DestroyView(SDL_MetalView view);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMetal">CategoryMetal</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_Metal_DestroyView(IntPtr view);

		/// <summary>
		///   <para>Get a pointer to the backing CAMetalLayer for the given view.</para>
		/// </summary>
		/// <param name="view">
		///   <para> the <see cref="SDL_MetalView" /> object. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns a pointer.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Metal_GetLayer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_metal.h">&lt;SDL3/SDL_metal.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_Metal_GetLayer(SDL_MetalView view);
		/// </code><para>                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMetal">CategoryMetal</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_Metal_GetLayer(IntPtr view);

		// /usr/local/include/SDL3/SDL_misc.h

		[DllImport(nativeLibName, EntryPoint = "SDL_OpenURL", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_OpenURL(byte* url);
		/// <summary>
		///   <para>Open a URL/URI in the browser or other appropriate external application.</para>
		/// </summary>
		/// <param name="url">
		///   <para> a valid URL/URI to open. Use <c>file:///full/path/to/file</c> for local files, if supported. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Open a URL in a separate, system-provided application. How this works willvary wildly depending on the platform. This will likely launch what makessense to handle a specific URL's protocol (a web browser for <c>http://</c>,etc), but it might also be able to launch file managers for directories andother things.</para>
		///   <para>What happens when you open a URL varies wildly as well: your game windowmay lose focus (and may or may not lose focus if your game was fullscreenor grabbing input at the time). On mobile devices, your app will likelymove to the background or your process might be paused. Any given platformmay or may not handle a given URL.</para>
		///   <para>If this is unimplemented (or simply unavailable) for a platform, this willfail with an error. A successful result does not mean the URL loaded, justthat we launched something to handle it (or at least believe we did).</para>
		///   <para>All this to say: this function can be useful, but you should definitelytest it on every platform you target.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenURL<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_misc.h">&lt;SDL3/SDL_misc.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_OpenURL(const char *url);
		/// </code><para>                                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMisc">CategoryMisc</see></para></misc>
		public static SDLBool SDL_OpenURL(string url)
		{
			var urlUTF8 = EncodeAsUTF8(url);
			var result = INTERNAL_SDL_OpenURL(urlUTF8);

			SDL_free((IntPtr) urlUTF8);
			return result;
		}

		// /usr/local/include/SDL3/SDL_platform.h

		[DllImport(nativeLibName, EntryPoint = "SDL_GetPlatform", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetPlatform();
		/// <summary>
		///   <para>Get the name of the platform.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns the name of the platform. If the correct platformname is not available, returns a string beginning with the text "Unknown".</para>
		/// </returns>
		/// <remarks>
		///   <para>Here are the names returned for some (but not all) supported platforms:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>"Windows"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"macOS"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"Linux"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"iOS"</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>"Android"</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPlatform<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_platform.h">&lt;SDL3/SDL_platform.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetPlatform(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryPlatform">CategoryPlatform</see></para></misc>
		public static string SDL_GetPlatform()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetPlatform());
		}

		// /usr/local/include/SDL3/SDL_process.h

		/// <summary>
		///   <para>Create a new process.</para>
		/// </summary>
		/// <param name="args">
		///   <para> the path and arguments for the new process.                                                                                                                                        </para>
		/// </param>
		/// <param name="pipe_stdio">
		///   <para> true to create pipes to the process's standard input and from the process's standard output, false for the process to have no input and inherit the application's standard output. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Process" /> *) Returns the newly created and runningprocess, or NULL if the process couldn't be created.</para>
		/// </returns>
		/// <remarks>
		///   <para>The path to the executable is supplied in args[0]. args[1..N] areadditional arguments passed on the command line of the new process, and theargument list should be terminated with a NULL, e.g.:</para>
		///   <code>const char *args[] = { "myprogram", "argument", NULL };
		/// </code>
		///   <para>Setting pipe_stdio to true is equivalent to setting<see cref="SDL_PROP_PROCESS_CREATE_STDIN_NUMBER" />and<see cref="SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER" />to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />, and will allow the useof <see cref="SDL_ReadProcess" />() or<see cref="SDL_GetProcessInput" />() and<see cref="SDL_GetProcessOutput" />().</para>
		///   <para>See <see cref="SDL_CreateProcessWithProperties" />()for more details.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_GetProcessProperties" />
		/// <seealso cref="SDL_ReadProcess" />
		/// <seealso cref="SDL_GetProcessInput" />
		/// <seealso cref="SDL_GetProcessOutput" />
		/// <seealso cref="SDL_KillProcess" />
		/// <seealso cref="SDL_WaitProcess" />
		/// <seealso cref="SDL_DestroyProcess" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateProcess<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Process* SDL_CreateProcess(const char * const *args, bool pipe_stdio);
		/// </code><para>                                                                                                                                                                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateProcess(IntPtr args, SDLBool pipe_stdio);

		/// <summary>
		///   <para>Description of where standard I/O should be directed when creating a process.</para>
		/// </summary>
		/// <remarks>
		///   <para>If a standard I/O stream is set to<see cref="SDL_PROCESS_STDIO_INHERIT" />, it will go to thesame place as the application's I/O stream. This is the default forstandard output and standard error.</para>
		///   <para>If a standard I/O stream is set to<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_NULL" />, it is connected to <c>NUL:</c>on Windows and <c>/dev/null</c> on POSIX systems. This is the default forstandard input.</para>
		///   <para>If a standard I/O stream is set to<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />, it is connected to a new<see cref="SDL_IOStream" /> that is available to the application. Standardinput will be available as<see cref="SDL_PROP_PROCESS_STDIN_POINTER" /> andallows <see cref="SDL_GetProcessInput" />(), standard output willbe available as<see cref="SDL_PROP_PROCESS_STDOUT_POINTER" /> andallows <see cref="SDL_ReadProcess" />() and<see cref="SDL_GetProcessOutput" />(), and standard error will beavailable as<see cref="SDL_PROP_PROCESS_STDERR_POINTER" /> in theproperties for the created process.</para>
		///   <para>If a standard I/O stream is set to<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_REDIRECT" />, it is connectedto an existing <see cref="SDL_IOStream" /> provided by the application.Standard input is provided using<see cref="SDL_PROP_PROCESS_CREATE_STDIN_POINTER" />,standard output is provided using<see cref="SDL_PROP_PROCESS_CREATE_STDOUT_POINTER" />,and standard error is provided using<see cref="SDL_PROP_PROCESS_CREATE_STDERR_POINTER" />in the creation properties. These existing streams should be closed by theapplication once the new process is created.</para>
		///   <para>In order to use an <see cref="SDL_IOStream" /> with<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_REDIRECT" />, it must have<see cref="SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER" />or<see cref="SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER" />set. This is true for streams representing files and process I/O.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_GetProcessProperties" />
		/// <seealso cref="SDL_ReadProcess" />
		/// <seealso cref="SDL_GetProcessInput" />
		/// <seealso cref="SDL_GetProcessOutput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ProcessIO<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_ProcessIO
		/// {
		///     SDL_PROCESS_STDIO_INHERITED,    /**&lt; The I/O stream is inherited from the application. */
		///     SDL_PROCESS_STDIO_NULL,         /**&lt; The I/O stream is ignored. */
		///     SDL_PROCESS_STDIO_APP,          /**&lt; The I/O stream is connected to a new SDL_IOStream that the application can read or write */
		///     SDL_PROCESS_STDIO_REDIRECT      /**&lt; The I/O stream is redirected to an existing SDL_IOStream. */
		/// } SDL_ProcessIO;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		public enum SDL_ProcessIO
		{
			/// <summary><para>Please refer to <see cref="SDL_ProcessIO" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROCESS_STDIO_INHERITED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROCESS_STDIO_INHERITED = 0,
			/// <summary><para>Please refer to <see cref="SDL_ProcessIO" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROCESS_STDIO_NULL<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROCESS_STDIO_NULL = 1,
			/// <summary><para>Please refer to <see cref="SDL_ProcessIO" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROCESS_STDIO_APP<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROCESS_STDIO_APP = 2,
			/// <summary><para>Please refer to <see cref="SDL_ProcessIO" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_PROCESS_STDIO_REDIRECT<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_PROCESS_STDIO_REDIRECT = 3,
		}

		/// <summary>
		///   <para>Create a new process with the specified properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Process" /> *) Returns the newly created and runningprocess, or NULL if the process couldn't be created.</para>
		/// </returns>
		/// <remarks>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_ARGS_POINTER" />:an array of strings containing the program to run, any arguments, and aNULL pointer, e.g. const char *args[] = { "myprogram", "argument", NULL}. This is a required property.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER" />:an <see cref="SDL_Environment" /> pointer. If this property is set,it will be the entire environment for the process, otherwise the currentenvironment is used.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDIN_NUMBER" />:an <see cref="SDL_ProcessIO" /> value describing where standard inputfor the process comes from, defaults to<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_NULL" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDIN_POINTER" />:an <see cref="SDL_IOStream" /> pointer used for standard input when<see cref="SDL_PROP_PROCESS_CREATE_STDIN_NUMBER" />is set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_REDIRECT" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER" />:an <see cref="SDL_ProcessIO" /> value describing where standard outputfor the process goes go, defaults to<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_INHERITED" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDOUT_POINTER" />:an <see cref="SDL_IOStream" /> pointer used for standard output when<see cref="SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER" />is set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_REDIRECT" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDERR_NUMBER" />:an <see cref="SDL_ProcessIO" /> value describing where standard errorfor the process goes go, defaults to<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_INHERITED" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDERR_POINTER" />:an <see cref="SDL_IOStream" /> pointer used for standard error when<see cref="SDL_PROP_PROCESS_CREATE_STDERR_NUMBER" />is set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_REDIRECT" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN" />:true if the error output of the process should be redirected into thestandard output of the process. This property has no effect if<see cref="SDL_PROP_PROCESS_CREATE_STDERR_NUMBER" />is set.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN" />:true if the process should run in the background. In this case thedefault input and output is<see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_NULL" /> and the exitcode ofthe process is not available, and will always be 0.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>On POSIX platforms, wait() and waitpid(-1, ...) should not be called, andSIGCHLD should not be ignored or handled because those would prevent SDLfrom properly tracking the lifetime of the underlying process. You shoulduse <see cref="SDL_WaitProcess" />() instead.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_GetProcessProperties" />
		/// <seealso cref="SDL_ReadProcess" />
		/// <seealso cref="SDL_GetProcessInput" />
		/// <seealso cref="SDL_GetProcessOutput" />
		/// <seealso cref="SDL_KillProcess" />
		/// <seealso cref="SDL_WaitProcess" />
		/// <seealso cref="SDL_DestroyProcess" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateProcessWithProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Process* SDL_CreateProcessWithProperties(SDL_PropertiesID props);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateProcessWithProperties(uint props);

		/// <summary>
		///   <para>Get the properties associated with a process.</para>
		/// </summary>
		/// <param name="process">
		///   <para> the process to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_PID_NUMBER" />: the processID of the process.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_STDIN_POINTER" />: an<see cref="SDL_IOStream" /> that can be used to write input to theprocess, if it was created with<see cref="SDL_PROP_PROCESS_CREATE_STDIN_NUMBER" />set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_STDOUT_POINTER" />: anon-blocking <see cref="SDL_IOStream" /> that can be used to read outputfrom the process, if it was created with<see cref="SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER" />set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_STDERR_POINTER" />: anon-blocking <see cref="SDL_IOStream" /> that can be used to read erroroutput from the process, if it was created with<see cref="SDL_PROP_PROCESS_CREATE_STDERR_NUMBER" />set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_PROCESS_BACKGROUND_BOOLEAN" />:true if the process is running in the background.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetProcessProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetProcessProperties(SDL_Process *process);
		/// </code><para>                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetProcessProperties(IntPtr process);

		/// <summary>
		///   <para>Read all the output from a process.</para>
		/// </summary>
		/// <param name="process">
		///   <para> The process to read.                                                                   </para>
		/// </param>
		/// <param name="datasize">
		///   <para> a pointer filled in with the number of bytes read, may be NULL.                        </para>
		/// </param>
		/// <param name="exitcode">
		///   <para> a pointer filled in with the process exit code if the process has exited, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns the data or NULL on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If a process was created with I/O enabled, you can use this function toread the output. This function blocks until the process is complete,capturing all output, and providing the process exit code.</para>
		///   <para>The data is allocated with a zero byte at the end (null terminated) forconvenience. This extra byte is not included in the value reported via<c>datasize</c>.</para>
		///   <para>The data should be freed with <see cref="SDL_free" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_DestroyProcess" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadProcess<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_ReadProcess(SDL_Process *process, size_t *datasize, int *exitcode);
		/// </code><para>                                                                                        </para><br /><b>## Thread Safety ##</b><para>This function is not thread safe.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_ReadProcess(IntPtr process, out UIntPtr datasize, out int exitcode);

		/// <summary>
		///   <para>Get the <see cref="SDL_IOStream" /> associated with process standard input.</para>
		/// </summary>
		/// <param name="process">
		///   <para> The process to get the input stream for. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns the input stream or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The process must have been created with<see cref="SDL_CreateProcess" />() and pipe_stdio set to true, orwith <see cref="SDL_CreateProcessWithProperties" />()and<see cref="SDL_PROP_PROCESS_CREATE_STDIN_NUMBER" />set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />.</para>
		///   <para>Writing to this stream can return less data than expected if the processhasn't read its input. It may be blocked waiting for its output to be read,so if you may need to call <see cref="SDL_GetOutputStream" />() andread the output in parallel with writing input.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_GetProcessOutput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetProcessInput<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream* SDL_GetProcessInput(SDL_Process *process);
		/// </code><para>                                          </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetProcessInput(IntPtr process);

		/// <summary>
		///   <para>Get the <see cref="SDL_IOStream" /> associated with process standard output.</para>
		/// </summary>
		/// <param name="process">
		///   <para> The process to get the output stream for. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_IOStream" /> *) Returns the output stream or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The process must have been created with<see cref="SDL_CreateProcess" />() and pipe_stdio set to true, orwith <see cref="SDL_CreateProcessWithProperties" />()and<see cref="SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER" />set to <see cref="SDL_ProcessIO.SDL_PROCESS_STDIO_APP" />.</para>
		///   <para>Reading from this stream can return 0 with<see cref="SDL_GetIOStatus" />() returning<see cref="SDL_IOStatus.SDL_IO_STATUS_NOT_READY" /> if no output isavailable yet.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_GetProcessInput" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetProcessOutput<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_IOStream* SDL_GetProcessOutput(SDL_Process *process);
		/// </code><para>                                           </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetProcessOutput(IntPtr process);

		/// <summary>
		///   <para>Stop a process.</para>
		/// </summary>
		/// <param name="process">
		///   <para> The process to stop.                                                                                                                                                                                                                                 </para>
		/// </param>
		/// <param name="force">
		///   <para> true to terminate the process immediately, false to try to stop the process gracefully. In general you should try to stop the process gracefully first as terminating a process may leave it with half-written data or in some other unstable state. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_WaitProcess" />
		/// <seealso cref="SDL_DestroyProcess" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_KillProcess<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_KillProcess(SDL_Process *process, bool force);
		/// </code><para>                                                                                                                                                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>This function is not thread safe.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_KillProcess(IntPtr process, SDLBool force);

		/// <summary>
		///   <para>Wait for a process to finish.</para>
		/// </summary>
		/// <param name="process">
		///   <para> The process to wait for.                                                               </para>
		/// </param>
		/// <param name="block">
		///   <para> If true, block until the process finishes; otherwise, report on the process' status.   </para>
		/// </param>
		/// <param name="exitcode">
		///   <para> a pointer filled in with the process exit code if the process has exited, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the process exited, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This can be called multiple times to get the status of a process.</para>
		///   <para>The exit code will be the exit code of the process if it terminatesnormally, a negative signal if it terminated due to a signal, or -255otherwise. It will not be changed if the process is still running.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_KillProcess" />
		/// <seealso cref="SDL_DestroyProcess" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WaitProcess<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WaitProcess(SDL_Process *process, bool block, int *exitcode);
		/// </code><para>                                                                                        </para><br /><b>## Thread Safety ##</b><para>This function is not thread safe.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_WaitProcess(IntPtr process, SDLBool block, out int exitcode);

		/// <summary>
		///   <para>Destroy a previously created process object.</para>
		/// </summary>
		/// <param name="process">
		///   <para> The process object to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>Note that this does not stop the process, just destroys the SDL object usedto track it. If you want to stop the process you should use<see cref="SDL_KillProcess" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateProcess" />
		/// <seealso cref="SDL_CreateProcessWithProperties" />
		/// <seealso cref="SDL_KillProcess" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyProcess<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_process.h">&lt;SDL3/SDL_process.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyProcess(SDL_Process *process);
		/// </code><para>                                </para><br /><b>## Thread Safety ##</b><para>This function is not thread safe.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryProcess">CategoryProcess</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyProcess(IntPtr process);

		// /usr/local/include/SDL3/SDL_render.h

		/// <summary>
		///   <para>Vertex structure.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Vertex<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_Vertex
		/// {
		///     SDL_FPoint position;        /**&lt; Vertex position, in SDL_Renderer coordinates  */
		///     SDL_FColor color;           /**&lt; Vertex color */
		///     SDL_FPoint tex_coord;       /**&lt; Normalized texture coordinates, if needed */
		/// } SDL_Vertex;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Vertex
		{
			public SDL_FPoint position;
			public SDL_FColor color;
			public SDL_FPoint tex_coord;
		}

		/// <summary>
		///   <para>The access pattern allowed for a texture.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TextureAccess<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_TextureAccess
		/// {
		///     SDL_TEXTUREACCESS_STATIC,    /**&lt; Changes rarely, not lockable */
		///     SDL_TEXTUREACCESS_STREAMING, /**&lt; Changes frequently, lockable */
		///     SDL_TEXTUREACCESS_TARGET     /**&lt; Texture can be used as a render target */
		/// } SDL_TextureAccess;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		public enum SDL_TextureAccess
		{
			/// <summary><para>Please refer to <see cref="SDL_TextureAccess" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTUREACCESS_STATIC<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTUREACCESS_STATIC = 0,
			/// <summary><para>Please refer to <see cref="SDL_TextureAccess" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTUREACCESS_STREAMING<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTUREACCESS_STREAMING = 1,
			/// <summary><para>Please refer to <see cref="SDL_TextureAccess" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TEXTUREACCESS_TARGET<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TEXTUREACCESS_TARGET = 2,
		}

		/// <summary>
		///   <para>How the logical size is mapped to the output.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RendererLogicalPresentation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_RendererLogicalPresentation
		/// {
		///     SDL_LOGICAL_PRESENTATION_DISABLED,  /**&lt; There is no logical size in effect */
		///     SDL_LOGICAL_PRESENTATION_STRETCH,   /**&lt; The rendered content is stretched to the output resolution */
		///     SDL_LOGICAL_PRESENTATION_LETTERBOX, /**&lt; The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars */
		///     SDL_LOGICAL_PRESENTATION_OVERSCAN,  /**&lt; The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds */
		///     SDL_LOGICAL_PRESENTATION_INTEGER_SCALE   /**&lt; The rendered content is scaled up by integer multiples to fit the output resolution */
		/// } SDL_RendererLogicalPresentation;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		public enum SDL_RendererLogicalPresentation
		{
			/// <summary><para>Please refer to <see cref="SDL_RendererLogicalPresentation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOGICAL_PRESENTATION_DISABLED<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOGICAL_PRESENTATION_DISABLED = 0,
			/// <summary><para>Please refer to <see cref="SDL_RendererLogicalPresentation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOGICAL_PRESENTATION_STRETCH<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOGICAL_PRESENTATION_STRETCH = 1,
			/// <summary><para>Please refer to <see cref="SDL_RendererLogicalPresentation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOGICAL_PRESENTATION_LETTERBOX<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
			/// <summary><para>Please refer to <see cref="SDL_RendererLogicalPresentation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOGICAL_PRESENTATION_OVERSCAN<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
			/// <summary><para>Please refer to <see cref="SDL_RendererLogicalPresentation" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_LOGICAL_PRESENTATION_INTEGER_SCALE<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4,
		}

		/// <summary>
		///   <para>An efficient driver-specific representation of pixel data</para>
		/// </summary>
		/// <seealso cref="SDL_CreateTexture" />
		/// <seealso cref="SDL_CreateTextureFromSurface" />
		/// <seealso cref="SDL_CreateTextureWithProperties" />
		/// <seealso cref="SDL_DestroyTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Texture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>struct SDL_Texture
		/// {
		///     SDL_PixelFormat format;     /**&lt; The format of the texture, read-only */
		///     int w;                      /**&lt; The width of the texture, read-only. */
		///     int h;                      /**&lt; The height of the texture, read-only. */
		/// 
		///     int refcount;               /**&lt; Application reference count, used when freeing texture */
		/// };
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_Texture
		{
			public SDL_PixelFormat format;
			public int w;
			public int h;
			public int refcount;
		}

		/// <summary>
		///   <para>Get the number of 2D rendering drivers available for the current display.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the number of built in render drivers.</para>
		/// </returns>
		/// <remarks>
		///   <para>A render driver is a set of code that handles rendering and texturemanagement on a particular display. Normally there is only one, but somedrivers may have several available with different capabilities.</para>
		///   <para>There may be none if SDL was compiled without render support.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateRenderer" />
		/// <seealso cref="SDL_GetRenderDriver" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetNumRenderDrivers<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetNumRenderDrivers(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetNumRenderDrivers();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetRenderDriver", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetRenderDriver(int index);
		/// <summary>
		///   <para>Use this function to get the name of a built in 2D rendering driver.</para>
		/// </summary>
		/// <param name="index">
		///   <para> the index of the rendering driver; the value ranges from 0 to <see cref="SDL_GetNumRenderDrivers" />() - 1. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the rendering driver at the requestedindex, or NULL if an invalid index was specified.</para>
		/// </returns>
		/// <remarks>
		///   <para>The list of rendering drivers is given in the order that they are normallyinitialized by default; the drivers that seem more reasonable to choosefirst (as far as the SDL developers believe) are earlier in the list.</para>
		///   <para>The names of drivers are all simple, low-ASCII identifiers, like "opengl","direct3d12" or "metal". These never have Unicode characters, and are notmeant to be proper names.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetNumRenderDrivers" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderDriver<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetRenderDriver(int index);
		/// </code><para>                                                                                                                         </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		public static string SDL_GetRenderDriver(int index)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetRenderDriver(index));
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateWindowAndRenderer", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_CreateWindowAndRenderer(byte* title, int width, int height, SDL_WindowFlags window_flags, out IntPtr window, out IntPtr renderer);
		/// <summary>
		///   <para>Create a window and default renderer.</para>
		/// </summary>
		/// <param name="title">
		///   <para> the title of the window, in UTF-8 encoding.                                       </para>
		/// </param>
		/// <param name="width">
		///   <para> the width of the window.                                                          </para>
		/// </param>
		/// <param name="height">
		///   <para> the height of the window.                                                         </para>
		/// </param>
		/// <param name="window_flags">
		///   <para> the flags used to create the window (see <see cref="SDL_CreateWindow" />()). </para>
		/// </param>
		/// <param name="window">
		///   <para> a pointer filled with the window, or NULL on error.                               </para>
		/// </param>
		/// <param name="renderer">
		///   <para> a pointer filled with the renderer, or NULL on error.                             </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateRenderer" />
		/// <seealso cref="SDL_CreateWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateWindowAndRenderer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CreateWindowAndRenderer(const char *title, int width, int height, SDL_WindowFlags window_flags, SDL_Window **window, SDL_Renderer **renderer);
		/// </code><para>                                                                                   </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// 
		/// int main(int argc, char *argv[])
		/// {
		///     SDL_Window *window;
		///     SDL_Renderer *renderer;
		///     SDL_Surface *surface;
		///     SDL_Texture *texture;
		///     SDL_Event event;
		/// 
		///     if (!SDL_Init(SDL_INIT_VIDEO)) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't initialize SDL: %s", SDL_GetError());
		///         return 3;
		///     }
		/// 
		///     if (!SDL_CreateWindowAndRenderer("Hello SDL", 320, 240, SDL_WINDOW_RESIZABLE, &amp;window, &amp;renderer)) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create window and renderer: %s", SDL_GetError());
		///         return 3;
		///     }
		/// 
		///     surface = SDL_LoadBMP("sample.bmp");
		///     if (!surface) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create surface from image: %s", SDL_GetError());
		///         return 3;
		///     }
		///     texture = SDL_CreateTextureFromSurface(renderer, surface);
		///     if (!texture) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create texture from surface: %s", SDL_GetError());
		///         return 3;
		///     }
		///     SDL_DestroySurface(surface);
		/// 
		///     while (1) {
		///         SDL_PollEvent(&amp;event);
		///         if (event.type == SDL_EVENT_QUIT) {
		///             break;
		///         }
		///         SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0x00);
		///         SDL_RenderClear(renderer);
		///         SDL_RenderTexture(renderer, texture, NULL, NULL);
		///         SDL_RenderPresent(renderer);
		///     }
		/// 
		///     SDL_DestroyTexture(texture);
		///     SDL_DestroyRenderer(renderer);
		///     SDL_DestroyWindow(window);
		/// 
		///     SDL_Quit();
		/// 
		///     return 0;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		public static SDLBool SDL_CreateWindowAndRenderer(string title, int width, int height, SDL_WindowFlags window_flags, out IntPtr window, out IntPtr renderer)
		{
			var titleUTF8 = EncodeAsUTF8(title);
			var result = INTERNAL_SDL_CreateWindowAndRenderer(titleUTF8, width, height, window_flags, out window, out renderer);

			SDL_free((IntPtr) titleUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateRenderer", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_CreateRenderer(IntPtr window, byte* name);
		/// <summary>
		///   <para>Create a 2D rendering context for a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window where rendering is displayed.                                                                            </para>
		/// </param>
		/// <param name="name">
		///   <para> the name of the rendering driver to initialize, or NULL to initialize the first one supporting the requested flags. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Renderer" /> *) Returns a valid rendering context or NULLif there was an error; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>If you want a specific renderer, you can specify its name here. A list ofavailable renderers can be obtained by calling<see cref="SDL_GetRenderDriver" /> multiple times, with indicesfrom 0 to <see cref="SDL_GetNumRenderDrivers" />()-1. If youdon't need a specific renderer, specify NULL and SDL will attempt to choosethe best option for you, based on what is available on the user's system.</para>
		///   <para>By default the rendering size matches the window size in pixels, but youcan call<see cref="SDL_SetRenderLogicalPresentation" />() tochange the content size and scaling options.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateRendererWithProperties" />
		/// <seealso cref="SDL_CreateSoftwareRenderer" />
		/// <seealso cref="SDL_DestroyRenderer" />
		/// <seealso cref="SDL_GetNumRenderDrivers" />
		/// <seealso cref="SDL_GetRenderDriver" />
		/// <seealso cref="SDL_GetRendererName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateRenderer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Renderer * SDL_CreateRenderer(SDL_Window *window, const char *name);
		/// </code><para>                                                                                                                     </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// #include &lt;SDL3/SDL_main.h&gt;
		/// 
		/// int main(int argc, char *argv[])
		/// {
		///     SDL_Window *win = NULL;
		///     SDL_Renderer *renderer = NULL;
		///     SDL_Texture *bitmapTex = NULL;
		///     SDL_Surface *bitmapSurface = NULL;
		///     int width = 320, height = 240;
		///     bool loopShouldStop = false;
		/// 
		///     SDL_Init(SDL_INIT_VIDEO);
		/// 
		///     win = SDL_CreateWindow("Hello World", width, height, 0);
		/// 
		///     renderer = SDL_CreateRenderer(win, NULL);
		/// 
		///     bitmapSurface = SDL_LoadBMP("img/hello.bmp");
		///     bitmapTex = SDL_CreateTextureFromSurface(renderer, bitmapSurface);
		///     SDL_DestroySurface(bitmapSurface);
		/// 
		///     while (!loopShouldStop)
		///     {
		///         SDL_Event event;
		///         while (SDL_PollEvent(&amp;event))
		///         {
		///             switch (event.type)
		///             {
		///                 case SDL_EVENT_QUIT:
		///                     loopShouldStop = true;
		///                     break;
		///             }
		///         }
		/// 
		///         SDL_RenderClear(renderer);
		///         SDL_RenderTexture(renderer, bitmapTex, NULL, NULL);
		///         SDL_RenderPresent(renderer);
		///     }
		/// 
		///     SDL_DestroyTexture(bitmapTex);
		///     SDL_DestroyRenderer(renderer);
		///     SDL_DestroyWindow(win);
		/// 
		///     SDL_Quit();
		/// 
		///     return 0;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		public static IntPtr SDL_CreateRenderer(IntPtr window, string name)
		{
			var nameUTF8 = EncodeAsUTF8(name);
			var result = INTERNAL_SDL_CreateRenderer(window, nameUTF8);

			SDL_free((IntPtr) nameUTF8);
			return result;
		}

		/// <summary>
		///   <para>Create a 2D rendering context for a window, with the specified properties.</para>
		/// </summary>
		/// <param name="props">
		///   <para> the properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Renderer" /> *) Returns a valid rendering context or NULLif there was an error; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_NAME_STRING" />:the name of the rendering driver to use, if a specific one is desired</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_WINDOW_POINTER" />:the window where rendering is displayed, required if this isn't asoftware renderer using a surface</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_SURFACE_POINTER" />:the surface where rendering is displayed, if you want a software rendererwithout a window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER" />:an <see cref="SDL_ColorSpace" /> value describing the colorspace foroutput to the display, defaults to<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB" />. The direct3d11, direct3d12,and metal renderers support<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" />, which is alinear color space and supports HDR output. If you select<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" />, drawing stilluses the sRGB colorspace, but values can go beyond 1.0 and float (linear)format textures can be used for HDR content.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER" />:non-zero if you want present synchronized with the refresh rate. Thisproperty can take any value that is supported by<see cref="SDL_SetRenderVSync" />() for the renderer.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the vulkan renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER" />:the VkInstance to use with the renderer, optional.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER" />:the VkSurfaceKHR to use with the renderer, optional.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER" />:the VkPhysicalDevice to use with the renderer, optional.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER" />:the VkDevice to use with the renderer, optional.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER" />:the queue family index used for rendering.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER" />:the queue family index used for presentation.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_CreateProperties" />
		/// <seealso cref="SDL_CreateRenderer" />
		/// <seealso cref="SDL_CreateSoftwareRenderer" />
		/// <seealso cref="SDL_DestroyRenderer" />
		/// <seealso cref="SDL_GetRendererName" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateRendererWithProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Renderer * SDL_CreateRendererWithProperties(SDL_PropertiesID props);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateRendererWithProperties(uint props);

		/// <summary>
		///   <para>Create a 2D software rendering context for a surface.</para>
		/// </summary>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure representing the surface where rendering is done. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Renderer" /> *) Returns a valid rendering context or NULLif there was an error; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>Two other API which can be used to create <see cref="SDL_Renderer" />:<see cref="SDL_CreateRenderer" />() and<see cref="SDL_CreateWindowAndRenderer" />(). These canalso create a software renderer, but they are intended to be used with an<see cref="SDL_Window" /> as the final destination and not an<see cref="SDL_Surface" />.</para>
		/// </remarks>
		/// <seealso cref="SDL_DestroyRenderer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateSoftwareRenderer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface *surface);
		/// </code><para>                                                                                            </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// #include &lt;SDL3/SDL_main.h&gt;
		/// 
		/// SDL_Window *window;
		/// SDL_Renderer *renderer;
		/// int done;
		/// 
		/// void DrawChessBoard(SDL_Renderer *renderer)
		/// {
		///     int row = 0, column = 0, x = 0;
		///     SDL_FRect rect;
		///     SDL_Rect darea;
		/// 
		///     /* Get the Size of drawing surface */
		///     SDL_GetRenderViewport(renderer, &amp;darea);
		/// 
		///     SDL_SetRenderDrawColor(renderer, 0xFF, 0xFF, 0xFF, 0xFF);
		///     SDL_RenderClear(renderer);
		/// 
		///     for (; row &lt; 8; row++) {
		///         column = row % 2;
		///         x = column;
		///         for (; column &lt; 4 + (row % 2); column++) {
		///             SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0xFF);
		/// 
		///             rect.w = (float)darea.w / 8;
		///             rect.h = (float)darea.h / 8;
		///             rect.x = x * rect.w;
		///             rect.y = row * rect.h;
		///             x = x + 2;
		///             SDL_RenderFillRect(renderer, &amp;rect);
		///         }
		///     }
		///     SDL_RenderPresent(renderer);
		/// }
		/// 
		/// void loop()
		/// {
		///     SDL_Event e;
		///     while (SDL_PollEvent(&amp;e)) {
		///         if (e.type == SDL_EVENT_QUIT) {
		///             done = 1;
		///             return;
		///         }
		/// 
		///         if ((e.type == SDL_EVENT_KEY_DOWN) &amp;&amp; (e.key.key == SDLK_ESCAPE)) {
		///             done = 1;
		///             return;
		///         }
		///     }
		/// 
		///     DrawChessBoard(renderer);
		/// 
		///     /* Got everything on rendering surface,
		///        now Update the drawing image on window screen */
		///     SDL_UpdateWindowSurface(window);
		/// }
		/// 
		/// int main(int argc, char *argv[])
		/// {
		///     SDL_Surface *surface;
		/// 
		///     /* Initialize SDL */
		///     if (SDL_Init(SDL_INIT_VIDEO) != 0) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "SDL_Init fail : %s\n", SDL_GetError());
		///         return 1;
		///     }
		/// 
		///     /* Create window and renderer for given surface */
		///     window = SDL_CreateWindow("Chess Board", 640, 480, 0);
		///     if (!window) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Window creation fail : %s\n", SDL_GetError());
		///         return 1;
		///     }
		///     surface = SDL_GetWindowSurface(window);
		///     renderer = SDL_CreateSoftwareRenderer(surface);
		///     if (!renderer) {
		///         SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Render creation for surface fail : %s\n", SDL_GetError());
		///         return 1;
		///     }
		/// 
		///     /* Draw the Image on rendering surface */
		///     done = 0;
		/// 
		///     while (!done) {
		///         loop();
		///     }
		/// 
		///     SDL_Quit();
		///     return 0;
		/// }
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateSoftwareRenderer(IntPtr surface);

		/// <summary>
		///   <para>Get the renderer associated with a window.</para>
		/// </summary>
		/// <param name="window">
		///   <para> the window to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Renderer" /> *) Returns the rendering context on successor NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Renderer * SDL_GetRenderer(SDL_Window *window);
		/// </code><para>                      </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetRenderer(IntPtr window);

		/// <summary>
		///   <para>Get the window associated with a renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Window" /> *) Returns the window on success or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Window * SDL_GetRenderWindow(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetRenderWindow(IntPtr renderer);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetRendererName", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetRendererName(IntPtr renderer);
		/// <summary>
		///   <para>Get the name of a renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(const char *) Returns the name of the selected renderer, or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_CreateRenderer" />
		/// <seealso cref="SDL_CreateRendererWithProperties" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRendererName<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetRendererName(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		public static string SDL_GetRendererName(IntPtr renderer)
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetRendererName(renderer));
		}

		/// <summary>
		///   <para>Get the properties associated with a renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_NAME_STRING" />: thename of the rendering driver</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_WINDOW_POINTER" />:the window where rendering is displayed, if any</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_SURFACE_POINTER" />:the surface where rendering is displayed, if this is a software rendererwithout a window</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VSYNC_NUMBER" />: thecurrent vsync setting</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER" />:the maximum texture width and height</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER" />:a (const <see cref="SDL_PixelFormat" /> *) array of pixel formats,terminated with <see cref="SDL_PixelFormat.SDL_PIXELFORMAT_UNKNOWN" />,representing the available texture formats for this renderer.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER" />:an <see cref="SDL_ColorSpace" /> value describing the colorspace foroutput to the display, defaults to<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN" />:true if the output colorspace is<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" /> and the rendereris showing on a display with HDR enabled. This property can changedynamically when<see cref="SDL_EVENT_DISPLAY_HDR_STATE_CHANGED" />is sent.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT" />:the value of SDR white in the<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" /> colorspace. WhenHDR is enabled, this value is automatically multiplied into the colorscale. This property can change dynamically when<see cref="SDL_EVENT_DISPLAY_HDR_STATE_CHANGED" />is sent.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT" />:the additional high dynamic range that can be displayed, in terms of theSDR white point. When HDR is not enabled, this will be 1.0. This propertycan change dynamically when<see cref="SDL_EVENT_DISPLAY_HDR_STATE_CHANGED" />is sent.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_D3D9_DEVICE_POINTER" />:the IDirect3DDevice9 associated with the renderer</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d11 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_D3D11_DEVICE_POINTER" />:the ID3D11Device associated with the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER" />:the IDXGISwapChain1 associated with the renderer. This may change whenthe window is resized.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d12 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_D3D12_DEVICE_POINTER" />:the ID3D12Device associated with the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER" />:the IDXGISwapChain4 associated with the renderer.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER" />:the ID3D12CommandQueue associated with the renderer</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the vulkan renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER" />:the VkInstance associated with the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER" />:the VkSurfaceKHR associated with the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER" />:the VkPhysicalDevice associated with the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER" />:the VkDevice associated with the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER" />:the queue family index used for rendering</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER" />:the queue family index used for presentation</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER" />:the number of swapchain images, or potential frames in flight, used bythe Vulkan renderer</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRendererProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetRendererProperties(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetRendererProperties(IntPtr renderer);

		/// <summary>
		///   <para>Get the output size in pixels of a rendering context.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                         </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer filled in with the width in pixels.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer filled in with the height in pixels. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This returns the true output size in pixels, ignoring any render targets orlogical size and presentation.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetCurrentRenderOutputSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderOutputSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);
		/// </code><para>                                                </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderOutputSize(IntPtr renderer, out int w, out int h);

		/// <summary>
		///   <para>Get the current output size in pixels of a rendering context.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                       </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer filled in with the current width.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer filled in with the current height. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If a rendering target is active, this will return the size of the renderingtarget in pixels, otherwise if a logical size is set, it will return thelogical size, otherwise it will return the value of<see cref="SDL_GetRenderOutputSize" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderOutputSize" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentRenderOutputSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetCurrentRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);
		/// </code><para>                                              </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetCurrentRenderOutputSize(IntPtr renderer, out int w, out int h);

		/// <summary>
		///   <para>Create a texture for a rendering context.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                  </para>
		/// </param>
		/// <param name="format">
		///   <para> one of the enumerated values in <see cref="SDL_PixelFormat" />.     </para>
		/// </param>
		/// <param name="access">
		///   <para> one of the enumerated values in <see cref="SDL_TextureAccess" />. </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the texture in pixels.                                     </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the texture in pixels.                                    </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Texture" /> *) Returns a pointer to the created texture orNULL if no rendering context was active, the format was unsupported, or thewidth or height were out of range; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The contents of a texture when first created are not defined.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateTextureFromSurface" />
		/// <seealso cref="SDL_CreateTextureWithProperties" />
		/// <seealso cref="SDL_DestroyTexture" />
		/// <seealso cref="SDL_GetTextureSize" />
		/// <seealso cref="SDL_UpdateTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Texture * SDL_CreateTexture(SDL_Renderer *renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// 
		/// #include &lt;stdlib.h&gt;
		/// 
		/// /* Moving Rectangle */
		/// int main(int argc, char *argv[])
		/// {
		///         SDL_Window *window;
		///         SDL_Renderer *renderer;
		///         SDL_Texture *texture;
		///         SDL_Event event;
		///         SDL_FRect r;
		/// 
		///         if (!SDL_Init(SDL_INIT_VIDEO)) {
		///                 SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't initialize SDL: %s", SDL_GetError());
		///                 return 3;
		///         }
		/// 
		///         window = SDL_CreateWindow("SDL_CreateTexture",
		///                         1024, 768,
		///                         SDL_WINDOW_RESIZABLE);
		/// 
		///         r.w = 100;
		///         r.h = 50;
		/// 
		///         renderer = SDL_CreateRenderer(window, NULL);
		/// 
		///         texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, 1024, 768);
		/// 
		///         while (1) {
		///                 SDL_PollEvent(&amp;event);
		///                 if(event.type == SDL_EVENT_QUIT)
		///                         break;
		///                 r.x=rand()%500;
		///                 r.y=rand()%500;
		/// 
		///                 SDL_SetRenderTarget(renderer, texture);
		///                 SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0x00);
		///                 SDL_RenderClear(renderer);
		///                 SDL_RenderRect(renderer,&amp;r);
		///                 SDL_SetRenderDrawColor(renderer, 0xFF, 0x00, 0x00, 0x00);
		///                 SDL_RenderFillRect(renderer, &amp;r);
		///                 SDL_SetRenderTarget(renderer, NULL);
		///                 SDL_RenderTexture(renderer, texture, NULL, NULL);
		///                 SDL_RenderPresent(renderer);
		///         }
		///         SDL_DestroyRenderer(renderer);
		///         SDL_Quit();
		///         return 0;
		/// }
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateTexture(IntPtr renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);

		/// <summary>
		///   <para>Create a texture from an existing surface.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                   </para>
		/// </param>
		/// <param name="surface">
		///   <para> the <see cref="SDL_Surface" /> structure containing pixel data used to fill the texture. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Texture" /> *) Returns the created texture or NULL onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The surface is not modified or freed by this function.</para>
		///   <para>The <see cref="SDL_TextureAccess" /> hint for the created texture is<see cref="SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC" />.</para>
		///   <para>The pixel format of the created texture may be different from the pixelformat of the surface, and can be queried using the<see cref="SDL_PROP_TEXTURE_FORMAT_NUMBER" /> property.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateTexture" />
		/// <seealso cref="SDL_CreateTextureWithProperties" />
		/// <seealso cref="SDL_DestroyTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateTextureFromSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface);
		/// </code><para>                                                                                          </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>SDL_Renderer *renderer;
		/// 
		/// SDL_Surface *surface = SDL_CreateSurface(640, 480, SDL_PIXELFORMAT_RGBA8888);
		/// 
		/// if (surface == NULL) {
		///     fprintf(stderr, "CreateRGBSurface failed: %s\n", SDL_GetError());
		///     exit(1);
		/// }
		/// 
		/// SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);
		/// 
		/// if (texture == NULL) {
		///     fprintf(stderr, "CreateTextureFromSurface failed: %s\n", SDL_GetError());
		///     exit(1);
		/// }
		/// 
		/// SDL_DestroySurface(surface);
		/// surface = NULL;
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateTextureFromSurface(IntPtr renderer, IntPtr surface);

		/// <summary>
		///   <para>Create a texture for a rendering context with the specified properties.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <param name="props">
		///   <para> the properties to use. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Texture" /> *) Returns a pointer to the created texture orNULL if no rendering context was active, the format was unsupported, or thewidth or height were out of range; call <see cref="SDL_GetError" />() formore information.</para>
		/// </returns>
		/// <remarks>
		///   <para>These are the supported properties:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER" />:an <see cref="SDL_ColorSpace" /> value describing the texturecolorspace, defaults to<see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB_LINEAR" /> for floatingpoint textures, <see cref="SDL_Colorspace.SDL_COLORSPACE_HDR10" /> for 10-bittextures, <see cref="SDL_Colorspace.SDL_COLORSPACE_SRGB" /> for other RGBtextures and <see cref="SDL_Colorspace.SDL_COLORSPACE_JPEG" /> for YUV textures.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER" />:one of the enumerated values in <see cref="SDL_PixelFormat" />,defaults to the best RGBA format for the renderer</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER" />:one of the enumerated values in <see cref="SDL_TextureAccess" />,defaults to <see cref="SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC" /></para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER" />:the width of the texture in pixels, required</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER" />:the height of the texture in pixels, required</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT" />:for HDR10 and floating point textures, this defines the value of 100%diffuse white, with higher values being displayed in the High DynamicRange headroom. This defaults to 100 for HDR10 textures and 1.0 forfloating point textures.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT" />:for HDR10 and floating point textures, this defines the maximum dynamicrange used by the content, in terms of the SDR white point. This would beequivalent to maxCLL /<see cref="SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT" />for HDR10 content. If this is defined, any values outside the rangesupported by the display will be scaled into the available HDR headroom,otherwise they are clipped.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d11 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER" />:the ID3D11Texture2D associated with the texture, if you want to wrap anexisting texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER" />:the ID3D11Texture2D associated with the U plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER" />:the ID3D11Texture2D associated with the V plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d12 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER" />:the ID3D12Resource associated with the texture, if you want to wrap anexisting texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER" />:the ID3D12Resource associated with the U plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER" />:the ID3D12Resource associated with the V plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the metal renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER" />:the CVPixelBufferRef associated with the texture, if you want to create atexture from an existing pixel buffer.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the opengl renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER" />:the GLuint texture associated with the texture, if you want to wrap anexisting texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER" />:the GLuint texture associated with the UV plane of an NV12 texture, ifyou want to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER" />:the GLuint texture associated with the U plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER" />:the GLuint texture associated with the V plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the opengles2 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER" />:the GLuint texture associated with the texture, if you want to wrap anexisting texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER" />:the GLuint texture associated with the texture, if you want to wrap anexisting texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER" />:the GLuint texture associated with the UV plane of an NV12 texture, ifyou want to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER" />:the GLuint texture associated with the U plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER" />:the GLuint texture associated with the V plane of a YUV texture, if youwant to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the vulkan renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER" />:the VkImage with layout VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMALassociated with the texture, if you want to wrap an existing texture.</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_CreateProperties" />
		/// <seealso cref="SDL_CreateTexture" />
		/// <seealso cref="SDL_CreateTextureFromSurface" />
		/// <seealso cref="SDL_DestroyTexture" />
		/// <seealso cref="SDL_GetTextureSize" />
		/// <seealso cref="SDL_UpdateTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateTextureWithProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Texture * SDL_CreateTextureWithProperties(SDL_Renderer *renderer, SDL_PropertiesID props);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_CreateTextureWithProperties(IntPtr renderer, uint props);

		/// <summary>
		///   <para>Get the properties associated with a texture.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_PropertiesID" />) Returns a valid property ID onsuccess or 0 on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The following read-only properties are provided by SDL:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_COLORSPACE_NUMBER" />:an <see cref="SDL_ColorSpace" /> value describing the texturecolorspace.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_FORMAT_NUMBER" />: oneof the enumerated values in <see cref="SDL_PixelFormat" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_ACCESS_NUMBER" />: oneof the enumerated values in <see cref="SDL_TextureAccess" />.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_WIDTH_NUMBER" />: thewidth of the texture in pixels.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_HEIGHT_NUMBER" />: theheight of the texture in pixels.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT" />:for HDR10 and floating point textures, this defines the value of 100%diffuse white, with higher values being displayed in the High DynamicRange headroom. This defaults to 100 for HDR10 textures and 1.0 for othertextures.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT" />:for HDR10 and floating point textures, this defines the maximum dynamicrange used by the content, in terms of the SDR white point. If this isdefined, any values outside the range supported by the display will bescaled into the available HDR headroom, otherwise they are clipped. Thisdefaults to 1.0 for SDR textures, 4.0 for HDR10 textures, and no defaultfor floating point textures.</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d11 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER" />:the ID3D11Texture2D associated with the texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER" />:the ID3D11Texture2D associated with the U plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER" />:the ID3D11Texture2D associated with the V plane of a YUV texture</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the direct3d12 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER" />:the ID3D12Resource associated with the texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER" />:the ID3D12Resource associated with the U plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER" />:the ID3D12Resource associated with the V plane of a YUV texture</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the vulkan renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_VULKAN_TEXTURE_POINTER" />:the VkImage associated with the texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_VULKAN_TEXTURE_U_POINTER" />:the VkImage associated with the U plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_VULKAN_TEXTURE_V_POINTER" />:the VkImage associated with the V plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_VULKAN_TEXTURE_UV_POINTER" />:the VkImage associated with the UV plane of a NV12/NV21 texture</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the opengl renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER" />:the GLuint texture associated with the texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER" />:the GLuint texture associated with the UV plane of an NV12 texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER" />:the GLuint texture associated with the U plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER" />:the GLuint texture associated with the V plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER" />:the GLenum for the texture target (<c>GL_TEXTURE_2D</c>,<c>GL_TEXTURE_RECTANGLE_ARB</c>, etc)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT" />:the texture coordinate width of the texture (0.0 - 1.0)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT" />:the texture coordinate height of the texture (0.0 - 1.0)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the opengles2 renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER" />:the GLuint texture associated with the texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER" />:the GLuint texture associated with the UV plane of an NV12 texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER" />:the GLuint texture associated with the U plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER" />:the GLuint texture associated with the V plane of a YUV texture</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER" />:the GLenum for the texture target (<c>GL_TEXTURE_2D</c>,<c>GL_TEXTURE_EXTERNAL_OES</c>, etc)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>With the vulkan renderer:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>
		///           <see cref="SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER" />:the VkImage associated with the texture</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureProperties<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_PropertiesID SDL_GetTextureProperties(SDL_Texture *texture);
		/// </code><para>                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_GetTextureProperties(IntPtr texture); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the renderer that created an <see cref="SDL_Texture" />.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Renderer" /> *) Returns a pointer to the<see cref="SDL_Renderer" /> that created the texture, or NULL on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRendererFromTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Renderer * SDL_GetRendererFromTexture(SDL_Texture *texture);
		/// </code><para>                       </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetRendererFromTexture(IntPtr texture); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the size of a texture, as floating point values.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                                                                                                       </para>
		/// </param>
		/// <param name="w">
		///   <para> a pointer filled in with the width of the texture in pixels. This argument can be NULL if you don't need this information.  </para>
		/// </param>
		/// <param name="h">
		///   <para> a pointer filled in with the height of the texture in pixels. This argument can be NULL if you don't need this information. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureSize(SDL_Texture *texture, float *w, float *h);
		/// </code><para>                                                                                                                             </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureSize(IntPtr texture, out float w, out float h); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set an additional color value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                 </para>
		/// </param>
		/// <param name="r">
		///   <para> the red color value multiplied into copy operations.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green color value multiplied into copy operations. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue color value multiplied into copy operations.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When this texture is rendered, during the copy operation each source colorchannel is modulated by the appropriate color value according to thefollowing formula:</para>
		///   <para>
		///     <c>srcC = srcC * (color / 255)</c>
		///   </para>
		///   <para>Color modulation is not always supported by the renderer; it will returnfalse if color modulation is not supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextureColorMod" />
		/// <seealso cref="SDL_SetTextureAlphaMod" />
		/// <seealso cref="SDL_SetTextureColorModFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextureColorMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b);
		/// </code><para>                                                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextureColorMod(IntPtr texture, byte r, byte g, byte b); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set an additional color value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                 </para>
		/// </param>
		/// <param name="r">
		///   <para> the red color value multiplied into copy operations.   </para>
		/// </param>
		/// <param name="g">
		///   <para> the green color value multiplied into copy operations. </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue color value multiplied into copy operations.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When this texture is rendered, during the copy operation each source colorchannel is modulated by the appropriate color value according to thefollowing formula:</para>
		///   <para>
		///     <c>srcC = srcC * color</c>
		///   </para>
		///   <para>Color modulation is not always supported by the renderer; it will returnfalse if color modulation is not supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextureColorModFloat" />
		/// <seealso cref="SDL_SetTextureAlphaModFloat" />
		/// <seealso cref="SDL_SetTextureColorMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextureColorModFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextureColorModFloat(SDL_Texture *texture, float r, float g, float b);
		/// </code><para>                                                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextureColorModFloat(IntPtr texture, float r, float g, float b); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the additional color value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                                   </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the current red color value.   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the current green color value. </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the current blue color value.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetTextureAlphaMod" />
		/// <seealso cref="SDL_GetTextureColorModFloat" />
		/// <seealso cref="SDL_SetTextureColorMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureColorMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureColorMod(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureColorMod(IntPtr texture, out byte r, out byte g, out byte b); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the additional color value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                                   </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the current red color value.   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the current green color value. </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the current blue color value.  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetTextureAlphaModFloat" />
		/// <seealso cref="SDL_GetTextureColorMod" />
		/// <seealso cref="SDL_SetTextureColorModFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureColorModFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureColorModFloat(SDL_Texture *texture, float *r, float *g, float *b);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureColorModFloat(IntPtr texture, out float r, out float g, out float b); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set an additional alpha value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                  </para>
		/// </param>
		/// <param name="alpha">
		///   <para> the source alpha value multiplied into copy operations. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When this texture is rendered, during the copy operation the source alphavalue is modulated by this alpha value according to the following formula:</para>
		///   <para>
		///     <c>srcA = srcA * (alpha / 255)</c>
		///   </para>
		///   <para>Alpha modulation is not always supported by the renderer; it will returnfalse if alpha modulation is not supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextureAlphaMod" />
		/// <seealso cref="SDL_SetTextureAlphaModFloat" />
		/// <seealso cref="SDL_SetTextureColorMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextureAlphaMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextureAlphaMod(IntPtr texture, byte alpha); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set an additional alpha value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                  </para>
		/// </param>
		/// <param name="alpha">
		///   <para> the source alpha value multiplied into copy operations. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When this texture is rendered, during the copy operation the source alphavalue is modulated by this alpha value according to the following formula:</para>
		///   <para>
		///     <c>srcA = srcA * alpha</c>
		///   </para>
		///   <para>Alpha modulation is not always supported by the renderer; it will returnfalse if alpha modulation is not supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextureAlphaModFloat" />
		/// <seealso cref="SDL_SetTextureAlphaMod" />
		/// <seealso cref="SDL_SetTextureColorModFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextureAlphaModFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextureAlphaModFloat(SDL_Texture *texture, float alpha);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextureAlphaModFloat(IntPtr texture, float alpha); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the additional alpha value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                             </para>
		/// </param>
		/// <param name="alpha">
		///   <para> a pointer filled in with the current alpha value. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetTextureAlphaModFloat" />
		/// <seealso cref="SDL_GetTextureColorMod" />
		/// <seealso cref="SDL_SetTextureAlphaMod" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureAlphaMod<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureAlphaMod(SDL_Texture *texture, Uint8 *alpha);
		/// </code><para>                                                   </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureAlphaMod(IntPtr texture, out byte alpha); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the additional alpha value multiplied into render copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                             </para>
		/// </param>
		/// <param name="alpha">
		///   <para> a pointer filled in with the current alpha value. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetTextureAlphaMod" />
		/// <seealso cref="SDL_GetTextureColorModFloat" />
		/// <seealso cref="SDL_SetTextureAlphaModFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureAlphaModFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureAlphaModFloat(SDL_Texture *texture, float *alpha);
		/// </code><para>                                                   </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureAlphaModFloat(IntPtr texture, out float alpha); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set the blend mode for a texture, used by <see cref="SDL_RenderTexture" />().</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                          </para>
		/// </param>
		/// <param name="blendMode">
		///   <para> the <see cref="SDL_BlendMode" /> to use for texture blending. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the blend mode is not supported, the closest supported mode is chosenand this function returns false.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextureBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextureBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode);
		/// </code><para>                                                                 </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextureBlendMode(IntPtr texture, uint blendMode); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the blend mode used for texture copy operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                                                </para>
		/// </param>
		/// <param name="blendMode">
		///   <para> a pointer filled in with the current <see cref="SDL_BlendMode" />. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetTextureBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode *blendMode);
		/// </code><para>                                                                      </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureBlendMode(IntPtr texture, IntPtr blendMode); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set the scale mode used for texture scale operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                         </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> the <see cref="SDL_ScaleMode" /> to use for texture scaling. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The default texture scale mode is<see cref="SDL_ScaleMode.SDL_SCALEMODE_LINEAR" />.</para>
		///   <para>If the scale mode is not supported, the closest supported mode is chosen.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetTextureScaleMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetTextureScaleMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode scaleMode);
		/// </code><para>                                                                </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetTextureScaleMode(IntPtr texture, SDL_ScaleMode scaleMode); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the scale mode used for texture scale operations.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to query.                            </para>
		/// </param>
		/// <param name="scaleMode">
		///   <para> a pointer filled in with the current scale mode. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetTextureScaleMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTextureScaleMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode *scaleMode);
		/// </code><para>                                                  </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetTextureScaleMode(IntPtr texture, out SDL_ScaleMode scaleMode); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Update the given texture rectangle with new pixel data.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                                                                   </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure representing the area to update, or NULL to update the entire texture. </para>
		/// </param>
		/// <param name="pixels">
		///   <para> the raw pixel data in the format of the texture.                                                         </para>
		/// </param>
		/// <param name="pitch">
		///   <para> the number of bytes in a row of pixel data, including padding between lines.                             </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixel data must be in the pixel format of the texture, which can bequeried using the<see cref="SDL_PROP_TEXTURE_FORMAT_NUMBER" /> property.</para>
		///   <para>This is a fairly slow function, intended for use with static textures thatdo not change often.</para>
		///   <para>If the texture is intended to be updated often, it is preferred to createthe texture as streaming and use the locking functions referenced below.While this function will work with streaming textures, for optimizationreasons you may not get the pixels back if you lock the texture afterward.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockTexture" />
		/// <seealso cref="SDL_UnlockTexture" />
		/// <seealso cref="SDL_UpdateNVTexture" />
		/// <seealso cref="SDL_UpdateYUVTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UpdateTexture(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch);
		/// </code><para>                                                                                                          </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UpdateTexture(IntPtr texture, ref SDL_Rect rect, IntPtr pixels, int pitch); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Update a rectangle within a planar YV12 or IYUV texture with new pixel data.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                                                </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer to the rectangle of pixels to update, or NULL to update the entire texture. </para>
		/// </param>
		/// <param name="Yplane">
		///   <para> the raw pixel data for the Y plane.                                                   </para>
		/// </param>
		/// <param name="Ypitch">
		///   <para> the number of bytes between rows of pixel data for the Y plane.                       </para>
		/// </param>
		/// <param name="Uplane">
		///   <para> the raw pixel data for the U plane.                                                   </para>
		/// </param>
		/// <param name="Upitch">
		///   <para> the number of bytes between rows of pixel data for the U plane.                       </para>
		/// </param>
		/// <param name="Vplane">
		///   <para> the raw pixel data for the V plane.                                                   </para>
		/// </param>
		/// <param name="Vpitch">
		///   <para> the number of bytes between rows of pixel data for the V plane.                       </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can use <see cref="SDL_UpdateTexture" />() as long as your pixeldata is a contiguous block of Y and U/V planes in the proper order, butthis function is available if your pixel data is not contiguous.</para>
		/// </remarks>
		/// <seealso cref="SDL_UpdateNVTexture" />
		/// <seealso cref="SDL_UpdateTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateYUVTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UpdateYUVTexture(SDL_Texture *texture,
		///                      const SDL_Rect *rect,
		///                      const Uint8 *Yplane, int Ypitch,
		///                      const Uint8 *Uplane, int Upitch,
		///                      const Uint8 *Vplane, int Vpitch);
		/// </code><para>                                                                                       </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UpdateYUVTexture(IntPtr texture, ref SDL_Rect rect, IntPtr Yplane, int Ypitch, IntPtr Uplane, int Upitch, IntPtr Vplane, int Vpitch); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Update a rectangle within a planar NV12 or NV21 texture with new pixels.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to update.                                                                </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer to the rectangle of pixels to update, or NULL to update the entire texture. </para>
		/// </param>
		/// <param name="Yplane">
		///   <para> the raw pixel data for the Y plane.                                                   </para>
		/// </param>
		/// <param name="Ypitch">
		///   <para> the number of bytes between rows of pixel data for the Y plane.                       </para>
		/// </param>
		/// <param name="UVplane">
		///   <para> the raw pixel data for the UV plane.                                                  </para>
		/// </param>
		/// <param name="UVpitch">
		///   <para> the number of bytes between rows of pixel data for the UV plane.                      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can use <see cref="SDL_UpdateTexture" />() as long as your pixeldata is a contiguous block of NV12/21 planes in the proper order, but thisfunction is available if your pixel data is not contiguous.</para>
		/// </remarks>
		/// <seealso cref="SDL_UpdateTexture" />
		/// <seealso cref="SDL_UpdateYUVTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UpdateNVTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_UpdateNVTexture(SDL_Texture *texture,
		///                      const SDL_Rect *rect,
		///                      const Uint8 *Yplane, int Ypitch,
		///                      const Uint8 *UVplane, int UVpitch);
		/// </code><para>                                                                                       </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_UpdateNVTexture(IntPtr texture, ref SDL_Rect rect, IntPtr Yplane, int Ypitch, IntPtr UVplane, int UVpitch); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Lock a portion of the texture for write-only pixel access.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to lock for access, which was created with <see cref="SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING" />. </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure representing the area to lock for access; NULL to lock the entire texture.         </para>
		/// </param>
		/// <param name="pixels">
		///   <para> this is filled in with a pointer to the locked pixels, appropriately offset by the locked area.                      </para>
		/// </param>
		/// <param name="pitch">
		///   <para> this is filled in with the pitch of the locked pixels; the pitch is the length of one row in bytes.                  </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false if the texture is not valid or wasnot created with<see cref="SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING" />; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>As an optimization, the pixels made available for editing don't necessarilycontain the old texture data. This is a write-only operation, and if youneed to keep a copy of the texture data you should do that at theapplication level.</para>
		///   <para>You must use <see cref="SDL_UnlockTexture" />() to unlock the pixelsand apply any changes.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockTextureToSurface" />
		/// <seealso cref="SDL_UnlockTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LockTexture(SDL_Texture *texture,
		///                 const SDL_Rect *rect,
		///                 void **pixels, int *pitch);
		/// </code><para>                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_LockTexture(IntPtr texture, ref SDL_Rect rect, out IntPtr pixels, out int pitch); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Lock a portion of the texture for write-only pixel access, and expose it as a SDL surface.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to lock for access, which must be created with <see cref="SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING" />. </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer to the rectangle to lock for access. If the rect is NULL, the entire texture will be locked.                   </para>
		/// </param>
		/// <param name="surface">
		///   <para> this is filled in with an SDL surface representing the locked area.                                                      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Besides providing an <see cref="SDL_Surface" /> instead of raw pixel data,this function operates like <see cref="SDL_LockTexture" />.</para>
		///   <para>As an optimization, the pixels made available for editing don't necessarilycontain the old texture data. This is a write-only operation, and if youneed to keep a copy of the texture data you should do that at theapplication level.</para>
		///   <para>You must use <see cref="SDL_UnlockTexture" />() to unlock the pixelsand apply any changes.</para>
		///   <para>The returned surface is freed internally after calling<see cref="SDL_UnlockTexture" />() or<see cref="SDL_DestroyTexture" />(). The caller should not free it.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockTexture" />
		/// <seealso cref="SDL_UnlockTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_LockTextureToSurface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_LockTextureToSurface(SDL_Texture *texture, const SDL_Rect *rect, SDL_Surface **surface);
		/// </code><para>                                                                                                                          </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_LockTextureToSurface(IntPtr texture, ref SDL_Rect rect, out IntPtr surface); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Unlock a texture, uploading the changes to video memory, if needed.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> a texture locked by <see cref="SDL_LockTexture" />(). </para>
		/// </param>
		/// <remarks>
		///   <para>Warning: Please note that <see cref="SDL_LockTexture" />() isintended to be write-only; it will not guarantee the previous contents ofthe texture will be provided. You must fully initialize any area of atexture that you lock before unlocking it, as the pixels might otherwise beuninitialized memory.</para>
		///   <para>Which is to say: locking and immediately unlocking a texture can result incorrupted textures, depending on the renderer in use.</para>
		/// </remarks>
		/// <seealso cref="SDL_LockTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_UnlockTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_UnlockTexture(SDL_Texture *texture);
		/// </code><para>                                                           </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_UnlockTexture(IntPtr texture); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Set a texture as the current rendering target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                                                                  </para>
		/// </param>
		/// <param name="texture">
		///   <para> the targeted texture, which must be created with the <see cref="SDL_TextureAccess.SDL_TEXTUREACCESS_TARGET" /> flag, or NULL to render to the window instead of a texture. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The default render target is the window for which the renderer was created.To stop rendering to a texture and render to the window again, call thisfunction with a NULL <c>texture</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderTarget" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderTarget<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture);
		/// </code><para>                                                                                                                                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderTarget(IntPtr renderer, IntPtr texture); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Get the current render target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Texture" /> *) Returns the current render target or NULLfor the default render target.</para>
		/// </returns>
		/// <remarks>
		///   <para>The default render target is the window for which the renderer was created,and is reported a NULL here.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderTarget" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderTarget<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Texture * SDL_GetRenderTarget(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetRenderTarget(IntPtr renderer);

		/// <summary>
		///   <para>Set a device independent resolution and presentation mode for rendering.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                </para>
		/// </param>
		/// <param name="w">
		///   <para> the width of the logical resolution.  </para>
		/// </param>
		/// <param name="h">
		///   <para> the height of the logical resolution. </para>
		/// </param>
		/// <param name="mode">
		///   <para> the presentation mode used.           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function sets the width and height of the logical rendering output.The renderer will act as if the window is always the requested dimensions,scaling to the actual window resolution as necessary.</para>
		///   <para>This can be useful for games that expect a fixed size, but would like toscale the output to whatever is available, regardless of how a user resizesa window, or if the display is high DPI.</para>
		///   <para>You can disable logical coordinates by setting the mode to<see cref="SDL_RendererLogicalPresentation.SDL_LOGICAL_PRESENTATION_DISABLED" />, andin that case you get the full pixel resolution of the output window; it issafe to toggle logical presentation during the rendering of a frame:perhaps most of the rendering is done to specific dimensions but to makefonts look sharp, the app turns off logical presentation while drawingtext.</para>
		///   <para>Letterboxing will only happen if logical presentation is enabled during<see cref="SDL_RenderPresent" />; be sure to reenable it first if youwere using it.</para>
		///   <para>You can convert coordinates in an event into rendering coordinates using<see cref="SDL_ConvertEventToRenderCoordinates" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_ConvertEventToRenderCoordinates" />
		/// <seealso cref="SDL_GetRenderLogicalPresentation" />
		/// <seealso cref="SDL_GetRenderLogicalPresentationRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderLogicalPresentation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderLogicalPresentation(SDL_Renderer *renderer, int w, int h, SDL_RendererLogicalPresentation mode);
		/// </code><para>                                       </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderLogicalPresentation(IntPtr renderer, int w, int h, SDL_RendererLogicalPresentation mode);

		/// <summary>
		///   <para>Get device independent resolution and presentation mode for rendering.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.               </para>
		/// </param>
		/// <param name="w">
		///   <para> an int to be filled with the width.  </para>
		/// </param>
		/// <param name="h">
		///   <para> an int to be filled with the height. </para>
		/// </param>
		/// <param name="mode">
		///   <para> the presentation mode used.          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function gets the width and height of the logical rendering output, orthe output size in pixels if a logical resolution is not enabled.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderLogicalPresentation" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderLogicalPresentation<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderLogicalPresentation(SDL_Renderer *renderer, int *w, int *h, SDL_RendererLogicalPresentation *mode);
		/// </code><para>                                      </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderLogicalPresentation(IntPtr renderer, out int w, out int h, out SDL_RendererLogicalPresentation mode);

		/// <summary>
		///   <para>Get the final presentation rectangle for rendering.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                  </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer filled in with the final presentation rectangle, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns the calculated rectangle used for logicalpresentation, based on the presentation mode and output size. If logicalpresentation is disabled, it will fill the rectangle with the output size,in pixels.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderLogicalPresentation" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderLogicalPresentationRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderLogicalPresentationRect(SDL_Renderer *renderer, SDL_FRect *rect);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderLogicalPresentationRect(IntPtr renderer, out SDL_FRect rect);

		/// <summary>
		///   <para>Get a point in render coordinates when given a point in window coordinates.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                        </para>
		/// </param>
		/// <param name="window_x">
		///   <para> the x coordinate in window coordinates.                       </para>
		/// </param>
		/// <param name="window_y">
		///   <para> the y coordinate in window coordinates.                       </para>
		/// </param>
		/// <param name="x">
		///   <para> a pointer filled with the x coordinate in render coordinates. </para>
		/// </param>
		/// <param name="y">
		///   <para> a pointer filled with the y coordinate in render coordinates. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This takes into account several states:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>The window dimensions.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The logical presentation settings(<see cref="SDL_SetRenderLogicalPresentation" />)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The scale (<see cref="SDL_SetRenderScale" />)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The viewport (<see cref="SDL_SetRenderViewport" />)</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderLogicalPresentation" />
		/// <seealso cref="SDL_SetRenderScale" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderCoordinatesFromWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderCoordinatesFromWindow(SDL_Renderer *renderer, float window_x, float window_y, float *x, float *y);
		/// </code><para>                                                               </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderCoordinatesFromWindow(IntPtr renderer, float window_x, float window_y, out float x, out float y);

		/// <summary>
		///   <para>Get a point in window coordinates when given a point in render coordinates.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                        </para>
		/// </param>
		/// <param name="x">
		///   <para> the x coordinate in render coordinates.                       </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate in render coordinates.                       </para>
		/// </param>
		/// <param name="window_x">
		///   <para> a pointer filled with the x coordinate in window coordinates. </para>
		/// </param>
		/// <param name="window_y">
		///   <para> a pointer filled with the y coordinate in window coordinates. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This takes into account several states:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>The window dimensions.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The logical presentation settings(<see cref="SDL_SetRenderLogicalPresentation" />)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The scale (<see cref="SDL_SetRenderScale" />)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The viewport (<see cref="SDL_SetRenderViewport" />)</para>
		///       </description>
		///     </item>
		///   </list>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderLogicalPresentation" />
		/// <seealso cref="SDL_SetRenderScale" />
		/// <seealso cref="SDL_SetRenderViewport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderCoordinatesToWindow<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderCoordinatesToWindow(SDL_Renderer *renderer, float x, float y, float *window_x, float *window_y);
		/// </code><para>                                                               </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderCoordinatesToWindow(IntPtr renderer, float x, float y, out float window_x, out float window_y);

		/// <summary>
		///   <para>Convert the coordinates in an event to render coordinates.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <param name="event">
		///   <para> the event to modify.   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This takes into account several states:</para>
		///   <list type="bullet">
		///     <item>
		///       <description>
		///         <para>The window dimensions.</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The logical presentation settings(<see cref="SDL_SetRenderLogicalPresentation" />)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The scale (<see cref="SDL_SetRenderScale" />)</para>
		///       </description>
		///     </item>
		///     <item>
		///       <description>
		///         <para>The viewport (<see cref="SDL_SetRenderViewport" />)</para>
		///       </description>
		///     </item>
		///   </list>
		///   <para>Touch coordinates are converted from normalized coordinates in the windowto non-normalized rendering coordinates.</para>
		///   <para>Once converted, the coordinates may be outside the rendering area.</para>
		/// </remarks>
		/// <seealso cref="SDL_RenderCoordinatesFromWindow" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ConvertEventToRenderCoordinates<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ConvertEventToRenderCoordinates(SDL_Renderer *renderer, SDL_Event *event);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_ConvertEventToRenderCoordinates(IntPtr renderer, ref SDL_Event @event);

		/// <summary>
		///   <para>Set the drawing area for rendering on the current target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                              </para>
		/// </param>
		/// <param name="rect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the drawing area, or NULL to set the viewport to the entire target. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Drawing will clip to this area (separately from any clipping done with<see cref="SDL_SetRenderClipRect" />), and the top left of thearea will become coordinate (0, 0) for future drawing commands.</para>
		///   <para>The area's width and height must be &gt;= 0.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderViewport" />
		/// <seealso cref="SDL_RenderViewportSet" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderViewport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderViewport(SDL_Renderer *renderer, const SDL_Rect *rect);
		/// </code><para>                                                                                                                     </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderViewport(IntPtr renderer, ref SDL_Rect rect);

		/// <summary>
		///   <para>Get the drawing area for the current target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                     </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure filled in with the current drawing area. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderViewportSet" />
		/// <seealso cref="SDL_SetRenderViewport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderViewport<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderViewport(SDL_Renderer *renderer, SDL_Rect *rect);
		/// </code><para>                                                                            </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderViewport(IntPtr renderer, out SDL_Rect rect);

		/// <summary>
		///   <para>Return whether an explicit rectangle was set as the viewport.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the viewport was set to a specific rectangle, orfalse if it was set to NULL (the entire target).</para>
		/// </returns>
		/// <remarks>
		///   <para>This is useful if you're saving and restoring the viewport and want to knowwhether you should restore a specific rectangle or NULL. Note that theviewport is always reset when changing rendering targets.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderViewport" />
		/// <seealso cref="SDL_SetRenderViewport" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderViewportSet<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderViewportSet(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderViewportSet(IntPtr renderer);

		/// <summary>
		///   <para>Get the safe area for rendering within the current viewport.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                  </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer filled in with the area that is safe for interactive content. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Some devices have portions of the screen which are partially obscured ornot interactive, possibly due to on-screen controls, curved edges, cameranotches, TV overscan, etc. This function provides the area of the currentviewport which is safe to have interactible content. You should continuerendering into the rest of the render target, but it should not containvisually important or interactible content.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderSafeArea<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderSafeArea(SDL_Renderer *renderer, SDL_Rect *rect);
		/// </code><para>                                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderSafeArea(IntPtr renderer, out SDL_Rect rect);

		/// <summary>
		///   <para>Set the clip rectangle for rendering on the specified target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                               </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure representing the clip area, relative to the viewport, or NULL to disable clipping. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetRenderClipRect" />
		/// <seealso cref="SDL_RenderClipEnabled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderClipRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderClipRect(SDL_Renderer *renderer, const SDL_Rect *rect);
		/// </code><para>                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderClipRect(IntPtr renderer, ref SDL_Rect rect);

		/// <summary>
		///   <para>Get the clip rectangle for the current target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                    </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure filled in with the current clipping area or an empty rectangle if clipping is disabled. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderClipEnabled" />
		/// <seealso cref="SDL_SetRenderClipRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderClipRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderClipRect(SDL_Renderer *renderer, SDL_Rect *rect);
		/// </code><para>                                                                                                                           </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderClipRect(IntPtr renderer, out SDL_Rect rect);

		/// <summary>
		///   <para>Get whether clipping is enabled on the given renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if clipping is enabled or false if not; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetRenderClipRect" />
		/// <seealso cref="SDL_SetRenderClipRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderClipEnabled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderClipEnabled(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderClipEnabled(IntPtr renderer);

		/// <summary>
		///   <para>Set the drawing scale for rendering on the current target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.         </para>
		/// </param>
		/// <param name="scaleX">
		///   <para> the horizontal scaling factor. </para>
		/// </param>
		/// <param name="scaleY">
		///   <para> the vertical scaling factor.   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The drawing coordinates are scaled by the x/y scaling factors before theyare used by the renderer. This allows resolution independent drawing with asingle coordinate system.</para>
		///   <para>If this results in scaling or subpixel drawing by the rendering backend, itwill be handled using the appropriate quality hints. For best results useinteger scaling factors.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderScale" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderScale(SDL_Renderer *renderer, float scaleX, float scaleY);
		/// </code><para>                                </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderScale(IntPtr renderer, float scaleX, float scaleY);

		/// <summary>
		///   <para>Get the drawing scale for the current target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                  </para>
		/// </param>
		/// <param name="scaleX">
		///   <para> a pointer filled in with the horizontal scaling factor. </para>
		/// </param>
		/// <param name="scaleY">
		///   <para> a pointer filled in with the vertical scaling factor.   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetRenderScale" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderScale(SDL_Renderer *renderer, float *scaleX, float *scaleY);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderScale(IntPtr renderer, out float scaleX, out float scaleY);

		/// <summary>
		///   <para>Set the color used for drawing operations.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                                                                                                             </para>
		/// </param>
		/// <param name="r">
		///   <para> the red value used to draw on the rendering target.                                                                                                                                                                </para>
		/// </param>
		/// <param name="g">
		///   <para> the green value used to draw on the rendering target.                                                                                                                                                              </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue value used to draw on the rendering target.                                                                                                                                                               </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha value used to draw on the rendering target; usually <see cref="SDL_ALPHA_OPAQUE" /> (255). Use <see cref="SDL_SetRenderDrawBlendMode" /> to specify how the alpha channel is used. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Set the color for drawing or filling rectangles, lines, and points, and for<see cref="SDL_RenderClear" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderDrawColor" />
		/// <seealso cref="SDL_SetRenderDrawColorFloat" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderDrawColor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
		/// </code><para>                                                                                                                                                                                                                    </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderDrawColor(IntPtr renderer, byte r, byte g, byte b, byte a);

		/// <summary>
		///   <para>Set the color used for drawing operations (Rect, Line and Clear).</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                                                       </para>
		/// </param>
		/// <param name="r">
		///   <para> the red value used to draw on the rendering target.                                                                                                          </para>
		/// </param>
		/// <param name="g">
		///   <para> the green value used to draw on the rendering target.                                                                                                        </para>
		/// </param>
		/// <param name="b">
		///   <para> the blue value used to draw on the rendering target.                                                                                                         </para>
		/// </param>
		/// <param name="a">
		///   <para> the alpha value used to draw on the rendering target. Use <see cref="SDL_SetRenderDrawBlendMode" /> to specify how the alpha channel is used. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Set the color for drawing or filling rectangles, lines, and points, and for<see cref="SDL_RenderClear" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderDrawColorFloat" />
		/// <seealso cref="SDL_SetRenderDrawColor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderDrawColorFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderDrawColorFloat(SDL_Renderer *renderer, float r, float g, float b, float a);
		/// </code><para>                                                                                                                                                              </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderDrawColorFloat(IntPtr renderer, float r, float g, float b, float a);

		/// <summary>
		///   <para>Get the color used for drawing operations (Rect, Line and Clear).</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                               </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the red value used to draw on the rendering target.                                                         </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the green value used to draw on the rendering target.                                                       </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the blue value used to draw on the rendering target.                                                        </para>
		/// </param>
		/// <param name="a">
		///   <para> a pointer filled in with the alpha value used to draw on the rendering target; usually <see cref="SDL_ALPHA_OPAQUE" /> (255). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetRenderDrawColorFloat" />
		/// <seealso cref="SDL_SetRenderDrawColor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderDrawColor<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderDrawColor(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
		/// </code><para>                                                                                                                                      </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderDrawColor(IntPtr renderer, out byte r, out byte g, out byte b, out byte a);

		/// <summary>
		///   <para>Get the color used for drawing operations (Rect, Line and Clear).</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                         </para>
		/// </param>
		/// <param name="r">
		///   <para> a pointer filled in with the red value used to draw on the rendering target.   </para>
		/// </param>
		/// <param name="g">
		///   <para> a pointer filled in with the green value used to draw on the rendering target. </para>
		/// </param>
		/// <param name="b">
		///   <para> a pointer filled in with the blue value used to draw on the rendering target.  </para>
		/// </param>
		/// <param name="a">
		///   <para> a pointer filled in with the alpha value used to draw on the rendering target. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetRenderDrawColorFloat" />
		/// <seealso cref="SDL_GetRenderDrawColor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderDrawColorFloat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderDrawColorFloat(SDL_Renderer *renderer, float *r, float *g, float *b, float *a);
		/// </code><para>                                                                                </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderDrawColorFloat(IntPtr renderer, out float r, out float g, out float b, out float a);

		/// <summary>
		///   <para>Set the color scale used for render operations.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <param name="scale">
		///   <para> the color scale value. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The color scale is an additional scale multiplied into the pixel colorvalue while rendering. This can be used to adjust the brightness of colorsduring HDR rendering, or changing HDR video brightness when playing on anSDR display.</para>
		///   <para>The color scale does not affect the alpha channel, only the colorbrightness.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderColorScale" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderColorScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderColorScale(SDL_Renderer *renderer, float scale);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderColorScale(IntPtr renderer, float scale);

		/// <summary>
		///   <para>Get the color scale used for render operations.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                  </para>
		/// </param>
		/// <param name="scale">
		///   <para> a pointer filled in with the current color scale value. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetRenderColorScale" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderColorScale<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderColorScale(SDL_Renderer *renderer, float *scale);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderColorScale(IntPtr renderer, out float scale);

		/// <summary>
		///   <para>Set the blend mode used for drawing operations (Fill and Line).</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                  </para>
		/// </param>
		/// <param name="blendMode">
		///   <para> the <see cref="SDL_BlendMode" /> to use for blending. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>If the blend mode is not supported, the closest supported mode is chosen.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderDrawBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderDrawBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode);
		/// </code><para>                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderDrawBlendMode(IntPtr renderer, uint blendMode);

		/// <summary>
		///   <para>Get the blend mode used for drawing operations.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                               </para>
		/// </param>
		/// <param name="blendMode">
		///   <para> a pointer filled in with the current <see cref="SDL_BlendMode" />. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetRenderDrawBlendMode" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderDrawBlendMode<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode);
		/// </code><para>                                                                      </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderDrawBlendMode(IntPtr renderer, IntPtr blendMode);

		/// <summary>
		///   <para>Clear the current rendering target with the drawing color.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function clears the entire rendering target, ignoring the viewport andthe clip rectangle. Note, that clearing will also set/fill all pixels ofthe rendering target to current renderer draw color, so make sure to invoke<see cref="SDL_SetRenderDrawColor" />() when needed.</para>
		/// </remarks>
		/// <seealso cref="SDL_SetRenderDrawColor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderClear<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderClear(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderClear(IntPtr renderer);

		/// <summary>
		///   <para>Draw a point on the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should draw a point. </para>
		/// </param>
		/// <param name="x">
		///   <para> the x coordinate of the point.          </para>
		/// </param>
		/// <param name="y">
		///   <para> the y coordinate of the point.          </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderPoints" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderPoint<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderPoint(SDL_Renderer *renderer, float x, float y);
		/// </code><para>                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderPoint(IntPtr renderer, float x, float y);

		/// <summary>
		///   <para>Draw multiple points on the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should draw multiple points. </para>
		/// </param>
		/// <param name="points">
		///   <para> the points to draw.                             </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of points to draw.                   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderPoint" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderPoints<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderPoints(SDL_Renderer *renderer, const SDL_FPoint *points, int count);
		/// </code><para>                                                 </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderPoints(IntPtr renderer, SDL_FPoint[] points, int count);

		/// <summary>
		///   <para>Draw a line on the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should draw a line. </para>
		/// </param>
		/// <param name="x1">
		///   <para> the x coordinate of the start point.   </para>
		/// </param>
		/// <param name="y1">
		///   <para> the y coordinate of the start point.   </para>
		/// </param>
		/// <param name="x2">
		///   <para> the x coordinate of the end point.     </para>
		/// </param>
		/// <param name="y2">
		///   <para> the y coordinate of the end point.     </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderLines" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderLine<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderLine(SDL_Renderer *renderer, float x1, float y1, float x2, float y2);
		/// </code><para>                                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderLine(IntPtr renderer, float x1, float y1, float x2, float y2);

		/// <summary>
		///   <para>Draw a series of connected lines on the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should draw multiple lines. </para>
		/// </param>
		/// <param name="points">
		///   <para> the points along the lines.                    </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of points, drawing count-1 lines.   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderLine" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderLines<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderLines(SDL_Renderer *renderer, const SDL_FPoint *points, int count);
		/// </code><para>                                                </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderLines(IntPtr renderer, SDL_FPoint[] points, int count);

		/// <summary>
		///   <para>Draw a rectangle on the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should draw a rectangle.                                             </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer to the destination rectangle, or NULL to outline the entire rendering target. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderRects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderRect(SDL_Renderer *renderer, const SDL_FRect *rect);
		/// </code><para>                                                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderRect(IntPtr renderer, ref SDL_FRect rect);

		/// <summary>
		///   <para>Draw some number of rectangles on the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should draw multiple rectangles. </para>
		/// </param>
		/// <param name="rects">
		///   <para> a pointer to an array of destination rectangles.    </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of rectangles.                           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderRects<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
		/// </code><para>                                                     </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderRects(IntPtr renderer, SDL_FRect[] rects, int count);

		/// <summary>
		///   <para>Fill a rectangle on the current rendering target with the drawing color at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should fill a rectangle.                                      </para>
		/// </param>
		/// <param name="rect">
		///   <para> a pointer to the destination rectangle, or NULL for the entire rendering target. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderFillRects" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderFillRect<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_FRect *rect);
		/// </code><para>                                                                                  </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderFillRect(IntPtr renderer, ref SDL_FRect rect);

		/// <summary>
		///   <para>Fill some number of rectangles on the current rendering target with the drawing color at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should fill multiple rectangles. </para>
		/// </param>
		/// <param name="rects">
		///   <para> a pointer to an array of destination rectangles.    </para>
		/// </param>
		/// <param name="count">
		///   <para> the number of rectangles.                           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderFillRect" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderFillRects<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderFillRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
		/// </code><para>                                                     </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderFillRects(IntPtr renderer, SDL_FRect[] rects, int count);

		/// <summary>
		///   <para>Copy a portion of the texture to the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should copy parts of a texture.                               </para>
		/// </param>
		/// <param name="texture">
		///   <para> the source texture.                                                              </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> a pointer to the source rectangle, or NULL for the entire texture.               </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> a pointer to the destination rectangle, or NULL for the entire rendering target. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderTextureRotated" />
		/// <seealso cref="SDL_RenderTextureTiled" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderTexture(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect);
		/// </code><para>                                                                                  </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderTexture(IntPtr renderer, IntPtr texture, ref SDL_FRect srcrect, ref SDL_FRect dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Copy a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should copy parts of a texture.                                                                                               </para>
		/// </param>
		/// <param name="texture">
		///   <para> the source texture.                                                                                                                              </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> a pointer to the source rectangle, or NULL for the entire texture.                                                                               </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> a pointer to the destination rectangle, or NULL for the entire rendering target.                                                                 </para>
		/// </param>
		/// <param name="angle">
		///   <para> an angle in degrees that indicates the rotation that will be applied to dstrect, rotating it in a clockwise direction.                           </para>
		/// </param>
		/// <param name="center">
		///   <para> a pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done around dstrect.w/2, dstrect.h/2). </para>
		/// </param>
		/// <param name="flip">
		///   <para> an <see cref="SDL_FlipMode" /> value stating which flipping actions should be performed on the texture.                                         </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderTextureRotated<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderTextureRotated(SDL_Renderer *renderer, SDL_Texture *texture,
		///                          const SDL_FRect *srcrect, const SDL_FRect *dstrect,
		///                          double angle, const SDL_FPoint *center,
		///                          SDL_FlipMode flip);
		/// </code><para>                                                                                                                                                  </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderTextureRotated(IntPtr renderer, IntPtr texture, ref SDL_FRect srcrect, ref SDL_FRect dstrect, double angle, ref SDL_FPoint center, SDL_FlipMode flip); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Tile a portion of the texture to the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should copy parts of a texture.                                                                                 </para>
		/// </param>
		/// <param name="texture">
		///   <para> the source texture.                                                                                                                </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> a pointer to the source rectangle, or NULL for the entire texture.                                                                 </para>
		/// </param>
		/// <param name="scale">
		///   <para> the scale used to transform srcrect into the destination rectangle, e.g. a 32x32 texture with a scale of 2 would fill 64x64 tiles. </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> a pointer to the destination rectangle, or NULL for the entire rendering target.                                                   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixels in <c>srcrect</c> will be repeated as many times as needed tocompletely fill <c>dstrect</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_RenderTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderTextureTiled<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderTextureTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float scale, const SDL_FRect *dstrect);
		/// </code><para>                                                                                                                                    </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderTextureTiled(IntPtr renderer, IntPtr texture, ref SDL_FRect srcrect, float scale, ref SDL_FRect dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Perform a scaled copy using the 9-grid algorithm to the current rendering target at subpixel precision.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer which should copy parts of a texture.                                                                          </para>
		/// </param>
		/// <param name="texture">
		///   <para> the source texture.                                                                                                         </para>
		/// </param>
		/// <param name="srcrect">
		///   <para> the <see cref="SDL_Rect" /> structure representing the rectangle to be used for the 9-grid, or NULL to use the entire texture. </para>
		/// </param>
		/// <param name="left_width">
		///   <para> the width, in pixels, of the left corners in <c>srcrect</c>.                                                                     </para>
		/// </param>
		/// <param name="right_width">
		///   <para> the width, in pixels, of the right corners in <c>srcrect</c>.                                                                    </para>
		/// </param>
		/// <param name="top_height">
		///   <para> the height, in pixels, of the top corners in <c>srcrect</c>.                                                                     </para>
		/// </param>
		/// <param name="bottom_height">
		///   <para> the height, in pixels, of the bottom corners in <c>srcrect</c>.                                                                  </para>
		/// </param>
		/// <param name="scale">
		///   <para> the scale used to transform the corner of <c>srcrect</c> into the corner of <c>dstrect</c>, or 0.0f for an unscaled copy.             </para>
		/// </param>
		/// <param name="dstrect">
		///   <para> a pointer to the destination rectangle, or NULL for the entire rendering target.                                            </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The pixels in the texture are split into a 3x3 grid, using the differentcorner sizes for each corner, and the sides and center making up theremaining pixels. The corners are then scaled using <c>scale</c> and fit intothe corners of the destination rectangle. The sides and center are thenstretched into place to cover the remaining destination rectangle.</para>
		/// </remarks>
		/// <seealso cref="SDL_RenderTexture" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderTexture9Grid<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderTexture9Grid(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect);
		/// </code><para>                                                                                                                             </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderTexture9Grid(IntPtr renderer, IntPtr texture, ref SDL_FRect srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, ref SDL_FRect dstrect); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Render a list of triangles, optionally using a texture and indices into the vertex array Color and alpha modulation is done per vertex (<see cref="SDL_SetTextureColorMod" /> and <see cref="SDL_SetTextureAlphaMod" /> are ignored).</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                       </para>
		/// </param>
		/// <param name="texture">
		///   <para> (optional) The SDL texture to use.                                                                                           </para>
		/// </param>
		/// <param name="vertices">
		///   <para> vertices.                                                                                                                    </para>
		/// </param>
		/// <param name="num_vertices">
		///   <para> number of vertices.                                                                                                          </para>
		/// </param>
		/// <param name="indices">
		///   <para> (optional) An array of integer indices into the 'vertices' array, if NULL all vertices will be rendered in sequential order. </para>
		/// </param>
		/// <param name="num_indices">
		///   <para> number of indices.                                                                                                           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderGeometryRaw" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderGeometry<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderGeometry(SDL_Renderer *renderer,
		///                    SDL_Texture *texture,
		///                    const SDL_Vertex *vertices, int num_vertices,
		///                    const int *indices, int num_indices);
		/// </code><para>                                                                                                                              </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>#include &lt;SDL3/SDL.h&gt;
		/// #include &lt;SDL3/SDL_main.h&gt;
		/// 
		/// int main(int argc, char *argv[])
		/// {
		///   bool quit = false;
		///   SDL_Window *window = SDL_CreateWindow("Triangle Example", 800, 600, 0);
		/// 
		///   SDL_Renderer *renderer = SDL_CreateRenderer(window, NULL);
		/// 
		///   #define vertLen 3
		///   SDL_Vertex vert[vertLen];
		/// 
		///   // center
		///   vert[0].position.x = 400;
		///   vert[0].position.y = 150;
		///   vert[0].color.r = 1.0;
		///   vert[0].color.g = 0.0;
		///   vert[0].color.b = 0.0;
		///   vert[0].color.a = 1.0;
		/// 
		///   // left
		///   vert[1].position.x = 200;
		///   vert[1].position.y = 450;
		///   vert[1].color.r = 0.0;
		///   vert[1].color.g = 0.0;
		///   vert[1].color.b = 1.0;
		///   vert[1].color.a = 1.0;
		/// 
		///   // right
		///   vert[2].position.x = 600;
		///   vert[2].position.y = 450;
		///   vert[2].color.r = 0.0;
		///   vert[2].color.g = 1.0;
		///   vert[2].color.b = 0.0;
		///   vert[2].color.a = 1.0;
		/// 
		///   while (!quit) {
		///    SDL_Event ev;
		///    while (SDL_PollEvent(&amp;ev) != 0) {
		///       switch(ev.type) {
		///         case SDL_EVENT_QUIT:
		///         quit = true;
		///         break;
		///       }
		///     }
		///     SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
		///     SDL_RenderClear(renderer);
		/// 
		///     SDL_RenderGeometry(renderer, NULL, vert, vertLen, NULL, 0);
		/// 
		///     SDL_RenderPresent(renderer);
		///   }
		/// 
		///   SDL_DestroyRenderer(renderer);
		///   SDL_DestroyWindow(window);
		///   SDL_Quit();
		///   return 0;
		/// }
		/// 
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderGeometry(IntPtr renderer, IntPtr texture, SDL_Vertex[] vertices, int num_vertices, int[] indices, int num_indices); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex (<see cref="SDL_SetTextureColorMod" /> and <see cref="SDL_SetTextureAlphaMod" /> are ignored).</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                </para>
		/// </param>
		/// <param name="texture">
		///   <para> (optional) The SDL texture to use.                                                                                    </para>
		/// </param>
		/// <param name="xy">
		///   <para> vertex positions.                                                                                                     </para>
		/// </param>
		/// <param name="xy_stride">
		///   <para> byte size to move from one element to the next element.                                                               </para>
		/// </param>
		/// <param name="color">
		///   <para> vertex colors (as <see cref="SDL_FColor" />).                                                                          </para>
		/// </param>
		/// <param name="color_stride">
		///   <para> byte size to move from one element to the next element.                                                               </para>
		/// </param>
		/// <param name="uv">
		///   <para> vertex normalized texture coordinates.                                                                                </para>
		/// </param>
		/// <param name="uv_stride">
		///   <para> byte size to move from one element to the next element.                                                               </para>
		/// </param>
		/// <param name="num_vertices">
		///   <para> number of vertices.                                                                                                   </para>
		/// </param>
		/// <param name="indices">
		///   <para> (optional) An array of indices into the 'vertices' arrays, if NULL all vertices will be rendered in sequential order. </para>
		/// </param>
		/// <param name="num_indices">
		///   <para> number of indices.                                                                                                    </para>
		/// </param>
		/// <param name="size_indices">
		///   <para> index size: 1 (byte), 2 (short), 4 (int).                                                                             </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_RenderGeometry" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderGeometryRaw<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderGeometryRaw(SDL_Renderer *renderer,
		///                    SDL_Texture *texture,
		///                    const float *xy, int xy_stride,
		///                    const SDL_FColor *color, int color_stride,
		///                    const float *uv, int uv_stride,
		///                    int num_vertices,
		///                    const void *indices, int num_indices, int size_indices);
		/// </code><para>                                                                                                                       </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderGeometryRaw(IntPtr renderer, IntPtr texture, IntPtr xy, int xy_stride, IntPtr color, int color_stride, IntPtr uv, int uv_stride, int num_vertices, IntPtr indices, int num_indices, int size_indices); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Read pixels from the current rendering target.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                                                  </para>
		/// </param>
		/// <param name="rect">
		///   <para> an <see cref="SDL_Rect" /> structure representing the area in pixels relative to the to current viewport, or NULL for the entire viewport. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Surface" /> *) Returns a new <see cref="SDL_Surface" /> onsuccess or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>The returned surface should be freed with<see cref="SDL_DestroySurface" />()</para>
		///   <para>WARNING: This is a very slow operation, and should not be usedfrequently. If you're using this on the main rendering target, it should becalled after rendering and before <see cref="SDL_RenderPresent" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderReadPixels<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Surface * SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect);
		/// </code><para>                                                                                                                                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_RenderReadPixels(IntPtr renderer, ref SDL_Rect rect);

		/// <summary>
		///   <para>Update the screen with any rendering performed since the previous call.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>SDL's rendering functions operate on a backbuffer; that is, calling arendering function such as <see cref="SDL_RenderLine" />() does notdirectly put a line on the screen, but rather updates the backbuffer. Assuch, you compose your entire scene and present the composed backbufferto the screen as a complete picture.</para>
		///   <para>Therefore, when using SDL's rendering API, one does all drawing intendedfor the frame, and then calls this function once per frame to present thefinal drawing to the user.</para>
		///   <para>The backbuffer should be considered invalidated after each present; do notassume that previous contents will exist between frames. You are stronglyencouraged to call <see cref="SDL_RenderClear" />() to initialize thebackbuffer before starting each new frame's drawing, even if you plan tooverwrite every pixel.</para>
		///   <para>Please note, that in case of rendering to a texture - there is no needto call <see cref="SDL_RenderPresent" /> after drawing neededobjects to a texture, and should not be done; you are only required tochange back the rendering target to default via<c>SDL_SetRenderTarget(renderer, NULL)</c> afterwards, as textures by themselvesdo not have a concept of backbuffers. Calling<see cref="SDL_RenderPresent" /> while rendering to a texture willstill update the screen with any current drawing that has been done to thewindow itself.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateRenderer" />
		/// <seealso cref="SDL_RenderClear" />
		/// <seealso cref="SDL_RenderFillRect" />
		/// <seealso cref="SDL_RenderFillRects" />
		/// <seealso cref="SDL_RenderLine" />
		/// <seealso cref="SDL_RenderLines" />
		/// <seealso cref="SDL_RenderPoint" />
		/// <seealso cref="SDL_RenderPoints" />
		/// <seealso cref="SDL_RenderRect" />
		/// <seealso cref="SDL_RenderRects" />
		/// <seealso cref="SDL_SetRenderDrawBlendMode" />
		/// <seealso cref="SDL_SetRenderDrawColor" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenderPresent<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenderPresent(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RenderPresent(IntPtr renderer);

		/// <summary>
		///   <para>Destroy the specified texture.</para>
		/// </summary>
		/// <param name="texture">
		///   <para> the texture to destroy. </para>
		/// </param>
		/// <remarks>
		///   <para>Passing NULL or an otherwise invalid texture will set the SDL error messageto "Invalid texture".</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateTexture" />
		/// <seealso cref="SDL_CreateTextureFromSurface" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyTexture<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyTexture(SDL_Texture *texture);
		/// </code><para>                         </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyTexture(IntPtr texture); // WARN_UNKNOWN_POINTER_PARAMETER

		/// <summary>
		///   <para>Destroy the rendering context for a window and free all associated textures.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <remarks>
		///   <para>This should be called before destroying the associated window.</para>
		/// </remarks>
		/// <seealso cref="SDL_CreateRenderer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DestroyRenderer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DestroyRenderer(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DestroyRenderer(IntPtr renderer);

		/// <summary>
		///   <para>Force the rendering context to flush any pending commands and state.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>You do not need to (and in fact, shouldn't) call this function unless youare planning to call into OpenGL/Direct3D/Metal/whatever directly, inaddition to using an <see cref="SDL_Renderer" />.</para>
		///   <para>This is for a very-specific case: if you are using SDL's render API, andyou plan to make OpenGL/D3D/whatever calls in addition to SDL render APIcalls. If this applies, you should call this function between calls toSDL's render API and the low-level API you're using in cooperation.</para>
		///   <para>In all other cases, you can ignore this function.</para>
		///   <para>This call makes SDL flush any pending rendering work it was queueing up todo later in a single batch, and marks any internal cached state as invalid,so it'll prepare all its state again later, from scratch.</para>
		///   <para>This means you do not need to save state in your rendering code to protectthe SDL renderer. However, there lots of arbitrary pieces of Direct3D andOpenGL state that can confuse things; you should use your best judgment andbe prepared to make changes if specific state needs to be protected.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_FlushRenderer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_FlushRenderer(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_FlushRenderer(IntPtr renderer);

		/// <summary>
		///   <para>Get the CAMetalLayer associated with the given Metal renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer to query. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns a <c>CAMetalLayer *</c> on success, or NULL if the rendererisn't a Metal renderer.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns <c>void *</c>, so SDL doesn't have to include Metal'sheaders, but it can be safely cast to a <c>CAMetalLayer *</c>.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderMetalCommandEncoder" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderMetalLayer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetRenderMetalLayer(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetRenderMetalLayer(IntPtr renderer);

		/// <summary>
		///   <para>Get the Metal command encoder for the current frame.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer to query. </para>
		/// </param>
		/// <returns>
		///   <para>(void *) Returns an <c>id&lt;MTLRenderCommandEncoder&gt;</c> on success, or NULL ifthe renderer isn't a Metal renderer or there was an error.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function returns <c>void *</c>, so SDL doesn't have to include Metal'sheaders, but it can be safely cast to an <c>id&lt;MTLRenderCommandEncoder&gt;</c>.</para>
		///   <para>This will return NULL if Metal refuses to give SDL a drawable to render to,which might happen if the window is hidden/minimized/offscreen. Thisdoesn't apply to command encoders for render targets, just the window'sbackbuffer. Check your return values!</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderMetalLayer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderMetalCommandEncoder<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>void * SDL_GetRenderMetalCommandEncoder(SDL_Renderer *renderer);
		/// </code><para>                        </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_GetRenderMetalCommandEncoder(IntPtr renderer);

		/// <summary>
		///   <para>Add a set of synchronization semaphores for the current frame.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the rendering context.                                                                                   </para>
		/// </param>
		/// <param name="wait_stage_mask">
		///   <para> the VkPipelineStageFlags for the wait.                                                                   </para>
		/// </param>
		/// <param name="wait_semaphore">
		///   <para> a VkSempahore to wait on before rendering the current frame, or 0 if not needed.                         </para>
		/// </param>
		/// <param name="signal_semaphore">
		///   <para> a VkSempahore that SDL will signal when rendering for the current frame is complete, or 0 if not needed. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The Vulkan renderer will wait for <c>wait_semaphore</c> before submittingrendering commands and signal <c>signal_semaphore</c> after rendering commandsare complete for this frame.</para>
		///   <para>This should be called each frame that you want semaphore synchronization.The Vulkan renderer may have multiple frames in flight on the GPU, so youshould have multiple semaphores that are used for synchronization. Querying<see cref="SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER" />will give you the maximum number of semaphores you'll need.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddVulkanRenderSemaphores<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_AddVulkanRenderSemaphores(SDL_Renderer *renderer, Uint32 wait_stage_mask, Sint64 wait_semaphore, Sint64 signal_semaphore);
		/// </code><para>                                                                                                          </para><br /><b>## Thread Safety ##</b><para>It is NOT safe to call this function from two threads at once.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_AddVulkanRenderSemaphores(IntPtr renderer, uint wait_stage_mask, long wait_semaphore, long signal_semaphore);

		/// <summary>
		///   <para>Toggle VSync of the given renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer to toggle.             </para>
		/// </param>
		/// <param name="vsync">
		///   <para> the vertical refresh sync interval. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>When a renderer is created, vsync defaults to<see cref="SDL_RENDERER_VSYNC_DISABLED" />.</para>
		///   <para>The <c>vsync</c> parameter can be 1 to synchronize present with every verticalrefresh, 2 to synchronize present with every second vertical refresh, etc.,<see cref="SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE" /> forlate swap tearing (adaptive vsync), or<see cref="SDL_WINDOW_SURFACE_VSYNC_DISABLED" /> todisable. Not every value is supported by every driver, so you should checkthe return value to see whether the requested setting is supported.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRenderVSync" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetRenderVSync<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetRenderVSync(SDL_Renderer *renderer, int vsync);
		/// 
		/// 
		/// #define SDL_RENDERER_VSYNC_DISABLED 0
		/// #define SDL_RENDERER_VSYNC_ADAPTIVE (-1)
		/// </code><para>                                     </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetRenderVSync(IntPtr renderer, int vsync);

		/// <summary>
		///   <para>Get VSync of the given renderer.</para>
		/// </summary>
		/// <param name="renderer">
		///   <para> the renderer to toggle.                                                                                                                     </para>
		/// </param>
		/// <param name="vsync">
		///   <para> an int filled with the current vertical refresh sync interval. See <see cref="SDL_SetRenderVSync" />() for the meaning of the value. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_SetRenderVSync" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRenderVSync<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_render.h">&lt;SDL3/SDL_render.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetRenderVSync(SDL_Renderer *renderer, int *vsync);
		/// </code><para>                                                                                                                                             </para><br /><b>## Thread Safety ##</b><para>You may only call this function from the main thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryRender">CategoryRender</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetRenderVSync(IntPtr renderer, out int vsync);

		// /usr/local/include/SDL3/SDL_storage.h

		/// <summary>
		///   <para>Function interface for <see cref="SDL_Storage" />.</para>
		/// </summary>
		/// <remarks>
		///   <para>Apps that want to supply a custom implementation of<see cref="SDL_Storage" /> will fill in all the functions in this struct,and then pass it to <see cref="SDL_OpenStorage" /> to create a custom<see cref="SDL_Storage" /> object.</para>
		///   <para>It is not usually necessary to do this; SDL provides standardimplementations for many things you might expect to do with an<see cref="SDL_Storage" />.</para>
		///   <para>This structure should be initialized using<see cref="SDL_INIT_INTERFACE" />()</para>
		/// </remarks>
		/// <seealso cref="SDL_INIT_INTERFACE" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StorageInterface<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_StorageInterface
		/// {
		///     /* The version of this interface */
		///     Uint32 version;
		/// 
		///     /* Called when the storage is closed */
		///     bool (SDLCALL *close)(void *userdata);
		/// 
		///     /* Optional, returns whether the storage is currently ready for access */
		///     bool (SDLCALL *ready)(void *userdata);
		/// 
		///     /* Enumerate a directory, optional for write-only storage */
		///     bool (SDLCALL *enumerate)(void *userdata, const char *path, SDL_EnumerateDirectoryCallback callback, void *callback_userdata);
		/// 
		///     /* Get path information, optional for write-only storage */
		///     bool (SDLCALL *info)(void *userdata, const char *path, SDL_PathInfo *info);
		/// 
		///     /* Read a file from storage, optional for write-only storage */
		///     bool (SDLCALL *read_file)(void *userdata, const char *path, void *destination, Uint64 length);
		/// 
		///     /* Write a file to storage, optional for read-only storage */
		///     bool (SDLCALL *write_file)(void *userdata, const char *path, const void *source, Uint64 length);
		/// 
		///     /* Create a directory, optional for read-only storage */
		///     bool (SDLCALL *mkdir)(void *userdata, const char *path);
		/// 
		///     /* Remove a file or empty directory, optional for read-only storage */
		///     bool (SDLCALL *remove)(void *userdata, const char *path);
		/// 
		///     /* Rename a path, optional for read-only storage */
		///     bool (SDLCALL *rename)(void *userdata, const char *oldpath, const char *newpath);
		/// 
		///     /* Copy a file, optional for read-only storage */
		///     bool (SDLCALL *copy)(void *userdata, const char *oldpath, const char *newpath);
		/// 
		///     /* Get the space remaining, optional for read-only storage */
		///     Uint64 (SDLCALL *space_remaining)(void *userdata);
		/// } SDL_StorageInterface;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_StorageInterface
		{
			public uint version;
			public IntPtr close; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr ready; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr enumerate; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr info; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr read_file; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr write_file; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr mkdir; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr remove; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr rename; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr copy; // WARN_ANONYMOUS_FUNCTION_POINTER
			public IntPtr space_remaining; // WARN_ANONYMOUS_FUNCTION_POINTER
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_OpenTitleStorage", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_OpenTitleStorage(byte* @override, uint props);
		/// <summary>
		///   <para>Opens up a read-only container for the application's filesystem.</para>
		/// </summary>
		/// <param name="override">
		///   <para> a path to override the backend's default title root.           </para>
		/// </param>
		/// <param name="props">
		///   <para> a property list that may contain backend-specific information. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Storage" /> *) Returns a title storage container on successor NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <seealso cref="SDL_CloseStorage" />
		/// <seealso cref="SDL_GetStorageFileSize" />
		/// <seealso cref="SDL_OpenUserStorage" />
		/// <seealso cref="SDL_ReadStorageFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenTitleStorage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Storage * SDL_OpenTitleStorage(const char *override, SDL_PropertiesID props);
		/// </code><para>                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static IntPtr SDL_OpenTitleStorage(string @override, uint props)
		{
			var @overrideUTF8 = EncodeAsUTF8(@override);
			var result = INTERNAL_SDL_OpenTitleStorage(@overrideUTF8, props);

			SDL_free((IntPtr) @overrideUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_OpenUserStorage", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_OpenUserStorage(byte* org, byte* app, uint props);
		/// <summary>
		///   <para>Opens up a container for a user's unique read/write filesystem.</para>
		/// </summary>
		/// <param name="org">
		///   <para> the name of your organization.                                 </para>
		/// </param>
		/// <param name="app">
		///   <para> the name of your application.                                  </para>
		/// </param>
		/// <param name="props">
		///   <para> a property list that may contain backend-specific information. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Storage" /> *) Returns a user storage container on successor NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>While title storage can generally be kept open throughout runtime, userstorage should only be opened when the client is ready to read/write files.This allows the backend to properly batch file operations and flush themwhen the container has been closed; ensuring safe and optimal save I/O.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseStorage" />
		/// <seealso cref="SDL_GetStorageFileSize" />
		/// <seealso cref="SDL_GetStorageSpaceRemaining" />
		/// <seealso cref="SDL_OpenTitleStorage" />
		/// <seealso cref="SDL_ReadStorageFile" />
		/// <seealso cref="SDL_StorageReady" />
		/// <seealso cref="SDL_WriteStorageFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenUserStorage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Storage * SDL_OpenUserStorage(const char *org, const char *app, SDL_PropertiesID props);
		/// </code><para>                                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static IntPtr SDL_OpenUserStorage(string org, string app, uint props)
		{
			var orgUTF8 = EncodeAsUTF8(org);
			var appUTF8 = EncodeAsUTF8(app);
			var result = INTERNAL_SDL_OpenUserStorage(orgUTF8, appUTF8, props);

			SDL_free((IntPtr) orgUTF8);
			SDL_free((IntPtr) appUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_OpenFileStorage", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_OpenFileStorage(byte* path);
		/// <summary>
		///   <para>Opens up a container for local filesystem storage.</para>
		/// </summary>
		/// <param name="path">
		///   <para> the base path prepended to all storage paths, or NULL for no base path. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Storage" /> *) Returns a filesystem storage container onsuccess or NULL on failure; call <see cref="SDL_GetError" />() for moreinformation.</para>
		/// </returns>
		/// <remarks>
		///   <para>This is provided for development and tools. Portable applications shoulduse <see cref="SDL_OpenTitleStorage" />() for access to game dataand <see cref="SDL_OpenUserStorage" />() for access to user data.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseStorage" />
		/// <seealso cref="SDL_GetStorageFileSize" />
		/// <seealso cref="SDL_GetStorageSpaceRemaining" />
		/// <seealso cref="SDL_OpenTitleStorage" />
		/// <seealso cref="SDL_OpenUserStorage" />
		/// <seealso cref="SDL_ReadStorageFile" />
		/// <seealso cref="SDL_WriteStorageFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenFileStorage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Storage * SDL_OpenFileStorage(const char *path);
		/// </code><para>                                                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static IntPtr SDL_OpenFileStorage(string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_OpenFileStorage(pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		/// <summary>
		///   <para>Opens up a container using a client-provided storage interface.</para>
		/// </summary>
		/// <param name="iface">
		///   <para> the interface that implements this storage, initialized using <see cref="SDL_INIT_INTERFACE" />(). </para>
		/// </param>
		/// <param name="userdata">
		///   <para> the pointer that will be passed to the interface functions.                                               </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Storage" /> *) Returns a storage container on success orNULL on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>Applications do not need to use this function unless they are providingtheir own <see cref="SDL_Storage" /> implementation. If you just need an<see cref="SDL_Storage" />, you should use the built-in implementations inSDL, like <see cref="SDL_OpenTitleStorage" />() or<see cref="SDL_OpenUserStorage" />().</para>
		///   <para>This function makes a copy of <c>iface</c> and the caller does not need to keepit around after this call.</para>
		/// </remarks>
		/// <seealso cref="SDL_CloseStorage" />
		/// <seealso cref="SDL_GetStorageFileSize" />
		/// <seealso cref="SDL_GetStorageSpaceRemaining" />
		/// <seealso cref="SDL_INIT_INTERFACE" />
		/// <seealso cref="SDL_ReadStorageFile" />
		/// <seealso cref="SDL_StorageReady" />
		/// <seealso cref="SDL_WriteStorageFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OpenStorage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Storage * SDL_OpenStorage(const SDL_StorageInterface *iface, void *userdata);
		/// </code><para>                                                                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr SDL_OpenStorage(ref SDL_StorageInterface iface, IntPtr userdata);

		/// <summary>
		///   <para>Closes and frees a storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container to close. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the container was freed with no errors, falseotherwise; call <see cref="SDL_GetError" />() for more information. Evenif the function returns an error, the container data will be freed; theerror is only for informational purposes.</para>
		/// </returns>
		/// <seealso cref="SDL_OpenFileStorage" />
		/// <seealso cref="SDL_OpenStorage" />
		/// <seealso cref="SDL_OpenTitleStorage" />
		/// <seealso cref="SDL_OpenUserStorage" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CloseStorage<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CloseStorage(SDL_Storage *storage);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_CloseStorage(IntPtr storage);

		/// <summary>
		///   <para>Checks if the storage container is ready to use.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container to query. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the container is ready, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function should be called in regular intervals until it returns true -however, it is not recommended to spinwait on this call, as the backend maydepend on a synchronous message loop.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_StorageReady<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_StorageReady(SDL_Storage *storage);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_StorageReady(IntPtr storage);

		[DllImport(nativeLibName, EntryPoint = "SDL_GetStorageFileSize", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GetStorageFileSize(IntPtr storage, byte* path, out ulong length);
		/// <summary>
		///   <para>Query the size of a file within a storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container to query.                  </para>
		/// </param>
		/// <param name="path">
		///   <para> the relative path of the file to query.        </para>
		/// </param>
		/// <param name="length">
		///   <para> a pointer to be filled with the file's length. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the file could be queried or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_ReadStorageFile" />
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetStorageFileSize<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetStorageFileSize(SDL_Storage *storage, const char *path, Uint64 *length);
		/// </code><para>                                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_GetStorageFileSize(IntPtr storage, string path, out ulong length)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_GetStorageFileSize(storage, pathUTF8, out length);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_ReadStorageFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_ReadStorageFile(IntPtr storage, byte* path, IntPtr destination, ulong length);
		/// <summary>
		///   <para>Synchronously read a file from a storage container into a client-provided buffer.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container to read from.               </para>
		/// </param>
		/// <param name="path">
		///   <para> the relative path of the file to read.          </para>
		/// </param>
		/// <param name="destination">
		///   <para> a client-provided buffer to read the file into. </para>
		/// </param>
		/// <param name="length">
		///   <para> the length of the destination buffer.           </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the file was read or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetStorageFileSize" />
		/// <seealso cref="SDL_StorageReady" />
		/// <seealso cref="SDL_WriteStorageFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_ReadStorageFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_ReadStorageFile(SDL_Storage *storage, const char *path, void *destination, Uint64 length);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_ReadStorageFile(IntPtr storage, string path, IntPtr destination, ulong length)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_ReadStorageFile(storage, pathUTF8, destination, length);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_WriteStorageFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_WriteStorageFile(IntPtr storage, byte* path, IntPtr source, ulong length);
		/// <summary>
		///   <para>Synchronously write a file from client memory into a storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container to write to.        </para>
		/// </param>
		/// <param name="path">
		///   <para> the relative path of the file to write. </para>
		/// </param>
		/// <param name="source">
		///   <para> a client-provided buffer to write from. </para>
		/// </param>
		/// <param name="length">
		///   <para> the length of the source buffer.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true if the file was written or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_GetStorageSpaceRemaining" />
		/// <seealso cref="SDL_ReadStorageFile" />
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_WriteStorageFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_WriteStorageFile(SDL_Storage *storage, const char *path, const void *source, Uint64 length);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_WriteStorageFile(IntPtr storage, string path, IntPtr source, ulong length)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_WriteStorageFile(storage, pathUTF8, source, length);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_CreateStorageDirectory", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_CreateStorageDirectory(IntPtr storage, byte* path);
		/// <summary>
		///   <para>Create a directory in a writable storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container.                 </para>
		/// </param>
		/// <param name="path">
		///   <para> the path of the directory to create. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CreateStorageDirectory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CreateStorageDirectory(SDL_Storage *storage, const char *path);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_CreateStorageDirectory(IntPtr storage, string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_CreateStorageDirectory(storage, pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_EnumerateStorageDirectory", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_EnumerateStorageDirectory(IntPtr storage, byte* path, SDL_EnumerateDirectoryCallback callback, IntPtr userdata);
		/// <summary>
		///   <para>Enumerate a directory in a storage container through a callback function.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container.                                       </para>
		/// </param>
		/// <param name="path">
		///   <para> the path of the directory to enumerate.                    </para>
		/// </param>
		/// <param name="callback">
		///   <para> a function that is called for each entry in the directory. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>callback</c>.                    </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function provides every directory entry through an app-providedcallback, called once for each directory entry, until all results have beenprovided or the callback returns &lt;= 0.</para>
		///   <para>This will return false if there was a system problem in general, or if acallback returns -1. A successful return means a callback returned 1 tohalt enumeration, or all directory entries were enumerated.</para>
		/// </remarks>
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnumerateStorageDirectory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_EnumerateStorageDirectory(SDL_Storage *storage, const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>// Example program
		/// // Use SDL3 to enumerate all directories in title storage
		/// 
		/// #include &lt;SDL3/SDL_log.h&gt;
		/// #include &lt;SDL3/SDL_main.h&gt;
		/// #include &lt;SDL3/SDL_storage.h&gt;
		/// 
		/// 
		/// SDL_EnumerationResult
		/// my_enumerate_dir_callback(void *userdata, const char* dirname, const char* fname)
		/// {
		///     SDL_Log("dirname: %s | fname: %s", dirname, fname);
		///     return SDL_ENUM_CONTINUE;
		/// }
		/// 
		/// int
		/// main(int argc, char** argv)
		/// {
		///     SDL_Storage *storage = SDL_OpenTitleStorage("", 0);
		///     if(storage == NULL) {
		///         SDL_Log("Unable to open storage %s", SDL_GetError());
		///     }
		/// 
		///     if(!SDL_EnumerateStorageDirectory(storage, ".", my_enumerate_dir_callback, NULL)) {
		///         SDL_Log("There was a system problem or the callback indicated failure.");
		///     } else {
		///         SDL_Log("All directories enumerated or the callback halted enumeration.");
		///     }
		/// 
		///     return 0;
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_EnumerateStorageDirectory(IntPtr storage, string path, SDL_EnumerateDirectoryCallback callback, IntPtr userdata)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_EnumerateStorageDirectory(storage, pathUTF8, callback, userdata);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_RemoveStoragePath", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_RemoveStoragePath(IntPtr storage, byte* path);
		/// <summary>
		///   <para>Remove a file or an empty directory in a writable storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container.                    </para>
		/// </param>
		/// <param name="path">
		///   <para> the path of the directory to enumerate. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RemoveStoragePath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RemoveStoragePath(SDL_Storage *storage, const char *path);
		/// </code><para>                                         </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_RemoveStoragePath(IntPtr storage, string path)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_RemoveStoragePath(storage, pathUTF8);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_RenameStoragePath", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_RenameStoragePath(IntPtr storage, byte* oldpath, byte* newpath);
		/// <summary>
		///   <para>Rename a file or directory in a writable storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container. </para>
		/// </param>
		/// <param name="oldpath">
		///   <para> the old path.        </para>
		/// </param>
		/// <param name="newpath">
		///   <para> the new path.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RenameStoragePath<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RenameStoragePath(SDL_Storage *storage, const char *oldpath, const char *newpath);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_RenameStoragePath(IntPtr storage, string oldpath, string newpath)
		{
			var oldpathUTF8 = EncodeAsUTF8(oldpath);
			var newpathUTF8 = EncodeAsUTF8(newpath);
			var result = INTERNAL_SDL_RenameStoragePath(storage, oldpathUTF8, newpathUTF8);

			SDL_free((IntPtr) oldpathUTF8);
			SDL_free((IntPtr) newpathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_CopyStorageFile", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_CopyStorageFile(IntPtr storage, byte* oldpath, byte* newpath);
		/// <summary>
		///   <para>Copy a file in a writable storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container. </para>
		/// </param>
		/// <param name="oldpath">
		///   <para> the old path.        </para>
		/// </param>
		/// <param name="newpath">
		///   <para> the new path.        </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_CopyStorageFile<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_CopyStorageFile(SDL_Storage *storage, const char *oldpath, const char *newpath);
		/// </code><para>                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_CopyStorageFile(IntPtr storage, string oldpath, string newpath)
		{
			var oldpathUTF8 = EncodeAsUTF8(oldpath);
			var newpathUTF8 = EncodeAsUTF8(newpath);
			var result = INTERNAL_SDL_CopyStorageFile(storage, oldpathUTF8, newpathUTF8);

			SDL_free((IntPtr) oldpathUTF8);
			SDL_free((IntPtr) newpathUTF8);
			return result;
		}

		[DllImport(nativeLibName, EntryPoint = "SDL_GetStoragePathInfo", CallingConvention = CallingConvention.Cdecl)]
		private static extern SDLBool INTERNAL_SDL_GetStoragePathInfo(IntPtr storage, byte* path, out SDL_PathInfo info);
		/// <summary>
		///   <para>Get information about a filesystem path in a storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container.                                                                               </para>
		/// </param>
		/// <param name="path">
		///   <para> the path to query.                                                                                 </para>
		/// </param>
		/// <param name="info">
		///   <para> a pointer filled in with information about the path, or NULL to check for the existence of a file. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false if the file doesn't exist, oranother failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_StorageReady" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetStoragePathInfo<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetStoragePathInfo(SDL_Storage *storage, const char *path, SDL_PathInfo *info);
		/// </code><para>                                                                                                    </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static SDLBool SDL_GetStoragePathInfo(IntPtr storage, string path, out SDL_PathInfo info)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var result = INTERNAL_SDL_GetStoragePathInfo(storage, pathUTF8, out info);

			SDL_free((IntPtr) pathUTF8);
			return result;
		}

		/// <summary>
		///   <para>Queries the remaining space in a storage container.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container to query. </para>
		/// </param>
		/// <returns>
		///   <para>(Uint64) Returns the amount of remaining space, in bytes.</para>
		/// </returns>
		/// <seealso cref="SDL_StorageReady" />
		/// <seealso cref="SDL_WriteStorageFile" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetStorageSpaceRemaining<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint64 SDL_GetStorageSpaceRemaining(SDL_Storage *storage);
		/// </code><para>                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetStorageSpaceRemaining(IntPtr storage);

		[DllImport(nativeLibName, EntryPoint = "SDL_GlobStorageDirectory", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GlobStorageDirectory(IntPtr storage, byte* path, byte* pattern, SDL_GlobFlags flags, out int count);
		/// <summary>
		///   <para>Enumerate a directory tree, filtered by pattern, and return a list.</para>
		/// </summary>
		/// <param name="storage">
		///   <para> a storage container.                                                              </para>
		/// </param>
		/// <param name="path">
		///   <para> the path of the directory to enumerate.                                           </para>
		/// </param>
		/// <param name="pattern">
		///   <para> the pattern that files in the directory must match. Can be NULL.                  </para>
		/// </param>
		/// <param name="flags">
		///   <para> <c>SDL_GLOB_*</c> bitflags that affect this search.                                    </para>
		/// </param>
		/// <param name="count">
		///   <para> on return, will be set to the number of items in the returned array. Can be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(char **) Returns an array of strings on success or NULL on failure; call<see cref="SDL_GetError" />() for more information. The caller should passthe returned pointer to <see cref="SDL_free" /> when done with it. This is asingle allocation that should be freed with <see cref="SDL_free" />() when itis no longer needed.</para>
		/// </returns>
		/// <remarks>
		///   <para>Files are filtered out if they don't match the string in <c>pattern</c>, whichmay contain wildcard characters '' (match everything) and '?' (match onecharacter). If pattern is NULL, no filtering is done and all results arereturned. Subdirectories are permitted, and are specified with a pathseparator of '/'. Wildcard characters '' and '?' never match a pathseparator.</para>
		///   <para>
		///     <c>flags</c> may be set to <see cref="SDL_GlobFlags.SDL_GLOB_CASEINSENSITIVE" />to make the pattern matching case-insensitive.</para>
		///   <para>The returned array is always NULL-terminated, for your iteratingconvenience, but if <c>count</c> is non-NULL, on return it will contain thenumber of items in the array, not counting the NULL terminator.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GlobStorageDirectory<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_storage.h">&lt;SDL3/SDL_storage.h&gt;</see></para><br /><b>## Syntax ##</b><code>char ** SDL_GlobStorageDirectory(SDL_Storage *storage, const char *path, const char *pattern, SDL_GlobFlags flags, int *count);
		/// </code><para>                                                                                   </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread, assuming the <c>storage</c>object is thread-safe.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryStorage">CategoryStorage</see></para></misc>
		public static IntPtr SDL_GlobStorageDirectory(IntPtr storage, string path, string pattern, SDL_GlobFlags flags, out int count)
		{
			var pathUTF8 = EncodeAsUTF8(path);
			var patternUTF8 = EncodeAsUTF8(pattern);
			var result = INTERNAL_SDL_GlobStorageDirectory(storage, pathUTF8, patternUTF8, flags, out count);

			SDL_free((IntPtr) pathUTF8);
			SDL_free((IntPtr) patternUTF8);
			return result;
		}

		// /usr/local/include/SDL3/SDL_system.h

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate bool SDL_X11EventHook(IntPtr userdata, IntPtr xevent);

		/// <summary>
		///   <para>Set a callback for every X11 event.</para>
		/// </summary>
		/// <param name="callback">
		///   <para> the <see cref="SDL_X11EventHook" /> function to call. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer to pass to every iteration of <c>callback</c>.        </para>
		/// </param>
		/// <remarks>
		///   <para>The callback may modify the event, and should return true if the eventshould continue to be processed, or false to prevent further processing.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetX11EventHook<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetX11EventHook(SDL_X11EventHook callback, void *userdata);
		/// </code><para>                                                            </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetX11EventHook(SDL_X11EventHook callback, IntPtr userdata);

		/// <summary>
		///   <para>Sets the UNIX nice value for a thread.</para>
		/// </summary>
		/// <param name="threadID">
		///   <para> the Unix thread ID to change priority of. </para>
		/// </param>
		/// <param name="priority">
		///   <para> the new, Unix-specific, priority value.   </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This uses setpriority() if possible, and RealtimeKit if available.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetLinuxThreadPriority<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetLinuxThreadPriority(Sint64 threadID, int priority);
		/// </code><para>                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetLinuxThreadPriority(long threadID, int priority);

		/// <summary>
		///   <para>Sets the priority (not nice level) and scheduling policy for a thread.</para>
		/// </summary>
		/// <param name="threadID">
		///   <para> the Unix thread ID to change priority of.                              </para>
		/// </param>
		/// <param name="sdlPriority">
		///   <para> the new <see cref="SDL_ThreadPriority" /> value.                </para>
		/// </param>
		/// <param name="schedPolicy">
		///   <para> the new scheduling policy (SCHED_FIFO, SCHED_RR, SCHED_OTHER, etc...). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This uses setpriority() if possible, and RealtimeKit if available.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetLinuxThreadPriorityAndPolicy<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_SetLinuxThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority, int schedPolicy);
		/// </code><para>                                                                        </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_SetLinuxThreadPriorityAndPolicy(long threadID, int sdlPriority, int schedPolicy);

		/// <summary>
		///   <para>Query if the current device is a tablet.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the device is a tablet, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If SDL can't determine this, it will return false.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IsTablet<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_IsTablet(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_IsTablet();

		/// <summary>
		///   <para>Query if the current device is a TV.</para>
		/// </summary>
		/// <returns>
		///   <para>(bool) Returns true if the device is a TV, false otherwise.</para>
		/// </returns>
		/// <remarks>
		///   <para>If SDL can't determine this, it will return false.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_IsTV<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_IsTV(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_IsTV();

		/// <summary>
		///   <para>Let iOS apps with external event handling report onApplicationWillTerminate.</para>
		/// </summary>
		/// <remarks>
		///   <para>This functions allows iOS apps that have their own event handling to hookinto SDL to generate SDL events. This maps directly to an iOS-specificevent, but since it doesn't do anything iOS-specific internally, it isavailable on all platforms, in case it might be useful for some specificparadigm. Most apps do not need to use this directly; SDL's internal eventcode will handle all this for windows created by<see cref="SDL_CreateWindow" />!</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OnApplicationWillTerminate<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_OnApplicationWillTerminate(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_OnApplicationWillTerminate();

		/// <summary>
		///   <para>Let iOS apps with external event handling report onApplicationDidReceiveMemoryWarning.</para>
		/// </summary>
		/// <remarks>
		///   <para>This functions allows iOS apps that have their own event handling to hookinto SDL to generate SDL events. This maps directly to an iOS-specificevent, but since it doesn't do anything iOS-specific internally, it isavailable on all platforms, in case it might be useful for some specificparadigm. Most apps do not need to use this directly; SDL's internal eventcode will handle all this for windows created by<see cref="SDL_CreateWindow" />!</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OnApplicationDidReceiveMemoryWarning<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_OnApplicationDidReceiveMemoryWarning(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_OnApplicationDidReceiveMemoryWarning();

		/// <summary>
		///   <para>Let iOS apps with external event handling report onApplicationWillResignActive.</para>
		/// </summary>
		/// <remarks>
		///   <para>This functions allows iOS apps that have their own event handling to hookinto SDL to generate SDL events. This maps directly to an iOS-specificevent, but since it doesn't do anything iOS-specific internally, it isavailable on all platforms, in case it might be useful for some specificparadigm. Most apps do not need to use this directly; SDL's internal eventcode will handle all this for windows created by<see cref="SDL_CreateWindow" />!</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OnApplicationWillEnterBackground<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_OnApplicationWillEnterBackground(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_OnApplicationWillEnterBackground();

		/// <summary>
		///   <para>Let iOS apps with external event handling report onApplicationDidEnterBackground.</para>
		/// </summary>
		/// <remarks>
		///   <para>This functions allows iOS apps that have their own event handling to hookinto SDL to generate SDL events. This maps directly to an iOS-specificevent, but since it doesn't do anything iOS-specific internally, it isavailable on all platforms, in case it might be useful for some specificparadigm. Most apps do not need to use this directly; SDL's internal eventcode will handle all this for windows created by<see cref="SDL_CreateWindow" />!</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OnApplicationDidEnterBackground<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_OnApplicationDidEnterBackground(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_OnApplicationDidEnterBackground();

		/// <summary>
		///   <para>Let iOS apps with external event handling report onApplicationWillEnterForeground.</para>
		/// </summary>
		/// <remarks>
		///   <para>This functions allows iOS apps that have their own event handling to hookinto SDL to generate SDL events. This maps directly to an iOS-specificevent, but since it doesn't do anything iOS-specific internally, it isavailable on all platforms, in case it might be useful for some specificparadigm. Most apps do not need to use this directly; SDL's internal eventcode will handle all this for windows created by<see cref="SDL_CreateWindow" />!</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OnApplicationWillEnterForeground<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_OnApplicationWillEnterForeground(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_OnApplicationWillEnterForeground();

		/// <summary>
		///   <para>Let iOS apps with external event handling report onApplicationDidBecomeActive.</para>
		/// </summary>
		/// <remarks>
		///   <para>This functions allows iOS apps that have their own event handling to hookinto SDL to generate SDL events. This maps directly to an iOS-specificevent, but since it doesn't do anything iOS-specific internally, it isavailable on all platforms, in case it might be useful for some specificparadigm. Most apps do not need to use this directly; SDL's internal eventcode will handle all this for windows created by<see cref="SDL_CreateWindow" />!</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_OnApplicationDidEnterForeground<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_system.h">&lt;SDL3/SDL_system.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_OnApplicationDidEnterForeground(void);
		/// </code><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategorySystem">CategorySystem</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_OnApplicationDidEnterForeground();

		// /usr/local/include/SDL3/SDL_time.h

		/// <summary>
		///   <para>A structure holding a calendar date and time broken down into its components.</para>
		/// </summary>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DateTime<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef struct SDL_DateTime
		/// {
		///     int year;                  /**&lt; Year */
		///     int month;                 /**&lt; Month [01-12] */
		///     int day;                   /**&lt; Day of the month [01-31] */
		///     int hour;                  /**&lt; Hour [0-23] */
		///     int minute;                /**&lt; Minute [0-59] */
		///     int second;                /**&lt; Seconds [0-60] */
		///     int nanosecond;            /**&lt; Nanoseconds [0-999999999] */
		///     int day_of_week;           /**&lt; Day of the week [0-6] (0 being Sunday) */
		///     int utc_offset;            /**&lt; Seconds east of UTC */
		/// } SDL_DateTime;
		/// </code><br /><b>## Version ##</b><para>This struct is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIStruct">CategoryAPIStruct</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[StructLayout(LayoutKind.Sequential)]
		public struct SDL_DateTime
		{
			public int year;
			public int month;
			public int day;
			public int hour;
			public int minute;
			public int second;
			public int nanosecond;
			public int day_of_week;
			public int utc_offset;
		}

		/// <summary>
		///   <para>The preferred date format of the current system locale.</para>
		/// </summary>
		/// <seealso cref="SDL_GetDateTimeLocalePreferences" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DateFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_DateFormat
		/// {
		///     SDL_DATE_FORMAT_YYYYMMDD = 0, /**&lt; Year/Month/Day */
		///     SDL_DATE_FORMAT_DDMMYYYY = 1, /**&lt; Day/Month/Year */
		///     SDL_DATE_FORMAT_MMDDYYYY = 2  /**&lt; Month/Day/Year */
		/// } SDL_DateFormat;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		public enum SDL_DateFormat
		{
			/// <summary><para>Please refer to <see cref="SDL_DateFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_DATE_FORMAT_YYYYMMDD<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_DATE_FORMAT_YYYYMMDD = 0,
			/// <summary><para>Please refer to <see cref="SDL_DateFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_DATE_FORMAT_DDMMYYYY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_DATE_FORMAT_DDMMYYYY = 1,
			/// <summary><para>Please refer to <see cref="SDL_DateFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_DATE_FORMAT_MMDDYYYY<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_DATE_FORMAT_MMDDYYYY = 2,
		}

		/// <summary>
		///   <para>The preferred time format of the current system locale.</para>
		/// </summary>
		/// <seealso cref="SDL_GetDateTimeLocalePreferences" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TimeFormat<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef enum SDL_TimeFormat
		/// {
		///     SDL_TIME_FORMAT_24HR = 0, /**&lt; 24 hour time */
		///     SDL_TIME_FORMAT_12HR = 1  /**&lt; 12 hour time */
		/// } SDL_TimeFormat;
		/// </code><br /><b>## Version ##</b><para>This enum is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnum">CategoryAPIEnum</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		public enum SDL_TimeFormat
		{
			/// <summary><para>Please refer to <see cref="SDL_TimeFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TIME_FORMAT_24HR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TIME_FORMAT_24HR = 0,
			/// <summary><para>Please refer to <see cref="SDL_TimeFormat" /> for details.</para></summary><misc>https://wiki.libsdl.org/SDL3/SDL_TIME_FORMAT_12HR<br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIEnumerators">CategoryAPIEnumerators</see></para></misc>
			SDL_TIME_FORMAT_12HR = 1,
		}

		/// <summary>
		///   <para>Gets the current preferred date and time format for the system locale.</para>
		/// </summary>
		/// <param name="dateFormat">
		///   <para> a pointer to the <see cref="SDL_DateFormat" /> to hold the returned date format, may be NULL. </para>
		/// </param>
		/// <param name="timeFormat">
		///   <para> a pointer to the <see cref="SDL_TimeFormat" /> to hold the returned time format, may be NULL. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This might be a "slow" call that has to query the operating system. It'sbest to ask for this once and save the results. However, the preferredformats can change, usually because the user has changed a systempreference outside of your program.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDateTimeLocalePreferences<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetDateTimeLocalePreferences(SDL_DateFormat *dateFormat, SDL_TimeFormat *timeFormat);
		/// </code><para>                                                                                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetDateTimeLocalePreferences(out SDL_DateFormat dateFormat, out SDL_TimeFormat timeFormat);

		/// <summary>
		///   <para>Gets the current value of the system realtime clock in nanoseconds since Jan 1, 1970 in Universal Coordinated Time (UTC).</para>
		/// </summary>
		/// <param name="ticks">
		///   <para> the <see cref="SDL_Time" /> to hold the returned tick count. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetCurrentTime<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_GetCurrentTime(SDL_Time *ticks);
		/// </code><para>                                                           </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_GetCurrentTime(IntPtr ticks);

		/// <summary>
		///   <para>Converts an <see cref="SDL_Time" /> in nanoseconds since the epoch to a calendar time in the <see cref="SDL_DateTime" /> format.</para>
		/// </summary>
		/// <param name="ticks">
		///   <para> the <see cref="SDL_Time" /> to be converted.                                                                                                     </para>
		/// </param>
		/// <param name="dt">
		///   <para> the resulting <see cref="SDL_DateTime" />.                                                                                                   </para>
		/// </param>
		/// <param name="localTime">
		///   <para> the resulting <see cref="SDL_DateTime" /> will be expressed in local time if true, otherwise it will be in Universal Coordinated Time (UTC). </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TimeToDateTime<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_TimeToDateTime(SDL_Time ticks, SDL_DateTime *dt, bool localTime);
		/// </code><para>                                                                                                                                               </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_TimeToDateTime(long ticks, out SDL_DateTime dt, SDLBool localTime);

		/// <summary>
		///   <para>Converts a calendar time to an <see cref="SDL_Time" /> in nanoseconds since the epoch.</para>
		/// </summary>
		/// <param name="dt">
		///   <para> the source <see cref="SDL_DateTime" />. </para>
		/// </param>
		/// <param name="ticks">
		///   <para> the resulting <see cref="SDL_Time" />.      </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function ignores the day_of_week member of the<see cref="SDL_DateTime" /> struct, so it may remain unset.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DateTimeToTime<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_DateTimeToTime(const SDL_DateTime *dt, SDL_Time *ticks);
		/// </code><para>                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_DateTimeToTime(ref SDL_DateTime dt, IntPtr ticks);

		/// <summary>
		///   <para>Converts an SDL time into a Windows FILETIME (100-nanosecond intervals since January 1, 1601).</para>
		/// </summary>
		/// <param name="ticks">
		///   <para> the time to convert.                                                     </para>
		/// </param>
		/// <param name="dwLowDateTime">
		///   <para> a pointer filled in with the low portion of the Windows FILETIME value.  </para>
		/// </param>
		/// <param name="dwHighDateTime">
		///   <para> a pointer filled in with the high portion of the Windows FILETIME value. </para>
		/// </param>
		/// <remarks>
		///   <para>This function fills in the two 32-bit values of the FILETIME structure.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TimeToWindows<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_TimeToWindows(SDL_Time ticks, Uint32 *dwLowDateTime, Uint32 *dwHighDateTime);
		/// </code><para>                                                                          </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_TimeToWindows(long ticks, out uint dwLowDateTime, out uint dwHighDateTime);

		/// <summary>
		///   <para>Converts a Windows FILETIME (100-nanosecond intervals since January 1, 1601) to an SDL time.</para>
		/// </summary>
		/// <param name="dwLowDateTime">
		///   <para> the low portion of the Windows FILETIME value.  </para>
		/// </param>
		/// <param name="dwHighDateTime">
		///   <para> the high portion of the Windows FILETIME value. </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_Time" />) Returns the converted SDL time.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function takes the two 32-bit values of the FILETIME structure asparameters.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TimeFromWindows<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_Time SDL_TimeFromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);
		/// </code><para>                                                 </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern long SDL_TimeFromWindows(uint dwLowDateTime, uint dwHighDateTime);

		/// <summary>
		///   <para>Get the number of days in a month for a given year.</para>
		/// </summary>
		/// <param name="year">
		///   <para> the year.         </para>
		/// </param>
		/// <param name="month">
		///   <para> the month [1-12]. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the number of days in the requested month or -1 on failure;call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDaysInMonth<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetDaysInMonth(int year, int month);
		/// </code><para>                   </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetDaysInMonth(int year, int month);

		/// <summary>
		///   <para>Get the day of year for a calendar date.</para>
		/// </summary>
		/// <param name="year">
		///   <para> the year component of the date.  </para>
		/// </param>
		/// <param name="month">
		///   <para> the month component of the date. </para>
		/// </param>
		/// <param name="day">
		///   <para> the day component of the date.   </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the day of year [0-365] if the date is valid or -1 onfailure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDayOfYear<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetDayOfYear(int year, int month, int day);
		/// </code><para>                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetDayOfYear(int year, int month, int day);

		/// <summary>
		///   <para>Get the day of week for a calendar date.</para>
		/// </summary>
		/// <param name="year">
		///   <para> the year component of the date.  </para>
		/// </param>
		/// <param name="month">
		///   <para> the month component of the date. </para>
		/// </param>
		/// <param name="day">
		///   <para> the day component of the date.   </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns a value between 0 and 6 (0 being Sunday) if the date is validor -1 on failure; call <see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetDayOfWeek<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_time.h">&lt;SDL3/SDL_time.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetDayOfWeek(int year, int month, int day);
		/// </code><para>                                  </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTime">CategoryTime</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetDayOfWeek(int year, int month, int day);

		// /usr/local/include/SDL3/SDL_timer.h

		/// <summary>
		///   <para>Get the number of milliseconds since SDL library initialization.</para>
		/// </summary>
		/// <returns>
		///   <para>(Uint64) Returns an unsigned 64-bit value representing the number ofmilliseconds since the SDL library initialized.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTicks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint64 SDL_GetTicks(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>int variable;
		/// bool quit = false;
		/// unsigned int lastTime = 0, currentTime;
		/// while (!quit) {
		///   // do stuff
		///   // ...
		/// 
		///   // Print a report once per second
		///   currentTime = SDL_GetTicks();
		///   if (currentTime &gt; lastTime + 1000) {
		///     printf("Report: %d\n", variable);
		///     lastTime = currentTime;
		///   }
		/// }
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetTicks();

		/// <summary>
		///   <para>Get the number of nanoseconds since SDL library initialization.</para>
		/// </summary>
		/// <returns>
		///   <para>(Uint64) Returns an unsigned 64-bit value representing the number ofnanoseconds since the SDL library initialized.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetTicksNS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint64 SDL_GetTicksNS(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetTicksNS();

		/// <summary>
		///   <para>Get the current value of the high resolution counter.</para>
		/// </summary>
		/// <returns>
		///   <para>(Uint64) Returns the current counter value.</para>
		/// </returns>
		/// <remarks>
		///   <para>This function is typically used for profiling.</para>
		///   <para>The counter values are only meaningful relative to each other. Differencesbetween values can be converted to times by using<see cref="SDL_GetPerformanceFrequency" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetPerformanceFrequency" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPerformanceCounter<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint64 SDL_GetPerformanceCounter(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetPerformanceCounter();

		/// <summary>
		///   <para>Get the count per second of the high resolution counter.</para>
		/// </summary>
		/// <returns>
		///   <para>(Uint64) Returns a platform-specific count per second.</para>
		/// </returns>
		/// <seealso cref="SDL_GetPerformanceCounter" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetPerformanceFrequency<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>Uint64 SDL_GetPerformanceFrequency(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern ulong SDL_GetPerformanceFrequency();

		/// <summary>
		///   <para>Wait a specified number of milliseconds before returning.</para>
		/// </summary>
		/// <param name="ms">
		///   <para> the number of milliseconds to delay. </para>
		/// </param>
		/// <remarks>
		///   <para>This function waits a specified number of milliseconds before returning. Itwaits at least the specified time, but possibly longer due to OSscheduling.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_Delay<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_Delay(Uint32 ms);
		/// </code><para>                                      </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_Delay(uint ms);

		/// <summary>
		///   <para>Wait a specified number of nanoseconds before returning.</para>
		/// </summary>
		/// <param name="ns">
		///   <para> the number of nanoseconds to delay. </para>
		/// </param>
		/// <remarks>
		///   <para>This function waits a specified number of nanoseconds before returning. Itwaits at least the specified time, but possibly longer due to OSscheduling.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_DelayNS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_DelayNS(Uint64 ns);
		/// </code><para>                                     </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_DelayNS(ulong ns);

		/// <summary>
		///   <para>Function prototype for the millisecond timer callback function.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns the new callback time interval, or 0 to disable further runs of thecallback.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is passed the current timer interval and returns thenext timer interval, in milliseconds. If the returned value is the same asthe one passed in, the periodic alarm continues, otherwise a new alarm isscheduled. If the callback returns 0, the periodic alarm is canceled andwill be removed.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddTimer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_TimerCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint32 (SDLCALL *SDL_TimerCallback)(void *userdata, SDL_TimerID timerID, Uint32 interval);
		/// </code><br /><b>## Thread Safety ##</b><para>SDL may call this callback at any time from a background thread; theapplication is responsible for locking resources the callback touches thatneed to be protected.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate uint SDL_TimerCallback(IntPtr userdata, uint timerID, uint interval);

		/// <summary>
		///   <para>Call a callback function at a future time.</para>
		/// </summary>
		/// <param name="interval">
		///   <para> the timer delay, in milliseconds, passed to <c>callback</c>.                                            </para>
		/// </param>
		/// <param name="callback">
		///   <para> the <see cref="SDL_TimerCallback" /> function to call when the specified <c>interval</c> elapses. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>callback</c>.                                                            </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_TimerID" />) Returns a timer ID or 0 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is passed the current timer interval and the usersupplied parameter from the <see cref="SDL_AddTimer" />() call and shouldreturn the next timer interval. If the value returned from the callback is0, the timer is canceled and will be removed.</para>
		///   <para>The callback is run on a separate thread, and for short timeouts canpotentially be called before this function returns.</para>
		///   <para>Timers take into account the amount of time it took to execute thecallback. For example, if the callback took 250 ms to execute and returned1000 (ms), the timer would only wait another 750 ms before its nextiteration.</para>
		///   <para>Timing may be inexact due to OS scheduling. Be sure to note the currenttime with <see cref="SDL_GetTicksNS" />() or<see cref="SDL_GetPerformanceCounter" />() in case yourcallback needs to adjust for variances.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddTimerNS" />
		/// <seealso cref="SDL_RemoveTimer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddTimer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *userdata);
		/// </code><para>                                                                                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_AddTimer(uint interval, SDL_TimerCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>Function prototype for the nanosecond timer callback function.</para>
		/// </summary>
		/// <returns>
		///   <para>Returns the new callback time interval, or 0 to disable further runs of thecallback.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is passed the current timer interval and returns thenext timer interval, in nanoseconds. If the returned value is the same asthe one passed in, the periodic alarm continues, otherwise a new alarm isscheduled. If the callback returns 0, the periodic alarm is canceled andwill be removed.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddTimerNS" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_NSTimerCallback<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef Uint64 (SDLCALL *SDL_NSTimerCallback)(void *userdata, SDL_TimerID timerID, Uint64 interval);
		/// </code><br /><b>## Thread Safety ##</b><para>SDL may call this callback at any time from a background thread; theapplication is responsible for locking resources the callback touches thatneed to be protected.</para><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate ulong SDL_NSTimerCallback(IntPtr userdata, uint timerID, ulong interval);

		/// <summary>
		///   <para>Call a callback function at a future time.</para>
		/// </summary>
		/// <param name="interval">
		///   <para> the timer delay, in nanoseconds, passed to <c>callback</c>.                                             </para>
		/// </param>
		/// <param name="callback">
		///   <para> the <see cref="SDL_TimerCallback" /> function to call when the specified <c>interval</c> elapses. </para>
		/// </param>
		/// <param name="userdata">
		///   <para> a pointer that is passed to <c>callback</c>.                                                            </para>
		/// </param>
		/// <returns>
		///   <para>(<see cref="SDL_TimerID" />) Returns a timer ID or 0 on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <remarks>
		///   <para>The callback function is passed the current timer interval and the usersupplied parameter from the <see cref="SDL_AddTimerNS" />() call andshould return the next timer interval. If the value returned from thecallback is 0, the timer is canceled and will be removed.</para>
		///   <para>The callback is run on a separate thread, and for short timeouts canpotentially be called before this function returns.</para>
		///   <para>Timers take into account the amount of time it took to execute thecallback. For example, if the callback took 250 ns to execute and returned1000 (ns), the timer would only wait another 750 ns before its nextiteration.</para>
		///   <para>Timing may be inexact due to OS scheduling. Be sure to note the currenttime with <see cref="SDL_GetTicksNS" />() or<see cref="SDL_GetPerformanceCounter" />() in case yourcallback needs to adjust for variances.</para>
		/// </remarks>
		/// <seealso cref="SDL_AddTimer" />
		/// <seealso cref="SDL_RemoveTimer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_AddTimerNS<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>SDL_TimerID SDL_AddTimerNS(Uint64 interval, SDL_NSTimerCallback callback, void *userdata);
		/// </code><para>                                                                                                    </para><br /><b>## Thread Safety ##</b><para>It is safe to call this function from any thread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern uint SDL_AddTimerNS(ulong interval, SDL_NSTimerCallback callback, IntPtr userdata);

		/// <summary>
		///   <para>Remove a timer created with <see cref="SDL_AddTimer" />().</para>
		/// </summary>
		/// <param name="id">
		///   <para> the ID of the timer to remove. </para>
		/// </param>
		/// <returns>
		///   <para>(bool) Returns true on success or false on failure; call<see cref="SDL_GetError" />() for more information.</para>
		/// </returns>
		/// <seealso cref="SDL_AddTimer" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RemoveTimer<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_timer.h">&lt;SDL3/SDL_timer.h&gt;</see></para><br /><b>## Syntax ##</b><code>bool SDL_RemoveTimer(SDL_TimerID id);
		/// </code><para>                                </para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryTimer">CategoryTimer</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern SDLBool SDL_RemoveTimer(uint id);

		// /usr/local/include/SDL3/SDL_version.h

		/// <summary>
		///   <para>Get the version of SDL that is linked against your program.</para>
		/// </summary>
		/// <returns>
		///   <para>(int) Returns the version of the linked library.</para>
		/// </returns>
		/// <remarks>
		///   <para>If you are linking to SDL dynamically, then it is possible that the currentversion will be different than the version you compiled against. Thisfunction returns the current version, while <see cref="SDL_VERSION" /> isthe version you compiled with.</para>
		///   <para>This function may be called safely at any time, even before<see cref="SDL_Init" />().</para>
		/// </remarks>
		/// <seealso cref="SDL_GetRevision" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetVersion<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_version.h">&lt;SDL3/SDL_version.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_GetVersion(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><b>## Code Examples ##</b><code>const int compiled = SDL_VERSION;  /* hardcoded number from SDL headers */
		/// const int linked = SDL_GetVersion();  /* reported by linked SDL library */
		/// 
		/// SDL_Log("We compiled against SDL version %d.%d.%d ...\n",
		///         SDL_VERSIONNUM_MAJOR(compiled),
		///         SDL_VERSIONNUM_MINOR(compiled),
		///         SDL_VERSIONNUM_MICRO(compiled));
		/// 
		/// SDL_Log("But we are linking against SDL version %d.%d.%d.\n",
		///         SDL_VERSIONNUM_MAJOR(linked),
		///         SDL_VERSIONNUM_MINOR(linked),
		///         SDL_VERSIONNUM_MICRO(linked));
		/// </code><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVersion">CategoryVersion</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_GetVersion();

		[DllImport(nativeLibName, EntryPoint = "SDL_GetRevision", CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr INTERNAL_SDL_GetRevision();
		/// <summary>
		///   <para>Get the code revision of SDL that is linked against your program.</para>
		/// </summary>
		/// <returns>
		///   <para>(const char *) Returns an arbitrary string, uniquely identifying the exactrevision of the SDL library in use.</para>
		/// </returns>
		/// <remarks>
		///   <para>This value is the revision of the code you are linked with and may bedifferent from the code you are compiling with, which is found in theconstant <see cref="SDL_REVISION" />.</para>
		///   <para>The revision is arbitrary string (a hash value) uniquely identifying theexact revision of the SDL library in use, and is only useful in comparingagainst other revisions. It is NOT an incrementing number.</para>
		///   <para>If SDL wasn't built from a git repository with the appropriate tools, thiswill return an empty string.</para>
		///   <para>You shouldn't use this function for anything but logging it for debuggingpurposes. The string is not intended to be reliable in any way.</para>
		/// </remarks>
		/// <seealso cref="SDL_GetVersion" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_GetRevision<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_version.h">&lt;SDL3/SDL_version.h&gt;</see></para><br /><b>## Syntax ##</b><code>const char * SDL_GetRevision(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryVersion">CategoryVersion</see></para></misc>
		public static string SDL_GetRevision()
		{
			return DecodeFromUTF8(INTERNAL_SDL_GetRevision());
		}

		// ./SDL3/SDL_main.h

		/// <summary>
		///   <para>The prototype for the application's main() function</para>
		/// </summary>
		/// <returns>
		///   <para>Returns an ANSI-C main return code; generally 0 is considered successfulprogram completion, and small non-zero values are considered errors.</para>
		/// </returns>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_main_func<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_main.h">&lt;SDL3/SDL_main.h&gt;</see></para><br /><b>## Syntax ##</b><code>typedef int (SDLCALL *SDL_main_func)(int argc, char *argv[]);
		/// </code><br /><b>## Version ##</b><para>This datatype is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIDatatype">CategoryAPIDatatype</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMain">CategoryMain</see></para></misc>
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate int SDL_main_func(int argc, IntPtr argv);

		/// <summary>
		///   <para>An app-supplied function for program entry.</para>
		/// </summary>
		/// <param name="argc">
		///   <para> an ANSI-C style main function's argc. </para>
		/// </param>
		/// <param name="argv">
		///   <para> an ANSI-C style main function's argv. </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns an ANSI-C main return code; generally 0 is consideredsuccessful program completion, and small non-zero values are considerederrors.</para>
		/// </returns>
		/// <remarks>
		///   <para>Apps do not directly create this function; they should create a standardANSI-C <c>main</c> function instead. If SDL needs to insert some startup codebefore <c>main</c> runs, or the platform doesn't actually use a functioncalled "main", SDL will do some macro magic to redefine <c>main</c> to<see cref="SDL_main" /> and provide its own <c>main</c>.</para>
		///   <para>Apps should include <c>SDL_main.h</c> in the same file as their <c>main</c> function,and they should not use that symbol for anything else in that file, as itmight get redefined.</para>
		///   <para>This function is only provided by the app if it isn't using<see cref="SDL_MAIN_USE_CALLBACKS" />.</para>
		///   <para>Program startup is a surprisingly complex topic. Please see<see href="README/main-functions">README/main-functions</see>, (ordocs/README-main-functions.md in the source tree) for a more detailedexplanation.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_main<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_main.h">&lt;SDL3/SDL_main.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_main(int argc, char *argv[]);
		/// </code><para>                                       </para><br /><b>## Thread Safety ##</b><para>This is the program entry point.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMain">CategoryMain</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_main(int argc, IntPtr argv);

		/// <summary>
		///   <para>Circumvent failure of <see cref="SDL_Init" />() when not using <see cref="SDL_main" />() as an entry point.</para>
		/// </summary>
		/// <remarks>
		///   <para>This function is defined in <see cref="SDL_main" />.h, along with thepreprocessor rule to redefine main() as <see cref="SDL_main" />(). Thus toensure that your main() function will not be changed it is necessary todefine <see cref="SDL_MAIN_HANDLED" /> before including SDL.h.</para>
		/// </remarks>
		/// <seealso cref="SDL_Init" />
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_SetMainReady<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_main.h">&lt;SDL3/SDL_main.h&gt;</see></para><br /><b>## Syntax ##</b><code>void SDL_SetMainReady(void);
		/// </code><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMain">CategoryMain</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern void SDL_SetMainReady();

		/// <summary>
		///   <para>Initializes and launches an SDL application, by doing platform-specific initialization before calling your mainFunction and cleanups after it returns, if that is needed for a specific platform, otherwise it just calls mainFunction.</para>
		/// </summary>
		/// <param name="argc">
		///   <para> the argc parameter from the application's main() function, or 0 if the platform's main-equivalent has no argc.                             </para>
		/// </param>
		/// <param name="argv">
		///   <para> the argv parameter from the application's main() function, or NULL if the platform's main-equivalent has no argv.                          </para>
		/// </param>
		/// <param name="mainFunction">
		///   <para> your SDL app's C-style main(). NOT the function you're calling this from! Its name doesn't matter; it doesn't literally have to be <c>main</c>. </para>
		/// </param>
		/// <param name="reserved">
		///   <para> should be NULL (reserved for future use, will probably be platform-specific then).                                                         </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns the return value from mainFunction: 0 on success, otherwisefailure; <see cref="SDL_GetError" />() might have more information on thefailure.</para>
		/// </returns>
		/// <remarks>
		///   <para>You can use this if you want to use your own main() implementation withoutusing <see cref="SDL_main" /> (like when using<see cref="SDL_MAIN_HANDLED" />). When using this, you do not need<see cref="SDL_SetMainReady" />().</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_RunApp<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_main.h">&lt;SDL3/SDL_main.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_RunApp(int argc, char *argv[], SDL_main_func mainFunction, void *reserved);
		/// </code><para>                                                                                                                                            </para><br /><b>## Thread Safety ##</b><para>Generally this is called once, near startup, from the process's initialthread.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMain">CategoryMain</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_RunApp(int argc, IntPtr argv, SDL_main_func mainFunction, IntPtr reserved);

		/// <summary>
		///   <para>An entry point for SDL's use in <see cref="SDL_MAIN_USE_CALLBACKS" />.</para>
		/// </summary>
		/// <param name="argc">
		///   <para> standard Unix main argc.                                     </para>
		/// </param>
		/// <param name="argv">
		///   <para> standard Unix main argv.                                     </para>
		/// </param>
		/// <param name="appinit">
		///   <para> the application's <see cref="SDL_AppInit" /> function.       </para>
		/// </param>
		/// <param name="appiter">
		///   <para> the application's <see cref="SDL_AppIterate" /> function. </para>
		/// </param>
		/// <param name="appevent">
		///   <para> the application's <see cref="SDL_AppEvent" /> function.     </para>
		/// </param>
		/// <param name="appquit">
		///   <para> the application's <see cref="SDL_AppQuit" /> function.       </para>
		/// </param>
		/// <returns>
		///   <para>(int) Returns standard Unix main return value.</para>
		/// </returns>
		/// <remarks>
		///   <para>Generally, you should not call this function directly. This only exists tohand off work into SDL as soon as possible, where it has a lot more controland functionality available, and make the inline code in<see cref="SDL_main" />.h as small as possible.</para>
		///   <para>Not all platforms use this, it's actual use is hidden in a magicheader-only library, and you should not call this directly unless youreally know what you're doing.</para>
		/// </remarks>
		/// <misc>https://wiki.libsdl.org/SDL3/SDL_EnterAppMainCallbacks<br /><b>## Header File ##</b><para>Defined in <see href="https://github.com/libsdl-org/SDL/blob/main/include/SDL3/SDL_main.h">&lt;SDL3/SDL_main.h&gt;</see></para><br /><b>## Syntax ##</b><code>int SDL_EnterAppMainCallbacks(int argc, char *argv[], SDL_AppInit_func appinit, SDL_AppIterate_func appiter, SDL_AppEvent_func appevent, SDL_AppQuit_func appquit);
		/// </code><para>                                                              </para><br /><b>## Thread Safety ##</b><para>It is not safe to call this anywhere except as the only function call in<see cref="SDL_main" />.</para><br /><b>## Version ##</b><para>This function is available since SDL 3.0.0.</para><br /><br /><para><see href="https://wiki.libsdl.org/SDL3/CategoryAPI">CategoryAPI</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryAPIFunction">CategoryAPIFunction</see>, <see href="https://wiki.libsdl.org/SDL3/CategoryMain">CategoryMain</see></para></misc>
		[DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
		public static extern int SDL_EnterAppMainCallbacks(int argc, IntPtr argv, SDL_AppInit_func appinit, SDL_AppIterate_func appiter, SDL_AppEvent_func appevent, SDL_AppQuit_func appquit);


	}
}